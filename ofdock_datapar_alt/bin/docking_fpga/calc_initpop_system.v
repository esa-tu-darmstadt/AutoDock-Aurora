// (C) 1992-2016 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
    


/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system
/////////////////////////////////////////////////////////////////
module calc_initpop_system
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   // AVS avs_calc_initpop_cra
   input logic avs_calc_initpop_cra_enable,
   input logic avs_calc_initpop_cra_read,
   input logic avs_calc_initpop_cra_write,
   input logic [4:0] avs_calc_initpop_cra_address,
   input logic [63:0] avs_calc_initpop_cra_writedata,
   input logic [7:0] avs_calc_initpop_cra_byteenable,
   output logic [63:0] avs_calc_initpop_cra_readdata,
   output logic avs_calc_initpop_cra_readdatavalid,
   // AVS avs_gen_and_eval_newpops_cra
   input logic avs_gen_and_eval_newpops_cra_enable,
   input logic avs_gen_and_eval_newpops_cra_read,
   input logic avs_gen_and_eval_newpops_cra_write,
   input logic [4:0] avs_gen_and_eval_newpops_cra_address,
   input logic [63:0] avs_gen_and_eval_newpops_cra_writedata,
   input logic [7:0] avs_gen_and_eval_newpops_cra_byteenable,
   output logic [63:0] avs_gen_and_eval_newpops_cra_readdata,
   output logic avs_gen_and_eval_newpops_cra_readdatavalid,
   // AVS avs_perform_ls_cra
   input logic avs_perform_ls_cra_enable,
   input logic avs_perform_ls_cra_read,
   input logic avs_perform_ls_cra_write,
   input logic [4:0] avs_perform_ls_cra_address,
   input logic [63:0] avs_perform_ls_cra_writedata,
   input logic [7:0] avs_perform_ls_cra_byteenable,
   output logic [63:0] avs_perform_ls_cra_readdata,
   output logic avs_perform_ls_cra_readdatavalid,
   // AVS avs_sum_evals_cra
   input logic avs_sum_evals_cra_enable,
   input logic avs_sum_evals_cra_read,
   input logic avs_sum_evals_cra_write,
   input logic [3:0] avs_sum_evals_cra_address,
   input logic [63:0] avs_sum_evals_cra_writedata,
   input logic [7:0] avs_sum_evals_cra_byteenable,
   output logic [63:0] avs_sum_evals_cra_readdata,
   output logic avs_sum_evals_cra_readdatavalid,
   output logic kernel_irq,
   // AVM avm_memgmem0_DDR_port_0_0_rw
   output logic avm_memgmem0_DDR_port_0_0_rw_enable,
   output logic avm_memgmem0_DDR_port_0_0_rw_read,
   output logic avm_memgmem0_DDR_port_0_0_rw_write,
   output logic [4:0] avm_memgmem0_DDR_port_0_0_rw_burstcount,
   output logic [30:0] avm_memgmem0_DDR_port_0_0_rw_address,
   output logic [511:0] avm_memgmem0_DDR_port_0_0_rw_writedata,
   output logic [63:0] avm_memgmem0_DDR_port_0_0_rw_byteenable,
   input logic avm_memgmem0_DDR_port_0_0_rw_waitrequest,
   input logic [511:0] avm_memgmem0_DDR_port_0_0_rw_readdata,
   input logic avm_memgmem0_DDR_port_0_0_rw_readdatavalid,
   input logic avm_memgmem0_DDR_port_0_0_rw_writeack
);
   logic calc_initpop_start;
   logic [0:0] calc_initpop_start_chain;
   logic [0:0] calc_initpop_start_kernel_copy;
   logic [0:0] calc_initpop_start_task_fd;
   logic [0:0] calc_initpop_start_finish_element;
   logic calc_initpop_finish;
   logic [0:0] calc_initpop_finish_kernel_copy;
   logic [0:0] calc_initpop_finish_chain;
   logic [31:0] calc_initpop_global_size [2:0];
   logic [31:0] calc_initpop_num_groups [2:0];
   logic [31:0] calc_initpop_local_size [2:0];
   logic [31:0] calc_initpop_global_offset [2:0];
   logic [31:0] calc_initpop_work_dim;
   logic [31:0] calc_initpop_wg_size;
   logic [0:0] calc_initpop_wg_disp_stall_in;
   logic [0:0] calc_initpop_wg_disp_valid_out;
   logic calc_initpop_wg_disp_start_out;
   logic [31:0] calc_initpop_wg_disp_group_id_out [2:0];
   logic [31:0] calc_initpop_wg_disp_global_id_base_out [2:0];
   logic calc_initpop_wg_disp_dispatched_all_groups;
   logic [31:0] calc_initpop_global_id [1][2:0];
   logic [31:0] calc_initpop_local_id [1][2:0];
   logic [31:0] calc_initpop_group_id [1][2:0];
   logic [0:0] calc_initpop_pending_write;
   logic [0:0] calc_initpop_lsu_active;
   logic [0:0] calc_initpop_valid_in;
   logic [0:0] calc_initpop_valid_out;
   logic [0:0] calc_initpop_stall_in;
   logic [0:0] calc_initpop_stall_out;
   logic calc_initpop_cra_pending_write;
   logic calc_initpop_cra_lsu_active;
   logic calc_initpop_cra_valid_in;
   logic [583:0] calc_initpop_kernel_arguments;
   logic gen_and_eval_newpops_start;
   logic [0:0] gen_and_eval_newpops_start_chain;
   logic [0:0] gen_and_eval_newpops_start_kernel_copy;
   logic [0:0] gen_and_eval_newpops_start_task_fd;
   logic [0:0] gen_and_eval_newpops_start_finish_element;
   logic gen_and_eval_newpops_finish;
   logic [0:0] gen_and_eval_newpops_finish_kernel_copy;
   logic [0:0] gen_and_eval_newpops_finish_chain;
   logic [31:0] gen_and_eval_newpops_global_size [2:0];
   logic [31:0] gen_and_eval_newpops_num_groups [2:0];
   logic [31:0] gen_and_eval_newpops_local_size [2:0];
   logic [31:0] gen_and_eval_newpops_global_offset [2:0];
   logic [31:0] gen_and_eval_newpops_work_dim;
   logic [31:0] gen_and_eval_newpops_wg_size;
   logic [0:0] gen_and_eval_newpops_wg_disp_stall_in;
   logic [0:0] gen_and_eval_newpops_wg_disp_valid_out;
   logic gen_and_eval_newpops_wg_disp_start_out;
   logic [31:0] gen_and_eval_newpops_wg_disp_group_id_out [2:0];
   logic [31:0] gen_and_eval_newpops_wg_disp_global_id_base_out [2:0];
   logic gen_and_eval_newpops_wg_disp_dispatched_all_groups;
   logic [31:0] gen_and_eval_newpops_global_id [1][2:0];
   logic [31:0] gen_and_eval_newpops_local_id [1][2:0];
   logic [31:0] gen_and_eval_newpops_group_id [1][2:0];
   logic [0:0] gen_and_eval_newpops_pending_write;
   logic [0:0] gen_and_eval_newpops_lsu_active;
   logic [0:0] gen_and_eval_newpops_valid_in;
   logic [0:0] gen_and_eval_newpops_valid_out;
   logic [0:0] gen_and_eval_newpops_stall_in;
   logic [0:0] gen_and_eval_newpops_stall_out;
   logic gen_and_eval_newpops_cra_pending_write;
   logic gen_and_eval_newpops_cra_lsu_active;
   logic gen_and_eval_newpops_cra_valid_in;
   logic [967:0] gen_and_eval_newpops_kernel_arguments;
   logic perform_ls_start;
   logic [0:0] perform_ls_start_chain;
   logic [0:0] perform_ls_start_kernel_copy;
   logic [0:0] perform_ls_start_task_fd;
   logic [0:0] perform_ls_start_finish_element;
   logic perform_ls_finish;
   logic [0:0] perform_ls_finish_kernel_copy;
   logic [0:0] perform_ls_finish_chain;
   logic [31:0] perform_ls_global_size [2:0];
   logic [31:0] perform_ls_num_groups [2:0];
   logic [31:0] perform_ls_local_size [2:0];
   logic [31:0] perform_ls_global_offset [2:0];
   logic [31:0] perform_ls_work_dim;
   logic [31:0] perform_ls_wg_size;
   logic [0:0] perform_ls_wg_disp_stall_in;
   logic [0:0] perform_ls_wg_disp_valid_out;
   logic perform_ls_wg_disp_start_out;
   logic [31:0] perform_ls_wg_disp_group_id_out [2:0];
   logic [31:0] perform_ls_wg_disp_global_id_base_out [2:0];
   logic perform_ls_wg_disp_dispatched_all_groups;
   logic [31:0] perform_ls_global_id [1][2:0];
   logic [31:0] perform_ls_local_id [1][2:0];
   logic [31:0] perform_ls_group_id [1][2:0];
   logic [0:0] perform_ls_pending_write;
   logic [0:0] perform_ls_lsu_active;
   logic [0:0] perform_ls_valid_in;
   logic [0:0] perform_ls_valid_out;
   logic [0:0] perform_ls_stall_in;
   logic [0:0] perform_ls_stall_out;
   logic perform_ls_cra_pending_write;
   logic perform_ls_cra_lsu_active;
   logic perform_ls_cra_valid_in;
   logic [903:0] perform_ls_kernel_arguments;
   logic sum_evals_start;
   logic [0:0] sum_evals_start_chain;
   logic [0:0] sum_evals_start_kernel_copy;
   logic [0:0] sum_evals_start_task_fd;
   logic [0:0] sum_evals_start_finish_element;
   logic sum_evals_finish;
   logic [0:0] sum_evals_finish_kernel_copy;
   logic [0:0] sum_evals_finish_chain;
   logic [31:0] sum_evals_global_size [2:0];
   logic [31:0] sum_evals_num_groups [2:0];
   logic [31:0] sum_evals_local_size [2:0];
   logic [31:0] sum_evals_global_offset [2:0];
   logic [31:0] sum_evals_work_dim;
   logic [31:0] sum_evals_wg_size;
   logic [0:0] sum_evals_wg_disp_stall_in;
   logic [0:0] sum_evals_wg_disp_valid_out;
   logic sum_evals_wg_disp_start_out;
   logic [31:0] sum_evals_wg_disp_group_id_out [2:0];
   logic [31:0] sum_evals_wg_disp_global_id_base_out [2:0];
   logic sum_evals_wg_disp_dispatched_all_groups;
   logic [31:0] sum_evals_global_id [1][2:0];
   logic [31:0] sum_evals_local_id [1][2:0];
   logic [31:0] sum_evals_group_id [1][2:0];
   logic [0:0] sum_evals_pending_write;
   logic [0:0] sum_evals_lsu_active;
   logic [0:0] sum_evals_valid_in;
   logic [0:0] sum_evals_valid_out;
   logic [0:0] sum_evals_stall_in;
   logic [0:0] sum_evals_stall_out;
   logic sum_evals_cra_pending_write;
   logic sum_evals_cra_lsu_active;
   logic sum_evals_cra_valid_in;
   logic [191:0] sum_evals_kernel_arguments;
   logic [3:0] kernel_irqs;
   logic avm_kernel_rd_enable [204];
   logic avm_kernel_rd_read [204];
   logic avm_kernel_rd_write [204];
   logic [4:0] avm_kernel_rd_burstcount [204];
   logic [30:0] avm_kernel_rd_address [204];
   logic [511:0] avm_kernel_rd_writedata [204];
   logic [63:0] avm_kernel_rd_byteenable [204];
   logic avm_kernel_rd_waitrequest [204];
   logic [511:0] avm_kernel_rd_readdata [204];
   logic avm_kernel_rd_readdatavalid [204];
   logic avm_kernel_rd_writeack [204];
   logic avm_kernel_wr_enable [16];
   logic avm_kernel_wr_read [16];
   logic avm_kernel_wr_write [16];
   logic [4:0] avm_kernel_wr_burstcount [16];
   logic [30:0] avm_kernel_wr_address [16];
   logic [511:0] avm_kernel_wr_writedata [16];
   logic [63:0] avm_kernel_wr_byteenable [16];
   logic avm_kernel_wr_waitrequest [16];
   logic [511:0] avm_kernel_wr_readdata [16];
   logic avm_kernel_wr_readdatavalid [16];
   logic avm_kernel_wr_writeack [16];
   logic ic_avm_enable [1];
   logic ic_avm_read [1];
   logic ic_avm_write [1];
   logic [4:0] ic_avm_burstcount [1];
   logic [30:0] ic_avm_address [1];
   logic [511:0] ic_avm_writedata [1];
   logic [63:0] ic_avm_byteenable [1];
   logic ic_avm_waitrequest [1];
   logic [511:0] ic_avm_readdata [1];
   logic ic_avm_readdatavalid [1];
   logic ic_avm_writeack [1];

   assign calc_initpop_start_chain[0] = calc_initpop_start;
   assign calc_initpop_finish_chain[0] = 1'b1;
   assign calc_initpop_cra_pending_write = |calc_initpop_pending_write;
   assign calc_initpop_cra_lsu_active = |calc_initpop_lsu_active;
   assign calc_initpop_cra_valid_in = |calc_initpop_valid_in;
   assign calc_initpop_stall_in = 0;
   // INST calc_initpop_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0)
   )
   calc_initpop_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(calc_initpop_start),
      .num_groups(calc_initpop_num_groups),
      .local_size(calc_initpop_local_size),
      .stall_in(calc_initpop_wg_disp_stall_in),
      .valid_out(calc_initpop_wg_disp_valid_out),
      .group_id_out(calc_initpop_wg_disp_group_id_out),
      .global_id_base_out(calc_initpop_wg_disp_global_id_base_out),
      .start_out(calc_initpop_wg_disp_start_out),
      .dispatched_all_groups(calc_initpop_wg_disp_dispatched_all_groups)
   );

   // INST calc_initpop_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(19)
   )
   calc_initpop_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(calc_initpop_start),
      .wg_size(calc_initpop_wg_size),
      .wg_dispatch_valid_out(calc_initpop_wg_disp_valid_out),
      .wg_dispatch_stall_in(calc_initpop_wg_disp_stall_in),
      .dispatched_all_groups(calc_initpop_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(calc_initpop_valid_out),
      .kernel_copy_stall_in(calc_initpop_stall_in),
      .pending_writes(calc_initpop_cra_pending_write),
      .finish(calc_initpop_finish)
   );

   // INST calc_initpop_cra_slave_inst of calc_initpop_function_cra_slave
   calc_initpop_function_cra_slave calc_initpop_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(calc_initpop_start),
      .finish(calc_initpop_finish),
      .global_offset_0(calc_initpop_global_offset[0]),
      .global_offset_1(calc_initpop_global_offset[1]),
      .global_offset_2(calc_initpop_global_offset[2]),
      .work_dim(calc_initpop_work_dim),
      .has_a_lsu_active(calc_initpop_cra_lsu_active),
      .has_a_write_pending(calc_initpop_cra_pending_write),
      .valid_in(calc_initpop_cra_valid_in),
      .global_size_0(calc_initpop_global_size[0]),
      .global_size_1(calc_initpop_global_size[1]),
      .global_size_2(calc_initpop_global_size[2]),
      .num_groups_0(calc_initpop_num_groups[0]),
      .num_groups_1(calc_initpop_num_groups[1]),
      .num_groups_2(calc_initpop_num_groups[2]),
      .local_size_0(calc_initpop_local_size[0]),
      .local_size_1(calc_initpop_local_size[1]),
      .local_size_2(calc_initpop_local_size[2]),
      .workgroup_size(calc_initpop_wg_size),
      .kernel_arguments(calc_initpop_kernel_arguments),
      .cra_irq(kernel_irqs[0]),
      // AVS avs_cra
      .avs_cra_enable(avs_calc_initpop_cra_enable),
      .avs_cra_read(avs_calc_initpop_cra_read),
      .avs_cra_write(avs_calc_initpop_cra_write),
      .avs_cra_address(avs_calc_initpop_cra_address),
      .avs_cra_writedata(avs_calc_initpop_cra_writedata),
      .avs_cra_byteenable(avs_calc_initpop_cra_byteenable),
      .avs_cra_readdata(avs_calc_initpop_cra_readdata),
      .avs_cra_readdatavalid(avs_calc_initpop_cra_readdatavalid)
   );

   // INST calc_initpop_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(5),
      .LOCAL_WIDTH_Y(1),
      .LOCAL_WIDTH_Z(1),
      .ENABLE_TESSELLATION(1)
   )
   calc_initpop_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(calc_initpop_wg_disp_start_out),
      .valid_in(calc_initpop_wg_disp_valid_out[0]),
      .stall_out(calc_initpop_wg_disp_stall_in[0]),
      .stall_in(calc_initpop_stall_out[0]),
      .valid_out(calc_initpop_valid_in[0]),
      .group_id_in(calc_initpop_wg_disp_group_id_out),
      .global_id_base_in(calc_initpop_wg_disp_global_id_base_out),
      .local_size(calc_initpop_local_size),
      .global_size(calc_initpop_global_size),
      .local_id(calc_initpop_local_id[0]),
      .global_id(calc_initpop_global_id[0]),
      .group_id(calc_initpop_group_id[0])
   );

   // INST calc_initpop_inst_0 of calc_initpop_top_wrapper_0
   calc_initpop_top_wrapper_0 calc_initpop_inst_0
   (
      .start(calc_initpop_start_kernel_copy[0]),
      .kernel_arguments(calc_initpop_kernel_arguments),
      .work_dim(calc_initpop_work_dim),
      .global_offset(calc_initpop_global_offset),
      .kernel_valid_out(calc_initpop_valid_out[0]),
      .has_a_write_pending(calc_initpop_pending_write[0]),
      .has_a_lsu_active(calc_initpop_lsu_active[0]),
      .global_id(calc_initpop_global_id[0]),
      .local_id(calc_initpop_local_id[0]),
      .group_id(calc_initpop_group_id[0]),
      .global_size(calc_initpop_global_size),
      .local_size(calc_initpop_local_size),
      .num_groups(calc_initpop_num_groups),
      .workgroup_size(calc_initpop_wg_size),
      .kernel_stall_out(calc_initpop_stall_out[0]),
      .kernel_valid_in(calc_initpop_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_local_bb12_st__inst0
      .avm_local_bb12_st__inst0_enable(avm_kernel_wr_enable[0]),
      .avm_local_bb12_st__inst0_read(avm_kernel_wr_read[0]),
      .avm_local_bb12_st__inst0_write(avm_kernel_wr_write[0]),
      .avm_local_bb12_st__inst0_burstcount(avm_kernel_wr_burstcount[0]),
      .avm_local_bb12_st__inst0_address(avm_kernel_wr_address[0]),
      .avm_local_bb12_st__inst0_writedata(avm_kernel_wr_writedata[0]),
      .avm_local_bb12_st__inst0_byteenable(avm_kernel_wr_byteenable[0]),
      .avm_local_bb12_st__inst0_waitrequest(avm_kernel_wr_waitrequest[0]),
      .avm_local_bb12_st__inst0_readdata(avm_kernel_wr_readdata[0]),
      .avm_local_bb12_st__inst0_readdatavalid(avm_kernel_wr_readdatavalid[0]),
      .avm_local_bb12_st__inst0_writeack(avm_kernel_wr_writeack[0]),
      // AVM avm_local_bb12_st_add1001_i_hfp_inst0
      .avm_local_bb12_st_add1001_i_hfp_inst0_enable(avm_kernel_wr_enable[1]),
      .avm_local_bb12_st_add1001_i_hfp_inst0_read(avm_kernel_wr_read[1]),
      .avm_local_bb12_st_add1001_i_hfp_inst0_write(avm_kernel_wr_write[1]),
      .avm_local_bb12_st_add1001_i_hfp_inst0_burstcount(avm_kernel_wr_burstcount[1]),
      .avm_local_bb12_st_add1001_i_hfp_inst0_address(avm_kernel_wr_address[1]),
      .avm_local_bb12_st_add1001_i_hfp_inst0_writedata(avm_kernel_wr_writedata[1]),
      .avm_local_bb12_st_add1001_i_hfp_inst0_byteenable(avm_kernel_wr_byteenable[1]),
      .avm_local_bb12_st_add1001_i_hfp_inst0_waitrequest(avm_kernel_wr_waitrequest[1]),
      .avm_local_bb12_st_add1001_i_hfp_inst0_readdata(avm_kernel_wr_readdata[1]),
      .avm_local_bb12_st_add1001_i_hfp_inst0_readdatavalid(avm_kernel_wr_readdatavalid[1]),
      .avm_local_bb12_st_add1001_i_hfp_inst0_writeack(avm_kernel_wr_writeack[1]),
      // AVM avm_local_bb2_ld__inst0
      .avm_local_bb2_ld__inst0_enable(avm_kernel_rd_enable[0]),
      .avm_local_bb2_ld__inst0_read(avm_kernel_rd_read[0]),
      .avm_local_bb2_ld__inst0_write(avm_kernel_rd_write[0]),
      .avm_local_bb2_ld__inst0_burstcount(avm_kernel_rd_burstcount[0]),
      .avm_local_bb2_ld__inst0_address(avm_kernel_rd_address[0]),
      .avm_local_bb2_ld__inst0_writedata(avm_kernel_rd_writedata[0]),
      .avm_local_bb2_ld__inst0_byteenable(avm_kernel_rd_byteenable[0]),
      .avm_local_bb2_ld__inst0_waitrequest(avm_kernel_rd_waitrequest[0]),
      .avm_local_bb2_ld__inst0_readdata(avm_kernel_rd_readdata[0]),
      .avm_local_bb2_ld__inst0_readdatavalid(avm_kernel_rd_readdatavalid[0]),
      .avm_local_bb2_ld__inst0_writeack(avm_kernel_rd_writeack[0]),
      // AVM avm_local_bb6_ld__105_inst0
      .avm_local_bb6_ld__105_inst0_enable(avm_kernel_rd_enable[1]),
      .avm_local_bb6_ld__105_inst0_read(avm_kernel_rd_read[1]),
      .avm_local_bb6_ld__105_inst0_write(avm_kernel_rd_write[1]),
      .avm_local_bb6_ld__105_inst0_burstcount(avm_kernel_rd_burstcount[1]),
      .avm_local_bb6_ld__105_inst0_address(avm_kernel_rd_address[1]),
      .avm_local_bb6_ld__105_inst0_writedata(avm_kernel_rd_writedata[1]),
      .avm_local_bb6_ld__105_inst0_byteenable(avm_kernel_rd_byteenable[1]),
      .avm_local_bb6_ld__105_inst0_waitrequest(avm_kernel_rd_waitrequest[1]),
      .avm_local_bb6_ld__105_inst0_readdata(avm_kernel_rd_readdata[1]),
      .avm_local_bb6_ld__105_inst0_readdatavalid(avm_kernel_rd_readdatavalid[1]),
      .avm_local_bb6_ld__105_inst0_writeack(avm_kernel_rd_writeack[1]),
      // AVM avm_local_bb6_ld__107_inst0
      .avm_local_bb6_ld__107_inst0_enable(avm_kernel_rd_enable[2]),
      .avm_local_bb6_ld__107_inst0_read(avm_kernel_rd_read[2]),
      .avm_local_bb6_ld__107_inst0_write(avm_kernel_rd_write[2]),
      .avm_local_bb6_ld__107_inst0_burstcount(avm_kernel_rd_burstcount[2]),
      .avm_local_bb6_ld__107_inst0_address(avm_kernel_rd_address[2]),
      .avm_local_bb6_ld__107_inst0_writedata(avm_kernel_rd_writedata[2]),
      .avm_local_bb6_ld__107_inst0_byteenable(avm_kernel_rd_byteenable[2]),
      .avm_local_bb6_ld__107_inst0_waitrequest(avm_kernel_rd_waitrequest[2]),
      .avm_local_bb6_ld__107_inst0_readdata(avm_kernel_rd_readdata[2]),
      .avm_local_bb6_ld__107_inst0_readdatavalid(avm_kernel_rd_readdatavalid[2]),
      .avm_local_bb6_ld__107_inst0_writeack(avm_kernel_rd_writeack[2]),
      // AVM avm_local_bb6_ld__109_inst0
      .avm_local_bb6_ld__109_inst0_enable(avm_kernel_rd_enable[3]),
      .avm_local_bb6_ld__109_inst0_read(avm_kernel_rd_read[3]),
      .avm_local_bb6_ld__109_inst0_write(avm_kernel_rd_write[3]),
      .avm_local_bb6_ld__109_inst0_burstcount(avm_kernel_rd_burstcount[3]),
      .avm_local_bb6_ld__109_inst0_address(avm_kernel_rd_address[3]),
      .avm_local_bb6_ld__109_inst0_writedata(avm_kernel_rd_writedata[3]),
      .avm_local_bb6_ld__109_inst0_byteenable(avm_kernel_rd_byteenable[3]),
      .avm_local_bb6_ld__109_inst0_waitrequest(avm_kernel_rd_waitrequest[3]),
      .avm_local_bb6_ld__109_inst0_readdata(avm_kernel_rd_readdata[3]),
      .avm_local_bb6_ld__109_inst0_readdatavalid(avm_kernel_rd_readdatavalid[3]),
      .avm_local_bb6_ld__109_inst0_writeack(avm_kernel_rd_writeack[3]),
      // AVM avm_local_bb6_ld__111_inst0
      .avm_local_bb6_ld__111_inst0_enable(avm_kernel_rd_enable[4]),
      .avm_local_bb6_ld__111_inst0_read(avm_kernel_rd_read[4]),
      .avm_local_bb6_ld__111_inst0_write(avm_kernel_rd_write[4]),
      .avm_local_bb6_ld__111_inst0_burstcount(avm_kernel_rd_burstcount[4]),
      .avm_local_bb6_ld__111_inst0_address(avm_kernel_rd_address[4]),
      .avm_local_bb6_ld__111_inst0_writedata(avm_kernel_rd_writedata[4]),
      .avm_local_bb6_ld__111_inst0_byteenable(avm_kernel_rd_byteenable[4]),
      .avm_local_bb6_ld__111_inst0_waitrequest(avm_kernel_rd_waitrequest[4]),
      .avm_local_bb6_ld__111_inst0_readdata(avm_kernel_rd_readdata[4]),
      .avm_local_bb6_ld__111_inst0_readdatavalid(avm_kernel_rd_readdatavalid[4]),
      .avm_local_bb6_ld__111_inst0_writeack(avm_kernel_rd_writeack[4]),
      // AVM avm_local_bb6_ld__inst0
      .avm_local_bb6_ld__inst0_enable(avm_kernel_rd_enable[5]),
      .avm_local_bb6_ld__inst0_read(avm_kernel_rd_read[5]),
      .avm_local_bb6_ld__inst0_write(avm_kernel_rd_write[5]),
      .avm_local_bb6_ld__inst0_burstcount(avm_kernel_rd_burstcount[5]),
      .avm_local_bb6_ld__inst0_address(avm_kernel_rd_address[5]),
      .avm_local_bb6_ld__inst0_writedata(avm_kernel_rd_writedata[5]),
      .avm_local_bb6_ld__inst0_byteenable(avm_kernel_rd_byteenable[5]),
      .avm_local_bb6_ld__inst0_waitrequest(avm_kernel_rd_waitrequest[5]),
      .avm_local_bb6_ld__inst0_readdata(avm_kernel_rd_readdata[5]),
      .avm_local_bb6_ld__inst0_readdatavalid(avm_kernel_rd_readdatavalid[5]),
      .avm_local_bb6_ld__inst0_writeack(avm_kernel_rd_writeack[5]),
      // AVM avm_local_bb6_ld__u7_inst0
      .avm_local_bb6_ld__u7_inst0_enable(avm_kernel_rd_enable[6]),
      .avm_local_bb6_ld__u7_inst0_read(avm_kernel_rd_read[6]),
      .avm_local_bb6_ld__u7_inst0_write(avm_kernel_rd_write[6]),
      .avm_local_bb6_ld__u7_inst0_burstcount(avm_kernel_rd_burstcount[6]),
      .avm_local_bb6_ld__u7_inst0_address(avm_kernel_rd_address[6]),
      .avm_local_bb6_ld__u7_inst0_writedata(avm_kernel_rd_writedata[6]),
      .avm_local_bb6_ld__u7_inst0_byteenable(avm_kernel_rd_byteenable[6]),
      .avm_local_bb6_ld__u7_inst0_waitrequest(avm_kernel_rd_waitrequest[6]),
      .avm_local_bb6_ld__u7_inst0_readdata(avm_kernel_rd_readdata[6]),
      .avm_local_bb6_ld__u7_inst0_readdatavalid(avm_kernel_rd_readdatavalid[6]),
      .avm_local_bb6_ld__u7_inst0_writeack(avm_kernel_rd_writeack[6]),
      // AVM avm_local_bb6_ld__u8_inst0
      .avm_local_bb6_ld__u8_inst0_enable(avm_kernel_rd_enable[7]),
      .avm_local_bb6_ld__u8_inst0_read(avm_kernel_rd_read[7]),
      .avm_local_bb6_ld__u8_inst0_write(avm_kernel_rd_write[7]),
      .avm_local_bb6_ld__u8_inst0_burstcount(avm_kernel_rd_burstcount[7]),
      .avm_local_bb6_ld__u8_inst0_address(avm_kernel_rd_address[7]),
      .avm_local_bb6_ld__u8_inst0_writedata(avm_kernel_rd_writedata[7]),
      .avm_local_bb6_ld__u8_inst0_byteenable(avm_kernel_rd_byteenable[7]),
      .avm_local_bb6_ld__u8_inst0_waitrequest(avm_kernel_rd_waitrequest[7]),
      .avm_local_bb6_ld__u8_inst0_readdata(avm_kernel_rd_readdata[7]),
      .avm_local_bb6_ld__u8_inst0_readdatavalid(avm_kernel_rd_readdatavalid[7]),
      .avm_local_bb6_ld__u8_inst0_writeack(avm_kernel_rd_writeack[7]),
      // AVM avm_local_bb6_ld__u9_inst0
      .avm_local_bb6_ld__u9_inst0_enable(avm_kernel_rd_enable[8]),
      .avm_local_bb6_ld__u9_inst0_read(avm_kernel_rd_read[8]),
      .avm_local_bb6_ld__u9_inst0_write(avm_kernel_rd_write[8]),
      .avm_local_bb6_ld__u9_inst0_burstcount(avm_kernel_rd_burstcount[8]),
      .avm_local_bb6_ld__u9_inst0_address(avm_kernel_rd_address[8]),
      .avm_local_bb6_ld__u9_inst0_writedata(avm_kernel_rd_writedata[8]),
      .avm_local_bb6_ld__u9_inst0_byteenable(avm_kernel_rd_byteenable[8]),
      .avm_local_bb6_ld__u9_inst0_waitrequest(avm_kernel_rd_waitrequest[8]),
      .avm_local_bb6_ld__u9_inst0_readdata(avm_kernel_rd_readdata[8]),
      .avm_local_bb6_ld__u9_inst0_readdatavalid(avm_kernel_rd_readdatavalid[8]),
      .avm_local_bb6_ld__u9_inst0_writeack(avm_kernel_rd_writeack[8]),
      // AVM avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_enable(avm_kernel_rd_enable[9]),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_read(avm_kernel_rd_read[9]),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_write(avm_kernel_rd_write[9]),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_burstcount(avm_kernel_rd_burstcount[9]),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_address(avm_kernel_rd_address[9]),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_writedata(avm_kernel_rd_writedata[9]),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_byteenable(avm_kernel_rd_byteenable[9]),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_waitrequest(avm_kernel_rd_waitrequest[9]),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_readdata(avm_kernel_rd_readdata[9]),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_readdatavalid(avm_kernel_rd_readdatavalid[9]),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_writeack(avm_kernel_rd_writeack[9]),
      // AVM avm_local_bb8_ld__u17_inst0
      .avm_local_bb8_ld__u17_inst0_enable(avm_kernel_rd_enable[10]),
      .avm_local_bb8_ld__u17_inst0_read(avm_kernel_rd_read[10]),
      .avm_local_bb8_ld__u17_inst0_write(avm_kernel_rd_write[10]),
      .avm_local_bb8_ld__u17_inst0_burstcount(avm_kernel_rd_burstcount[10]),
      .avm_local_bb8_ld__u17_inst0_address(avm_kernel_rd_address[10]),
      .avm_local_bb8_ld__u17_inst0_writedata(avm_kernel_rd_writedata[10]),
      .avm_local_bb8_ld__u17_inst0_byteenable(avm_kernel_rd_byteenable[10]),
      .avm_local_bb8_ld__u17_inst0_waitrequest(avm_kernel_rd_waitrequest[10]),
      .avm_local_bb8_ld__u17_inst0_readdata(avm_kernel_rd_readdata[10]),
      .avm_local_bb8_ld__u17_inst0_readdatavalid(avm_kernel_rd_readdatavalid[10]),
      .avm_local_bb8_ld__u17_inst0_writeack(avm_kernel_rd_writeack[10]),
      // AVM avm_local_bb8_ld__u18_inst0
      .avm_local_bb8_ld__u18_inst0_enable(avm_kernel_rd_enable[11]),
      .avm_local_bb8_ld__u18_inst0_read(avm_kernel_rd_read[11]),
      .avm_local_bb8_ld__u18_inst0_write(avm_kernel_rd_write[11]),
      .avm_local_bb8_ld__u18_inst0_burstcount(avm_kernel_rd_burstcount[11]),
      .avm_local_bb8_ld__u18_inst0_address(avm_kernel_rd_address[11]),
      .avm_local_bb8_ld__u18_inst0_writedata(avm_kernel_rd_writedata[11]),
      .avm_local_bb8_ld__u18_inst0_byteenable(avm_kernel_rd_byteenable[11]),
      .avm_local_bb8_ld__u18_inst0_waitrequest(avm_kernel_rd_waitrequest[11]),
      .avm_local_bb8_ld__u18_inst0_readdata(avm_kernel_rd_readdata[11]),
      .avm_local_bb8_ld__u18_inst0_readdatavalid(avm_kernel_rd_readdatavalid[11]),
      .avm_local_bb8_ld__u18_inst0_writeack(avm_kernel_rd_writeack[11]),
      // AVM avm_local_bb8_ld__u19_inst0
      .avm_local_bb8_ld__u19_inst0_enable(avm_kernel_rd_enable[12]),
      .avm_local_bb8_ld__u19_inst0_read(avm_kernel_rd_read[12]),
      .avm_local_bb8_ld__u19_inst0_write(avm_kernel_rd_write[12]),
      .avm_local_bb8_ld__u19_inst0_burstcount(avm_kernel_rd_burstcount[12]),
      .avm_local_bb8_ld__u19_inst0_address(avm_kernel_rd_address[12]),
      .avm_local_bb8_ld__u19_inst0_writedata(avm_kernel_rd_writedata[12]),
      .avm_local_bb8_ld__u19_inst0_byteenable(avm_kernel_rd_byteenable[12]),
      .avm_local_bb8_ld__u19_inst0_waitrequest(avm_kernel_rd_waitrequest[12]),
      .avm_local_bb8_ld__u19_inst0_readdata(avm_kernel_rd_readdata[12]),
      .avm_local_bb8_ld__u19_inst0_readdatavalid(avm_kernel_rd_readdatavalid[12]),
      .avm_local_bb8_ld__u19_inst0_writeack(avm_kernel_rd_writeack[12]),
      // AVM avm_local_bb8_ld__u20_inst0
      .avm_local_bb8_ld__u20_inst0_enable(avm_kernel_rd_enable[13]),
      .avm_local_bb8_ld__u20_inst0_read(avm_kernel_rd_read[13]),
      .avm_local_bb8_ld__u20_inst0_write(avm_kernel_rd_write[13]),
      .avm_local_bb8_ld__u20_inst0_burstcount(avm_kernel_rd_burstcount[13]),
      .avm_local_bb8_ld__u20_inst0_address(avm_kernel_rd_address[13]),
      .avm_local_bb8_ld__u20_inst0_writedata(avm_kernel_rd_writedata[13]),
      .avm_local_bb8_ld__u20_inst0_byteenable(avm_kernel_rd_byteenable[13]),
      .avm_local_bb8_ld__u20_inst0_waitrequest(avm_kernel_rd_waitrequest[13]),
      .avm_local_bb8_ld__u20_inst0_readdata(avm_kernel_rd_readdata[13]),
      .avm_local_bb8_ld__u20_inst0_readdatavalid(avm_kernel_rd_readdatavalid[13]),
      .avm_local_bb8_ld__u20_inst0_writeack(avm_kernel_rd_writeack[13]),
      // AVM avm_local_bb8_ld__u21_inst0
      .avm_local_bb8_ld__u21_inst0_enable(avm_kernel_rd_enable[14]),
      .avm_local_bb8_ld__u21_inst0_read(avm_kernel_rd_read[14]),
      .avm_local_bb8_ld__u21_inst0_write(avm_kernel_rd_write[14]),
      .avm_local_bb8_ld__u21_inst0_burstcount(avm_kernel_rd_burstcount[14]),
      .avm_local_bb8_ld__u21_inst0_address(avm_kernel_rd_address[14]),
      .avm_local_bb8_ld__u21_inst0_writedata(avm_kernel_rd_writedata[14]),
      .avm_local_bb8_ld__u21_inst0_byteenable(avm_kernel_rd_byteenable[14]),
      .avm_local_bb8_ld__u21_inst0_waitrequest(avm_kernel_rd_waitrequest[14]),
      .avm_local_bb8_ld__u21_inst0_readdata(avm_kernel_rd_readdata[14]),
      .avm_local_bb8_ld__u21_inst0_readdatavalid(avm_kernel_rd_readdatavalid[14]),
      .avm_local_bb8_ld__u21_inst0_writeack(avm_kernel_rd_writeack[14]),
      // AVM avm_local_bb8_ld__u22_inst0
      .avm_local_bb8_ld__u22_inst0_enable(avm_kernel_rd_enable[15]),
      .avm_local_bb8_ld__u22_inst0_read(avm_kernel_rd_read[15]),
      .avm_local_bb8_ld__u22_inst0_write(avm_kernel_rd_write[15]),
      .avm_local_bb8_ld__u22_inst0_burstcount(avm_kernel_rd_burstcount[15]),
      .avm_local_bb8_ld__u22_inst0_address(avm_kernel_rd_address[15]),
      .avm_local_bb8_ld__u22_inst0_writedata(avm_kernel_rd_writedata[15]),
      .avm_local_bb8_ld__u22_inst0_byteenable(avm_kernel_rd_byteenable[15]),
      .avm_local_bb8_ld__u22_inst0_waitrequest(avm_kernel_rd_waitrequest[15]),
      .avm_local_bb8_ld__u22_inst0_readdata(avm_kernel_rd_readdata[15]),
      .avm_local_bb8_ld__u22_inst0_readdatavalid(avm_kernel_rd_readdatavalid[15]),
      .avm_local_bb8_ld__u22_inst0_writeack(avm_kernel_rd_writeack[15]),
      // AVM avm_local_bb8_ld__u23_inst0
      .avm_local_bb8_ld__u23_inst0_enable(avm_kernel_rd_enable[16]),
      .avm_local_bb8_ld__u23_inst0_read(avm_kernel_rd_read[16]),
      .avm_local_bb8_ld__u23_inst0_write(avm_kernel_rd_write[16]),
      .avm_local_bb8_ld__u23_inst0_burstcount(avm_kernel_rd_burstcount[16]),
      .avm_local_bb8_ld__u23_inst0_address(avm_kernel_rd_address[16]),
      .avm_local_bb8_ld__u23_inst0_writedata(avm_kernel_rd_writedata[16]),
      .avm_local_bb8_ld__u23_inst0_byteenable(avm_kernel_rd_byteenable[16]),
      .avm_local_bb8_ld__u23_inst0_waitrequest(avm_kernel_rd_waitrequest[16]),
      .avm_local_bb8_ld__u23_inst0_readdata(avm_kernel_rd_readdata[16]),
      .avm_local_bb8_ld__u23_inst0_readdatavalid(avm_kernel_rd_readdatavalid[16]),
      .avm_local_bb8_ld__u23_inst0_writeack(avm_kernel_rd_writeack[16]),
      // AVM avm_local_bb8_ld__u24_inst0
      .avm_local_bb8_ld__u24_inst0_enable(avm_kernel_rd_enable[17]),
      .avm_local_bb8_ld__u24_inst0_read(avm_kernel_rd_read[17]),
      .avm_local_bb8_ld__u24_inst0_write(avm_kernel_rd_write[17]),
      .avm_local_bb8_ld__u24_inst0_burstcount(avm_kernel_rd_burstcount[17]),
      .avm_local_bb8_ld__u24_inst0_address(avm_kernel_rd_address[17]),
      .avm_local_bb8_ld__u24_inst0_writedata(avm_kernel_rd_writedata[17]),
      .avm_local_bb8_ld__u24_inst0_byteenable(avm_kernel_rd_byteenable[17]),
      .avm_local_bb8_ld__u24_inst0_waitrequest(avm_kernel_rd_waitrequest[17]),
      .avm_local_bb8_ld__u24_inst0_readdata(avm_kernel_rd_readdata[17]),
      .avm_local_bb8_ld__u24_inst0_readdatavalid(avm_kernel_rd_readdatavalid[17]),
      .avm_local_bb8_ld__u24_inst0_writeack(avm_kernel_rd_writeack[17]),
      // AVM avm_local_bb8_ld__u25_inst0
      .avm_local_bb8_ld__u25_inst0_enable(avm_kernel_rd_enable[18]),
      .avm_local_bb8_ld__u25_inst0_read(avm_kernel_rd_read[18]),
      .avm_local_bb8_ld__u25_inst0_write(avm_kernel_rd_write[18]),
      .avm_local_bb8_ld__u25_inst0_burstcount(avm_kernel_rd_burstcount[18]),
      .avm_local_bb8_ld__u25_inst0_address(avm_kernel_rd_address[18]),
      .avm_local_bb8_ld__u25_inst0_writedata(avm_kernel_rd_writedata[18]),
      .avm_local_bb8_ld__u25_inst0_byteenable(avm_kernel_rd_byteenable[18]),
      .avm_local_bb8_ld__u25_inst0_waitrequest(avm_kernel_rd_waitrequest[18]),
      .avm_local_bb8_ld__u25_inst0_readdata(avm_kernel_rd_readdata[18]),
      .avm_local_bb8_ld__u25_inst0_readdatavalid(avm_kernel_rd_readdatavalid[18]),
      .avm_local_bb8_ld__u25_inst0_writeack(avm_kernel_rd_writeack[18]),
      // AVM avm_local_bb8_ld__u26_inst0
      .avm_local_bb8_ld__u26_inst0_enable(avm_kernel_rd_enable[19]),
      .avm_local_bb8_ld__u26_inst0_read(avm_kernel_rd_read[19]),
      .avm_local_bb8_ld__u26_inst0_write(avm_kernel_rd_write[19]),
      .avm_local_bb8_ld__u26_inst0_burstcount(avm_kernel_rd_burstcount[19]),
      .avm_local_bb8_ld__u26_inst0_address(avm_kernel_rd_address[19]),
      .avm_local_bb8_ld__u26_inst0_writedata(avm_kernel_rd_writedata[19]),
      .avm_local_bb8_ld__u26_inst0_byteenable(avm_kernel_rd_byteenable[19]),
      .avm_local_bb8_ld__u26_inst0_waitrequest(avm_kernel_rd_waitrequest[19]),
      .avm_local_bb8_ld__u26_inst0_readdata(avm_kernel_rd_readdata[19]),
      .avm_local_bb8_ld__u26_inst0_readdatavalid(avm_kernel_rd_readdatavalid[19]),
      .avm_local_bb8_ld__u26_inst0_writeack(avm_kernel_rd_writeack[19]),
      // AVM avm_local_bb8_ld__u27_inst0
      .avm_local_bb8_ld__u27_inst0_enable(avm_kernel_rd_enable[20]),
      .avm_local_bb8_ld__u27_inst0_read(avm_kernel_rd_read[20]),
      .avm_local_bb8_ld__u27_inst0_write(avm_kernel_rd_write[20]),
      .avm_local_bb8_ld__u27_inst0_burstcount(avm_kernel_rd_burstcount[20]),
      .avm_local_bb8_ld__u27_inst0_address(avm_kernel_rd_address[20]),
      .avm_local_bb8_ld__u27_inst0_writedata(avm_kernel_rd_writedata[20]),
      .avm_local_bb8_ld__u27_inst0_byteenable(avm_kernel_rd_byteenable[20]),
      .avm_local_bb8_ld__u27_inst0_waitrequest(avm_kernel_rd_waitrequest[20]),
      .avm_local_bb8_ld__u27_inst0_readdata(avm_kernel_rd_readdata[20]),
      .avm_local_bb8_ld__u27_inst0_readdatavalid(avm_kernel_rd_readdatavalid[20]),
      .avm_local_bb8_ld__u27_inst0_writeack(avm_kernel_rd_writeack[20]),
      // AVM avm_local_bb8_ld__u28_inst0
      .avm_local_bb8_ld__u28_inst0_enable(avm_kernel_rd_enable[21]),
      .avm_local_bb8_ld__u28_inst0_read(avm_kernel_rd_read[21]),
      .avm_local_bb8_ld__u28_inst0_write(avm_kernel_rd_write[21]),
      .avm_local_bb8_ld__u28_inst0_burstcount(avm_kernel_rd_burstcount[21]),
      .avm_local_bb8_ld__u28_inst0_address(avm_kernel_rd_address[21]),
      .avm_local_bb8_ld__u28_inst0_writedata(avm_kernel_rd_writedata[21]),
      .avm_local_bb8_ld__u28_inst0_byteenable(avm_kernel_rd_byteenable[21]),
      .avm_local_bb8_ld__u28_inst0_waitrequest(avm_kernel_rd_waitrequest[21]),
      .avm_local_bb8_ld__u28_inst0_readdata(avm_kernel_rd_readdata[21]),
      .avm_local_bb8_ld__u28_inst0_readdatavalid(avm_kernel_rd_readdatavalid[21]),
      .avm_local_bb8_ld__u28_inst0_writeack(avm_kernel_rd_writeack[21]),
      // AVM avm_local_bb8_ld__u29_inst0
      .avm_local_bb8_ld__u29_inst0_enable(avm_kernel_rd_enable[22]),
      .avm_local_bb8_ld__u29_inst0_read(avm_kernel_rd_read[22]),
      .avm_local_bb8_ld__u29_inst0_write(avm_kernel_rd_write[22]),
      .avm_local_bb8_ld__u29_inst0_burstcount(avm_kernel_rd_burstcount[22]),
      .avm_local_bb8_ld__u29_inst0_address(avm_kernel_rd_address[22]),
      .avm_local_bb8_ld__u29_inst0_writedata(avm_kernel_rd_writedata[22]),
      .avm_local_bb8_ld__u29_inst0_byteenable(avm_kernel_rd_byteenable[22]),
      .avm_local_bb8_ld__u29_inst0_waitrequest(avm_kernel_rd_waitrequest[22]),
      .avm_local_bb8_ld__u29_inst0_readdata(avm_kernel_rd_readdata[22]),
      .avm_local_bb8_ld__u29_inst0_readdatavalid(avm_kernel_rd_readdatavalid[22]),
      .avm_local_bb8_ld__u29_inst0_writeack(avm_kernel_rd_writeack[22]),
      // AVM avm_local_bb8_ld__u30_inst0
      .avm_local_bb8_ld__u30_inst0_enable(avm_kernel_rd_enable[23]),
      .avm_local_bb8_ld__u30_inst0_read(avm_kernel_rd_read[23]),
      .avm_local_bb8_ld__u30_inst0_write(avm_kernel_rd_write[23]),
      .avm_local_bb8_ld__u30_inst0_burstcount(avm_kernel_rd_burstcount[23]),
      .avm_local_bb8_ld__u30_inst0_address(avm_kernel_rd_address[23]),
      .avm_local_bb8_ld__u30_inst0_writedata(avm_kernel_rd_writedata[23]),
      .avm_local_bb8_ld__u30_inst0_byteenable(avm_kernel_rd_byteenable[23]),
      .avm_local_bb8_ld__u30_inst0_waitrequest(avm_kernel_rd_waitrequest[23]),
      .avm_local_bb8_ld__u30_inst0_readdata(avm_kernel_rd_readdata[23]),
      .avm_local_bb8_ld__u30_inst0_readdatavalid(avm_kernel_rd_readdatavalid[23]),
      .avm_local_bb8_ld__u30_inst0_writeack(avm_kernel_rd_writeack[23]),
      // AVM avm_local_bb8_ld__u31_inst0
      .avm_local_bb8_ld__u31_inst0_enable(avm_kernel_rd_enable[24]),
      .avm_local_bb8_ld__u31_inst0_read(avm_kernel_rd_read[24]),
      .avm_local_bb8_ld__u31_inst0_write(avm_kernel_rd_write[24]),
      .avm_local_bb8_ld__u31_inst0_burstcount(avm_kernel_rd_burstcount[24]),
      .avm_local_bb8_ld__u31_inst0_address(avm_kernel_rd_address[24]),
      .avm_local_bb8_ld__u31_inst0_writedata(avm_kernel_rd_writedata[24]),
      .avm_local_bb8_ld__u31_inst0_byteenable(avm_kernel_rd_byteenable[24]),
      .avm_local_bb8_ld__u31_inst0_waitrequest(avm_kernel_rd_waitrequest[24]),
      .avm_local_bb8_ld__u31_inst0_readdata(avm_kernel_rd_readdata[24]),
      .avm_local_bb8_ld__u31_inst0_readdatavalid(avm_kernel_rd_readdatavalid[24]),
      .avm_local_bb8_ld__u31_inst0_writeack(avm_kernel_rd_writeack[24]),
      // AVM avm_local_bb8_ld__u32_inst0
      .avm_local_bb8_ld__u32_inst0_enable(avm_kernel_rd_enable[25]),
      .avm_local_bb8_ld__u32_inst0_read(avm_kernel_rd_read[25]),
      .avm_local_bb8_ld__u32_inst0_write(avm_kernel_rd_write[25]),
      .avm_local_bb8_ld__u32_inst0_burstcount(avm_kernel_rd_burstcount[25]),
      .avm_local_bb8_ld__u32_inst0_address(avm_kernel_rd_address[25]),
      .avm_local_bb8_ld__u32_inst0_writedata(avm_kernel_rd_writedata[25]),
      .avm_local_bb8_ld__u32_inst0_byteenable(avm_kernel_rd_byteenable[25]),
      .avm_local_bb8_ld__u32_inst0_waitrequest(avm_kernel_rd_waitrequest[25]),
      .avm_local_bb8_ld__u32_inst0_readdata(avm_kernel_rd_readdata[25]),
      .avm_local_bb8_ld__u32_inst0_readdatavalid(avm_kernel_rd_readdatavalid[25]),
      .avm_local_bb8_ld__u32_inst0_writeack(avm_kernel_rd_writeack[25]),
      // AVM avm_local_bb8_ld__u33_inst0
      .avm_local_bb8_ld__u33_inst0_enable(avm_kernel_rd_enable[26]),
      .avm_local_bb8_ld__u33_inst0_read(avm_kernel_rd_read[26]),
      .avm_local_bb8_ld__u33_inst0_write(avm_kernel_rd_write[26]),
      .avm_local_bb8_ld__u33_inst0_burstcount(avm_kernel_rd_burstcount[26]),
      .avm_local_bb8_ld__u33_inst0_address(avm_kernel_rd_address[26]),
      .avm_local_bb8_ld__u33_inst0_writedata(avm_kernel_rd_writedata[26]),
      .avm_local_bb8_ld__u33_inst0_byteenable(avm_kernel_rd_byteenable[26]),
      .avm_local_bb8_ld__u33_inst0_waitrequest(avm_kernel_rd_waitrequest[26]),
      .avm_local_bb8_ld__u33_inst0_readdata(avm_kernel_rd_readdata[26]),
      .avm_local_bb8_ld__u33_inst0_readdatavalid(avm_kernel_rd_readdatavalid[26]),
      .avm_local_bb8_ld__u33_inst0_writeack(avm_kernel_rd_writeack[26]),
      // AVM avm_local_bb8_ld__u34_inst0
      .avm_local_bb8_ld__u34_inst0_enable(avm_kernel_rd_enable[27]),
      .avm_local_bb8_ld__u34_inst0_read(avm_kernel_rd_read[27]),
      .avm_local_bb8_ld__u34_inst0_write(avm_kernel_rd_write[27]),
      .avm_local_bb8_ld__u34_inst0_burstcount(avm_kernel_rd_burstcount[27]),
      .avm_local_bb8_ld__u34_inst0_address(avm_kernel_rd_address[27]),
      .avm_local_bb8_ld__u34_inst0_writedata(avm_kernel_rd_writedata[27]),
      .avm_local_bb8_ld__u34_inst0_byteenable(avm_kernel_rd_byteenable[27]),
      .avm_local_bb8_ld__u34_inst0_waitrequest(avm_kernel_rd_waitrequest[27]),
      .avm_local_bb8_ld__u34_inst0_readdata(avm_kernel_rd_readdata[27]),
      .avm_local_bb8_ld__u34_inst0_readdatavalid(avm_kernel_rd_readdatavalid[27]),
      .avm_local_bb8_ld__u34_inst0_writeack(avm_kernel_rd_writeack[27]),
      // AVM avm_local_bb8_ld__u35_inst0
      .avm_local_bb8_ld__u35_inst0_enable(avm_kernel_rd_enable[28]),
      .avm_local_bb8_ld__u35_inst0_read(avm_kernel_rd_read[28]),
      .avm_local_bb8_ld__u35_inst0_write(avm_kernel_rd_write[28]),
      .avm_local_bb8_ld__u35_inst0_burstcount(avm_kernel_rd_burstcount[28]),
      .avm_local_bb8_ld__u35_inst0_address(avm_kernel_rd_address[28]),
      .avm_local_bb8_ld__u35_inst0_writedata(avm_kernel_rd_writedata[28]),
      .avm_local_bb8_ld__u35_inst0_byteenable(avm_kernel_rd_byteenable[28]),
      .avm_local_bb8_ld__u35_inst0_waitrequest(avm_kernel_rd_waitrequest[28]),
      .avm_local_bb8_ld__u35_inst0_readdata(avm_kernel_rd_readdata[28]),
      .avm_local_bb8_ld__u35_inst0_readdatavalid(avm_kernel_rd_readdatavalid[28]),
      .avm_local_bb8_ld__u35_inst0_writeack(avm_kernel_rd_writeack[28]),
      // AVM avm_local_bb8_ld__u36_inst0
      .avm_local_bb8_ld__u36_inst0_enable(avm_kernel_rd_enable[29]),
      .avm_local_bb8_ld__u36_inst0_read(avm_kernel_rd_read[29]),
      .avm_local_bb8_ld__u36_inst0_write(avm_kernel_rd_write[29]),
      .avm_local_bb8_ld__u36_inst0_burstcount(avm_kernel_rd_burstcount[29]),
      .avm_local_bb8_ld__u36_inst0_address(avm_kernel_rd_address[29]),
      .avm_local_bb8_ld__u36_inst0_writedata(avm_kernel_rd_writedata[29]),
      .avm_local_bb8_ld__u36_inst0_byteenable(avm_kernel_rd_byteenable[29]),
      .avm_local_bb8_ld__u36_inst0_waitrequest(avm_kernel_rd_waitrequest[29]),
      .avm_local_bb8_ld__u36_inst0_readdata(avm_kernel_rd_readdata[29]),
      .avm_local_bb8_ld__u36_inst0_readdatavalid(avm_kernel_rd_readdatavalid[29]),
      .avm_local_bb8_ld__u36_inst0_writeack(avm_kernel_rd_writeack[29]),
      // AVM avm_local_bb8_ld__u37_inst0
      .avm_local_bb8_ld__u37_inst0_enable(avm_kernel_rd_enable[30]),
      .avm_local_bb8_ld__u37_inst0_read(avm_kernel_rd_read[30]),
      .avm_local_bb8_ld__u37_inst0_write(avm_kernel_rd_write[30]),
      .avm_local_bb8_ld__u37_inst0_burstcount(avm_kernel_rd_burstcount[30]),
      .avm_local_bb8_ld__u37_inst0_address(avm_kernel_rd_address[30]),
      .avm_local_bb8_ld__u37_inst0_writedata(avm_kernel_rd_writedata[30]),
      .avm_local_bb8_ld__u37_inst0_byteenable(avm_kernel_rd_byteenable[30]),
      .avm_local_bb8_ld__u37_inst0_waitrequest(avm_kernel_rd_waitrequest[30]),
      .avm_local_bb8_ld__u37_inst0_readdata(avm_kernel_rd_readdata[30]),
      .avm_local_bb8_ld__u37_inst0_readdatavalid(avm_kernel_rd_readdatavalid[30]),
      .avm_local_bb8_ld__u37_inst0_writeack(avm_kernel_rd_writeack[30]),
      // AVM avm_local_bb8_ld__u38_inst0
      .avm_local_bb8_ld__u38_inst0_enable(avm_kernel_rd_enable[31]),
      .avm_local_bb8_ld__u38_inst0_read(avm_kernel_rd_read[31]),
      .avm_local_bb8_ld__u38_inst0_write(avm_kernel_rd_write[31]),
      .avm_local_bb8_ld__u38_inst0_burstcount(avm_kernel_rd_burstcount[31]),
      .avm_local_bb8_ld__u38_inst0_address(avm_kernel_rd_address[31]),
      .avm_local_bb8_ld__u38_inst0_writedata(avm_kernel_rd_writedata[31]),
      .avm_local_bb8_ld__u38_inst0_byteenable(avm_kernel_rd_byteenable[31]),
      .avm_local_bb8_ld__u38_inst0_waitrequest(avm_kernel_rd_waitrequest[31]),
      .avm_local_bb8_ld__u38_inst0_readdata(avm_kernel_rd_readdata[31]),
      .avm_local_bb8_ld__u38_inst0_readdatavalid(avm_kernel_rd_readdatavalid[31]),
      .avm_local_bb8_ld__u38_inst0_writeack(avm_kernel_rd_writeack[31]),
      // AVM avm_local_bb8_ld__u39_inst0
      .avm_local_bb8_ld__u39_inst0_enable(avm_kernel_rd_enable[32]),
      .avm_local_bb8_ld__u39_inst0_read(avm_kernel_rd_read[32]),
      .avm_local_bb8_ld__u39_inst0_write(avm_kernel_rd_write[32]),
      .avm_local_bb8_ld__u39_inst0_burstcount(avm_kernel_rd_burstcount[32]),
      .avm_local_bb8_ld__u39_inst0_address(avm_kernel_rd_address[32]),
      .avm_local_bb8_ld__u39_inst0_writedata(avm_kernel_rd_writedata[32]),
      .avm_local_bb8_ld__u39_inst0_byteenable(avm_kernel_rd_byteenable[32]),
      .avm_local_bb8_ld__u39_inst0_waitrequest(avm_kernel_rd_waitrequest[32]),
      .avm_local_bb8_ld__u39_inst0_readdata(avm_kernel_rd_readdata[32]),
      .avm_local_bb8_ld__u39_inst0_readdatavalid(avm_kernel_rd_readdatavalid[32]),
      .avm_local_bb8_ld__u39_inst0_writeack(avm_kernel_rd_writeack[32]),
      // AVM avm_local_bb8_ld__u40_inst0
      .avm_local_bb8_ld__u40_inst0_enable(avm_kernel_rd_enable[33]),
      .avm_local_bb8_ld__u40_inst0_read(avm_kernel_rd_read[33]),
      .avm_local_bb8_ld__u40_inst0_write(avm_kernel_rd_write[33]),
      .avm_local_bb8_ld__u40_inst0_burstcount(avm_kernel_rd_burstcount[33]),
      .avm_local_bb8_ld__u40_inst0_address(avm_kernel_rd_address[33]),
      .avm_local_bb8_ld__u40_inst0_writedata(avm_kernel_rd_writedata[33]),
      .avm_local_bb8_ld__u40_inst0_byteenable(avm_kernel_rd_byteenable[33]),
      .avm_local_bb8_ld__u40_inst0_waitrequest(avm_kernel_rd_waitrequest[33]),
      .avm_local_bb8_ld__u40_inst0_readdata(avm_kernel_rd_readdata[33]),
      .avm_local_bb8_ld__u40_inst0_readdatavalid(avm_kernel_rd_readdatavalid[33]),
      .avm_local_bb8_ld__u40_inst0_writeack(avm_kernel_rd_writeack[33]),
      // AVM avm_local_bb8_ld__u41_inst0
      .avm_local_bb8_ld__u41_inst0_enable(avm_kernel_rd_enable[34]),
      .avm_local_bb8_ld__u41_inst0_read(avm_kernel_rd_read[34]),
      .avm_local_bb8_ld__u41_inst0_write(avm_kernel_rd_write[34]),
      .avm_local_bb8_ld__u41_inst0_burstcount(avm_kernel_rd_burstcount[34]),
      .avm_local_bb8_ld__u41_inst0_address(avm_kernel_rd_address[34]),
      .avm_local_bb8_ld__u41_inst0_writedata(avm_kernel_rd_writedata[34]),
      .avm_local_bb8_ld__u41_inst0_byteenable(avm_kernel_rd_byteenable[34]),
      .avm_local_bb8_ld__u41_inst0_waitrequest(avm_kernel_rd_waitrequest[34]),
      .avm_local_bb8_ld__u41_inst0_readdata(avm_kernel_rd_readdata[34]),
      .avm_local_bb8_ld__u41_inst0_readdatavalid(avm_kernel_rd_readdatavalid[34]),
      .avm_local_bb8_ld__u41_inst0_writeack(avm_kernel_rd_writeack[34]),
      // AVM avm_local_bb8_ld__u42_inst0
      .avm_local_bb8_ld__u42_inst0_enable(avm_kernel_rd_enable[35]),
      .avm_local_bb8_ld__u42_inst0_read(avm_kernel_rd_read[35]),
      .avm_local_bb8_ld__u42_inst0_write(avm_kernel_rd_write[35]),
      .avm_local_bb8_ld__u42_inst0_burstcount(avm_kernel_rd_burstcount[35]),
      .avm_local_bb8_ld__u42_inst0_address(avm_kernel_rd_address[35]),
      .avm_local_bb8_ld__u42_inst0_writedata(avm_kernel_rd_writedata[35]),
      .avm_local_bb8_ld__u42_inst0_byteenable(avm_kernel_rd_byteenable[35]),
      .avm_local_bb8_ld__u42_inst0_waitrequest(avm_kernel_rd_waitrequest[35]),
      .avm_local_bb8_ld__u42_inst0_readdata(avm_kernel_rd_readdata[35]),
      .avm_local_bb8_ld__u42_inst0_readdatavalid(avm_kernel_rd_readdatavalid[35]),
      .avm_local_bb8_ld__u42_inst0_writeack(avm_kernel_rd_writeack[35]),
      // AVM avm_local_bb9_ld__u49_inst0
      .avm_local_bb9_ld__u49_inst0_enable(avm_kernel_rd_enable[36]),
      .avm_local_bb9_ld__u49_inst0_read(avm_kernel_rd_read[36]),
      .avm_local_bb9_ld__u49_inst0_write(avm_kernel_rd_write[36]),
      .avm_local_bb9_ld__u49_inst0_burstcount(avm_kernel_rd_burstcount[36]),
      .avm_local_bb9_ld__u49_inst0_address(avm_kernel_rd_address[36]),
      .avm_local_bb9_ld__u49_inst0_writedata(avm_kernel_rd_writedata[36]),
      .avm_local_bb9_ld__u49_inst0_byteenable(avm_kernel_rd_byteenable[36]),
      .avm_local_bb9_ld__u49_inst0_waitrequest(avm_kernel_rd_waitrequest[36]),
      .avm_local_bb9_ld__u49_inst0_readdata(avm_kernel_rd_readdata[36]),
      .avm_local_bb9_ld__u49_inst0_readdatavalid(avm_kernel_rd_readdatavalid[36]),
      .avm_local_bb9_ld__u49_inst0_writeack(avm_kernel_rd_writeack[36]),
      // AVM avm_local_bb9_ld__u50_inst0
      .avm_local_bb9_ld__u50_inst0_enable(avm_kernel_rd_enable[37]),
      .avm_local_bb9_ld__u50_inst0_read(avm_kernel_rd_read[37]),
      .avm_local_bb9_ld__u50_inst0_write(avm_kernel_rd_write[37]),
      .avm_local_bb9_ld__u50_inst0_burstcount(avm_kernel_rd_burstcount[37]),
      .avm_local_bb9_ld__u50_inst0_address(avm_kernel_rd_address[37]),
      .avm_local_bb9_ld__u50_inst0_writedata(avm_kernel_rd_writedata[37]),
      .avm_local_bb9_ld__u50_inst0_byteenable(avm_kernel_rd_byteenable[37]),
      .avm_local_bb9_ld__u50_inst0_waitrequest(avm_kernel_rd_waitrequest[37]),
      .avm_local_bb9_ld__u50_inst0_readdata(avm_kernel_rd_readdata[37]),
      .avm_local_bb9_ld__u50_inst0_readdatavalid(avm_kernel_rd_readdatavalid[37]),
      .avm_local_bb9_ld__u50_inst0_writeack(avm_kernel_rd_writeack[37]),
      // AVM avm_local_bb9_ld__u51_inst0
      .avm_local_bb9_ld__u51_inst0_enable(avm_kernel_rd_enable[38]),
      .avm_local_bb9_ld__u51_inst0_read(avm_kernel_rd_read[38]),
      .avm_local_bb9_ld__u51_inst0_write(avm_kernel_rd_write[38]),
      .avm_local_bb9_ld__u51_inst0_burstcount(avm_kernel_rd_burstcount[38]),
      .avm_local_bb9_ld__u51_inst0_address(avm_kernel_rd_address[38]),
      .avm_local_bb9_ld__u51_inst0_writedata(avm_kernel_rd_writedata[38]),
      .avm_local_bb9_ld__u51_inst0_byteenable(avm_kernel_rd_byteenable[38]),
      .avm_local_bb9_ld__u51_inst0_waitrequest(avm_kernel_rd_waitrequest[38]),
      .avm_local_bb9_ld__u51_inst0_readdata(avm_kernel_rd_readdata[38]),
      .avm_local_bb9_ld__u51_inst0_readdatavalid(avm_kernel_rd_readdatavalid[38]),
      .avm_local_bb9_ld__u51_inst0_writeack(avm_kernel_rd_writeack[38]),
      // AVM avm_local_bb9_ld__u52_inst0
      .avm_local_bb9_ld__u52_inst0_enable(avm_kernel_rd_enable[39]),
      .avm_local_bb9_ld__u52_inst0_read(avm_kernel_rd_read[39]),
      .avm_local_bb9_ld__u52_inst0_write(avm_kernel_rd_write[39]),
      .avm_local_bb9_ld__u52_inst0_burstcount(avm_kernel_rd_burstcount[39]),
      .avm_local_bb9_ld__u52_inst0_address(avm_kernel_rd_address[39]),
      .avm_local_bb9_ld__u52_inst0_writedata(avm_kernel_rd_writedata[39]),
      .avm_local_bb9_ld__u52_inst0_byteenable(avm_kernel_rd_byteenable[39]),
      .avm_local_bb9_ld__u52_inst0_waitrequest(avm_kernel_rd_waitrequest[39]),
      .avm_local_bb9_ld__u52_inst0_readdata(avm_kernel_rd_readdata[39]),
      .avm_local_bb9_ld__u52_inst0_readdatavalid(avm_kernel_rd_readdatavalid[39]),
      .avm_local_bb9_ld__u52_inst0_writeack(avm_kernel_rd_writeack[39]),
      // AVM avm_local_bb9_ld__u53_inst0
      .avm_local_bb9_ld__u53_inst0_enable(avm_kernel_rd_enable[40]),
      .avm_local_bb9_ld__u53_inst0_read(avm_kernel_rd_read[40]),
      .avm_local_bb9_ld__u53_inst0_write(avm_kernel_rd_write[40]),
      .avm_local_bb9_ld__u53_inst0_burstcount(avm_kernel_rd_burstcount[40]),
      .avm_local_bb9_ld__u53_inst0_address(avm_kernel_rd_address[40]),
      .avm_local_bb9_ld__u53_inst0_writedata(avm_kernel_rd_writedata[40]),
      .avm_local_bb9_ld__u53_inst0_byteenable(avm_kernel_rd_byteenable[40]),
      .avm_local_bb9_ld__u53_inst0_waitrequest(avm_kernel_rd_waitrequest[40]),
      .avm_local_bb9_ld__u53_inst0_readdata(avm_kernel_rd_readdata[40]),
      .avm_local_bb9_ld__u53_inst0_readdatavalid(avm_kernel_rd_readdatavalid[40]),
      .avm_local_bb9_ld__u53_inst0_writeack(avm_kernel_rd_writeack[40]),
      // AVM avm_local_bb9_ld__u54_inst0
      .avm_local_bb9_ld__u54_inst0_enable(avm_kernel_rd_enable[41]),
      .avm_local_bb9_ld__u54_inst0_read(avm_kernel_rd_read[41]),
      .avm_local_bb9_ld__u54_inst0_write(avm_kernel_rd_write[41]),
      .avm_local_bb9_ld__u54_inst0_burstcount(avm_kernel_rd_burstcount[41]),
      .avm_local_bb9_ld__u54_inst0_address(avm_kernel_rd_address[41]),
      .avm_local_bb9_ld__u54_inst0_writedata(avm_kernel_rd_writedata[41]),
      .avm_local_bb9_ld__u54_inst0_byteenable(avm_kernel_rd_byteenable[41]),
      .avm_local_bb9_ld__u54_inst0_waitrequest(avm_kernel_rd_waitrequest[41]),
      .avm_local_bb9_ld__u54_inst0_readdata(avm_kernel_rd_readdata[41]),
      .avm_local_bb9_ld__u54_inst0_readdatavalid(avm_kernel_rd_readdatavalid[41]),
      .avm_local_bb9_ld__u54_inst0_writeack(avm_kernel_rd_writeack[41]),
      // AVM avm_local_bb9_ld__u55_inst0
      .avm_local_bb9_ld__u55_inst0_enable(avm_kernel_rd_enable[42]),
      .avm_local_bb9_ld__u55_inst0_read(avm_kernel_rd_read[42]),
      .avm_local_bb9_ld__u55_inst0_write(avm_kernel_rd_write[42]),
      .avm_local_bb9_ld__u55_inst0_burstcount(avm_kernel_rd_burstcount[42]),
      .avm_local_bb9_ld__u55_inst0_address(avm_kernel_rd_address[42]),
      .avm_local_bb9_ld__u55_inst0_writedata(avm_kernel_rd_writedata[42]),
      .avm_local_bb9_ld__u55_inst0_byteenable(avm_kernel_rd_byteenable[42]),
      .avm_local_bb9_ld__u55_inst0_waitrequest(avm_kernel_rd_waitrequest[42]),
      .avm_local_bb9_ld__u55_inst0_readdata(avm_kernel_rd_readdata[42]),
      .avm_local_bb9_ld__u55_inst0_readdatavalid(avm_kernel_rd_readdatavalid[42]),
      .avm_local_bb9_ld__u55_inst0_writeack(avm_kernel_rd_writeack[42]),
      // AVM avm_local_bb9_ld__u56_inst0
      .avm_local_bb9_ld__u56_inst0_enable(avm_kernel_rd_enable[43]),
      .avm_local_bb9_ld__u56_inst0_read(avm_kernel_rd_read[43]),
      .avm_local_bb9_ld__u56_inst0_write(avm_kernel_rd_write[43]),
      .avm_local_bb9_ld__u56_inst0_burstcount(avm_kernel_rd_burstcount[43]),
      .avm_local_bb9_ld__u56_inst0_address(avm_kernel_rd_address[43]),
      .avm_local_bb9_ld__u56_inst0_writedata(avm_kernel_rd_writedata[43]),
      .avm_local_bb9_ld__u56_inst0_byteenable(avm_kernel_rd_byteenable[43]),
      .avm_local_bb9_ld__u56_inst0_waitrequest(avm_kernel_rd_waitrequest[43]),
      .avm_local_bb9_ld__u56_inst0_readdata(avm_kernel_rd_readdata[43]),
      .avm_local_bb9_ld__u56_inst0_readdatavalid(avm_kernel_rd_readdatavalid[43]),
      .avm_local_bb9_ld__u56_inst0_writeack(avm_kernel_rd_writeack[43]),
      // AVM avm_local_bb9_ld__u57_inst0
      .avm_local_bb9_ld__u57_inst0_enable(avm_kernel_rd_enable[44]),
      .avm_local_bb9_ld__u57_inst0_read(avm_kernel_rd_read[44]),
      .avm_local_bb9_ld__u57_inst0_write(avm_kernel_rd_write[44]),
      .avm_local_bb9_ld__u57_inst0_burstcount(avm_kernel_rd_burstcount[44]),
      .avm_local_bb9_ld__u57_inst0_address(avm_kernel_rd_address[44]),
      .avm_local_bb9_ld__u57_inst0_writedata(avm_kernel_rd_writedata[44]),
      .avm_local_bb9_ld__u57_inst0_byteenable(avm_kernel_rd_byteenable[44]),
      .avm_local_bb9_ld__u57_inst0_waitrequest(avm_kernel_rd_waitrequest[44]),
      .avm_local_bb9_ld__u57_inst0_readdata(avm_kernel_rd_readdata[44]),
      .avm_local_bb9_ld__u57_inst0_readdatavalid(avm_kernel_rd_readdatavalid[44]),
      .avm_local_bb9_ld__u57_inst0_writeack(avm_kernel_rd_writeack[44]),
      // AVM avm_local_bb9_ld__u58_inst0
      .avm_local_bb9_ld__u58_inst0_enable(avm_kernel_rd_enable[45]),
      .avm_local_bb9_ld__u58_inst0_read(avm_kernel_rd_read[45]),
      .avm_local_bb9_ld__u58_inst0_write(avm_kernel_rd_write[45]),
      .avm_local_bb9_ld__u58_inst0_burstcount(avm_kernel_rd_burstcount[45]),
      .avm_local_bb9_ld__u58_inst0_address(avm_kernel_rd_address[45]),
      .avm_local_bb9_ld__u58_inst0_writedata(avm_kernel_rd_writedata[45]),
      .avm_local_bb9_ld__u58_inst0_byteenable(avm_kernel_rd_byteenable[45]),
      .avm_local_bb9_ld__u58_inst0_waitrequest(avm_kernel_rd_waitrequest[45]),
      .avm_local_bb9_ld__u58_inst0_readdata(avm_kernel_rd_readdata[45]),
      .avm_local_bb9_ld__u58_inst0_readdatavalid(avm_kernel_rd_readdatavalid[45]),
      .avm_local_bb9_ld__u58_inst0_writeack(avm_kernel_rd_writeack[45]),
      // AVM avm_local_bb9_ld__u59_inst0
      .avm_local_bb9_ld__u59_inst0_enable(avm_kernel_rd_enable[46]),
      .avm_local_bb9_ld__u59_inst0_read(avm_kernel_rd_read[46]),
      .avm_local_bb9_ld__u59_inst0_write(avm_kernel_rd_write[46]),
      .avm_local_bb9_ld__u59_inst0_burstcount(avm_kernel_rd_burstcount[46]),
      .avm_local_bb9_ld__u59_inst0_address(avm_kernel_rd_address[46]),
      .avm_local_bb9_ld__u59_inst0_writedata(avm_kernel_rd_writedata[46]),
      .avm_local_bb9_ld__u59_inst0_byteenable(avm_kernel_rd_byteenable[46]),
      .avm_local_bb9_ld__u59_inst0_waitrequest(avm_kernel_rd_waitrequest[46]),
      .avm_local_bb9_ld__u59_inst0_readdata(avm_kernel_rd_readdata[46]),
      .avm_local_bb9_ld__u59_inst0_readdatavalid(avm_kernel_rd_readdatavalid[46]),
      .avm_local_bb9_ld__u59_inst0_writeack(avm_kernel_rd_writeack[46]),
      // AVM avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_enable(avm_kernel_rd_enable[47]),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_read(avm_kernel_rd_read[47]),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_write(avm_kernel_rd_write[47]),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_burstcount(avm_kernel_rd_burstcount[47]),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_address(avm_kernel_rd_address[47]),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_writedata(avm_kernel_rd_writedata[47]),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_byteenable(avm_kernel_rd_byteenable[47]),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_waitrequest(avm_kernel_rd_waitrequest[47]),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_readdata(avm_kernel_rd_readdata[47]),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_readdatavalid(avm_kernel_rd_readdatavalid[47]),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_writeack(avm_kernel_rd_writeack[47])
   );

   // INST calc_initpop_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element calc_initpop_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(calc_initpop_start_chain[0]),
      .start_kernel(calc_initpop_start_kernel_copy[0]),
      .start_finish_detector(calc_initpop_start_task_fd[0]),
      .start_finish_chain_element(calc_initpop_start_finish_element[0]),
      .start_chain()
   );

   assign gen_and_eval_newpops_start_chain[0] = gen_and_eval_newpops_start;
   assign gen_and_eval_newpops_finish_chain[0] = 1'b1;
   assign gen_and_eval_newpops_cra_pending_write = |gen_and_eval_newpops_pending_write;
   assign gen_and_eval_newpops_cra_lsu_active = |gen_and_eval_newpops_lsu_active;
   assign gen_and_eval_newpops_cra_valid_in = |gen_and_eval_newpops_valid_in;
   assign gen_and_eval_newpops_stall_in = 0;
   // INST gen_and_eval_newpops_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0)
   )
   gen_and_eval_newpops_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(gen_and_eval_newpops_start),
      .num_groups(gen_and_eval_newpops_num_groups),
      .local_size(gen_and_eval_newpops_local_size),
      .stall_in(gen_and_eval_newpops_wg_disp_stall_in),
      .valid_out(gen_and_eval_newpops_wg_disp_valid_out),
      .group_id_out(gen_and_eval_newpops_wg_disp_group_id_out),
      .global_id_base_out(gen_and_eval_newpops_wg_disp_global_id_base_out),
      .start_out(gen_and_eval_newpops_wg_disp_start_out),
      .dispatched_all_groups(gen_and_eval_newpops_wg_disp_dispatched_all_groups)
   );

   // INST gen_and_eval_newpops_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(19)
   )
   gen_and_eval_newpops_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(gen_and_eval_newpops_start),
      .wg_size(gen_and_eval_newpops_wg_size),
      .wg_dispatch_valid_out(gen_and_eval_newpops_wg_disp_valid_out),
      .wg_dispatch_stall_in(gen_and_eval_newpops_wg_disp_stall_in),
      .dispatched_all_groups(gen_and_eval_newpops_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(gen_and_eval_newpops_valid_out),
      .kernel_copy_stall_in(gen_and_eval_newpops_stall_in),
      .pending_writes(gen_and_eval_newpops_cra_pending_write),
      .finish(gen_and_eval_newpops_finish)
   );

   // INST gen_and_eval_newpops_cra_slave_inst of gen_and_eval_newpops_function_cra_slave
   gen_and_eval_newpops_function_cra_slave gen_and_eval_newpops_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(gen_and_eval_newpops_start),
      .finish(gen_and_eval_newpops_finish),
      .global_offset_0(gen_and_eval_newpops_global_offset[0]),
      .global_offset_1(gen_and_eval_newpops_global_offset[1]),
      .global_offset_2(gen_and_eval_newpops_global_offset[2]),
      .work_dim(gen_and_eval_newpops_work_dim),
      .has_a_lsu_active(gen_and_eval_newpops_cra_lsu_active),
      .has_a_write_pending(gen_and_eval_newpops_cra_pending_write),
      .valid_in(gen_and_eval_newpops_cra_valid_in),
      .global_size_0(gen_and_eval_newpops_global_size[0]),
      .global_size_1(gen_and_eval_newpops_global_size[1]),
      .global_size_2(gen_and_eval_newpops_global_size[2]),
      .num_groups_0(gen_and_eval_newpops_num_groups[0]),
      .num_groups_1(gen_and_eval_newpops_num_groups[1]),
      .num_groups_2(gen_and_eval_newpops_num_groups[2]),
      .local_size_0(gen_and_eval_newpops_local_size[0]),
      .local_size_1(gen_and_eval_newpops_local_size[1]),
      .local_size_2(gen_and_eval_newpops_local_size[2]),
      .workgroup_size(gen_and_eval_newpops_wg_size),
      .kernel_arguments(gen_and_eval_newpops_kernel_arguments),
      .cra_irq(kernel_irqs[1]),
      // AVS avs_cra
      .avs_cra_enable(avs_gen_and_eval_newpops_cra_enable),
      .avs_cra_read(avs_gen_and_eval_newpops_cra_read),
      .avs_cra_write(avs_gen_and_eval_newpops_cra_write),
      .avs_cra_address(avs_gen_and_eval_newpops_cra_address),
      .avs_cra_writedata(avs_gen_and_eval_newpops_cra_writedata),
      .avs_cra_byteenable(avs_gen_and_eval_newpops_cra_byteenable),
      .avs_cra_readdata(avs_gen_and_eval_newpops_cra_readdata),
      .avs_cra_readdatavalid(avs_gen_and_eval_newpops_cra_readdatavalid)
   );

   // INST gen_and_eval_newpops_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(5),
      .LOCAL_WIDTH_Y(1),
      .LOCAL_WIDTH_Z(1),
      .ENABLE_TESSELLATION(1)
   )
   gen_and_eval_newpops_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(gen_and_eval_newpops_wg_disp_start_out),
      .valid_in(gen_and_eval_newpops_wg_disp_valid_out[0]),
      .stall_out(gen_and_eval_newpops_wg_disp_stall_in[0]),
      .stall_in(gen_and_eval_newpops_stall_out[0]),
      .valid_out(gen_and_eval_newpops_valid_in[0]),
      .group_id_in(gen_and_eval_newpops_wg_disp_group_id_out),
      .global_id_base_in(gen_and_eval_newpops_wg_disp_global_id_base_out),
      .local_size(gen_and_eval_newpops_local_size),
      .global_size(gen_and_eval_newpops_global_size),
      .local_id(gen_and_eval_newpops_local_id[0]),
      .global_id(gen_and_eval_newpops_global_id[0]),
      .group_id(gen_and_eval_newpops_group_id[0])
   );

   // INST gen_and_eval_newpops_inst_0 of gen_and_eval_newpops_top_wrapper_0
   gen_and_eval_newpops_top_wrapper_0 gen_and_eval_newpops_inst_0
   (
      .start(gen_and_eval_newpops_start_kernel_copy[0]),
      .kernel_arguments(gen_and_eval_newpops_kernel_arguments),
      .work_dim(gen_and_eval_newpops_work_dim),
      .global_offset(gen_and_eval_newpops_global_offset),
      .kernel_valid_out(gen_and_eval_newpops_valid_out[0]),
      .has_a_write_pending(gen_and_eval_newpops_pending_write[0]),
      .has_a_lsu_active(gen_and_eval_newpops_lsu_active[0]),
      .global_id(gen_and_eval_newpops_global_id[0]),
      .local_id(gen_and_eval_newpops_local_id[0]),
      .group_id(gen_and_eval_newpops_group_id[0]),
      .global_size(gen_and_eval_newpops_global_size),
      .local_size(gen_and_eval_newpops_local_size),
      .num_groups(gen_and_eval_newpops_num_groups),
      .workgroup_size(gen_and_eval_newpops_wg_size),
      .kernel_stall_out(gen_and_eval_newpops_stall_out[0]),
      .kernel_valid_in(gen_and_eval_newpops_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_local_bb11_ld__353_inst0
      .avm_local_bb11_ld__353_inst0_enable(avm_kernel_rd_enable[48]),
      .avm_local_bb11_ld__353_inst0_read(avm_kernel_rd_read[48]),
      .avm_local_bb11_ld__353_inst0_write(avm_kernel_rd_write[48]),
      .avm_local_bb11_ld__353_inst0_burstcount(avm_kernel_rd_burstcount[48]),
      .avm_local_bb11_ld__353_inst0_address(avm_kernel_rd_address[48]),
      .avm_local_bb11_ld__353_inst0_writedata(avm_kernel_rd_writedata[48]),
      .avm_local_bb11_ld__353_inst0_byteenable(avm_kernel_rd_byteenable[48]),
      .avm_local_bb11_ld__353_inst0_waitrequest(avm_kernel_rd_waitrequest[48]),
      .avm_local_bb11_ld__353_inst0_readdata(avm_kernel_rd_readdata[48]),
      .avm_local_bb11_ld__353_inst0_readdatavalid(avm_kernel_rd_readdatavalid[48]),
      .avm_local_bb11_ld__353_inst0_writeack(avm_kernel_rd_writeack[48]),
      // AVM avm_local_bb12_ld__inst0
      .avm_local_bb12_ld__inst0_enable(avm_kernel_rd_enable[49]),
      .avm_local_bb12_ld__inst0_read(avm_kernel_rd_read[49]),
      .avm_local_bb12_ld__inst0_write(avm_kernel_rd_write[49]),
      .avm_local_bb12_ld__inst0_burstcount(avm_kernel_rd_burstcount[49]),
      .avm_local_bb12_ld__inst0_address(avm_kernel_rd_address[49]),
      .avm_local_bb12_ld__inst0_writedata(avm_kernel_rd_writedata[49]),
      .avm_local_bb12_ld__inst0_byteenable(avm_kernel_rd_byteenable[49]),
      .avm_local_bb12_ld__inst0_waitrequest(avm_kernel_rd_waitrequest[49]),
      .avm_local_bb12_ld__inst0_readdata(avm_kernel_rd_readdata[49]),
      .avm_local_bb12_ld__inst0_readdatavalid(avm_kernel_rd_readdatavalid[49]),
      .avm_local_bb12_ld__inst0_writeack(avm_kernel_rd_writeack[49]),
      // AVM avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_enable(avm_kernel_rd_enable[50]),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_read(avm_kernel_rd_read[50]),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_write(avm_kernel_rd_write[50]),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_burstcount(avm_kernel_rd_burstcount[50]),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_address(avm_kernel_rd_address[50]),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_writedata(avm_kernel_rd_writedata[50]),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_byteenable(avm_kernel_rd_byteenable[50]),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_waitrequest(avm_kernel_rd_waitrequest[50]),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_readdata(avm_kernel_rd_readdata[50]),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_readdatavalid(avm_kernel_rd_readdatavalid[50]),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_writeack(avm_kernel_rd_writeack[50]),
      // AVM avm_local_bb19_st_select457_inst0
      .avm_local_bb19_st_select457_inst0_enable(avm_kernel_wr_enable[2]),
      .avm_local_bb19_st_select457_inst0_read(avm_kernel_wr_read[2]),
      .avm_local_bb19_st_select457_inst0_write(avm_kernel_wr_write[2]),
      .avm_local_bb19_st_select457_inst0_burstcount(avm_kernel_wr_burstcount[2]),
      .avm_local_bb19_st_select457_inst0_address(avm_kernel_wr_address[2]),
      .avm_local_bb19_st_select457_inst0_writedata(avm_kernel_wr_writedata[2]),
      .avm_local_bb19_st_select457_inst0_byteenable(avm_kernel_wr_byteenable[2]),
      .avm_local_bb19_st_select457_inst0_waitrequest(avm_kernel_wr_waitrequest[2]),
      .avm_local_bb19_st_select457_inst0_readdata(avm_kernel_wr_readdata[2]),
      .avm_local_bb19_st_select457_inst0_readdatavalid(avm_kernel_wr_readdatavalid[2]),
      .avm_local_bb19_st_select457_inst0_writeack(avm_kernel_wr_writeack[2]),
      // AVM avm_local_bb1_ld__inst0
      .avm_local_bb1_ld__inst0_enable(avm_kernel_rd_enable[51]),
      .avm_local_bb1_ld__inst0_read(avm_kernel_rd_read[51]),
      .avm_local_bb1_ld__inst0_write(avm_kernel_rd_write[51]),
      .avm_local_bb1_ld__inst0_burstcount(avm_kernel_rd_burstcount[51]),
      .avm_local_bb1_ld__inst0_address(avm_kernel_rd_address[51]),
      .avm_local_bb1_ld__inst0_writedata(avm_kernel_rd_writedata[51]),
      .avm_local_bb1_ld__inst0_byteenable(avm_kernel_rd_byteenable[51]),
      .avm_local_bb1_ld__inst0_waitrequest(avm_kernel_rd_waitrequest[51]),
      .avm_local_bb1_ld__inst0_readdata(avm_kernel_rd_readdata[51]),
      .avm_local_bb1_ld__inst0_readdatavalid(avm_kernel_rd_readdatavalid[51]),
      .avm_local_bb1_ld__inst0_writeack(avm_kernel_rd_writeack[51]),
      // AVM avm_local_bb1_ld_arrayidx_i_i_promoted_inst0
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_enable(avm_kernel_rd_enable[52]),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_read(avm_kernel_rd_read[52]),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_write(avm_kernel_rd_write[52]),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_burstcount(avm_kernel_rd_burstcount[52]),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_address(avm_kernel_rd_address[52]),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_writedata(avm_kernel_rd_writedata[52]),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_byteenable(avm_kernel_rd_byteenable[52]),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_waitrequest(avm_kernel_rd_waitrequest[52]),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_readdata(avm_kernel_rd_readdata[52]),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_readdatavalid(avm_kernel_rd_readdatavalid[52]),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_writeack(avm_kernel_rd_writeack[52]),
      // AVM avm_local_bb22_ld__378_inst0
      .avm_local_bb22_ld__378_inst0_enable(avm_kernel_rd_enable[53]),
      .avm_local_bb22_ld__378_inst0_read(avm_kernel_rd_read[53]),
      .avm_local_bb22_ld__378_inst0_write(avm_kernel_rd_write[53]),
      .avm_local_bb22_ld__378_inst0_burstcount(avm_kernel_rd_burstcount[53]),
      .avm_local_bb22_ld__378_inst0_address(avm_kernel_rd_address[53]),
      .avm_local_bb22_ld__378_inst0_writedata(avm_kernel_rd_writedata[53]),
      .avm_local_bb22_ld__378_inst0_byteenable(avm_kernel_rd_byteenable[53]),
      .avm_local_bb22_ld__378_inst0_waitrequest(avm_kernel_rd_waitrequest[53]),
      .avm_local_bb22_ld__378_inst0_readdata(avm_kernel_rd_readdata[53]),
      .avm_local_bb22_ld__378_inst0_readdatavalid(avm_kernel_rd_readdatavalid[53]),
      .avm_local_bb22_ld__378_inst0_writeack(avm_kernel_rd_writeack[53]),
      // AVM avm_local_bb22_ld__380_inst0
      .avm_local_bb22_ld__380_inst0_enable(avm_kernel_rd_enable[54]),
      .avm_local_bb22_ld__380_inst0_read(avm_kernel_rd_read[54]),
      .avm_local_bb22_ld__380_inst0_write(avm_kernel_rd_write[54]),
      .avm_local_bb22_ld__380_inst0_burstcount(avm_kernel_rd_burstcount[54]),
      .avm_local_bb22_ld__380_inst0_address(avm_kernel_rd_address[54]),
      .avm_local_bb22_ld__380_inst0_writedata(avm_kernel_rd_writedata[54]),
      .avm_local_bb22_ld__380_inst0_byteenable(avm_kernel_rd_byteenable[54]),
      .avm_local_bb22_ld__380_inst0_waitrequest(avm_kernel_rd_waitrequest[54]),
      .avm_local_bb22_ld__380_inst0_readdata(avm_kernel_rd_readdata[54]),
      .avm_local_bb22_ld__380_inst0_readdatavalid(avm_kernel_rd_readdatavalid[54]),
      .avm_local_bb22_ld__380_inst0_writeack(avm_kernel_rd_writeack[54]),
      // AVM avm_local_bb22_ld__382_inst0
      .avm_local_bb22_ld__382_inst0_enable(avm_kernel_rd_enable[55]),
      .avm_local_bb22_ld__382_inst0_read(avm_kernel_rd_read[55]),
      .avm_local_bb22_ld__382_inst0_write(avm_kernel_rd_write[55]),
      .avm_local_bb22_ld__382_inst0_burstcount(avm_kernel_rd_burstcount[55]),
      .avm_local_bb22_ld__382_inst0_address(avm_kernel_rd_address[55]),
      .avm_local_bb22_ld__382_inst0_writedata(avm_kernel_rd_writedata[55]),
      .avm_local_bb22_ld__382_inst0_byteenable(avm_kernel_rd_byteenable[55]),
      .avm_local_bb22_ld__382_inst0_waitrequest(avm_kernel_rd_waitrequest[55]),
      .avm_local_bb22_ld__382_inst0_readdata(avm_kernel_rd_readdata[55]),
      .avm_local_bb22_ld__382_inst0_readdatavalid(avm_kernel_rd_readdatavalid[55]),
      .avm_local_bb22_ld__382_inst0_writeack(avm_kernel_rd_writeack[55]),
      // AVM avm_local_bb22_ld__384_inst0
      .avm_local_bb22_ld__384_inst0_enable(avm_kernel_rd_enable[56]),
      .avm_local_bb22_ld__384_inst0_read(avm_kernel_rd_read[56]),
      .avm_local_bb22_ld__384_inst0_write(avm_kernel_rd_write[56]),
      .avm_local_bb22_ld__384_inst0_burstcount(avm_kernel_rd_burstcount[56]),
      .avm_local_bb22_ld__384_inst0_address(avm_kernel_rd_address[56]),
      .avm_local_bb22_ld__384_inst0_writedata(avm_kernel_rd_writedata[56]),
      .avm_local_bb22_ld__384_inst0_byteenable(avm_kernel_rd_byteenable[56]),
      .avm_local_bb22_ld__384_inst0_waitrequest(avm_kernel_rd_waitrequest[56]),
      .avm_local_bb22_ld__384_inst0_readdata(avm_kernel_rd_readdata[56]),
      .avm_local_bb22_ld__384_inst0_readdatavalid(avm_kernel_rd_readdatavalid[56]),
      .avm_local_bb22_ld__384_inst0_writeack(avm_kernel_rd_writeack[56]),
      // AVM avm_local_bb22_ld__inst0
      .avm_local_bb22_ld__inst0_enable(avm_kernel_rd_enable[57]),
      .avm_local_bb22_ld__inst0_read(avm_kernel_rd_read[57]),
      .avm_local_bb22_ld__inst0_write(avm_kernel_rd_write[57]),
      .avm_local_bb22_ld__inst0_burstcount(avm_kernel_rd_burstcount[57]),
      .avm_local_bb22_ld__inst0_address(avm_kernel_rd_address[57]),
      .avm_local_bb22_ld__inst0_writedata(avm_kernel_rd_writedata[57]),
      .avm_local_bb22_ld__inst0_byteenable(avm_kernel_rd_byteenable[57]),
      .avm_local_bb22_ld__inst0_waitrequest(avm_kernel_rd_waitrequest[57]),
      .avm_local_bb22_ld__inst0_readdata(avm_kernel_rd_readdata[57]),
      .avm_local_bb22_ld__inst0_readdatavalid(avm_kernel_rd_readdatavalid[57]),
      .avm_local_bb22_ld__inst0_writeack(avm_kernel_rd_writeack[57]),
      // AVM avm_local_bb22_ld__u62_inst0
      .avm_local_bb22_ld__u62_inst0_enable(avm_kernel_rd_enable[58]),
      .avm_local_bb22_ld__u62_inst0_read(avm_kernel_rd_read[58]),
      .avm_local_bb22_ld__u62_inst0_write(avm_kernel_rd_write[58]),
      .avm_local_bb22_ld__u62_inst0_burstcount(avm_kernel_rd_burstcount[58]),
      .avm_local_bb22_ld__u62_inst0_address(avm_kernel_rd_address[58]),
      .avm_local_bb22_ld__u62_inst0_writedata(avm_kernel_rd_writedata[58]),
      .avm_local_bb22_ld__u62_inst0_byteenable(avm_kernel_rd_byteenable[58]),
      .avm_local_bb22_ld__u62_inst0_waitrequest(avm_kernel_rd_waitrequest[58]),
      .avm_local_bb22_ld__u62_inst0_readdata(avm_kernel_rd_readdata[58]),
      .avm_local_bb22_ld__u62_inst0_readdatavalid(avm_kernel_rd_readdatavalid[58]),
      .avm_local_bb22_ld__u62_inst0_writeack(avm_kernel_rd_writeack[58]),
      // AVM avm_local_bb22_ld__u63_inst0
      .avm_local_bb22_ld__u63_inst0_enable(avm_kernel_rd_enable[59]),
      .avm_local_bb22_ld__u63_inst0_read(avm_kernel_rd_read[59]),
      .avm_local_bb22_ld__u63_inst0_write(avm_kernel_rd_write[59]),
      .avm_local_bb22_ld__u63_inst0_burstcount(avm_kernel_rd_burstcount[59]),
      .avm_local_bb22_ld__u63_inst0_address(avm_kernel_rd_address[59]),
      .avm_local_bb22_ld__u63_inst0_writedata(avm_kernel_rd_writedata[59]),
      .avm_local_bb22_ld__u63_inst0_byteenable(avm_kernel_rd_byteenable[59]),
      .avm_local_bb22_ld__u63_inst0_waitrequest(avm_kernel_rd_waitrequest[59]),
      .avm_local_bb22_ld__u63_inst0_readdata(avm_kernel_rd_readdata[59]),
      .avm_local_bb22_ld__u63_inst0_readdatavalid(avm_kernel_rd_readdatavalid[59]),
      .avm_local_bb22_ld__u63_inst0_writeack(avm_kernel_rd_writeack[59]),
      // AVM avm_local_bb22_ld__u64_inst0
      .avm_local_bb22_ld__u64_inst0_enable(avm_kernel_rd_enable[60]),
      .avm_local_bb22_ld__u64_inst0_read(avm_kernel_rd_read[60]),
      .avm_local_bb22_ld__u64_inst0_write(avm_kernel_rd_write[60]),
      .avm_local_bb22_ld__u64_inst0_burstcount(avm_kernel_rd_burstcount[60]),
      .avm_local_bb22_ld__u64_inst0_address(avm_kernel_rd_address[60]),
      .avm_local_bb22_ld__u64_inst0_writedata(avm_kernel_rd_writedata[60]),
      .avm_local_bb22_ld__u64_inst0_byteenable(avm_kernel_rd_byteenable[60]),
      .avm_local_bb22_ld__u64_inst0_waitrequest(avm_kernel_rd_waitrequest[60]),
      .avm_local_bb22_ld__u64_inst0_readdata(avm_kernel_rd_readdata[60]),
      .avm_local_bb22_ld__u64_inst0_readdatavalid(avm_kernel_rd_readdatavalid[60]),
      .avm_local_bb22_ld__u64_inst0_writeack(avm_kernel_rd_writeack[60]),
      // AVM avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_enable(avm_kernel_rd_enable[61]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_read(avm_kernel_rd_read[61]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_write(avm_kernel_rd_write[61]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_burstcount(avm_kernel_rd_burstcount[61]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_address(avm_kernel_rd_address[61]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_writedata(avm_kernel_rd_writedata[61]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_byteenable(avm_kernel_rd_byteenable[61]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_waitrequest(avm_kernel_rd_waitrequest[61]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_readdata(avm_kernel_rd_readdata[61]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_readdatavalid(avm_kernel_rd_readdatavalid[61]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_writeack(avm_kernel_rd_writeack[61]),
      // AVM avm_local_bb24_ld__u69_inst0
      .avm_local_bb24_ld__u69_inst0_enable(avm_kernel_rd_enable[62]),
      .avm_local_bb24_ld__u69_inst0_read(avm_kernel_rd_read[62]),
      .avm_local_bb24_ld__u69_inst0_write(avm_kernel_rd_write[62]),
      .avm_local_bb24_ld__u69_inst0_burstcount(avm_kernel_rd_burstcount[62]),
      .avm_local_bb24_ld__u69_inst0_address(avm_kernel_rd_address[62]),
      .avm_local_bb24_ld__u69_inst0_writedata(avm_kernel_rd_writedata[62]),
      .avm_local_bb24_ld__u69_inst0_byteenable(avm_kernel_rd_byteenable[62]),
      .avm_local_bb24_ld__u69_inst0_waitrequest(avm_kernel_rd_waitrequest[62]),
      .avm_local_bb24_ld__u69_inst0_readdata(avm_kernel_rd_readdata[62]),
      .avm_local_bb24_ld__u69_inst0_readdatavalid(avm_kernel_rd_readdatavalid[62]),
      .avm_local_bb24_ld__u69_inst0_writeack(avm_kernel_rd_writeack[62]),
      // AVM avm_local_bb24_ld__u70_inst0
      .avm_local_bb24_ld__u70_inst0_enable(avm_kernel_rd_enable[63]),
      .avm_local_bb24_ld__u70_inst0_read(avm_kernel_rd_read[63]),
      .avm_local_bb24_ld__u70_inst0_write(avm_kernel_rd_write[63]),
      .avm_local_bb24_ld__u70_inst0_burstcount(avm_kernel_rd_burstcount[63]),
      .avm_local_bb24_ld__u70_inst0_address(avm_kernel_rd_address[63]),
      .avm_local_bb24_ld__u70_inst0_writedata(avm_kernel_rd_writedata[63]),
      .avm_local_bb24_ld__u70_inst0_byteenable(avm_kernel_rd_byteenable[63]),
      .avm_local_bb24_ld__u70_inst0_waitrequest(avm_kernel_rd_waitrequest[63]),
      .avm_local_bb24_ld__u70_inst0_readdata(avm_kernel_rd_readdata[63]),
      .avm_local_bb24_ld__u70_inst0_readdatavalid(avm_kernel_rd_readdatavalid[63]),
      .avm_local_bb24_ld__u70_inst0_writeack(avm_kernel_rd_writeack[63]),
      // AVM avm_local_bb24_ld__u71_inst0
      .avm_local_bb24_ld__u71_inst0_enable(avm_kernel_rd_enable[64]),
      .avm_local_bb24_ld__u71_inst0_read(avm_kernel_rd_read[64]),
      .avm_local_bb24_ld__u71_inst0_write(avm_kernel_rd_write[64]),
      .avm_local_bb24_ld__u71_inst0_burstcount(avm_kernel_rd_burstcount[64]),
      .avm_local_bb24_ld__u71_inst0_address(avm_kernel_rd_address[64]),
      .avm_local_bb24_ld__u71_inst0_writedata(avm_kernel_rd_writedata[64]),
      .avm_local_bb24_ld__u71_inst0_byteenable(avm_kernel_rd_byteenable[64]),
      .avm_local_bb24_ld__u71_inst0_waitrequest(avm_kernel_rd_waitrequest[64]),
      .avm_local_bb24_ld__u71_inst0_readdata(avm_kernel_rd_readdata[64]),
      .avm_local_bb24_ld__u71_inst0_readdatavalid(avm_kernel_rd_readdatavalid[64]),
      .avm_local_bb24_ld__u71_inst0_writeack(avm_kernel_rd_writeack[64]),
      // AVM avm_local_bb24_ld__u72_inst0
      .avm_local_bb24_ld__u72_inst0_enable(avm_kernel_rd_enable[65]),
      .avm_local_bb24_ld__u72_inst0_read(avm_kernel_rd_read[65]),
      .avm_local_bb24_ld__u72_inst0_write(avm_kernel_rd_write[65]),
      .avm_local_bb24_ld__u72_inst0_burstcount(avm_kernel_rd_burstcount[65]),
      .avm_local_bb24_ld__u72_inst0_address(avm_kernel_rd_address[65]),
      .avm_local_bb24_ld__u72_inst0_writedata(avm_kernel_rd_writedata[65]),
      .avm_local_bb24_ld__u72_inst0_byteenable(avm_kernel_rd_byteenable[65]),
      .avm_local_bb24_ld__u72_inst0_waitrequest(avm_kernel_rd_waitrequest[65]),
      .avm_local_bb24_ld__u72_inst0_readdata(avm_kernel_rd_readdata[65]),
      .avm_local_bb24_ld__u72_inst0_readdatavalid(avm_kernel_rd_readdatavalid[65]),
      .avm_local_bb24_ld__u72_inst0_writeack(avm_kernel_rd_writeack[65]),
      // AVM avm_local_bb24_ld__u73_inst0
      .avm_local_bb24_ld__u73_inst0_enable(avm_kernel_rd_enable[66]),
      .avm_local_bb24_ld__u73_inst0_read(avm_kernel_rd_read[66]),
      .avm_local_bb24_ld__u73_inst0_write(avm_kernel_rd_write[66]),
      .avm_local_bb24_ld__u73_inst0_burstcount(avm_kernel_rd_burstcount[66]),
      .avm_local_bb24_ld__u73_inst0_address(avm_kernel_rd_address[66]),
      .avm_local_bb24_ld__u73_inst0_writedata(avm_kernel_rd_writedata[66]),
      .avm_local_bb24_ld__u73_inst0_byteenable(avm_kernel_rd_byteenable[66]),
      .avm_local_bb24_ld__u73_inst0_waitrequest(avm_kernel_rd_waitrequest[66]),
      .avm_local_bb24_ld__u73_inst0_readdata(avm_kernel_rd_readdata[66]),
      .avm_local_bb24_ld__u73_inst0_readdatavalid(avm_kernel_rd_readdatavalid[66]),
      .avm_local_bb24_ld__u73_inst0_writeack(avm_kernel_rd_writeack[66]),
      // AVM avm_local_bb24_ld__u74_inst0
      .avm_local_bb24_ld__u74_inst0_enable(avm_kernel_rd_enable[67]),
      .avm_local_bb24_ld__u74_inst0_read(avm_kernel_rd_read[67]),
      .avm_local_bb24_ld__u74_inst0_write(avm_kernel_rd_write[67]),
      .avm_local_bb24_ld__u74_inst0_burstcount(avm_kernel_rd_burstcount[67]),
      .avm_local_bb24_ld__u74_inst0_address(avm_kernel_rd_address[67]),
      .avm_local_bb24_ld__u74_inst0_writedata(avm_kernel_rd_writedata[67]),
      .avm_local_bb24_ld__u74_inst0_byteenable(avm_kernel_rd_byteenable[67]),
      .avm_local_bb24_ld__u74_inst0_waitrequest(avm_kernel_rd_waitrequest[67]),
      .avm_local_bb24_ld__u74_inst0_readdata(avm_kernel_rd_readdata[67]),
      .avm_local_bb24_ld__u74_inst0_readdatavalid(avm_kernel_rd_readdatavalid[67]),
      .avm_local_bb24_ld__u74_inst0_writeack(avm_kernel_rd_writeack[67]),
      // AVM avm_local_bb24_ld__u75_inst0
      .avm_local_bb24_ld__u75_inst0_enable(avm_kernel_rd_enable[68]),
      .avm_local_bb24_ld__u75_inst0_read(avm_kernel_rd_read[68]),
      .avm_local_bb24_ld__u75_inst0_write(avm_kernel_rd_write[68]),
      .avm_local_bb24_ld__u75_inst0_burstcount(avm_kernel_rd_burstcount[68]),
      .avm_local_bb24_ld__u75_inst0_address(avm_kernel_rd_address[68]),
      .avm_local_bb24_ld__u75_inst0_writedata(avm_kernel_rd_writedata[68]),
      .avm_local_bb24_ld__u75_inst0_byteenable(avm_kernel_rd_byteenable[68]),
      .avm_local_bb24_ld__u75_inst0_waitrequest(avm_kernel_rd_waitrequest[68]),
      .avm_local_bb24_ld__u75_inst0_readdata(avm_kernel_rd_readdata[68]),
      .avm_local_bb24_ld__u75_inst0_readdatavalid(avm_kernel_rd_readdatavalid[68]),
      .avm_local_bb24_ld__u75_inst0_writeack(avm_kernel_rd_writeack[68]),
      // AVM avm_local_bb24_ld__u76_inst0
      .avm_local_bb24_ld__u76_inst0_enable(avm_kernel_rd_enable[69]),
      .avm_local_bb24_ld__u76_inst0_read(avm_kernel_rd_read[69]),
      .avm_local_bb24_ld__u76_inst0_write(avm_kernel_rd_write[69]),
      .avm_local_bb24_ld__u76_inst0_burstcount(avm_kernel_rd_burstcount[69]),
      .avm_local_bb24_ld__u76_inst0_address(avm_kernel_rd_address[69]),
      .avm_local_bb24_ld__u76_inst0_writedata(avm_kernel_rd_writedata[69]),
      .avm_local_bb24_ld__u76_inst0_byteenable(avm_kernel_rd_byteenable[69]),
      .avm_local_bb24_ld__u76_inst0_waitrequest(avm_kernel_rd_waitrequest[69]),
      .avm_local_bb24_ld__u76_inst0_readdata(avm_kernel_rd_readdata[69]),
      .avm_local_bb24_ld__u76_inst0_readdatavalid(avm_kernel_rd_readdatavalid[69]),
      .avm_local_bb24_ld__u76_inst0_writeack(avm_kernel_rd_writeack[69]),
      // AVM avm_local_bb24_ld__u77_inst0
      .avm_local_bb24_ld__u77_inst0_enable(avm_kernel_rd_enable[70]),
      .avm_local_bb24_ld__u77_inst0_read(avm_kernel_rd_read[70]),
      .avm_local_bb24_ld__u77_inst0_write(avm_kernel_rd_write[70]),
      .avm_local_bb24_ld__u77_inst0_burstcount(avm_kernel_rd_burstcount[70]),
      .avm_local_bb24_ld__u77_inst0_address(avm_kernel_rd_address[70]),
      .avm_local_bb24_ld__u77_inst0_writedata(avm_kernel_rd_writedata[70]),
      .avm_local_bb24_ld__u77_inst0_byteenable(avm_kernel_rd_byteenable[70]),
      .avm_local_bb24_ld__u77_inst0_waitrequest(avm_kernel_rd_waitrequest[70]),
      .avm_local_bb24_ld__u77_inst0_readdata(avm_kernel_rd_readdata[70]),
      .avm_local_bb24_ld__u77_inst0_readdatavalid(avm_kernel_rd_readdatavalid[70]),
      .avm_local_bb24_ld__u77_inst0_writeack(avm_kernel_rd_writeack[70]),
      // AVM avm_local_bb24_ld__u78_inst0
      .avm_local_bb24_ld__u78_inst0_enable(avm_kernel_rd_enable[71]),
      .avm_local_bb24_ld__u78_inst0_read(avm_kernel_rd_read[71]),
      .avm_local_bb24_ld__u78_inst0_write(avm_kernel_rd_write[71]),
      .avm_local_bb24_ld__u78_inst0_burstcount(avm_kernel_rd_burstcount[71]),
      .avm_local_bb24_ld__u78_inst0_address(avm_kernel_rd_address[71]),
      .avm_local_bb24_ld__u78_inst0_writedata(avm_kernel_rd_writedata[71]),
      .avm_local_bb24_ld__u78_inst0_byteenable(avm_kernel_rd_byteenable[71]),
      .avm_local_bb24_ld__u78_inst0_waitrequest(avm_kernel_rd_waitrequest[71]),
      .avm_local_bb24_ld__u78_inst0_readdata(avm_kernel_rd_readdata[71]),
      .avm_local_bb24_ld__u78_inst0_readdatavalid(avm_kernel_rd_readdatavalid[71]),
      .avm_local_bb24_ld__u78_inst0_writeack(avm_kernel_rd_writeack[71]),
      // AVM avm_local_bb24_ld__u79_inst0
      .avm_local_bb24_ld__u79_inst0_enable(avm_kernel_rd_enable[72]),
      .avm_local_bb24_ld__u79_inst0_read(avm_kernel_rd_read[72]),
      .avm_local_bb24_ld__u79_inst0_write(avm_kernel_rd_write[72]),
      .avm_local_bb24_ld__u79_inst0_burstcount(avm_kernel_rd_burstcount[72]),
      .avm_local_bb24_ld__u79_inst0_address(avm_kernel_rd_address[72]),
      .avm_local_bb24_ld__u79_inst0_writedata(avm_kernel_rd_writedata[72]),
      .avm_local_bb24_ld__u79_inst0_byteenable(avm_kernel_rd_byteenable[72]),
      .avm_local_bb24_ld__u79_inst0_waitrequest(avm_kernel_rd_waitrequest[72]),
      .avm_local_bb24_ld__u79_inst0_readdata(avm_kernel_rd_readdata[72]),
      .avm_local_bb24_ld__u79_inst0_readdatavalid(avm_kernel_rd_readdatavalid[72]),
      .avm_local_bb24_ld__u79_inst0_writeack(avm_kernel_rd_writeack[72]),
      // AVM avm_local_bb24_ld__u80_inst0
      .avm_local_bb24_ld__u80_inst0_enable(avm_kernel_rd_enable[73]),
      .avm_local_bb24_ld__u80_inst0_read(avm_kernel_rd_read[73]),
      .avm_local_bb24_ld__u80_inst0_write(avm_kernel_rd_write[73]),
      .avm_local_bb24_ld__u80_inst0_burstcount(avm_kernel_rd_burstcount[73]),
      .avm_local_bb24_ld__u80_inst0_address(avm_kernel_rd_address[73]),
      .avm_local_bb24_ld__u80_inst0_writedata(avm_kernel_rd_writedata[73]),
      .avm_local_bb24_ld__u80_inst0_byteenable(avm_kernel_rd_byteenable[73]),
      .avm_local_bb24_ld__u80_inst0_waitrequest(avm_kernel_rd_waitrequest[73]),
      .avm_local_bb24_ld__u80_inst0_readdata(avm_kernel_rd_readdata[73]),
      .avm_local_bb24_ld__u80_inst0_readdatavalid(avm_kernel_rd_readdatavalid[73]),
      .avm_local_bb24_ld__u80_inst0_writeack(avm_kernel_rd_writeack[73]),
      // AVM avm_local_bb24_ld__u81_inst0
      .avm_local_bb24_ld__u81_inst0_enable(avm_kernel_rd_enable[74]),
      .avm_local_bb24_ld__u81_inst0_read(avm_kernel_rd_read[74]),
      .avm_local_bb24_ld__u81_inst0_write(avm_kernel_rd_write[74]),
      .avm_local_bb24_ld__u81_inst0_burstcount(avm_kernel_rd_burstcount[74]),
      .avm_local_bb24_ld__u81_inst0_address(avm_kernel_rd_address[74]),
      .avm_local_bb24_ld__u81_inst0_writedata(avm_kernel_rd_writedata[74]),
      .avm_local_bb24_ld__u81_inst0_byteenable(avm_kernel_rd_byteenable[74]),
      .avm_local_bb24_ld__u81_inst0_waitrequest(avm_kernel_rd_waitrequest[74]),
      .avm_local_bb24_ld__u81_inst0_readdata(avm_kernel_rd_readdata[74]),
      .avm_local_bb24_ld__u81_inst0_readdatavalid(avm_kernel_rd_readdatavalid[74]),
      .avm_local_bb24_ld__u81_inst0_writeack(avm_kernel_rd_writeack[74]),
      // AVM avm_local_bb24_ld__u82_inst0
      .avm_local_bb24_ld__u82_inst0_enable(avm_kernel_rd_enable[75]),
      .avm_local_bb24_ld__u82_inst0_read(avm_kernel_rd_read[75]),
      .avm_local_bb24_ld__u82_inst0_write(avm_kernel_rd_write[75]),
      .avm_local_bb24_ld__u82_inst0_burstcount(avm_kernel_rd_burstcount[75]),
      .avm_local_bb24_ld__u82_inst0_address(avm_kernel_rd_address[75]),
      .avm_local_bb24_ld__u82_inst0_writedata(avm_kernel_rd_writedata[75]),
      .avm_local_bb24_ld__u82_inst0_byteenable(avm_kernel_rd_byteenable[75]),
      .avm_local_bb24_ld__u82_inst0_waitrequest(avm_kernel_rd_waitrequest[75]),
      .avm_local_bb24_ld__u82_inst0_readdata(avm_kernel_rd_readdata[75]),
      .avm_local_bb24_ld__u82_inst0_readdatavalid(avm_kernel_rd_readdatavalid[75]),
      .avm_local_bb24_ld__u82_inst0_writeack(avm_kernel_rd_writeack[75]),
      // AVM avm_local_bb24_ld__u83_inst0
      .avm_local_bb24_ld__u83_inst0_enable(avm_kernel_rd_enable[76]),
      .avm_local_bb24_ld__u83_inst0_read(avm_kernel_rd_read[76]),
      .avm_local_bb24_ld__u83_inst0_write(avm_kernel_rd_write[76]),
      .avm_local_bb24_ld__u83_inst0_burstcount(avm_kernel_rd_burstcount[76]),
      .avm_local_bb24_ld__u83_inst0_address(avm_kernel_rd_address[76]),
      .avm_local_bb24_ld__u83_inst0_writedata(avm_kernel_rd_writedata[76]),
      .avm_local_bb24_ld__u83_inst0_byteenable(avm_kernel_rd_byteenable[76]),
      .avm_local_bb24_ld__u83_inst0_waitrequest(avm_kernel_rd_waitrequest[76]),
      .avm_local_bb24_ld__u83_inst0_readdata(avm_kernel_rd_readdata[76]),
      .avm_local_bb24_ld__u83_inst0_readdatavalid(avm_kernel_rd_readdatavalid[76]),
      .avm_local_bb24_ld__u83_inst0_writeack(avm_kernel_rd_writeack[76]),
      // AVM avm_local_bb24_ld__u84_inst0
      .avm_local_bb24_ld__u84_inst0_enable(avm_kernel_rd_enable[77]),
      .avm_local_bb24_ld__u84_inst0_read(avm_kernel_rd_read[77]),
      .avm_local_bb24_ld__u84_inst0_write(avm_kernel_rd_write[77]),
      .avm_local_bb24_ld__u84_inst0_burstcount(avm_kernel_rd_burstcount[77]),
      .avm_local_bb24_ld__u84_inst0_address(avm_kernel_rd_address[77]),
      .avm_local_bb24_ld__u84_inst0_writedata(avm_kernel_rd_writedata[77]),
      .avm_local_bb24_ld__u84_inst0_byteenable(avm_kernel_rd_byteenable[77]),
      .avm_local_bb24_ld__u84_inst0_waitrequest(avm_kernel_rd_waitrequest[77]),
      .avm_local_bb24_ld__u84_inst0_readdata(avm_kernel_rd_readdata[77]),
      .avm_local_bb24_ld__u84_inst0_readdatavalid(avm_kernel_rd_readdatavalid[77]),
      .avm_local_bb24_ld__u84_inst0_writeack(avm_kernel_rd_writeack[77]),
      // AVM avm_local_bb24_ld__u85_inst0
      .avm_local_bb24_ld__u85_inst0_enable(avm_kernel_rd_enable[78]),
      .avm_local_bb24_ld__u85_inst0_read(avm_kernel_rd_read[78]),
      .avm_local_bb24_ld__u85_inst0_write(avm_kernel_rd_write[78]),
      .avm_local_bb24_ld__u85_inst0_burstcount(avm_kernel_rd_burstcount[78]),
      .avm_local_bb24_ld__u85_inst0_address(avm_kernel_rd_address[78]),
      .avm_local_bb24_ld__u85_inst0_writedata(avm_kernel_rd_writedata[78]),
      .avm_local_bb24_ld__u85_inst0_byteenable(avm_kernel_rd_byteenable[78]),
      .avm_local_bb24_ld__u85_inst0_waitrequest(avm_kernel_rd_waitrequest[78]),
      .avm_local_bb24_ld__u85_inst0_readdata(avm_kernel_rd_readdata[78]),
      .avm_local_bb24_ld__u85_inst0_readdatavalid(avm_kernel_rd_readdatavalid[78]),
      .avm_local_bb24_ld__u85_inst0_writeack(avm_kernel_rd_writeack[78]),
      // AVM avm_local_bb24_ld__u86_inst0
      .avm_local_bb24_ld__u86_inst0_enable(avm_kernel_rd_enable[79]),
      .avm_local_bb24_ld__u86_inst0_read(avm_kernel_rd_read[79]),
      .avm_local_bb24_ld__u86_inst0_write(avm_kernel_rd_write[79]),
      .avm_local_bb24_ld__u86_inst0_burstcount(avm_kernel_rd_burstcount[79]),
      .avm_local_bb24_ld__u86_inst0_address(avm_kernel_rd_address[79]),
      .avm_local_bb24_ld__u86_inst0_writedata(avm_kernel_rd_writedata[79]),
      .avm_local_bb24_ld__u86_inst0_byteenable(avm_kernel_rd_byteenable[79]),
      .avm_local_bb24_ld__u86_inst0_waitrequest(avm_kernel_rd_waitrequest[79]),
      .avm_local_bb24_ld__u86_inst0_readdata(avm_kernel_rd_readdata[79]),
      .avm_local_bb24_ld__u86_inst0_readdatavalid(avm_kernel_rd_readdatavalid[79]),
      .avm_local_bb24_ld__u86_inst0_writeack(avm_kernel_rd_writeack[79]),
      // AVM avm_local_bb24_ld__u87_inst0
      .avm_local_bb24_ld__u87_inst0_enable(avm_kernel_rd_enable[80]),
      .avm_local_bb24_ld__u87_inst0_read(avm_kernel_rd_read[80]),
      .avm_local_bb24_ld__u87_inst0_write(avm_kernel_rd_write[80]),
      .avm_local_bb24_ld__u87_inst0_burstcount(avm_kernel_rd_burstcount[80]),
      .avm_local_bb24_ld__u87_inst0_address(avm_kernel_rd_address[80]),
      .avm_local_bb24_ld__u87_inst0_writedata(avm_kernel_rd_writedata[80]),
      .avm_local_bb24_ld__u87_inst0_byteenable(avm_kernel_rd_byteenable[80]),
      .avm_local_bb24_ld__u87_inst0_waitrequest(avm_kernel_rd_waitrequest[80]),
      .avm_local_bb24_ld__u87_inst0_readdata(avm_kernel_rd_readdata[80]),
      .avm_local_bb24_ld__u87_inst0_readdatavalid(avm_kernel_rd_readdatavalid[80]),
      .avm_local_bb24_ld__u87_inst0_writeack(avm_kernel_rd_writeack[80]),
      // AVM avm_local_bb24_ld__u88_inst0
      .avm_local_bb24_ld__u88_inst0_enable(avm_kernel_rd_enable[81]),
      .avm_local_bb24_ld__u88_inst0_read(avm_kernel_rd_read[81]),
      .avm_local_bb24_ld__u88_inst0_write(avm_kernel_rd_write[81]),
      .avm_local_bb24_ld__u88_inst0_burstcount(avm_kernel_rd_burstcount[81]),
      .avm_local_bb24_ld__u88_inst0_address(avm_kernel_rd_address[81]),
      .avm_local_bb24_ld__u88_inst0_writedata(avm_kernel_rd_writedata[81]),
      .avm_local_bb24_ld__u88_inst0_byteenable(avm_kernel_rd_byteenable[81]),
      .avm_local_bb24_ld__u88_inst0_waitrequest(avm_kernel_rd_waitrequest[81]),
      .avm_local_bb24_ld__u88_inst0_readdata(avm_kernel_rd_readdata[81]),
      .avm_local_bb24_ld__u88_inst0_readdatavalid(avm_kernel_rd_readdatavalid[81]),
      .avm_local_bb24_ld__u88_inst0_writeack(avm_kernel_rd_writeack[81]),
      // AVM avm_local_bb24_ld__u89_inst0
      .avm_local_bb24_ld__u89_inst0_enable(avm_kernel_rd_enable[82]),
      .avm_local_bb24_ld__u89_inst0_read(avm_kernel_rd_read[82]),
      .avm_local_bb24_ld__u89_inst0_write(avm_kernel_rd_write[82]),
      .avm_local_bb24_ld__u89_inst0_burstcount(avm_kernel_rd_burstcount[82]),
      .avm_local_bb24_ld__u89_inst0_address(avm_kernel_rd_address[82]),
      .avm_local_bb24_ld__u89_inst0_writedata(avm_kernel_rd_writedata[82]),
      .avm_local_bb24_ld__u89_inst0_byteenable(avm_kernel_rd_byteenable[82]),
      .avm_local_bb24_ld__u89_inst0_waitrequest(avm_kernel_rd_waitrequest[82]),
      .avm_local_bb24_ld__u89_inst0_readdata(avm_kernel_rd_readdata[82]),
      .avm_local_bb24_ld__u89_inst0_readdatavalid(avm_kernel_rd_readdatavalid[82]),
      .avm_local_bb24_ld__u89_inst0_writeack(avm_kernel_rd_writeack[82]),
      // AVM avm_local_bb24_ld__u90_inst0
      .avm_local_bb24_ld__u90_inst0_enable(avm_kernel_rd_enable[83]),
      .avm_local_bb24_ld__u90_inst0_read(avm_kernel_rd_read[83]),
      .avm_local_bb24_ld__u90_inst0_write(avm_kernel_rd_write[83]),
      .avm_local_bb24_ld__u90_inst0_burstcount(avm_kernel_rd_burstcount[83]),
      .avm_local_bb24_ld__u90_inst0_address(avm_kernel_rd_address[83]),
      .avm_local_bb24_ld__u90_inst0_writedata(avm_kernel_rd_writedata[83]),
      .avm_local_bb24_ld__u90_inst0_byteenable(avm_kernel_rd_byteenable[83]),
      .avm_local_bb24_ld__u90_inst0_waitrequest(avm_kernel_rd_waitrequest[83]),
      .avm_local_bb24_ld__u90_inst0_readdata(avm_kernel_rd_readdata[83]),
      .avm_local_bb24_ld__u90_inst0_readdatavalid(avm_kernel_rd_readdatavalid[83]),
      .avm_local_bb24_ld__u90_inst0_writeack(avm_kernel_rd_writeack[83]),
      // AVM avm_local_bb24_ld__u91_inst0
      .avm_local_bb24_ld__u91_inst0_enable(avm_kernel_rd_enable[84]),
      .avm_local_bb24_ld__u91_inst0_read(avm_kernel_rd_read[84]),
      .avm_local_bb24_ld__u91_inst0_write(avm_kernel_rd_write[84]),
      .avm_local_bb24_ld__u91_inst0_burstcount(avm_kernel_rd_burstcount[84]),
      .avm_local_bb24_ld__u91_inst0_address(avm_kernel_rd_address[84]),
      .avm_local_bb24_ld__u91_inst0_writedata(avm_kernel_rd_writedata[84]),
      .avm_local_bb24_ld__u91_inst0_byteenable(avm_kernel_rd_byteenable[84]),
      .avm_local_bb24_ld__u91_inst0_waitrequest(avm_kernel_rd_waitrequest[84]),
      .avm_local_bb24_ld__u91_inst0_readdata(avm_kernel_rd_readdata[84]),
      .avm_local_bb24_ld__u91_inst0_readdatavalid(avm_kernel_rd_readdatavalid[84]),
      .avm_local_bb24_ld__u91_inst0_writeack(avm_kernel_rd_writeack[84]),
      // AVM avm_local_bb24_ld__u92_inst0
      .avm_local_bb24_ld__u92_inst0_enable(avm_kernel_rd_enable[85]),
      .avm_local_bb24_ld__u92_inst0_read(avm_kernel_rd_read[85]),
      .avm_local_bb24_ld__u92_inst0_write(avm_kernel_rd_write[85]),
      .avm_local_bb24_ld__u92_inst0_burstcount(avm_kernel_rd_burstcount[85]),
      .avm_local_bb24_ld__u92_inst0_address(avm_kernel_rd_address[85]),
      .avm_local_bb24_ld__u92_inst0_writedata(avm_kernel_rd_writedata[85]),
      .avm_local_bb24_ld__u92_inst0_byteenable(avm_kernel_rd_byteenable[85]),
      .avm_local_bb24_ld__u92_inst0_waitrequest(avm_kernel_rd_waitrequest[85]),
      .avm_local_bb24_ld__u92_inst0_readdata(avm_kernel_rd_readdata[85]),
      .avm_local_bb24_ld__u92_inst0_readdatavalid(avm_kernel_rd_readdatavalid[85]),
      .avm_local_bb24_ld__u92_inst0_writeack(avm_kernel_rd_writeack[85]),
      // AVM avm_local_bb24_ld__u93_inst0
      .avm_local_bb24_ld__u93_inst0_enable(avm_kernel_rd_enable[86]),
      .avm_local_bb24_ld__u93_inst0_read(avm_kernel_rd_read[86]),
      .avm_local_bb24_ld__u93_inst0_write(avm_kernel_rd_write[86]),
      .avm_local_bb24_ld__u93_inst0_burstcount(avm_kernel_rd_burstcount[86]),
      .avm_local_bb24_ld__u93_inst0_address(avm_kernel_rd_address[86]),
      .avm_local_bb24_ld__u93_inst0_writedata(avm_kernel_rd_writedata[86]),
      .avm_local_bb24_ld__u93_inst0_byteenable(avm_kernel_rd_byteenable[86]),
      .avm_local_bb24_ld__u93_inst0_waitrequest(avm_kernel_rd_waitrequest[86]),
      .avm_local_bb24_ld__u93_inst0_readdata(avm_kernel_rd_readdata[86]),
      .avm_local_bb24_ld__u93_inst0_readdatavalid(avm_kernel_rd_readdatavalid[86]),
      .avm_local_bb24_ld__u93_inst0_writeack(avm_kernel_rd_writeack[86]),
      // AVM avm_local_bb24_ld__u94_inst0
      .avm_local_bb24_ld__u94_inst0_enable(avm_kernel_rd_enable[87]),
      .avm_local_bb24_ld__u94_inst0_read(avm_kernel_rd_read[87]),
      .avm_local_bb24_ld__u94_inst0_write(avm_kernel_rd_write[87]),
      .avm_local_bb24_ld__u94_inst0_burstcount(avm_kernel_rd_burstcount[87]),
      .avm_local_bb24_ld__u94_inst0_address(avm_kernel_rd_address[87]),
      .avm_local_bb24_ld__u94_inst0_writedata(avm_kernel_rd_writedata[87]),
      .avm_local_bb24_ld__u94_inst0_byteenable(avm_kernel_rd_byteenable[87]),
      .avm_local_bb24_ld__u94_inst0_waitrequest(avm_kernel_rd_waitrequest[87]),
      .avm_local_bb24_ld__u94_inst0_readdata(avm_kernel_rd_readdata[87]),
      .avm_local_bb24_ld__u94_inst0_readdatavalid(avm_kernel_rd_readdatavalid[87]),
      .avm_local_bb24_ld__u94_inst0_writeack(avm_kernel_rd_writeack[87]),
      // AVM avm_local_bb25_ld__u101_inst0
      .avm_local_bb25_ld__u101_inst0_enable(avm_kernel_rd_enable[88]),
      .avm_local_bb25_ld__u101_inst0_read(avm_kernel_rd_read[88]),
      .avm_local_bb25_ld__u101_inst0_write(avm_kernel_rd_write[88]),
      .avm_local_bb25_ld__u101_inst0_burstcount(avm_kernel_rd_burstcount[88]),
      .avm_local_bb25_ld__u101_inst0_address(avm_kernel_rd_address[88]),
      .avm_local_bb25_ld__u101_inst0_writedata(avm_kernel_rd_writedata[88]),
      .avm_local_bb25_ld__u101_inst0_byteenable(avm_kernel_rd_byteenable[88]),
      .avm_local_bb25_ld__u101_inst0_waitrequest(avm_kernel_rd_waitrequest[88]),
      .avm_local_bb25_ld__u101_inst0_readdata(avm_kernel_rd_readdata[88]),
      .avm_local_bb25_ld__u101_inst0_readdatavalid(avm_kernel_rd_readdatavalid[88]),
      .avm_local_bb25_ld__u101_inst0_writeack(avm_kernel_rd_writeack[88]),
      // AVM avm_local_bb25_ld__u102_inst0
      .avm_local_bb25_ld__u102_inst0_enable(avm_kernel_rd_enable[89]),
      .avm_local_bb25_ld__u102_inst0_read(avm_kernel_rd_read[89]),
      .avm_local_bb25_ld__u102_inst0_write(avm_kernel_rd_write[89]),
      .avm_local_bb25_ld__u102_inst0_burstcount(avm_kernel_rd_burstcount[89]),
      .avm_local_bb25_ld__u102_inst0_address(avm_kernel_rd_address[89]),
      .avm_local_bb25_ld__u102_inst0_writedata(avm_kernel_rd_writedata[89]),
      .avm_local_bb25_ld__u102_inst0_byteenable(avm_kernel_rd_byteenable[89]),
      .avm_local_bb25_ld__u102_inst0_waitrequest(avm_kernel_rd_waitrequest[89]),
      .avm_local_bb25_ld__u102_inst0_readdata(avm_kernel_rd_readdata[89]),
      .avm_local_bb25_ld__u102_inst0_readdatavalid(avm_kernel_rd_readdatavalid[89]),
      .avm_local_bb25_ld__u102_inst0_writeack(avm_kernel_rd_writeack[89]),
      // AVM avm_local_bb25_ld__u103_inst0
      .avm_local_bb25_ld__u103_inst0_enable(avm_kernel_rd_enable[90]),
      .avm_local_bb25_ld__u103_inst0_read(avm_kernel_rd_read[90]),
      .avm_local_bb25_ld__u103_inst0_write(avm_kernel_rd_write[90]),
      .avm_local_bb25_ld__u103_inst0_burstcount(avm_kernel_rd_burstcount[90]),
      .avm_local_bb25_ld__u103_inst0_address(avm_kernel_rd_address[90]),
      .avm_local_bb25_ld__u103_inst0_writedata(avm_kernel_rd_writedata[90]),
      .avm_local_bb25_ld__u103_inst0_byteenable(avm_kernel_rd_byteenable[90]),
      .avm_local_bb25_ld__u103_inst0_waitrequest(avm_kernel_rd_waitrequest[90]),
      .avm_local_bb25_ld__u103_inst0_readdata(avm_kernel_rd_readdata[90]),
      .avm_local_bb25_ld__u103_inst0_readdatavalid(avm_kernel_rd_readdatavalid[90]),
      .avm_local_bb25_ld__u103_inst0_writeack(avm_kernel_rd_writeack[90]),
      // AVM avm_local_bb25_ld__u104_inst0
      .avm_local_bb25_ld__u104_inst0_enable(avm_kernel_rd_enable[91]),
      .avm_local_bb25_ld__u104_inst0_read(avm_kernel_rd_read[91]),
      .avm_local_bb25_ld__u104_inst0_write(avm_kernel_rd_write[91]),
      .avm_local_bb25_ld__u104_inst0_burstcount(avm_kernel_rd_burstcount[91]),
      .avm_local_bb25_ld__u104_inst0_address(avm_kernel_rd_address[91]),
      .avm_local_bb25_ld__u104_inst0_writedata(avm_kernel_rd_writedata[91]),
      .avm_local_bb25_ld__u104_inst0_byteenable(avm_kernel_rd_byteenable[91]),
      .avm_local_bb25_ld__u104_inst0_waitrequest(avm_kernel_rd_waitrequest[91]),
      .avm_local_bb25_ld__u104_inst0_readdata(avm_kernel_rd_readdata[91]),
      .avm_local_bb25_ld__u104_inst0_readdatavalid(avm_kernel_rd_readdatavalid[91]),
      .avm_local_bb25_ld__u104_inst0_writeack(avm_kernel_rd_writeack[91]),
      // AVM avm_local_bb25_ld__u105_inst0
      .avm_local_bb25_ld__u105_inst0_enable(avm_kernel_rd_enable[92]),
      .avm_local_bb25_ld__u105_inst0_read(avm_kernel_rd_read[92]),
      .avm_local_bb25_ld__u105_inst0_write(avm_kernel_rd_write[92]),
      .avm_local_bb25_ld__u105_inst0_burstcount(avm_kernel_rd_burstcount[92]),
      .avm_local_bb25_ld__u105_inst0_address(avm_kernel_rd_address[92]),
      .avm_local_bb25_ld__u105_inst0_writedata(avm_kernel_rd_writedata[92]),
      .avm_local_bb25_ld__u105_inst0_byteenable(avm_kernel_rd_byteenable[92]),
      .avm_local_bb25_ld__u105_inst0_waitrequest(avm_kernel_rd_waitrequest[92]),
      .avm_local_bb25_ld__u105_inst0_readdata(avm_kernel_rd_readdata[92]),
      .avm_local_bb25_ld__u105_inst0_readdatavalid(avm_kernel_rd_readdatavalid[92]),
      .avm_local_bb25_ld__u105_inst0_writeack(avm_kernel_rd_writeack[92]),
      // AVM avm_local_bb25_ld__u106_inst0
      .avm_local_bb25_ld__u106_inst0_enable(avm_kernel_rd_enable[93]),
      .avm_local_bb25_ld__u106_inst0_read(avm_kernel_rd_read[93]),
      .avm_local_bb25_ld__u106_inst0_write(avm_kernel_rd_write[93]),
      .avm_local_bb25_ld__u106_inst0_burstcount(avm_kernel_rd_burstcount[93]),
      .avm_local_bb25_ld__u106_inst0_address(avm_kernel_rd_address[93]),
      .avm_local_bb25_ld__u106_inst0_writedata(avm_kernel_rd_writedata[93]),
      .avm_local_bb25_ld__u106_inst0_byteenable(avm_kernel_rd_byteenable[93]),
      .avm_local_bb25_ld__u106_inst0_waitrequest(avm_kernel_rd_waitrequest[93]),
      .avm_local_bb25_ld__u106_inst0_readdata(avm_kernel_rd_readdata[93]),
      .avm_local_bb25_ld__u106_inst0_readdatavalid(avm_kernel_rd_readdatavalid[93]),
      .avm_local_bb25_ld__u106_inst0_writeack(avm_kernel_rd_writeack[93]),
      // AVM avm_local_bb25_ld__u107_inst0
      .avm_local_bb25_ld__u107_inst0_enable(avm_kernel_rd_enable[94]),
      .avm_local_bb25_ld__u107_inst0_read(avm_kernel_rd_read[94]),
      .avm_local_bb25_ld__u107_inst0_write(avm_kernel_rd_write[94]),
      .avm_local_bb25_ld__u107_inst0_burstcount(avm_kernel_rd_burstcount[94]),
      .avm_local_bb25_ld__u107_inst0_address(avm_kernel_rd_address[94]),
      .avm_local_bb25_ld__u107_inst0_writedata(avm_kernel_rd_writedata[94]),
      .avm_local_bb25_ld__u107_inst0_byteenable(avm_kernel_rd_byteenable[94]),
      .avm_local_bb25_ld__u107_inst0_waitrequest(avm_kernel_rd_waitrequest[94]),
      .avm_local_bb25_ld__u107_inst0_readdata(avm_kernel_rd_readdata[94]),
      .avm_local_bb25_ld__u107_inst0_readdatavalid(avm_kernel_rd_readdatavalid[94]),
      .avm_local_bb25_ld__u107_inst0_writeack(avm_kernel_rd_writeack[94]),
      // AVM avm_local_bb25_ld__u108_inst0
      .avm_local_bb25_ld__u108_inst0_enable(avm_kernel_rd_enable[95]),
      .avm_local_bb25_ld__u108_inst0_read(avm_kernel_rd_read[95]),
      .avm_local_bb25_ld__u108_inst0_write(avm_kernel_rd_write[95]),
      .avm_local_bb25_ld__u108_inst0_burstcount(avm_kernel_rd_burstcount[95]),
      .avm_local_bb25_ld__u108_inst0_address(avm_kernel_rd_address[95]),
      .avm_local_bb25_ld__u108_inst0_writedata(avm_kernel_rd_writedata[95]),
      .avm_local_bb25_ld__u108_inst0_byteenable(avm_kernel_rd_byteenable[95]),
      .avm_local_bb25_ld__u108_inst0_waitrequest(avm_kernel_rd_waitrequest[95]),
      .avm_local_bb25_ld__u108_inst0_readdata(avm_kernel_rd_readdata[95]),
      .avm_local_bb25_ld__u108_inst0_readdatavalid(avm_kernel_rd_readdatavalid[95]),
      .avm_local_bb25_ld__u108_inst0_writeack(avm_kernel_rd_writeack[95]),
      // AVM avm_local_bb25_ld__u109_inst0
      .avm_local_bb25_ld__u109_inst0_enable(avm_kernel_rd_enable[96]),
      .avm_local_bb25_ld__u109_inst0_read(avm_kernel_rd_read[96]),
      .avm_local_bb25_ld__u109_inst0_write(avm_kernel_rd_write[96]),
      .avm_local_bb25_ld__u109_inst0_burstcount(avm_kernel_rd_burstcount[96]),
      .avm_local_bb25_ld__u109_inst0_address(avm_kernel_rd_address[96]),
      .avm_local_bb25_ld__u109_inst0_writedata(avm_kernel_rd_writedata[96]),
      .avm_local_bb25_ld__u109_inst0_byteenable(avm_kernel_rd_byteenable[96]),
      .avm_local_bb25_ld__u109_inst0_waitrequest(avm_kernel_rd_waitrequest[96]),
      .avm_local_bb25_ld__u109_inst0_readdata(avm_kernel_rd_readdata[96]),
      .avm_local_bb25_ld__u109_inst0_readdatavalid(avm_kernel_rd_readdatavalid[96]),
      .avm_local_bb25_ld__u109_inst0_writeack(avm_kernel_rd_writeack[96]),
      // AVM avm_local_bb25_ld__u110_inst0
      .avm_local_bb25_ld__u110_inst0_enable(avm_kernel_rd_enable[97]),
      .avm_local_bb25_ld__u110_inst0_read(avm_kernel_rd_read[97]),
      .avm_local_bb25_ld__u110_inst0_write(avm_kernel_rd_write[97]),
      .avm_local_bb25_ld__u110_inst0_burstcount(avm_kernel_rd_burstcount[97]),
      .avm_local_bb25_ld__u110_inst0_address(avm_kernel_rd_address[97]),
      .avm_local_bb25_ld__u110_inst0_writedata(avm_kernel_rd_writedata[97]),
      .avm_local_bb25_ld__u110_inst0_byteenable(avm_kernel_rd_byteenable[97]),
      .avm_local_bb25_ld__u110_inst0_waitrequest(avm_kernel_rd_waitrequest[97]),
      .avm_local_bb25_ld__u110_inst0_readdata(avm_kernel_rd_readdata[97]),
      .avm_local_bb25_ld__u110_inst0_readdatavalid(avm_kernel_rd_readdatavalid[97]),
      .avm_local_bb25_ld__u110_inst0_writeack(avm_kernel_rd_writeack[97]),
      // AVM avm_local_bb25_ld__u111_inst0
      .avm_local_bb25_ld__u111_inst0_enable(avm_kernel_rd_enable[98]),
      .avm_local_bb25_ld__u111_inst0_read(avm_kernel_rd_read[98]),
      .avm_local_bb25_ld__u111_inst0_write(avm_kernel_rd_write[98]),
      .avm_local_bb25_ld__u111_inst0_burstcount(avm_kernel_rd_burstcount[98]),
      .avm_local_bb25_ld__u111_inst0_address(avm_kernel_rd_address[98]),
      .avm_local_bb25_ld__u111_inst0_writedata(avm_kernel_rd_writedata[98]),
      .avm_local_bb25_ld__u111_inst0_byteenable(avm_kernel_rd_byteenable[98]),
      .avm_local_bb25_ld__u111_inst0_waitrequest(avm_kernel_rd_waitrequest[98]),
      .avm_local_bb25_ld__u111_inst0_readdata(avm_kernel_rd_readdata[98]),
      .avm_local_bb25_ld__u111_inst0_readdatavalid(avm_kernel_rd_readdatavalid[98]),
      .avm_local_bb25_ld__u111_inst0_writeack(avm_kernel_rd_writeack[98]),
      // AVM avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_enable(avm_kernel_rd_enable[99]),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_read(avm_kernel_rd_read[99]),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_write(avm_kernel_rd_write[99]),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_burstcount(avm_kernel_rd_burstcount[99]),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_address(avm_kernel_rd_address[99]),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_writedata(avm_kernel_rd_writedata[99]),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_byteenable(avm_kernel_rd_byteenable[99]),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_waitrequest(avm_kernel_rd_waitrequest[99]),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_readdata(avm_kernel_rd_readdata[99]),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_readdatavalid(avm_kernel_rd_readdatavalid[99]),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_writeack(avm_kernel_rd_writeack[99]),
      // AVM avm_local_bb28_st__inst0
      .avm_local_bb28_st__inst0_enable(avm_kernel_wr_enable[3]),
      .avm_local_bb28_st__inst0_read(avm_kernel_wr_read[3]),
      .avm_local_bb28_st__inst0_write(avm_kernel_wr_write[3]),
      .avm_local_bb28_st__inst0_burstcount(avm_kernel_wr_burstcount[3]),
      .avm_local_bb28_st__inst0_address(avm_kernel_wr_address[3]),
      .avm_local_bb28_st__inst0_writedata(avm_kernel_wr_writedata[3]),
      .avm_local_bb28_st__inst0_byteenable(avm_kernel_wr_byteenable[3]),
      .avm_local_bb28_st__inst0_waitrequest(avm_kernel_wr_waitrequest[3]),
      .avm_local_bb28_st__inst0_readdata(avm_kernel_wr_readdata[3]),
      .avm_local_bb28_st__inst0_readdatavalid(avm_kernel_wr_readdatavalid[3]),
      .avm_local_bb28_st__inst0_writeack(avm_kernel_wr_writeack[3]),
      // AVM avm_local_bb28_st_add1001_i_hfp_inst0
      .avm_local_bb28_st_add1001_i_hfp_inst0_enable(avm_kernel_wr_enable[4]),
      .avm_local_bb28_st_add1001_i_hfp_inst0_read(avm_kernel_wr_read[4]),
      .avm_local_bb28_st_add1001_i_hfp_inst0_write(avm_kernel_wr_write[4]),
      .avm_local_bb28_st_add1001_i_hfp_inst0_burstcount(avm_kernel_wr_burstcount[4]),
      .avm_local_bb28_st_add1001_i_hfp_inst0_address(avm_kernel_wr_address[4]),
      .avm_local_bb28_st_add1001_i_hfp_inst0_writedata(avm_kernel_wr_writedata[4]),
      .avm_local_bb28_st_add1001_i_hfp_inst0_byteenable(avm_kernel_wr_byteenable[4]),
      .avm_local_bb28_st_add1001_i_hfp_inst0_waitrequest(avm_kernel_wr_waitrequest[4]),
      .avm_local_bb28_st_add1001_i_hfp_inst0_readdata(avm_kernel_wr_readdata[4]),
      .avm_local_bb28_st_add1001_i_hfp_inst0_readdatavalid(avm_kernel_wr_readdatavalid[4]),
      .avm_local_bb28_st_add1001_i_hfp_inst0_writeack(avm_kernel_wr_writeack[4]),
      // AVM avm_local_bb29_st__inst0
      .avm_local_bb29_st__inst0_enable(avm_kernel_wr_enable[5]),
      .avm_local_bb29_st__inst0_read(avm_kernel_wr_read[5]),
      .avm_local_bb29_st__inst0_write(avm_kernel_wr_write[5]),
      .avm_local_bb29_st__inst0_burstcount(avm_kernel_wr_burstcount[5]),
      .avm_local_bb29_st__inst0_address(avm_kernel_wr_address[5]),
      .avm_local_bb29_st__inst0_writedata(avm_kernel_wr_writedata[5]),
      .avm_local_bb29_st__inst0_byteenable(avm_kernel_wr_byteenable[5]),
      .avm_local_bb29_st__inst0_waitrequest(avm_kernel_wr_waitrequest[5]),
      .avm_local_bb29_st__inst0_readdata(avm_kernel_wr_readdata[5]),
      .avm_local_bb29_st__inst0_readdatavalid(avm_kernel_wr_readdatavalid[5]),
      .avm_local_bb29_st__inst0_writeack(avm_kernel_wr_writeack[5]),
      // AVM avm_local_bb3_ld__inst0
      .avm_local_bb3_ld__inst0_enable(avm_kernel_rd_enable[100]),
      .avm_local_bb3_ld__inst0_read(avm_kernel_rd_read[100]),
      .avm_local_bb3_ld__inst0_write(avm_kernel_rd_write[100]),
      .avm_local_bb3_ld__inst0_burstcount(avm_kernel_rd_burstcount[100]),
      .avm_local_bb3_ld__inst0_address(avm_kernel_rd_address[100]),
      .avm_local_bb3_ld__inst0_writedata(avm_kernel_rd_writedata[100]),
      .avm_local_bb3_ld__inst0_byteenable(avm_kernel_rd_byteenable[100]),
      .avm_local_bb3_ld__inst0_waitrequest(avm_kernel_rd_waitrequest[100]),
      .avm_local_bb3_ld__inst0_readdata(avm_kernel_rd_readdata[100]),
      .avm_local_bb3_ld__inst0_readdatavalid(avm_kernel_rd_readdatavalid[100]),
      .avm_local_bb3_ld__inst0_writeack(avm_kernel_rd_writeack[100]),
      // AVM avm_local_bb6_st__inst0
      .avm_local_bb6_st__inst0_enable(avm_kernel_wr_enable[6]),
      .avm_local_bb6_st__inst0_read(avm_kernel_wr_read[6]),
      .avm_local_bb6_st__inst0_write(avm_kernel_wr_write[6]),
      .avm_local_bb6_st__inst0_burstcount(avm_kernel_wr_burstcount[6]),
      .avm_local_bb6_st__inst0_address(avm_kernel_wr_address[6]),
      .avm_local_bb6_st__inst0_writedata(avm_kernel_wr_writedata[6]),
      .avm_local_bb6_st__inst0_byteenable(avm_kernel_wr_byteenable[6]),
      .avm_local_bb6_st__inst0_waitrequest(avm_kernel_wr_waitrequest[6]),
      .avm_local_bb6_st__inst0_readdata(avm_kernel_wr_readdata[6]),
      .avm_local_bb6_st__inst0_readdatavalid(avm_kernel_wr_readdatavalid[6]),
      .avm_local_bb6_st__inst0_writeack(avm_kernel_wr_writeack[6]),
      // AVM avm_local_bb6_st_c0_exe1165_inst0
      .avm_local_bb6_st_c0_exe1165_inst0_enable(avm_kernel_wr_enable[7]),
      .avm_local_bb6_st_c0_exe1165_inst0_read(avm_kernel_wr_read[7]),
      .avm_local_bb6_st_c0_exe1165_inst0_write(avm_kernel_wr_write[7]),
      .avm_local_bb6_st_c0_exe1165_inst0_burstcount(avm_kernel_wr_burstcount[7]),
      .avm_local_bb6_st_c0_exe1165_inst0_address(avm_kernel_wr_address[7]),
      .avm_local_bb6_st_c0_exe1165_inst0_writedata(avm_kernel_wr_writedata[7]),
      .avm_local_bb6_st_c0_exe1165_inst0_byteenable(avm_kernel_wr_byteenable[7]),
      .avm_local_bb6_st_c0_exe1165_inst0_waitrequest(avm_kernel_wr_waitrequest[7]),
      .avm_local_bb6_st_c0_exe1165_inst0_readdata(avm_kernel_wr_readdata[7]),
      .avm_local_bb6_st_c0_exe1165_inst0_readdatavalid(avm_kernel_wr_readdatavalid[7]),
      .avm_local_bb6_st_c0_exe1165_inst0_writeack(avm_kernel_wr_writeack[7]),
      // AVM avm_local_bb7_ld__inst0
      .avm_local_bb7_ld__inst0_enable(avm_kernel_rd_enable[101]),
      .avm_local_bb7_ld__inst0_read(avm_kernel_rd_read[101]),
      .avm_local_bb7_ld__inst0_write(avm_kernel_rd_write[101]),
      .avm_local_bb7_ld__inst0_burstcount(avm_kernel_rd_burstcount[101]),
      .avm_local_bb7_ld__inst0_address(avm_kernel_rd_address[101]),
      .avm_local_bb7_ld__inst0_writedata(avm_kernel_rd_writedata[101]),
      .avm_local_bb7_ld__inst0_byteenable(avm_kernel_rd_byteenable[101]),
      .avm_local_bb7_ld__inst0_waitrequest(avm_kernel_rd_waitrequest[101]),
      .avm_local_bb7_ld__inst0_readdata(avm_kernel_rd_readdata[101]),
      .avm_local_bb7_ld__inst0_readdatavalid(avm_kernel_rd_readdatavalid[101]),
      .avm_local_bb7_ld__inst0_writeack(avm_kernel_rd_writeack[101]),
      // AVM avm_local_bb7_st__inst0
      .avm_local_bb7_st__inst0_enable(avm_kernel_wr_enable[8]),
      .avm_local_bb7_st__inst0_read(avm_kernel_wr_read[8]),
      .avm_local_bb7_st__inst0_write(avm_kernel_wr_write[8]),
      .avm_local_bb7_st__inst0_burstcount(avm_kernel_wr_burstcount[8]),
      .avm_local_bb7_st__inst0_address(avm_kernel_wr_address[8]),
      .avm_local_bb7_st__inst0_writedata(avm_kernel_wr_writedata[8]),
      .avm_local_bb7_st__inst0_byteenable(avm_kernel_wr_byteenable[8]),
      .avm_local_bb7_st__inst0_waitrequest(avm_kernel_wr_waitrequest[8]),
      .avm_local_bb7_st__inst0_readdata(avm_kernel_wr_readdata[8]),
      .avm_local_bb7_st__inst0_readdatavalid(avm_kernel_wr_readdatavalid[8]),
      .avm_local_bb7_st__inst0_writeack(avm_kernel_wr_writeack[8]),
      // AVM avm_local_bb9_ld__u8_inst0
      .avm_local_bb9_ld__u8_inst0_enable(avm_kernel_rd_enable[102]),
      .avm_local_bb9_ld__u8_inst0_read(avm_kernel_rd_read[102]),
      .avm_local_bb9_ld__u8_inst0_write(avm_kernel_rd_write[102]),
      .avm_local_bb9_ld__u8_inst0_burstcount(avm_kernel_rd_burstcount[102]),
      .avm_local_bb9_ld__u8_inst0_address(avm_kernel_rd_address[102]),
      .avm_local_bb9_ld__u8_inst0_writedata(avm_kernel_rd_writedata[102]),
      .avm_local_bb9_ld__u8_inst0_byteenable(avm_kernel_rd_byteenable[102]),
      .avm_local_bb9_ld__u8_inst0_waitrequest(avm_kernel_rd_waitrequest[102]),
      .avm_local_bb9_ld__u8_inst0_readdata(avm_kernel_rd_readdata[102]),
      .avm_local_bb9_ld__u8_inst0_readdatavalid(avm_kernel_rd_readdatavalid[102]),
      .avm_local_bb9_ld__u8_inst0_writeack(avm_kernel_rd_writeack[102]),
      // AVM avm_local_bb9_st_c0_exe1180_inst0
      .avm_local_bb9_st_c0_exe1180_inst0_enable(avm_kernel_wr_enable[9]),
      .avm_local_bb9_st_c0_exe1180_inst0_read(avm_kernel_wr_read[9]),
      .avm_local_bb9_st_c0_exe1180_inst0_write(avm_kernel_wr_write[9]),
      .avm_local_bb9_st_c0_exe1180_inst0_burstcount(avm_kernel_wr_burstcount[9]),
      .avm_local_bb9_st_c0_exe1180_inst0_address(avm_kernel_wr_address[9]),
      .avm_local_bb9_st_c0_exe1180_inst0_writedata(avm_kernel_wr_writedata[9]),
      .avm_local_bb9_st_c0_exe1180_inst0_byteenable(avm_kernel_wr_byteenable[9]),
      .avm_local_bb9_st_c0_exe1180_inst0_waitrequest(avm_kernel_wr_waitrequest[9]),
      .avm_local_bb9_st_c0_exe1180_inst0_readdata(avm_kernel_wr_readdata[9]),
      .avm_local_bb9_st_c0_exe1180_inst0_readdatavalid(avm_kernel_wr_readdatavalid[9]),
      .avm_local_bb9_st_c0_exe1180_inst0_writeack(avm_kernel_wr_writeack[9])
   );

   // INST gen_and_eval_newpops_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element gen_and_eval_newpops_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(gen_and_eval_newpops_start_chain[0]),
      .start_kernel(gen_and_eval_newpops_start_kernel_copy[0]),
      .start_finish_detector(gen_and_eval_newpops_start_task_fd[0]),
      .start_finish_chain_element(gen_and_eval_newpops_start_finish_element[0]),
      .start_chain()
   );

   assign perform_ls_start_chain[0] = perform_ls_start;
   assign perform_ls_finish_chain[0] = 1'b1;
   assign perform_ls_cra_pending_write = |perform_ls_pending_write;
   assign perform_ls_cra_lsu_active = |perform_ls_lsu_active;
   assign perform_ls_cra_valid_in = |perform_ls_valid_in;
   assign perform_ls_stall_in = 0;
   // INST perform_ls_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0)
   )
   perform_ls_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(perform_ls_start),
      .num_groups(perform_ls_num_groups),
      .local_size(perform_ls_local_size),
      .stall_in(perform_ls_wg_disp_stall_in),
      .valid_out(perform_ls_wg_disp_valid_out),
      .group_id_out(perform_ls_wg_disp_group_id_out),
      .global_id_base_out(perform_ls_wg_disp_global_id_base_out),
      .start_out(perform_ls_wg_disp_start_out),
      .dispatched_all_groups(perform_ls_wg_disp_dispatched_all_groups)
   );

   // INST perform_ls_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(19)
   )
   perform_ls_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(perform_ls_start),
      .wg_size(perform_ls_wg_size),
      .wg_dispatch_valid_out(perform_ls_wg_disp_valid_out),
      .wg_dispatch_stall_in(perform_ls_wg_disp_stall_in),
      .dispatched_all_groups(perform_ls_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(perform_ls_valid_out),
      .kernel_copy_stall_in(perform_ls_stall_in),
      .pending_writes(perform_ls_cra_pending_write),
      .finish(perform_ls_finish)
   );

   // INST perform_ls_cra_slave_inst of perform_ls_function_cra_slave
   perform_ls_function_cra_slave perform_ls_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(perform_ls_start),
      .finish(perform_ls_finish),
      .global_offset_0(perform_ls_global_offset[0]),
      .global_offset_1(perform_ls_global_offset[1]),
      .global_offset_2(perform_ls_global_offset[2]),
      .work_dim(perform_ls_work_dim),
      .has_a_lsu_active(perform_ls_cra_lsu_active),
      .has_a_write_pending(perform_ls_cra_pending_write),
      .valid_in(perform_ls_cra_valid_in),
      .global_size_0(perform_ls_global_size[0]),
      .global_size_1(perform_ls_global_size[1]),
      .global_size_2(perform_ls_global_size[2]),
      .num_groups_0(perform_ls_num_groups[0]),
      .num_groups_1(perform_ls_num_groups[1]),
      .num_groups_2(perform_ls_num_groups[2]),
      .local_size_0(perform_ls_local_size[0]),
      .local_size_1(perform_ls_local_size[1]),
      .local_size_2(perform_ls_local_size[2]),
      .workgroup_size(perform_ls_wg_size),
      .kernel_arguments(perform_ls_kernel_arguments),
      .cra_irq(kernel_irqs[2]),
      // AVS avs_cra
      .avs_cra_enable(avs_perform_ls_cra_enable),
      .avs_cra_read(avs_perform_ls_cra_read),
      .avs_cra_write(avs_perform_ls_cra_write),
      .avs_cra_address(avs_perform_ls_cra_address),
      .avs_cra_writedata(avs_perform_ls_cra_writedata),
      .avs_cra_byteenable(avs_perform_ls_cra_byteenable),
      .avs_cra_readdata(avs_perform_ls_cra_readdata),
      .avs_cra_readdatavalid(avs_perform_ls_cra_readdatavalid)
   );

   // INST perform_ls_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(5),
      .LOCAL_WIDTH_Y(1),
      .LOCAL_WIDTH_Z(1),
      .ENABLE_TESSELLATION(1)
   )
   perform_ls_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(perform_ls_wg_disp_start_out),
      .valid_in(perform_ls_wg_disp_valid_out[0]),
      .stall_out(perform_ls_wg_disp_stall_in[0]),
      .stall_in(perform_ls_stall_out[0]),
      .valid_out(perform_ls_valid_in[0]),
      .group_id_in(perform_ls_wg_disp_group_id_out),
      .global_id_base_in(perform_ls_wg_disp_global_id_base_out),
      .local_size(perform_ls_local_size),
      .global_size(perform_ls_global_size),
      .local_id(perform_ls_local_id[0]),
      .global_id(perform_ls_global_id[0]),
      .group_id(perform_ls_group_id[0])
   );

   // INST perform_ls_inst_0 of perform_ls_top_wrapper_0
   perform_ls_top_wrapper_0 perform_ls_inst_0
   (
      .start(perform_ls_start_kernel_copy[0]),
      .kernel_arguments(perform_ls_kernel_arguments),
      .work_dim(perform_ls_work_dim),
      .global_offset(perform_ls_global_offset),
      .kernel_valid_out(perform_ls_valid_out[0]),
      .has_a_write_pending(perform_ls_pending_write[0]),
      .has_a_lsu_active(perform_ls_lsu_active[0]),
      .global_id(perform_ls_global_id[0]),
      .local_id(perform_ls_local_id[0]),
      .group_id(perform_ls_group_id[0]),
      .global_size(perform_ls_global_size),
      .local_size(perform_ls_local_size),
      .num_groups(perform_ls_num_groups),
      .workgroup_size(perform_ls_wg_size),
      .kernel_stall_out(perform_ls_stall_out[0]),
      .kernel_valid_in(perform_ls_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_local_bb11_ld__1284_inst0
      .avm_local_bb11_ld__1284_inst0_enable(avm_kernel_rd_enable[103]),
      .avm_local_bb11_ld__1284_inst0_read(avm_kernel_rd_read[103]),
      .avm_local_bb11_ld__1284_inst0_write(avm_kernel_rd_write[103]),
      .avm_local_bb11_ld__1284_inst0_burstcount(avm_kernel_rd_burstcount[103]),
      .avm_local_bb11_ld__1284_inst0_address(avm_kernel_rd_address[103]),
      .avm_local_bb11_ld__1284_inst0_writedata(avm_kernel_rd_writedata[103]),
      .avm_local_bb11_ld__1284_inst0_byteenable(avm_kernel_rd_byteenable[103]),
      .avm_local_bb11_ld__1284_inst0_waitrequest(avm_kernel_rd_waitrequest[103]),
      .avm_local_bb11_ld__1284_inst0_readdata(avm_kernel_rd_readdata[103]),
      .avm_local_bb11_ld__1284_inst0_readdatavalid(avm_kernel_rd_readdatavalid[103]),
      .avm_local_bb11_ld__1284_inst0_writeack(avm_kernel_rd_writeack[103]),
      // AVM avm_local_bb11_ld__1286_inst0
      .avm_local_bb11_ld__1286_inst0_enable(avm_kernel_rd_enable[104]),
      .avm_local_bb11_ld__1286_inst0_read(avm_kernel_rd_read[104]),
      .avm_local_bb11_ld__1286_inst0_write(avm_kernel_rd_write[104]),
      .avm_local_bb11_ld__1286_inst0_burstcount(avm_kernel_rd_burstcount[104]),
      .avm_local_bb11_ld__1286_inst0_address(avm_kernel_rd_address[104]),
      .avm_local_bb11_ld__1286_inst0_writedata(avm_kernel_rd_writedata[104]),
      .avm_local_bb11_ld__1286_inst0_byteenable(avm_kernel_rd_byteenable[104]),
      .avm_local_bb11_ld__1286_inst0_waitrequest(avm_kernel_rd_waitrequest[104]),
      .avm_local_bb11_ld__1286_inst0_readdata(avm_kernel_rd_readdata[104]),
      .avm_local_bb11_ld__1286_inst0_readdatavalid(avm_kernel_rd_readdatavalid[104]),
      .avm_local_bb11_ld__1286_inst0_writeack(avm_kernel_rd_writeack[104]),
      // AVM avm_local_bb11_ld__1288_inst0
      .avm_local_bb11_ld__1288_inst0_enable(avm_kernel_rd_enable[105]),
      .avm_local_bb11_ld__1288_inst0_read(avm_kernel_rd_read[105]),
      .avm_local_bb11_ld__1288_inst0_write(avm_kernel_rd_write[105]),
      .avm_local_bb11_ld__1288_inst0_burstcount(avm_kernel_rd_burstcount[105]),
      .avm_local_bb11_ld__1288_inst0_address(avm_kernel_rd_address[105]),
      .avm_local_bb11_ld__1288_inst0_writedata(avm_kernel_rd_writedata[105]),
      .avm_local_bb11_ld__1288_inst0_byteenable(avm_kernel_rd_byteenable[105]),
      .avm_local_bb11_ld__1288_inst0_waitrequest(avm_kernel_rd_waitrequest[105]),
      .avm_local_bb11_ld__1288_inst0_readdata(avm_kernel_rd_readdata[105]),
      .avm_local_bb11_ld__1288_inst0_readdatavalid(avm_kernel_rd_readdatavalid[105]),
      .avm_local_bb11_ld__1288_inst0_writeack(avm_kernel_rd_writeack[105]),
      // AVM avm_local_bb11_ld__1290_inst0
      .avm_local_bb11_ld__1290_inst0_enable(avm_kernel_rd_enable[106]),
      .avm_local_bb11_ld__1290_inst0_read(avm_kernel_rd_read[106]),
      .avm_local_bb11_ld__1290_inst0_write(avm_kernel_rd_write[106]),
      .avm_local_bb11_ld__1290_inst0_burstcount(avm_kernel_rd_burstcount[106]),
      .avm_local_bb11_ld__1290_inst0_address(avm_kernel_rd_address[106]),
      .avm_local_bb11_ld__1290_inst0_writedata(avm_kernel_rd_writedata[106]),
      .avm_local_bb11_ld__1290_inst0_byteenable(avm_kernel_rd_byteenable[106]),
      .avm_local_bb11_ld__1290_inst0_waitrequest(avm_kernel_rd_waitrequest[106]),
      .avm_local_bb11_ld__1290_inst0_readdata(avm_kernel_rd_readdata[106]),
      .avm_local_bb11_ld__1290_inst0_readdatavalid(avm_kernel_rd_readdatavalid[106]),
      .avm_local_bb11_ld__1290_inst0_writeack(avm_kernel_rd_writeack[106]),
      // AVM avm_local_bb11_ld__inst0
      .avm_local_bb11_ld__inst0_enable(avm_kernel_rd_enable[107]),
      .avm_local_bb11_ld__inst0_read(avm_kernel_rd_read[107]),
      .avm_local_bb11_ld__inst0_write(avm_kernel_rd_write[107]),
      .avm_local_bb11_ld__inst0_burstcount(avm_kernel_rd_burstcount[107]),
      .avm_local_bb11_ld__inst0_address(avm_kernel_rd_address[107]),
      .avm_local_bb11_ld__inst0_writedata(avm_kernel_rd_writedata[107]),
      .avm_local_bb11_ld__inst0_byteenable(avm_kernel_rd_byteenable[107]),
      .avm_local_bb11_ld__inst0_waitrequest(avm_kernel_rd_waitrequest[107]),
      .avm_local_bb11_ld__inst0_readdata(avm_kernel_rd_readdata[107]),
      .avm_local_bb11_ld__inst0_readdatavalid(avm_kernel_rd_readdatavalid[107]),
      .avm_local_bb11_ld__inst0_writeack(avm_kernel_rd_writeack[107]),
      // AVM avm_local_bb11_ld__u46_inst0
      .avm_local_bb11_ld__u46_inst0_enable(avm_kernel_rd_enable[108]),
      .avm_local_bb11_ld__u46_inst0_read(avm_kernel_rd_read[108]),
      .avm_local_bb11_ld__u46_inst0_write(avm_kernel_rd_write[108]),
      .avm_local_bb11_ld__u46_inst0_burstcount(avm_kernel_rd_burstcount[108]),
      .avm_local_bb11_ld__u46_inst0_address(avm_kernel_rd_address[108]),
      .avm_local_bb11_ld__u46_inst0_writedata(avm_kernel_rd_writedata[108]),
      .avm_local_bb11_ld__u46_inst0_byteenable(avm_kernel_rd_byteenable[108]),
      .avm_local_bb11_ld__u46_inst0_waitrequest(avm_kernel_rd_waitrequest[108]),
      .avm_local_bb11_ld__u46_inst0_readdata(avm_kernel_rd_readdata[108]),
      .avm_local_bb11_ld__u46_inst0_readdatavalid(avm_kernel_rd_readdatavalid[108]),
      .avm_local_bb11_ld__u46_inst0_writeack(avm_kernel_rd_writeack[108]),
      // AVM avm_local_bb11_ld__u47_inst0
      .avm_local_bb11_ld__u47_inst0_enable(avm_kernel_rd_enable[109]),
      .avm_local_bb11_ld__u47_inst0_read(avm_kernel_rd_read[109]),
      .avm_local_bb11_ld__u47_inst0_write(avm_kernel_rd_write[109]),
      .avm_local_bb11_ld__u47_inst0_burstcount(avm_kernel_rd_burstcount[109]),
      .avm_local_bb11_ld__u47_inst0_address(avm_kernel_rd_address[109]),
      .avm_local_bb11_ld__u47_inst0_writedata(avm_kernel_rd_writedata[109]),
      .avm_local_bb11_ld__u47_inst0_byteenable(avm_kernel_rd_byteenable[109]),
      .avm_local_bb11_ld__u47_inst0_waitrequest(avm_kernel_rd_waitrequest[109]),
      .avm_local_bb11_ld__u47_inst0_readdata(avm_kernel_rd_readdata[109]),
      .avm_local_bb11_ld__u47_inst0_readdatavalid(avm_kernel_rd_readdatavalid[109]),
      .avm_local_bb11_ld__u47_inst0_writeack(avm_kernel_rd_writeack[109]),
      // AVM avm_local_bb11_ld__u48_inst0
      .avm_local_bb11_ld__u48_inst0_enable(avm_kernel_rd_enable[110]),
      .avm_local_bb11_ld__u48_inst0_read(avm_kernel_rd_read[110]),
      .avm_local_bb11_ld__u48_inst0_write(avm_kernel_rd_write[110]),
      .avm_local_bb11_ld__u48_inst0_burstcount(avm_kernel_rd_burstcount[110]),
      .avm_local_bb11_ld__u48_inst0_address(avm_kernel_rd_address[110]),
      .avm_local_bb11_ld__u48_inst0_writedata(avm_kernel_rd_writedata[110]),
      .avm_local_bb11_ld__u48_inst0_byteenable(avm_kernel_rd_byteenable[110]),
      .avm_local_bb11_ld__u48_inst0_waitrequest(avm_kernel_rd_waitrequest[110]),
      .avm_local_bb11_ld__u48_inst0_readdata(avm_kernel_rd_readdata[110]),
      .avm_local_bb11_ld__u48_inst0_readdatavalid(avm_kernel_rd_readdatavalid[110]),
      .avm_local_bb11_ld__u48_inst0_writeack(avm_kernel_rd_writeack[110]),
      // AVM avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_enable(avm_kernel_rd_enable[111]),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_read(avm_kernel_rd_read[111]),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_write(avm_kernel_rd_write[111]),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_burstcount(avm_kernel_rd_burstcount[111]),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_address(avm_kernel_rd_address[111]),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_writedata(avm_kernel_rd_writedata[111]),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_byteenable(avm_kernel_rd_byteenable[111]),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_waitrequest(avm_kernel_rd_waitrequest[111]),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_readdata(avm_kernel_rd_readdata[111]),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_readdatavalid(avm_kernel_rd_readdatavalid[111]),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_writeack(avm_kernel_rd_writeack[111]),
      // AVM avm_local_bb13_ld__u53_inst0
      .avm_local_bb13_ld__u53_inst0_enable(avm_kernel_rd_enable[112]),
      .avm_local_bb13_ld__u53_inst0_read(avm_kernel_rd_read[112]),
      .avm_local_bb13_ld__u53_inst0_write(avm_kernel_rd_write[112]),
      .avm_local_bb13_ld__u53_inst0_burstcount(avm_kernel_rd_burstcount[112]),
      .avm_local_bb13_ld__u53_inst0_address(avm_kernel_rd_address[112]),
      .avm_local_bb13_ld__u53_inst0_writedata(avm_kernel_rd_writedata[112]),
      .avm_local_bb13_ld__u53_inst0_byteenable(avm_kernel_rd_byteenable[112]),
      .avm_local_bb13_ld__u53_inst0_waitrequest(avm_kernel_rd_waitrequest[112]),
      .avm_local_bb13_ld__u53_inst0_readdata(avm_kernel_rd_readdata[112]),
      .avm_local_bb13_ld__u53_inst0_readdatavalid(avm_kernel_rd_readdatavalid[112]),
      .avm_local_bb13_ld__u53_inst0_writeack(avm_kernel_rd_writeack[112]),
      // AVM avm_local_bb13_ld__u54_inst0
      .avm_local_bb13_ld__u54_inst0_enable(avm_kernel_rd_enable[113]),
      .avm_local_bb13_ld__u54_inst0_read(avm_kernel_rd_read[113]),
      .avm_local_bb13_ld__u54_inst0_write(avm_kernel_rd_write[113]),
      .avm_local_bb13_ld__u54_inst0_burstcount(avm_kernel_rd_burstcount[113]),
      .avm_local_bb13_ld__u54_inst0_address(avm_kernel_rd_address[113]),
      .avm_local_bb13_ld__u54_inst0_writedata(avm_kernel_rd_writedata[113]),
      .avm_local_bb13_ld__u54_inst0_byteenable(avm_kernel_rd_byteenable[113]),
      .avm_local_bb13_ld__u54_inst0_waitrequest(avm_kernel_rd_waitrequest[113]),
      .avm_local_bb13_ld__u54_inst0_readdata(avm_kernel_rd_readdata[113]),
      .avm_local_bb13_ld__u54_inst0_readdatavalid(avm_kernel_rd_readdatavalid[113]),
      .avm_local_bb13_ld__u54_inst0_writeack(avm_kernel_rd_writeack[113]),
      // AVM avm_local_bb13_ld__u55_inst0
      .avm_local_bb13_ld__u55_inst0_enable(avm_kernel_rd_enable[114]),
      .avm_local_bb13_ld__u55_inst0_read(avm_kernel_rd_read[114]),
      .avm_local_bb13_ld__u55_inst0_write(avm_kernel_rd_write[114]),
      .avm_local_bb13_ld__u55_inst0_burstcount(avm_kernel_rd_burstcount[114]),
      .avm_local_bb13_ld__u55_inst0_address(avm_kernel_rd_address[114]),
      .avm_local_bb13_ld__u55_inst0_writedata(avm_kernel_rd_writedata[114]),
      .avm_local_bb13_ld__u55_inst0_byteenable(avm_kernel_rd_byteenable[114]),
      .avm_local_bb13_ld__u55_inst0_waitrequest(avm_kernel_rd_waitrequest[114]),
      .avm_local_bb13_ld__u55_inst0_readdata(avm_kernel_rd_readdata[114]),
      .avm_local_bb13_ld__u55_inst0_readdatavalid(avm_kernel_rd_readdatavalid[114]),
      .avm_local_bb13_ld__u55_inst0_writeack(avm_kernel_rd_writeack[114]),
      // AVM avm_local_bb13_ld__u56_inst0
      .avm_local_bb13_ld__u56_inst0_enable(avm_kernel_rd_enable[115]),
      .avm_local_bb13_ld__u56_inst0_read(avm_kernel_rd_read[115]),
      .avm_local_bb13_ld__u56_inst0_write(avm_kernel_rd_write[115]),
      .avm_local_bb13_ld__u56_inst0_burstcount(avm_kernel_rd_burstcount[115]),
      .avm_local_bb13_ld__u56_inst0_address(avm_kernel_rd_address[115]),
      .avm_local_bb13_ld__u56_inst0_writedata(avm_kernel_rd_writedata[115]),
      .avm_local_bb13_ld__u56_inst0_byteenable(avm_kernel_rd_byteenable[115]),
      .avm_local_bb13_ld__u56_inst0_waitrequest(avm_kernel_rd_waitrequest[115]),
      .avm_local_bb13_ld__u56_inst0_readdata(avm_kernel_rd_readdata[115]),
      .avm_local_bb13_ld__u56_inst0_readdatavalid(avm_kernel_rd_readdatavalid[115]),
      .avm_local_bb13_ld__u56_inst0_writeack(avm_kernel_rd_writeack[115]),
      // AVM avm_local_bb13_ld__u57_inst0
      .avm_local_bb13_ld__u57_inst0_enable(avm_kernel_rd_enable[116]),
      .avm_local_bb13_ld__u57_inst0_read(avm_kernel_rd_read[116]),
      .avm_local_bb13_ld__u57_inst0_write(avm_kernel_rd_write[116]),
      .avm_local_bb13_ld__u57_inst0_burstcount(avm_kernel_rd_burstcount[116]),
      .avm_local_bb13_ld__u57_inst0_address(avm_kernel_rd_address[116]),
      .avm_local_bb13_ld__u57_inst0_writedata(avm_kernel_rd_writedata[116]),
      .avm_local_bb13_ld__u57_inst0_byteenable(avm_kernel_rd_byteenable[116]),
      .avm_local_bb13_ld__u57_inst0_waitrequest(avm_kernel_rd_waitrequest[116]),
      .avm_local_bb13_ld__u57_inst0_readdata(avm_kernel_rd_readdata[116]),
      .avm_local_bb13_ld__u57_inst0_readdatavalid(avm_kernel_rd_readdatavalid[116]),
      .avm_local_bb13_ld__u57_inst0_writeack(avm_kernel_rd_writeack[116]),
      // AVM avm_local_bb13_ld__u58_inst0
      .avm_local_bb13_ld__u58_inst0_enable(avm_kernel_rd_enable[117]),
      .avm_local_bb13_ld__u58_inst0_read(avm_kernel_rd_read[117]),
      .avm_local_bb13_ld__u58_inst0_write(avm_kernel_rd_write[117]),
      .avm_local_bb13_ld__u58_inst0_burstcount(avm_kernel_rd_burstcount[117]),
      .avm_local_bb13_ld__u58_inst0_address(avm_kernel_rd_address[117]),
      .avm_local_bb13_ld__u58_inst0_writedata(avm_kernel_rd_writedata[117]),
      .avm_local_bb13_ld__u58_inst0_byteenable(avm_kernel_rd_byteenable[117]),
      .avm_local_bb13_ld__u58_inst0_waitrequest(avm_kernel_rd_waitrequest[117]),
      .avm_local_bb13_ld__u58_inst0_readdata(avm_kernel_rd_readdata[117]),
      .avm_local_bb13_ld__u58_inst0_readdatavalid(avm_kernel_rd_readdatavalid[117]),
      .avm_local_bb13_ld__u58_inst0_writeack(avm_kernel_rd_writeack[117]),
      // AVM avm_local_bb13_ld__u59_inst0
      .avm_local_bb13_ld__u59_inst0_enable(avm_kernel_rd_enable[118]),
      .avm_local_bb13_ld__u59_inst0_read(avm_kernel_rd_read[118]),
      .avm_local_bb13_ld__u59_inst0_write(avm_kernel_rd_write[118]),
      .avm_local_bb13_ld__u59_inst0_burstcount(avm_kernel_rd_burstcount[118]),
      .avm_local_bb13_ld__u59_inst0_address(avm_kernel_rd_address[118]),
      .avm_local_bb13_ld__u59_inst0_writedata(avm_kernel_rd_writedata[118]),
      .avm_local_bb13_ld__u59_inst0_byteenable(avm_kernel_rd_byteenable[118]),
      .avm_local_bb13_ld__u59_inst0_waitrequest(avm_kernel_rd_waitrequest[118]),
      .avm_local_bb13_ld__u59_inst0_readdata(avm_kernel_rd_readdata[118]),
      .avm_local_bb13_ld__u59_inst0_readdatavalid(avm_kernel_rd_readdatavalid[118]),
      .avm_local_bb13_ld__u59_inst0_writeack(avm_kernel_rd_writeack[118]),
      // AVM avm_local_bb13_ld__u60_inst0
      .avm_local_bb13_ld__u60_inst0_enable(avm_kernel_rd_enable[119]),
      .avm_local_bb13_ld__u60_inst0_read(avm_kernel_rd_read[119]),
      .avm_local_bb13_ld__u60_inst0_write(avm_kernel_rd_write[119]),
      .avm_local_bb13_ld__u60_inst0_burstcount(avm_kernel_rd_burstcount[119]),
      .avm_local_bb13_ld__u60_inst0_address(avm_kernel_rd_address[119]),
      .avm_local_bb13_ld__u60_inst0_writedata(avm_kernel_rd_writedata[119]),
      .avm_local_bb13_ld__u60_inst0_byteenable(avm_kernel_rd_byteenable[119]),
      .avm_local_bb13_ld__u60_inst0_waitrequest(avm_kernel_rd_waitrequest[119]),
      .avm_local_bb13_ld__u60_inst0_readdata(avm_kernel_rd_readdata[119]),
      .avm_local_bb13_ld__u60_inst0_readdatavalid(avm_kernel_rd_readdatavalid[119]),
      .avm_local_bb13_ld__u60_inst0_writeack(avm_kernel_rd_writeack[119]),
      // AVM avm_local_bb13_ld__u61_inst0
      .avm_local_bb13_ld__u61_inst0_enable(avm_kernel_rd_enable[120]),
      .avm_local_bb13_ld__u61_inst0_read(avm_kernel_rd_read[120]),
      .avm_local_bb13_ld__u61_inst0_write(avm_kernel_rd_write[120]),
      .avm_local_bb13_ld__u61_inst0_burstcount(avm_kernel_rd_burstcount[120]),
      .avm_local_bb13_ld__u61_inst0_address(avm_kernel_rd_address[120]),
      .avm_local_bb13_ld__u61_inst0_writedata(avm_kernel_rd_writedata[120]),
      .avm_local_bb13_ld__u61_inst0_byteenable(avm_kernel_rd_byteenable[120]),
      .avm_local_bb13_ld__u61_inst0_waitrequest(avm_kernel_rd_waitrequest[120]),
      .avm_local_bb13_ld__u61_inst0_readdata(avm_kernel_rd_readdata[120]),
      .avm_local_bb13_ld__u61_inst0_readdatavalid(avm_kernel_rd_readdatavalid[120]),
      .avm_local_bb13_ld__u61_inst0_writeack(avm_kernel_rd_writeack[120]),
      // AVM avm_local_bb13_ld__u62_inst0
      .avm_local_bb13_ld__u62_inst0_enable(avm_kernel_rd_enable[121]),
      .avm_local_bb13_ld__u62_inst0_read(avm_kernel_rd_read[121]),
      .avm_local_bb13_ld__u62_inst0_write(avm_kernel_rd_write[121]),
      .avm_local_bb13_ld__u62_inst0_burstcount(avm_kernel_rd_burstcount[121]),
      .avm_local_bb13_ld__u62_inst0_address(avm_kernel_rd_address[121]),
      .avm_local_bb13_ld__u62_inst0_writedata(avm_kernel_rd_writedata[121]),
      .avm_local_bb13_ld__u62_inst0_byteenable(avm_kernel_rd_byteenable[121]),
      .avm_local_bb13_ld__u62_inst0_waitrequest(avm_kernel_rd_waitrequest[121]),
      .avm_local_bb13_ld__u62_inst0_readdata(avm_kernel_rd_readdata[121]),
      .avm_local_bb13_ld__u62_inst0_readdatavalid(avm_kernel_rd_readdatavalid[121]),
      .avm_local_bb13_ld__u62_inst0_writeack(avm_kernel_rd_writeack[121]),
      // AVM avm_local_bb13_ld__u63_inst0
      .avm_local_bb13_ld__u63_inst0_enable(avm_kernel_rd_enable[122]),
      .avm_local_bb13_ld__u63_inst0_read(avm_kernel_rd_read[122]),
      .avm_local_bb13_ld__u63_inst0_write(avm_kernel_rd_write[122]),
      .avm_local_bb13_ld__u63_inst0_burstcount(avm_kernel_rd_burstcount[122]),
      .avm_local_bb13_ld__u63_inst0_address(avm_kernel_rd_address[122]),
      .avm_local_bb13_ld__u63_inst0_writedata(avm_kernel_rd_writedata[122]),
      .avm_local_bb13_ld__u63_inst0_byteenable(avm_kernel_rd_byteenable[122]),
      .avm_local_bb13_ld__u63_inst0_waitrequest(avm_kernel_rd_waitrequest[122]),
      .avm_local_bb13_ld__u63_inst0_readdata(avm_kernel_rd_readdata[122]),
      .avm_local_bb13_ld__u63_inst0_readdatavalid(avm_kernel_rd_readdatavalid[122]),
      .avm_local_bb13_ld__u63_inst0_writeack(avm_kernel_rd_writeack[122]),
      // AVM avm_local_bb13_ld__u64_inst0
      .avm_local_bb13_ld__u64_inst0_enable(avm_kernel_rd_enable[123]),
      .avm_local_bb13_ld__u64_inst0_read(avm_kernel_rd_read[123]),
      .avm_local_bb13_ld__u64_inst0_write(avm_kernel_rd_write[123]),
      .avm_local_bb13_ld__u64_inst0_burstcount(avm_kernel_rd_burstcount[123]),
      .avm_local_bb13_ld__u64_inst0_address(avm_kernel_rd_address[123]),
      .avm_local_bb13_ld__u64_inst0_writedata(avm_kernel_rd_writedata[123]),
      .avm_local_bb13_ld__u64_inst0_byteenable(avm_kernel_rd_byteenable[123]),
      .avm_local_bb13_ld__u64_inst0_waitrequest(avm_kernel_rd_waitrequest[123]),
      .avm_local_bb13_ld__u64_inst0_readdata(avm_kernel_rd_readdata[123]),
      .avm_local_bb13_ld__u64_inst0_readdatavalid(avm_kernel_rd_readdatavalid[123]),
      .avm_local_bb13_ld__u64_inst0_writeack(avm_kernel_rd_writeack[123]),
      // AVM avm_local_bb13_ld__u65_inst0
      .avm_local_bb13_ld__u65_inst0_enable(avm_kernel_rd_enable[124]),
      .avm_local_bb13_ld__u65_inst0_read(avm_kernel_rd_read[124]),
      .avm_local_bb13_ld__u65_inst0_write(avm_kernel_rd_write[124]),
      .avm_local_bb13_ld__u65_inst0_burstcount(avm_kernel_rd_burstcount[124]),
      .avm_local_bb13_ld__u65_inst0_address(avm_kernel_rd_address[124]),
      .avm_local_bb13_ld__u65_inst0_writedata(avm_kernel_rd_writedata[124]),
      .avm_local_bb13_ld__u65_inst0_byteenable(avm_kernel_rd_byteenable[124]),
      .avm_local_bb13_ld__u65_inst0_waitrequest(avm_kernel_rd_waitrequest[124]),
      .avm_local_bb13_ld__u65_inst0_readdata(avm_kernel_rd_readdata[124]),
      .avm_local_bb13_ld__u65_inst0_readdatavalid(avm_kernel_rd_readdatavalid[124]),
      .avm_local_bb13_ld__u65_inst0_writeack(avm_kernel_rd_writeack[124]),
      // AVM avm_local_bb13_ld__u66_inst0
      .avm_local_bb13_ld__u66_inst0_enable(avm_kernel_rd_enable[125]),
      .avm_local_bb13_ld__u66_inst0_read(avm_kernel_rd_read[125]),
      .avm_local_bb13_ld__u66_inst0_write(avm_kernel_rd_write[125]),
      .avm_local_bb13_ld__u66_inst0_burstcount(avm_kernel_rd_burstcount[125]),
      .avm_local_bb13_ld__u66_inst0_address(avm_kernel_rd_address[125]),
      .avm_local_bb13_ld__u66_inst0_writedata(avm_kernel_rd_writedata[125]),
      .avm_local_bb13_ld__u66_inst0_byteenable(avm_kernel_rd_byteenable[125]),
      .avm_local_bb13_ld__u66_inst0_waitrequest(avm_kernel_rd_waitrequest[125]),
      .avm_local_bb13_ld__u66_inst0_readdata(avm_kernel_rd_readdata[125]),
      .avm_local_bb13_ld__u66_inst0_readdatavalid(avm_kernel_rd_readdatavalid[125]),
      .avm_local_bb13_ld__u66_inst0_writeack(avm_kernel_rd_writeack[125]),
      // AVM avm_local_bb13_ld__u67_inst0
      .avm_local_bb13_ld__u67_inst0_enable(avm_kernel_rd_enable[126]),
      .avm_local_bb13_ld__u67_inst0_read(avm_kernel_rd_read[126]),
      .avm_local_bb13_ld__u67_inst0_write(avm_kernel_rd_write[126]),
      .avm_local_bb13_ld__u67_inst0_burstcount(avm_kernel_rd_burstcount[126]),
      .avm_local_bb13_ld__u67_inst0_address(avm_kernel_rd_address[126]),
      .avm_local_bb13_ld__u67_inst0_writedata(avm_kernel_rd_writedata[126]),
      .avm_local_bb13_ld__u67_inst0_byteenable(avm_kernel_rd_byteenable[126]),
      .avm_local_bb13_ld__u67_inst0_waitrequest(avm_kernel_rd_waitrequest[126]),
      .avm_local_bb13_ld__u67_inst0_readdata(avm_kernel_rd_readdata[126]),
      .avm_local_bb13_ld__u67_inst0_readdatavalid(avm_kernel_rd_readdatavalid[126]),
      .avm_local_bb13_ld__u67_inst0_writeack(avm_kernel_rd_writeack[126]),
      // AVM avm_local_bb13_ld__u68_inst0
      .avm_local_bb13_ld__u68_inst0_enable(avm_kernel_rd_enable[127]),
      .avm_local_bb13_ld__u68_inst0_read(avm_kernel_rd_read[127]),
      .avm_local_bb13_ld__u68_inst0_write(avm_kernel_rd_write[127]),
      .avm_local_bb13_ld__u68_inst0_burstcount(avm_kernel_rd_burstcount[127]),
      .avm_local_bb13_ld__u68_inst0_address(avm_kernel_rd_address[127]),
      .avm_local_bb13_ld__u68_inst0_writedata(avm_kernel_rd_writedata[127]),
      .avm_local_bb13_ld__u68_inst0_byteenable(avm_kernel_rd_byteenable[127]),
      .avm_local_bb13_ld__u68_inst0_waitrequest(avm_kernel_rd_waitrequest[127]),
      .avm_local_bb13_ld__u68_inst0_readdata(avm_kernel_rd_readdata[127]),
      .avm_local_bb13_ld__u68_inst0_readdatavalid(avm_kernel_rd_readdatavalid[127]),
      .avm_local_bb13_ld__u68_inst0_writeack(avm_kernel_rd_writeack[127]),
      // AVM avm_local_bb13_ld__u69_inst0
      .avm_local_bb13_ld__u69_inst0_enable(avm_kernel_rd_enable[128]),
      .avm_local_bb13_ld__u69_inst0_read(avm_kernel_rd_read[128]),
      .avm_local_bb13_ld__u69_inst0_write(avm_kernel_rd_write[128]),
      .avm_local_bb13_ld__u69_inst0_burstcount(avm_kernel_rd_burstcount[128]),
      .avm_local_bb13_ld__u69_inst0_address(avm_kernel_rd_address[128]),
      .avm_local_bb13_ld__u69_inst0_writedata(avm_kernel_rd_writedata[128]),
      .avm_local_bb13_ld__u69_inst0_byteenable(avm_kernel_rd_byteenable[128]),
      .avm_local_bb13_ld__u69_inst0_waitrequest(avm_kernel_rd_waitrequest[128]),
      .avm_local_bb13_ld__u69_inst0_readdata(avm_kernel_rd_readdata[128]),
      .avm_local_bb13_ld__u69_inst0_readdatavalid(avm_kernel_rd_readdatavalid[128]),
      .avm_local_bb13_ld__u69_inst0_writeack(avm_kernel_rd_writeack[128]),
      // AVM avm_local_bb13_ld__u70_inst0
      .avm_local_bb13_ld__u70_inst0_enable(avm_kernel_rd_enable[129]),
      .avm_local_bb13_ld__u70_inst0_read(avm_kernel_rd_read[129]),
      .avm_local_bb13_ld__u70_inst0_write(avm_kernel_rd_write[129]),
      .avm_local_bb13_ld__u70_inst0_burstcount(avm_kernel_rd_burstcount[129]),
      .avm_local_bb13_ld__u70_inst0_address(avm_kernel_rd_address[129]),
      .avm_local_bb13_ld__u70_inst0_writedata(avm_kernel_rd_writedata[129]),
      .avm_local_bb13_ld__u70_inst0_byteenable(avm_kernel_rd_byteenable[129]),
      .avm_local_bb13_ld__u70_inst0_waitrequest(avm_kernel_rd_waitrequest[129]),
      .avm_local_bb13_ld__u70_inst0_readdata(avm_kernel_rd_readdata[129]),
      .avm_local_bb13_ld__u70_inst0_readdatavalid(avm_kernel_rd_readdatavalid[129]),
      .avm_local_bb13_ld__u70_inst0_writeack(avm_kernel_rd_writeack[129]),
      // AVM avm_local_bb13_ld__u71_inst0
      .avm_local_bb13_ld__u71_inst0_enable(avm_kernel_rd_enable[130]),
      .avm_local_bb13_ld__u71_inst0_read(avm_kernel_rd_read[130]),
      .avm_local_bb13_ld__u71_inst0_write(avm_kernel_rd_write[130]),
      .avm_local_bb13_ld__u71_inst0_burstcount(avm_kernel_rd_burstcount[130]),
      .avm_local_bb13_ld__u71_inst0_address(avm_kernel_rd_address[130]),
      .avm_local_bb13_ld__u71_inst0_writedata(avm_kernel_rd_writedata[130]),
      .avm_local_bb13_ld__u71_inst0_byteenable(avm_kernel_rd_byteenable[130]),
      .avm_local_bb13_ld__u71_inst0_waitrequest(avm_kernel_rd_waitrequest[130]),
      .avm_local_bb13_ld__u71_inst0_readdata(avm_kernel_rd_readdata[130]),
      .avm_local_bb13_ld__u71_inst0_readdatavalid(avm_kernel_rd_readdatavalid[130]),
      .avm_local_bb13_ld__u71_inst0_writeack(avm_kernel_rd_writeack[130]),
      // AVM avm_local_bb13_ld__u72_inst0
      .avm_local_bb13_ld__u72_inst0_enable(avm_kernel_rd_enable[131]),
      .avm_local_bb13_ld__u72_inst0_read(avm_kernel_rd_read[131]),
      .avm_local_bb13_ld__u72_inst0_write(avm_kernel_rd_write[131]),
      .avm_local_bb13_ld__u72_inst0_burstcount(avm_kernel_rd_burstcount[131]),
      .avm_local_bb13_ld__u72_inst0_address(avm_kernel_rd_address[131]),
      .avm_local_bb13_ld__u72_inst0_writedata(avm_kernel_rd_writedata[131]),
      .avm_local_bb13_ld__u72_inst0_byteenable(avm_kernel_rd_byteenable[131]),
      .avm_local_bb13_ld__u72_inst0_waitrequest(avm_kernel_rd_waitrequest[131]),
      .avm_local_bb13_ld__u72_inst0_readdata(avm_kernel_rd_readdata[131]),
      .avm_local_bb13_ld__u72_inst0_readdatavalid(avm_kernel_rd_readdatavalid[131]),
      .avm_local_bb13_ld__u72_inst0_writeack(avm_kernel_rd_writeack[131]),
      // AVM avm_local_bb13_ld__u73_inst0
      .avm_local_bb13_ld__u73_inst0_enable(avm_kernel_rd_enable[132]),
      .avm_local_bb13_ld__u73_inst0_read(avm_kernel_rd_read[132]),
      .avm_local_bb13_ld__u73_inst0_write(avm_kernel_rd_write[132]),
      .avm_local_bb13_ld__u73_inst0_burstcount(avm_kernel_rd_burstcount[132]),
      .avm_local_bb13_ld__u73_inst0_address(avm_kernel_rd_address[132]),
      .avm_local_bb13_ld__u73_inst0_writedata(avm_kernel_rd_writedata[132]),
      .avm_local_bb13_ld__u73_inst0_byteenable(avm_kernel_rd_byteenable[132]),
      .avm_local_bb13_ld__u73_inst0_waitrequest(avm_kernel_rd_waitrequest[132]),
      .avm_local_bb13_ld__u73_inst0_readdata(avm_kernel_rd_readdata[132]),
      .avm_local_bb13_ld__u73_inst0_readdatavalid(avm_kernel_rd_readdatavalid[132]),
      .avm_local_bb13_ld__u73_inst0_writeack(avm_kernel_rd_writeack[132]),
      // AVM avm_local_bb13_ld__u74_inst0
      .avm_local_bb13_ld__u74_inst0_enable(avm_kernel_rd_enable[133]),
      .avm_local_bb13_ld__u74_inst0_read(avm_kernel_rd_read[133]),
      .avm_local_bb13_ld__u74_inst0_write(avm_kernel_rd_write[133]),
      .avm_local_bb13_ld__u74_inst0_burstcount(avm_kernel_rd_burstcount[133]),
      .avm_local_bb13_ld__u74_inst0_address(avm_kernel_rd_address[133]),
      .avm_local_bb13_ld__u74_inst0_writedata(avm_kernel_rd_writedata[133]),
      .avm_local_bb13_ld__u74_inst0_byteenable(avm_kernel_rd_byteenable[133]),
      .avm_local_bb13_ld__u74_inst0_waitrequest(avm_kernel_rd_waitrequest[133]),
      .avm_local_bb13_ld__u74_inst0_readdata(avm_kernel_rd_readdata[133]),
      .avm_local_bb13_ld__u74_inst0_readdatavalid(avm_kernel_rd_readdatavalid[133]),
      .avm_local_bb13_ld__u74_inst0_writeack(avm_kernel_rd_writeack[133]),
      // AVM avm_local_bb13_ld__u75_inst0
      .avm_local_bb13_ld__u75_inst0_enable(avm_kernel_rd_enable[134]),
      .avm_local_bb13_ld__u75_inst0_read(avm_kernel_rd_read[134]),
      .avm_local_bb13_ld__u75_inst0_write(avm_kernel_rd_write[134]),
      .avm_local_bb13_ld__u75_inst0_burstcount(avm_kernel_rd_burstcount[134]),
      .avm_local_bb13_ld__u75_inst0_address(avm_kernel_rd_address[134]),
      .avm_local_bb13_ld__u75_inst0_writedata(avm_kernel_rd_writedata[134]),
      .avm_local_bb13_ld__u75_inst0_byteenable(avm_kernel_rd_byteenable[134]),
      .avm_local_bb13_ld__u75_inst0_waitrequest(avm_kernel_rd_waitrequest[134]),
      .avm_local_bb13_ld__u75_inst0_readdata(avm_kernel_rd_readdata[134]),
      .avm_local_bb13_ld__u75_inst0_readdatavalid(avm_kernel_rd_readdatavalid[134]),
      .avm_local_bb13_ld__u75_inst0_writeack(avm_kernel_rd_writeack[134]),
      // AVM avm_local_bb13_ld__u76_inst0
      .avm_local_bb13_ld__u76_inst0_enable(avm_kernel_rd_enable[135]),
      .avm_local_bb13_ld__u76_inst0_read(avm_kernel_rd_read[135]),
      .avm_local_bb13_ld__u76_inst0_write(avm_kernel_rd_write[135]),
      .avm_local_bb13_ld__u76_inst0_burstcount(avm_kernel_rd_burstcount[135]),
      .avm_local_bb13_ld__u76_inst0_address(avm_kernel_rd_address[135]),
      .avm_local_bb13_ld__u76_inst0_writedata(avm_kernel_rd_writedata[135]),
      .avm_local_bb13_ld__u76_inst0_byteenable(avm_kernel_rd_byteenable[135]),
      .avm_local_bb13_ld__u76_inst0_waitrequest(avm_kernel_rd_waitrequest[135]),
      .avm_local_bb13_ld__u76_inst0_readdata(avm_kernel_rd_readdata[135]),
      .avm_local_bb13_ld__u76_inst0_readdatavalid(avm_kernel_rd_readdatavalid[135]),
      .avm_local_bb13_ld__u76_inst0_writeack(avm_kernel_rd_writeack[135]),
      // AVM avm_local_bb13_ld__u77_inst0
      .avm_local_bb13_ld__u77_inst0_enable(avm_kernel_rd_enable[136]),
      .avm_local_bb13_ld__u77_inst0_read(avm_kernel_rd_read[136]),
      .avm_local_bb13_ld__u77_inst0_write(avm_kernel_rd_write[136]),
      .avm_local_bb13_ld__u77_inst0_burstcount(avm_kernel_rd_burstcount[136]),
      .avm_local_bb13_ld__u77_inst0_address(avm_kernel_rd_address[136]),
      .avm_local_bb13_ld__u77_inst0_writedata(avm_kernel_rd_writedata[136]),
      .avm_local_bb13_ld__u77_inst0_byteenable(avm_kernel_rd_byteenable[136]),
      .avm_local_bb13_ld__u77_inst0_waitrequest(avm_kernel_rd_waitrequest[136]),
      .avm_local_bb13_ld__u77_inst0_readdata(avm_kernel_rd_readdata[136]),
      .avm_local_bb13_ld__u77_inst0_readdatavalid(avm_kernel_rd_readdatavalid[136]),
      .avm_local_bb13_ld__u77_inst0_writeack(avm_kernel_rd_writeack[136]),
      // AVM avm_local_bb13_ld__u78_inst0
      .avm_local_bb13_ld__u78_inst0_enable(avm_kernel_rd_enable[137]),
      .avm_local_bb13_ld__u78_inst0_read(avm_kernel_rd_read[137]),
      .avm_local_bb13_ld__u78_inst0_write(avm_kernel_rd_write[137]),
      .avm_local_bb13_ld__u78_inst0_burstcount(avm_kernel_rd_burstcount[137]),
      .avm_local_bb13_ld__u78_inst0_address(avm_kernel_rd_address[137]),
      .avm_local_bb13_ld__u78_inst0_writedata(avm_kernel_rd_writedata[137]),
      .avm_local_bb13_ld__u78_inst0_byteenable(avm_kernel_rd_byteenable[137]),
      .avm_local_bb13_ld__u78_inst0_waitrequest(avm_kernel_rd_waitrequest[137]),
      .avm_local_bb13_ld__u78_inst0_readdata(avm_kernel_rd_readdata[137]),
      .avm_local_bb13_ld__u78_inst0_readdatavalid(avm_kernel_rd_readdatavalid[137]),
      .avm_local_bb13_ld__u78_inst0_writeack(avm_kernel_rd_writeack[137]),
      // AVM avm_local_bb15_ld__u85_inst0
      .avm_local_bb15_ld__u85_inst0_enable(avm_kernel_rd_enable[138]),
      .avm_local_bb15_ld__u85_inst0_read(avm_kernel_rd_read[138]),
      .avm_local_bb15_ld__u85_inst0_write(avm_kernel_rd_write[138]),
      .avm_local_bb15_ld__u85_inst0_burstcount(avm_kernel_rd_burstcount[138]),
      .avm_local_bb15_ld__u85_inst0_address(avm_kernel_rd_address[138]),
      .avm_local_bb15_ld__u85_inst0_writedata(avm_kernel_rd_writedata[138]),
      .avm_local_bb15_ld__u85_inst0_byteenable(avm_kernel_rd_byteenable[138]),
      .avm_local_bb15_ld__u85_inst0_waitrequest(avm_kernel_rd_waitrequest[138]),
      .avm_local_bb15_ld__u85_inst0_readdata(avm_kernel_rd_readdata[138]),
      .avm_local_bb15_ld__u85_inst0_readdatavalid(avm_kernel_rd_readdatavalid[138]),
      .avm_local_bb15_ld__u85_inst0_writeack(avm_kernel_rd_writeack[138]),
      // AVM avm_local_bb15_ld__u86_inst0
      .avm_local_bb15_ld__u86_inst0_enable(avm_kernel_rd_enable[139]),
      .avm_local_bb15_ld__u86_inst0_read(avm_kernel_rd_read[139]),
      .avm_local_bb15_ld__u86_inst0_write(avm_kernel_rd_write[139]),
      .avm_local_bb15_ld__u86_inst0_burstcount(avm_kernel_rd_burstcount[139]),
      .avm_local_bb15_ld__u86_inst0_address(avm_kernel_rd_address[139]),
      .avm_local_bb15_ld__u86_inst0_writedata(avm_kernel_rd_writedata[139]),
      .avm_local_bb15_ld__u86_inst0_byteenable(avm_kernel_rd_byteenable[139]),
      .avm_local_bb15_ld__u86_inst0_waitrequest(avm_kernel_rd_waitrequest[139]),
      .avm_local_bb15_ld__u86_inst0_readdata(avm_kernel_rd_readdata[139]),
      .avm_local_bb15_ld__u86_inst0_readdatavalid(avm_kernel_rd_readdatavalid[139]),
      .avm_local_bb15_ld__u86_inst0_writeack(avm_kernel_rd_writeack[139]),
      // AVM avm_local_bb15_ld__u87_inst0
      .avm_local_bb15_ld__u87_inst0_enable(avm_kernel_rd_enable[140]),
      .avm_local_bb15_ld__u87_inst0_read(avm_kernel_rd_read[140]),
      .avm_local_bb15_ld__u87_inst0_write(avm_kernel_rd_write[140]),
      .avm_local_bb15_ld__u87_inst0_burstcount(avm_kernel_rd_burstcount[140]),
      .avm_local_bb15_ld__u87_inst0_address(avm_kernel_rd_address[140]),
      .avm_local_bb15_ld__u87_inst0_writedata(avm_kernel_rd_writedata[140]),
      .avm_local_bb15_ld__u87_inst0_byteenable(avm_kernel_rd_byteenable[140]),
      .avm_local_bb15_ld__u87_inst0_waitrequest(avm_kernel_rd_waitrequest[140]),
      .avm_local_bb15_ld__u87_inst0_readdata(avm_kernel_rd_readdata[140]),
      .avm_local_bb15_ld__u87_inst0_readdatavalid(avm_kernel_rd_readdatavalid[140]),
      .avm_local_bb15_ld__u87_inst0_writeack(avm_kernel_rd_writeack[140]),
      // AVM avm_local_bb15_ld__u88_inst0
      .avm_local_bb15_ld__u88_inst0_enable(avm_kernel_rd_enable[141]),
      .avm_local_bb15_ld__u88_inst0_read(avm_kernel_rd_read[141]),
      .avm_local_bb15_ld__u88_inst0_write(avm_kernel_rd_write[141]),
      .avm_local_bb15_ld__u88_inst0_burstcount(avm_kernel_rd_burstcount[141]),
      .avm_local_bb15_ld__u88_inst0_address(avm_kernel_rd_address[141]),
      .avm_local_bb15_ld__u88_inst0_writedata(avm_kernel_rd_writedata[141]),
      .avm_local_bb15_ld__u88_inst0_byteenable(avm_kernel_rd_byteenable[141]),
      .avm_local_bb15_ld__u88_inst0_waitrequest(avm_kernel_rd_waitrequest[141]),
      .avm_local_bb15_ld__u88_inst0_readdata(avm_kernel_rd_readdata[141]),
      .avm_local_bb15_ld__u88_inst0_readdatavalid(avm_kernel_rd_readdatavalid[141]),
      .avm_local_bb15_ld__u88_inst0_writeack(avm_kernel_rd_writeack[141]),
      // AVM avm_local_bb15_ld__u89_inst0
      .avm_local_bb15_ld__u89_inst0_enable(avm_kernel_rd_enable[142]),
      .avm_local_bb15_ld__u89_inst0_read(avm_kernel_rd_read[142]),
      .avm_local_bb15_ld__u89_inst0_write(avm_kernel_rd_write[142]),
      .avm_local_bb15_ld__u89_inst0_burstcount(avm_kernel_rd_burstcount[142]),
      .avm_local_bb15_ld__u89_inst0_address(avm_kernel_rd_address[142]),
      .avm_local_bb15_ld__u89_inst0_writedata(avm_kernel_rd_writedata[142]),
      .avm_local_bb15_ld__u89_inst0_byteenable(avm_kernel_rd_byteenable[142]),
      .avm_local_bb15_ld__u89_inst0_waitrequest(avm_kernel_rd_waitrequest[142]),
      .avm_local_bb15_ld__u89_inst0_readdata(avm_kernel_rd_readdata[142]),
      .avm_local_bb15_ld__u89_inst0_readdatavalid(avm_kernel_rd_readdatavalid[142]),
      .avm_local_bb15_ld__u89_inst0_writeack(avm_kernel_rd_writeack[142]),
      // AVM avm_local_bb15_ld__u91_inst0
      .avm_local_bb15_ld__u91_inst0_enable(avm_kernel_rd_enable[143]),
      .avm_local_bb15_ld__u91_inst0_read(avm_kernel_rd_read[143]),
      .avm_local_bb15_ld__u91_inst0_write(avm_kernel_rd_write[143]),
      .avm_local_bb15_ld__u91_inst0_burstcount(avm_kernel_rd_burstcount[143]),
      .avm_local_bb15_ld__u91_inst0_address(avm_kernel_rd_address[143]),
      .avm_local_bb15_ld__u91_inst0_writedata(avm_kernel_rd_writedata[143]),
      .avm_local_bb15_ld__u91_inst0_byteenable(avm_kernel_rd_byteenable[143]),
      .avm_local_bb15_ld__u91_inst0_waitrequest(avm_kernel_rd_waitrequest[143]),
      .avm_local_bb15_ld__u91_inst0_readdata(avm_kernel_rd_readdata[143]),
      .avm_local_bb15_ld__u91_inst0_readdatavalid(avm_kernel_rd_readdatavalid[143]),
      .avm_local_bb15_ld__u91_inst0_writeack(avm_kernel_rd_writeack[143]),
      // AVM avm_local_bb15_ld__u92_inst0
      .avm_local_bb15_ld__u92_inst0_enable(avm_kernel_rd_enable[144]),
      .avm_local_bb15_ld__u92_inst0_read(avm_kernel_rd_read[144]),
      .avm_local_bb15_ld__u92_inst0_write(avm_kernel_rd_write[144]),
      .avm_local_bb15_ld__u92_inst0_burstcount(avm_kernel_rd_burstcount[144]),
      .avm_local_bb15_ld__u92_inst0_address(avm_kernel_rd_address[144]),
      .avm_local_bb15_ld__u92_inst0_writedata(avm_kernel_rd_writedata[144]),
      .avm_local_bb15_ld__u92_inst0_byteenable(avm_kernel_rd_byteenable[144]),
      .avm_local_bb15_ld__u92_inst0_waitrequest(avm_kernel_rd_waitrequest[144]),
      .avm_local_bb15_ld__u92_inst0_readdata(avm_kernel_rd_readdata[144]),
      .avm_local_bb15_ld__u92_inst0_readdatavalid(avm_kernel_rd_readdatavalid[144]),
      .avm_local_bb15_ld__u92_inst0_writeack(avm_kernel_rd_writeack[144]),
      // AVM avm_local_bb15_ld__u93_inst0
      .avm_local_bb15_ld__u93_inst0_enable(avm_kernel_rd_enable[145]),
      .avm_local_bb15_ld__u93_inst0_read(avm_kernel_rd_read[145]),
      .avm_local_bb15_ld__u93_inst0_write(avm_kernel_rd_write[145]),
      .avm_local_bb15_ld__u93_inst0_burstcount(avm_kernel_rd_burstcount[145]),
      .avm_local_bb15_ld__u93_inst0_address(avm_kernel_rd_address[145]),
      .avm_local_bb15_ld__u93_inst0_writedata(avm_kernel_rd_writedata[145]),
      .avm_local_bb15_ld__u93_inst0_byteenable(avm_kernel_rd_byteenable[145]),
      .avm_local_bb15_ld__u93_inst0_waitrequest(avm_kernel_rd_waitrequest[145]),
      .avm_local_bb15_ld__u93_inst0_readdata(avm_kernel_rd_readdata[145]),
      .avm_local_bb15_ld__u93_inst0_readdatavalid(avm_kernel_rd_readdatavalid[145]),
      .avm_local_bb15_ld__u93_inst0_writeack(avm_kernel_rd_writeack[145]),
      // AVM avm_local_bb15_ld__u94_inst0
      .avm_local_bb15_ld__u94_inst0_enable(avm_kernel_rd_enable[146]),
      .avm_local_bb15_ld__u94_inst0_read(avm_kernel_rd_read[146]),
      .avm_local_bb15_ld__u94_inst0_write(avm_kernel_rd_write[146]),
      .avm_local_bb15_ld__u94_inst0_burstcount(avm_kernel_rd_burstcount[146]),
      .avm_local_bb15_ld__u94_inst0_address(avm_kernel_rd_address[146]),
      .avm_local_bb15_ld__u94_inst0_writedata(avm_kernel_rd_writedata[146]),
      .avm_local_bb15_ld__u94_inst0_byteenable(avm_kernel_rd_byteenable[146]),
      .avm_local_bb15_ld__u94_inst0_waitrequest(avm_kernel_rd_waitrequest[146]),
      .avm_local_bb15_ld__u94_inst0_readdata(avm_kernel_rd_readdata[146]),
      .avm_local_bb15_ld__u94_inst0_readdatavalid(avm_kernel_rd_readdatavalid[146]),
      .avm_local_bb15_ld__u94_inst0_writeack(avm_kernel_rd_writeack[146]),
      // AVM avm_local_bb15_ld__u95_inst0
      .avm_local_bb15_ld__u95_inst0_enable(avm_kernel_rd_enable[147]),
      .avm_local_bb15_ld__u95_inst0_read(avm_kernel_rd_read[147]),
      .avm_local_bb15_ld__u95_inst0_write(avm_kernel_rd_write[147]),
      .avm_local_bb15_ld__u95_inst0_burstcount(avm_kernel_rd_burstcount[147]),
      .avm_local_bb15_ld__u95_inst0_address(avm_kernel_rd_address[147]),
      .avm_local_bb15_ld__u95_inst0_writedata(avm_kernel_rd_writedata[147]),
      .avm_local_bb15_ld__u95_inst0_byteenable(avm_kernel_rd_byteenable[147]),
      .avm_local_bb15_ld__u95_inst0_waitrequest(avm_kernel_rd_waitrequest[147]),
      .avm_local_bb15_ld__u95_inst0_readdata(avm_kernel_rd_readdata[147]),
      .avm_local_bb15_ld__u95_inst0_readdatavalid(avm_kernel_rd_readdatavalid[147]),
      .avm_local_bb15_ld__u95_inst0_writeack(avm_kernel_rd_writeack[147]),
      // AVM avm_local_bb15_ld__u96_inst0
      .avm_local_bb15_ld__u96_inst0_enable(avm_kernel_rd_enable[148]),
      .avm_local_bb15_ld__u96_inst0_read(avm_kernel_rd_read[148]),
      .avm_local_bb15_ld__u96_inst0_write(avm_kernel_rd_write[148]),
      .avm_local_bb15_ld__u96_inst0_burstcount(avm_kernel_rd_burstcount[148]),
      .avm_local_bb15_ld__u96_inst0_address(avm_kernel_rd_address[148]),
      .avm_local_bb15_ld__u96_inst0_writedata(avm_kernel_rd_writedata[148]),
      .avm_local_bb15_ld__u96_inst0_byteenable(avm_kernel_rd_byteenable[148]),
      .avm_local_bb15_ld__u96_inst0_waitrequest(avm_kernel_rd_waitrequest[148]),
      .avm_local_bb15_ld__u96_inst0_readdata(avm_kernel_rd_readdata[148]),
      .avm_local_bb15_ld__u96_inst0_readdatavalid(avm_kernel_rd_readdatavalid[148]),
      .avm_local_bb15_ld__u96_inst0_writeack(avm_kernel_rd_writeack[148]),
      // AVM avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_enable(avm_kernel_rd_enable[149]),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_read(avm_kernel_rd_read[149]),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_write(avm_kernel_rd_write[149]),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_burstcount(avm_kernel_rd_burstcount[149]),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_address(avm_kernel_rd_address[149]),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_writedata(avm_kernel_rd_writedata[149]),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_byteenable(avm_kernel_rd_byteenable[149]),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_waitrequest(avm_kernel_rd_waitrequest[149]),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_readdata(avm_kernel_rd_readdata[149]),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_readdatavalid(avm_kernel_rd_readdatavalid[149]),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_writeack(avm_kernel_rd_writeack[149]),
      // AVM avm_local_bb1_ld__inst0
      .avm_local_bb1_ld__inst0_enable(avm_kernel_rd_enable[150]),
      .avm_local_bb1_ld__inst0_read(avm_kernel_rd_read[150]),
      .avm_local_bb1_ld__inst0_write(avm_kernel_rd_write[150]),
      .avm_local_bb1_ld__inst0_burstcount(avm_kernel_rd_burstcount[150]),
      .avm_local_bb1_ld__inst0_address(avm_kernel_rd_address[150]),
      .avm_local_bb1_ld__inst0_writedata(avm_kernel_rd_writedata[150]),
      .avm_local_bb1_ld__inst0_byteenable(avm_kernel_rd_byteenable[150]),
      .avm_local_bb1_ld__inst0_waitrequest(avm_kernel_rd_waitrequest[150]),
      .avm_local_bb1_ld__inst0_readdata(avm_kernel_rd_readdata[150]),
      .avm_local_bb1_ld__inst0_readdatavalid(avm_kernel_rd_readdatavalid[150]),
      .avm_local_bb1_ld__inst0_writeack(avm_kernel_rd_writeack[150]),
      // AVM avm_local_bb1_ld__u12_inst0
      .avm_local_bb1_ld__u12_inst0_enable(avm_kernel_rd_enable[151]),
      .avm_local_bb1_ld__u12_inst0_read(avm_kernel_rd_read[151]),
      .avm_local_bb1_ld__u12_inst0_write(avm_kernel_rd_write[151]),
      .avm_local_bb1_ld__u12_inst0_burstcount(avm_kernel_rd_burstcount[151]),
      .avm_local_bb1_ld__u12_inst0_address(avm_kernel_rd_address[151]),
      .avm_local_bb1_ld__u12_inst0_writedata(avm_kernel_rd_writedata[151]),
      .avm_local_bb1_ld__u12_inst0_byteenable(avm_kernel_rd_byteenable[151]),
      .avm_local_bb1_ld__u12_inst0_waitrequest(avm_kernel_rd_waitrequest[151]),
      .avm_local_bb1_ld__u12_inst0_readdata(avm_kernel_rd_readdata[151]),
      .avm_local_bb1_ld__u12_inst0_readdatavalid(avm_kernel_rd_readdatavalid[151]),
      .avm_local_bb1_ld__u12_inst0_writeack(avm_kernel_rd_writeack[151]),
      // AVM avm_local_bb1_st_c0_exe4_inst0
      .avm_local_bb1_st_c0_exe4_inst0_enable(avm_kernel_wr_enable[10]),
      .avm_local_bb1_st_c0_exe4_inst0_read(avm_kernel_wr_read[10]),
      .avm_local_bb1_st_c0_exe4_inst0_write(avm_kernel_wr_write[10]),
      .avm_local_bb1_st_c0_exe4_inst0_burstcount(avm_kernel_wr_burstcount[10]),
      .avm_local_bb1_st_c0_exe4_inst0_address(avm_kernel_wr_address[10]),
      .avm_local_bb1_st_c0_exe4_inst0_writedata(avm_kernel_wr_writedata[10]),
      .avm_local_bb1_st_c0_exe4_inst0_byteenable(avm_kernel_wr_byteenable[10]),
      .avm_local_bb1_st_c0_exe4_inst0_waitrequest(avm_kernel_wr_waitrequest[10]),
      .avm_local_bb1_st_c0_exe4_inst0_readdata(avm_kernel_wr_readdata[10]),
      .avm_local_bb1_st_c0_exe4_inst0_readdatavalid(avm_kernel_wr_readdatavalid[10]),
      .avm_local_bb1_st_c0_exe4_inst0_writeack(avm_kernel_wr_writeack[10]),
      // AVM avm_local_bb22_ld__1368_inst0
      .avm_local_bb22_ld__1368_inst0_enable(avm_kernel_rd_enable[152]),
      .avm_local_bb22_ld__1368_inst0_read(avm_kernel_rd_read[152]),
      .avm_local_bb22_ld__1368_inst0_write(avm_kernel_rd_write[152]),
      .avm_local_bb22_ld__1368_inst0_burstcount(avm_kernel_rd_burstcount[152]),
      .avm_local_bb22_ld__1368_inst0_address(avm_kernel_rd_address[152]),
      .avm_local_bb22_ld__1368_inst0_writedata(avm_kernel_rd_writedata[152]),
      .avm_local_bb22_ld__1368_inst0_byteenable(avm_kernel_rd_byteenable[152]),
      .avm_local_bb22_ld__1368_inst0_waitrequest(avm_kernel_rd_waitrequest[152]),
      .avm_local_bb22_ld__1368_inst0_readdata(avm_kernel_rd_readdata[152]),
      .avm_local_bb22_ld__1368_inst0_readdatavalid(avm_kernel_rd_readdatavalid[152]),
      .avm_local_bb22_ld__1368_inst0_writeack(avm_kernel_rd_writeack[152]),
      // AVM avm_local_bb22_ld__1370_inst0
      .avm_local_bb22_ld__1370_inst0_enable(avm_kernel_rd_enable[153]),
      .avm_local_bb22_ld__1370_inst0_read(avm_kernel_rd_read[153]),
      .avm_local_bb22_ld__1370_inst0_write(avm_kernel_rd_write[153]),
      .avm_local_bb22_ld__1370_inst0_burstcount(avm_kernel_rd_burstcount[153]),
      .avm_local_bb22_ld__1370_inst0_address(avm_kernel_rd_address[153]),
      .avm_local_bb22_ld__1370_inst0_writedata(avm_kernel_rd_writedata[153]),
      .avm_local_bb22_ld__1370_inst0_byteenable(avm_kernel_rd_byteenable[153]),
      .avm_local_bb22_ld__1370_inst0_waitrequest(avm_kernel_rd_waitrequest[153]),
      .avm_local_bb22_ld__1370_inst0_readdata(avm_kernel_rd_readdata[153]),
      .avm_local_bb22_ld__1370_inst0_readdatavalid(avm_kernel_rd_readdatavalid[153]),
      .avm_local_bb22_ld__1370_inst0_writeack(avm_kernel_rd_writeack[153]),
      // AVM avm_local_bb22_ld__1372_inst0
      .avm_local_bb22_ld__1372_inst0_enable(avm_kernel_rd_enable[154]),
      .avm_local_bb22_ld__1372_inst0_read(avm_kernel_rd_read[154]),
      .avm_local_bb22_ld__1372_inst0_write(avm_kernel_rd_write[154]),
      .avm_local_bb22_ld__1372_inst0_burstcount(avm_kernel_rd_burstcount[154]),
      .avm_local_bb22_ld__1372_inst0_address(avm_kernel_rd_address[154]),
      .avm_local_bb22_ld__1372_inst0_writedata(avm_kernel_rd_writedata[154]),
      .avm_local_bb22_ld__1372_inst0_byteenable(avm_kernel_rd_byteenable[154]),
      .avm_local_bb22_ld__1372_inst0_waitrequest(avm_kernel_rd_waitrequest[154]),
      .avm_local_bb22_ld__1372_inst0_readdata(avm_kernel_rd_readdata[154]),
      .avm_local_bb22_ld__1372_inst0_readdatavalid(avm_kernel_rd_readdatavalid[154]),
      .avm_local_bb22_ld__1372_inst0_writeack(avm_kernel_rd_writeack[154]),
      // AVM avm_local_bb22_ld__1374_inst0
      .avm_local_bb22_ld__1374_inst0_enable(avm_kernel_rd_enable[155]),
      .avm_local_bb22_ld__1374_inst0_read(avm_kernel_rd_read[155]),
      .avm_local_bb22_ld__1374_inst0_write(avm_kernel_rd_write[155]),
      .avm_local_bb22_ld__1374_inst0_burstcount(avm_kernel_rd_burstcount[155]),
      .avm_local_bb22_ld__1374_inst0_address(avm_kernel_rd_address[155]),
      .avm_local_bb22_ld__1374_inst0_writedata(avm_kernel_rd_writedata[155]),
      .avm_local_bb22_ld__1374_inst0_byteenable(avm_kernel_rd_byteenable[155]),
      .avm_local_bb22_ld__1374_inst0_waitrequest(avm_kernel_rd_waitrequest[155]),
      .avm_local_bb22_ld__1374_inst0_readdata(avm_kernel_rd_readdata[155]),
      .avm_local_bb22_ld__1374_inst0_readdatavalid(avm_kernel_rd_readdatavalid[155]),
      .avm_local_bb22_ld__1374_inst0_writeack(avm_kernel_rd_writeack[155]),
      // AVM avm_local_bb22_ld__inst0
      .avm_local_bb22_ld__inst0_enable(avm_kernel_rd_enable[156]),
      .avm_local_bb22_ld__inst0_read(avm_kernel_rd_read[156]),
      .avm_local_bb22_ld__inst0_write(avm_kernel_rd_write[156]),
      .avm_local_bb22_ld__inst0_burstcount(avm_kernel_rd_burstcount[156]),
      .avm_local_bb22_ld__inst0_address(avm_kernel_rd_address[156]),
      .avm_local_bb22_ld__inst0_writedata(avm_kernel_rd_writedata[156]),
      .avm_local_bb22_ld__inst0_byteenable(avm_kernel_rd_byteenable[156]),
      .avm_local_bb22_ld__inst0_waitrequest(avm_kernel_rd_waitrequest[156]),
      .avm_local_bb22_ld__inst0_readdata(avm_kernel_rd_readdata[156]),
      .avm_local_bb22_ld__inst0_readdatavalid(avm_kernel_rd_readdatavalid[156]),
      .avm_local_bb22_ld__inst0_writeack(avm_kernel_rd_writeack[156]),
      // AVM avm_local_bb22_ld__u115_inst0
      .avm_local_bb22_ld__u115_inst0_enable(avm_kernel_rd_enable[157]),
      .avm_local_bb22_ld__u115_inst0_read(avm_kernel_rd_read[157]),
      .avm_local_bb22_ld__u115_inst0_write(avm_kernel_rd_write[157]),
      .avm_local_bb22_ld__u115_inst0_burstcount(avm_kernel_rd_burstcount[157]),
      .avm_local_bb22_ld__u115_inst0_address(avm_kernel_rd_address[157]),
      .avm_local_bb22_ld__u115_inst0_writedata(avm_kernel_rd_writedata[157]),
      .avm_local_bb22_ld__u115_inst0_byteenable(avm_kernel_rd_byteenable[157]),
      .avm_local_bb22_ld__u115_inst0_waitrequest(avm_kernel_rd_waitrequest[157]),
      .avm_local_bb22_ld__u115_inst0_readdata(avm_kernel_rd_readdata[157]),
      .avm_local_bb22_ld__u115_inst0_readdatavalid(avm_kernel_rd_readdatavalid[157]),
      .avm_local_bb22_ld__u115_inst0_writeack(avm_kernel_rd_writeack[157]),
      // AVM avm_local_bb22_ld__u116_inst0
      .avm_local_bb22_ld__u116_inst0_enable(avm_kernel_rd_enable[158]),
      .avm_local_bb22_ld__u116_inst0_read(avm_kernel_rd_read[158]),
      .avm_local_bb22_ld__u116_inst0_write(avm_kernel_rd_write[158]),
      .avm_local_bb22_ld__u116_inst0_burstcount(avm_kernel_rd_burstcount[158]),
      .avm_local_bb22_ld__u116_inst0_address(avm_kernel_rd_address[158]),
      .avm_local_bb22_ld__u116_inst0_writedata(avm_kernel_rd_writedata[158]),
      .avm_local_bb22_ld__u116_inst0_byteenable(avm_kernel_rd_byteenable[158]),
      .avm_local_bb22_ld__u116_inst0_waitrequest(avm_kernel_rd_waitrequest[158]),
      .avm_local_bb22_ld__u116_inst0_readdata(avm_kernel_rd_readdata[158]),
      .avm_local_bb22_ld__u116_inst0_readdatavalid(avm_kernel_rd_readdatavalid[158]),
      .avm_local_bb22_ld__u116_inst0_writeack(avm_kernel_rd_writeack[158]),
      // AVM avm_local_bb22_ld__u117_inst0
      .avm_local_bb22_ld__u117_inst0_enable(avm_kernel_rd_enable[159]),
      .avm_local_bb22_ld__u117_inst0_read(avm_kernel_rd_read[159]),
      .avm_local_bb22_ld__u117_inst0_write(avm_kernel_rd_write[159]),
      .avm_local_bb22_ld__u117_inst0_burstcount(avm_kernel_rd_burstcount[159]),
      .avm_local_bb22_ld__u117_inst0_address(avm_kernel_rd_address[159]),
      .avm_local_bb22_ld__u117_inst0_writedata(avm_kernel_rd_writedata[159]),
      .avm_local_bb22_ld__u117_inst0_byteenable(avm_kernel_rd_byteenable[159]),
      .avm_local_bb22_ld__u117_inst0_waitrequest(avm_kernel_rd_waitrequest[159]),
      .avm_local_bb22_ld__u117_inst0_readdata(avm_kernel_rd_readdata[159]),
      .avm_local_bb22_ld__u117_inst0_readdatavalid(avm_kernel_rd_readdatavalid[159]),
      .avm_local_bb22_ld__u117_inst0_writeack(avm_kernel_rd_writeack[159]),
      // AVM avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_enable(avm_kernel_rd_enable[160]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_read(avm_kernel_rd_read[160]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_write(avm_kernel_rd_write[160]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_burstcount(avm_kernel_rd_burstcount[160]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_address(avm_kernel_rd_address[160]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_writedata(avm_kernel_rd_writedata[160]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_byteenable(avm_kernel_rd_byteenable[160]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_waitrequest(avm_kernel_rd_waitrequest[160]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_readdata(avm_kernel_rd_readdata[160]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_readdatavalid(avm_kernel_rd_readdatavalid[160]),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_writeack(avm_kernel_rd_writeack[160]),
      // AVM avm_local_bb24_ld__u122_inst0
      .avm_local_bb24_ld__u122_inst0_enable(avm_kernel_rd_enable[161]),
      .avm_local_bb24_ld__u122_inst0_read(avm_kernel_rd_read[161]),
      .avm_local_bb24_ld__u122_inst0_write(avm_kernel_rd_write[161]),
      .avm_local_bb24_ld__u122_inst0_burstcount(avm_kernel_rd_burstcount[161]),
      .avm_local_bb24_ld__u122_inst0_address(avm_kernel_rd_address[161]),
      .avm_local_bb24_ld__u122_inst0_writedata(avm_kernel_rd_writedata[161]),
      .avm_local_bb24_ld__u122_inst0_byteenable(avm_kernel_rd_byteenable[161]),
      .avm_local_bb24_ld__u122_inst0_waitrequest(avm_kernel_rd_waitrequest[161]),
      .avm_local_bb24_ld__u122_inst0_readdata(avm_kernel_rd_readdata[161]),
      .avm_local_bb24_ld__u122_inst0_readdatavalid(avm_kernel_rd_readdatavalid[161]),
      .avm_local_bb24_ld__u122_inst0_writeack(avm_kernel_rd_writeack[161]),
      // AVM avm_local_bb24_ld__u123_inst0
      .avm_local_bb24_ld__u123_inst0_enable(avm_kernel_rd_enable[162]),
      .avm_local_bb24_ld__u123_inst0_read(avm_kernel_rd_read[162]),
      .avm_local_bb24_ld__u123_inst0_write(avm_kernel_rd_write[162]),
      .avm_local_bb24_ld__u123_inst0_burstcount(avm_kernel_rd_burstcount[162]),
      .avm_local_bb24_ld__u123_inst0_address(avm_kernel_rd_address[162]),
      .avm_local_bb24_ld__u123_inst0_writedata(avm_kernel_rd_writedata[162]),
      .avm_local_bb24_ld__u123_inst0_byteenable(avm_kernel_rd_byteenable[162]),
      .avm_local_bb24_ld__u123_inst0_waitrequest(avm_kernel_rd_waitrequest[162]),
      .avm_local_bb24_ld__u123_inst0_readdata(avm_kernel_rd_readdata[162]),
      .avm_local_bb24_ld__u123_inst0_readdatavalid(avm_kernel_rd_readdatavalid[162]),
      .avm_local_bb24_ld__u123_inst0_writeack(avm_kernel_rd_writeack[162]),
      // AVM avm_local_bb24_ld__u124_inst0
      .avm_local_bb24_ld__u124_inst0_enable(avm_kernel_rd_enable[163]),
      .avm_local_bb24_ld__u124_inst0_read(avm_kernel_rd_read[163]),
      .avm_local_bb24_ld__u124_inst0_write(avm_kernel_rd_write[163]),
      .avm_local_bb24_ld__u124_inst0_burstcount(avm_kernel_rd_burstcount[163]),
      .avm_local_bb24_ld__u124_inst0_address(avm_kernel_rd_address[163]),
      .avm_local_bb24_ld__u124_inst0_writedata(avm_kernel_rd_writedata[163]),
      .avm_local_bb24_ld__u124_inst0_byteenable(avm_kernel_rd_byteenable[163]),
      .avm_local_bb24_ld__u124_inst0_waitrequest(avm_kernel_rd_waitrequest[163]),
      .avm_local_bb24_ld__u124_inst0_readdata(avm_kernel_rd_readdata[163]),
      .avm_local_bb24_ld__u124_inst0_readdatavalid(avm_kernel_rd_readdatavalid[163]),
      .avm_local_bb24_ld__u124_inst0_writeack(avm_kernel_rd_writeack[163]),
      // AVM avm_local_bb24_ld__u125_inst0
      .avm_local_bb24_ld__u125_inst0_enable(avm_kernel_rd_enable[164]),
      .avm_local_bb24_ld__u125_inst0_read(avm_kernel_rd_read[164]),
      .avm_local_bb24_ld__u125_inst0_write(avm_kernel_rd_write[164]),
      .avm_local_bb24_ld__u125_inst0_burstcount(avm_kernel_rd_burstcount[164]),
      .avm_local_bb24_ld__u125_inst0_address(avm_kernel_rd_address[164]),
      .avm_local_bb24_ld__u125_inst0_writedata(avm_kernel_rd_writedata[164]),
      .avm_local_bb24_ld__u125_inst0_byteenable(avm_kernel_rd_byteenable[164]),
      .avm_local_bb24_ld__u125_inst0_waitrequest(avm_kernel_rd_waitrequest[164]),
      .avm_local_bb24_ld__u125_inst0_readdata(avm_kernel_rd_readdata[164]),
      .avm_local_bb24_ld__u125_inst0_readdatavalid(avm_kernel_rd_readdatavalid[164]),
      .avm_local_bb24_ld__u125_inst0_writeack(avm_kernel_rd_writeack[164]),
      // AVM avm_local_bb24_ld__u126_inst0
      .avm_local_bb24_ld__u126_inst0_enable(avm_kernel_rd_enable[165]),
      .avm_local_bb24_ld__u126_inst0_read(avm_kernel_rd_read[165]),
      .avm_local_bb24_ld__u126_inst0_write(avm_kernel_rd_write[165]),
      .avm_local_bb24_ld__u126_inst0_burstcount(avm_kernel_rd_burstcount[165]),
      .avm_local_bb24_ld__u126_inst0_address(avm_kernel_rd_address[165]),
      .avm_local_bb24_ld__u126_inst0_writedata(avm_kernel_rd_writedata[165]),
      .avm_local_bb24_ld__u126_inst0_byteenable(avm_kernel_rd_byteenable[165]),
      .avm_local_bb24_ld__u126_inst0_waitrequest(avm_kernel_rd_waitrequest[165]),
      .avm_local_bb24_ld__u126_inst0_readdata(avm_kernel_rd_readdata[165]),
      .avm_local_bb24_ld__u126_inst0_readdatavalid(avm_kernel_rd_readdatavalid[165]),
      .avm_local_bb24_ld__u126_inst0_writeack(avm_kernel_rd_writeack[165]),
      // AVM avm_local_bb24_ld__u127_inst0
      .avm_local_bb24_ld__u127_inst0_enable(avm_kernel_rd_enable[166]),
      .avm_local_bb24_ld__u127_inst0_read(avm_kernel_rd_read[166]),
      .avm_local_bb24_ld__u127_inst0_write(avm_kernel_rd_write[166]),
      .avm_local_bb24_ld__u127_inst0_burstcount(avm_kernel_rd_burstcount[166]),
      .avm_local_bb24_ld__u127_inst0_address(avm_kernel_rd_address[166]),
      .avm_local_bb24_ld__u127_inst0_writedata(avm_kernel_rd_writedata[166]),
      .avm_local_bb24_ld__u127_inst0_byteenable(avm_kernel_rd_byteenable[166]),
      .avm_local_bb24_ld__u127_inst0_waitrequest(avm_kernel_rd_waitrequest[166]),
      .avm_local_bb24_ld__u127_inst0_readdata(avm_kernel_rd_readdata[166]),
      .avm_local_bb24_ld__u127_inst0_readdatavalid(avm_kernel_rd_readdatavalid[166]),
      .avm_local_bb24_ld__u127_inst0_writeack(avm_kernel_rd_writeack[166]),
      // AVM avm_local_bb24_ld__u128_inst0
      .avm_local_bb24_ld__u128_inst0_enable(avm_kernel_rd_enable[167]),
      .avm_local_bb24_ld__u128_inst0_read(avm_kernel_rd_read[167]),
      .avm_local_bb24_ld__u128_inst0_write(avm_kernel_rd_write[167]),
      .avm_local_bb24_ld__u128_inst0_burstcount(avm_kernel_rd_burstcount[167]),
      .avm_local_bb24_ld__u128_inst0_address(avm_kernel_rd_address[167]),
      .avm_local_bb24_ld__u128_inst0_writedata(avm_kernel_rd_writedata[167]),
      .avm_local_bb24_ld__u128_inst0_byteenable(avm_kernel_rd_byteenable[167]),
      .avm_local_bb24_ld__u128_inst0_waitrequest(avm_kernel_rd_waitrequest[167]),
      .avm_local_bb24_ld__u128_inst0_readdata(avm_kernel_rd_readdata[167]),
      .avm_local_bb24_ld__u128_inst0_readdatavalid(avm_kernel_rd_readdatavalid[167]),
      .avm_local_bb24_ld__u128_inst0_writeack(avm_kernel_rd_writeack[167]),
      // AVM avm_local_bb24_ld__u129_inst0
      .avm_local_bb24_ld__u129_inst0_enable(avm_kernel_rd_enable[168]),
      .avm_local_bb24_ld__u129_inst0_read(avm_kernel_rd_read[168]),
      .avm_local_bb24_ld__u129_inst0_write(avm_kernel_rd_write[168]),
      .avm_local_bb24_ld__u129_inst0_burstcount(avm_kernel_rd_burstcount[168]),
      .avm_local_bb24_ld__u129_inst0_address(avm_kernel_rd_address[168]),
      .avm_local_bb24_ld__u129_inst0_writedata(avm_kernel_rd_writedata[168]),
      .avm_local_bb24_ld__u129_inst0_byteenable(avm_kernel_rd_byteenable[168]),
      .avm_local_bb24_ld__u129_inst0_waitrequest(avm_kernel_rd_waitrequest[168]),
      .avm_local_bb24_ld__u129_inst0_readdata(avm_kernel_rd_readdata[168]),
      .avm_local_bb24_ld__u129_inst0_readdatavalid(avm_kernel_rd_readdatavalid[168]),
      .avm_local_bb24_ld__u129_inst0_writeack(avm_kernel_rd_writeack[168]),
      // AVM avm_local_bb24_ld__u130_inst0
      .avm_local_bb24_ld__u130_inst0_enable(avm_kernel_rd_enable[169]),
      .avm_local_bb24_ld__u130_inst0_read(avm_kernel_rd_read[169]),
      .avm_local_bb24_ld__u130_inst0_write(avm_kernel_rd_write[169]),
      .avm_local_bb24_ld__u130_inst0_burstcount(avm_kernel_rd_burstcount[169]),
      .avm_local_bb24_ld__u130_inst0_address(avm_kernel_rd_address[169]),
      .avm_local_bb24_ld__u130_inst0_writedata(avm_kernel_rd_writedata[169]),
      .avm_local_bb24_ld__u130_inst0_byteenable(avm_kernel_rd_byteenable[169]),
      .avm_local_bb24_ld__u130_inst0_waitrequest(avm_kernel_rd_waitrequest[169]),
      .avm_local_bb24_ld__u130_inst0_readdata(avm_kernel_rd_readdata[169]),
      .avm_local_bb24_ld__u130_inst0_readdatavalid(avm_kernel_rd_readdatavalid[169]),
      .avm_local_bb24_ld__u130_inst0_writeack(avm_kernel_rd_writeack[169]),
      // AVM avm_local_bb24_ld__u131_inst0
      .avm_local_bb24_ld__u131_inst0_enable(avm_kernel_rd_enable[170]),
      .avm_local_bb24_ld__u131_inst0_read(avm_kernel_rd_read[170]),
      .avm_local_bb24_ld__u131_inst0_write(avm_kernel_rd_write[170]),
      .avm_local_bb24_ld__u131_inst0_burstcount(avm_kernel_rd_burstcount[170]),
      .avm_local_bb24_ld__u131_inst0_address(avm_kernel_rd_address[170]),
      .avm_local_bb24_ld__u131_inst0_writedata(avm_kernel_rd_writedata[170]),
      .avm_local_bb24_ld__u131_inst0_byteenable(avm_kernel_rd_byteenable[170]),
      .avm_local_bb24_ld__u131_inst0_waitrequest(avm_kernel_rd_waitrequest[170]),
      .avm_local_bb24_ld__u131_inst0_readdata(avm_kernel_rd_readdata[170]),
      .avm_local_bb24_ld__u131_inst0_readdatavalid(avm_kernel_rd_readdatavalid[170]),
      .avm_local_bb24_ld__u131_inst0_writeack(avm_kernel_rd_writeack[170]),
      // AVM avm_local_bb24_ld__u132_inst0
      .avm_local_bb24_ld__u132_inst0_enable(avm_kernel_rd_enable[171]),
      .avm_local_bb24_ld__u132_inst0_read(avm_kernel_rd_read[171]),
      .avm_local_bb24_ld__u132_inst0_write(avm_kernel_rd_write[171]),
      .avm_local_bb24_ld__u132_inst0_burstcount(avm_kernel_rd_burstcount[171]),
      .avm_local_bb24_ld__u132_inst0_address(avm_kernel_rd_address[171]),
      .avm_local_bb24_ld__u132_inst0_writedata(avm_kernel_rd_writedata[171]),
      .avm_local_bb24_ld__u132_inst0_byteenable(avm_kernel_rd_byteenable[171]),
      .avm_local_bb24_ld__u132_inst0_waitrequest(avm_kernel_rd_waitrequest[171]),
      .avm_local_bb24_ld__u132_inst0_readdata(avm_kernel_rd_readdata[171]),
      .avm_local_bb24_ld__u132_inst0_readdatavalid(avm_kernel_rd_readdatavalid[171]),
      .avm_local_bb24_ld__u132_inst0_writeack(avm_kernel_rd_writeack[171]),
      // AVM avm_local_bb24_ld__u133_inst0
      .avm_local_bb24_ld__u133_inst0_enable(avm_kernel_rd_enable[172]),
      .avm_local_bb24_ld__u133_inst0_read(avm_kernel_rd_read[172]),
      .avm_local_bb24_ld__u133_inst0_write(avm_kernel_rd_write[172]),
      .avm_local_bb24_ld__u133_inst0_burstcount(avm_kernel_rd_burstcount[172]),
      .avm_local_bb24_ld__u133_inst0_address(avm_kernel_rd_address[172]),
      .avm_local_bb24_ld__u133_inst0_writedata(avm_kernel_rd_writedata[172]),
      .avm_local_bb24_ld__u133_inst0_byteenable(avm_kernel_rd_byteenable[172]),
      .avm_local_bb24_ld__u133_inst0_waitrequest(avm_kernel_rd_waitrequest[172]),
      .avm_local_bb24_ld__u133_inst0_readdata(avm_kernel_rd_readdata[172]),
      .avm_local_bb24_ld__u133_inst0_readdatavalid(avm_kernel_rd_readdatavalid[172]),
      .avm_local_bb24_ld__u133_inst0_writeack(avm_kernel_rd_writeack[172]),
      // AVM avm_local_bb24_ld__u134_inst0
      .avm_local_bb24_ld__u134_inst0_enable(avm_kernel_rd_enable[173]),
      .avm_local_bb24_ld__u134_inst0_read(avm_kernel_rd_read[173]),
      .avm_local_bb24_ld__u134_inst0_write(avm_kernel_rd_write[173]),
      .avm_local_bb24_ld__u134_inst0_burstcount(avm_kernel_rd_burstcount[173]),
      .avm_local_bb24_ld__u134_inst0_address(avm_kernel_rd_address[173]),
      .avm_local_bb24_ld__u134_inst0_writedata(avm_kernel_rd_writedata[173]),
      .avm_local_bb24_ld__u134_inst0_byteenable(avm_kernel_rd_byteenable[173]),
      .avm_local_bb24_ld__u134_inst0_waitrequest(avm_kernel_rd_waitrequest[173]),
      .avm_local_bb24_ld__u134_inst0_readdata(avm_kernel_rd_readdata[173]),
      .avm_local_bb24_ld__u134_inst0_readdatavalid(avm_kernel_rd_readdatavalid[173]),
      .avm_local_bb24_ld__u134_inst0_writeack(avm_kernel_rd_writeack[173]),
      // AVM avm_local_bb24_ld__u135_inst0
      .avm_local_bb24_ld__u135_inst0_enable(avm_kernel_rd_enable[174]),
      .avm_local_bb24_ld__u135_inst0_read(avm_kernel_rd_read[174]),
      .avm_local_bb24_ld__u135_inst0_write(avm_kernel_rd_write[174]),
      .avm_local_bb24_ld__u135_inst0_burstcount(avm_kernel_rd_burstcount[174]),
      .avm_local_bb24_ld__u135_inst0_address(avm_kernel_rd_address[174]),
      .avm_local_bb24_ld__u135_inst0_writedata(avm_kernel_rd_writedata[174]),
      .avm_local_bb24_ld__u135_inst0_byteenable(avm_kernel_rd_byteenable[174]),
      .avm_local_bb24_ld__u135_inst0_waitrequest(avm_kernel_rd_waitrequest[174]),
      .avm_local_bb24_ld__u135_inst0_readdata(avm_kernel_rd_readdata[174]),
      .avm_local_bb24_ld__u135_inst0_readdatavalid(avm_kernel_rd_readdatavalid[174]),
      .avm_local_bb24_ld__u135_inst0_writeack(avm_kernel_rd_writeack[174]),
      // AVM avm_local_bb24_ld__u136_inst0
      .avm_local_bb24_ld__u136_inst0_enable(avm_kernel_rd_enable[175]),
      .avm_local_bb24_ld__u136_inst0_read(avm_kernel_rd_read[175]),
      .avm_local_bb24_ld__u136_inst0_write(avm_kernel_rd_write[175]),
      .avm_local_bb24_ld__u136_inst0_burstcount(avm_kernel_rd_burstcount[175]),
      .avm_local_bb24_ld__u136_inst0_address(avm_kernel_rd_address[175]),
      .avm_local_bb24_ld__u136_inst0_writedata(avm_kernel_rd_writedata[175]),
      .avm_local_bb24_ld__u136_inst0_byteenable(avm_kernel_rd_byteenable[175]),
      .avm_local_bb24_ld__u136_inst0_waitrequest(avm_kernel_rd_waitrequest[175]),
      .avm_local_bb24_ld__u136_inst0_readdata(avm_kernel_rd_readdata[175]),
      .avm_local_bb24_ld__u136_inst0_readdatavalid(avm_kernel_rd_readdatavalid[175]),
      .avm_local_bb24_ld__u136_inst0_writeack(avm_kernel_rd_writeack[175]),
      // AVM avm_local_bb24_ld__u137_inst0
      .avm_local_bb24_ld__u137_inst0_enable(avm_kernel_rd_enable[176]),
      .avm_local_bb24_ld__u137_inst0_read(avm_kernel_rd_read[176]),
      .avm_local_bb24_ld__u137_inst0_write(avm_kernel_rd_write[176]),
      .avm_local_bb24_ld__u137_inst0_burstcount(avm_kernel_rd_burstcount[176]),
      .avm_local_bb24_ld__u137_inst0_address(avm_kernel_rd_address[176]),
      .avm_local_bb24_ld__u137_inst0_writedata(avm_kernel_rd_writedata[176]),
      .avm_local_bb24_ld__u137_inst0_byteenable(avm_kernel_rd_byteenable[176]),
      .avm_local_bb24_ld__u137_inst0_waitrequest(avm_kernel_rd_waitrequest[176]),
      .avm_local_bb24_ld__u137_inst0_readdata(avm_kernel_rd_readdata[176]),
      .avm_local_bb24_ld__u137_inst0_readdatavalid(avm_kernel_rd_readdatavalid[176]),
      .avm_local_bb24_ld__u137_inst0_writeack(avm_kernel_rd_writeack[176]),
      // AVM avm_local_bb24_ld__u138_inst0
      .avm_local_bb24_ld__u138_inst0_enable(avm_kernel_rd_enable[177]),
      .avm_local_bb24_ld__u138_inst0_read(avm_kernel_rd_read[177]),
      .avm_local_bb24_ld__u138_inst0_write(avm_kernel_rd_write[177]),
      .avm_local_bb24_ld__u138_inst0_burstcount(avm_kernel_rd_burstcount[177]),
      .avm_local_bb24_ld__u138_inst0_address(avm_kernel_rd_address[177]),
      .avm_local_bb24_ld__u138_inst0_writedata(avm_kernel_rd_writedata[177]),
      .avm_local_bb24_ld__u138_inst0_byteenable(avm_kernel_rd_byteenable[177]),
      .avm_local_bb24_ld__u138_inst0_waitrequest(avm_kernel_rd_waitrequest[177]),
      .avm_local_bb24_ld__u138_inst0_readdata(avm_kernel_rd_readdata[177]),
      .avm_local_bb24_ld__u138_inst0_readdatavalid(avm_kernel_rd_readdatavalid[177]),
      .avm_local_bb24_ld__u138_inst0_writeack(avm_kernel_rd_writeack[177]),
      // AVM avm_local_bb24_ld__u139_inst0
      .avm_local_bb24_ld__u139_inst0_enable(avm_kernel_rd_enable[178]),
      .avm_local_bb24_ld__u139_inst0_read(avm_kernel_rd_read[178]),
      .avm_local_bb24_ld__u139_inst0_write(avm_kernel_rd_write[178]),
      .avm_local_bb24_ld__u139_inst0_burstcount(avm_kernel_rd_burstcount[178]),
      .avm_local_bb24_ld__u139_inst0_address(avm_kernel_rd_address[178]),
      .avm_local_bb24_ld__u139_inst0_writedata(avm_kernel_rd_writedata[178]),
      .avm_local_bb24_ld__u139_inst0_byteenable(avm_kernel_rd_byteenable[178]),
      .avm_local_bb24_ld__u139_inst0_waitrequest(avm_kernel_rd_waitrequest[178]),
      .avm_local_bb24_ld__u139_inst0_readdata(avm_kernel_rd_readdata[178]),
      .avm_local_bb24_ld__u139_inst0_readdatavalid(avm_kernel_rd_readdatavalid[178]),
      .avm_local_bb24_ld__u139_inst0_writeack(avm_kernel_rd_writeack[178]),
      // AVM avm_local_bb24_ld__u140_inst0
      .avm_local_bb24_ld__u140_inst0_enable(avm_kernel_rd_enable[179]),
      .avm_local_bb24_ld__u140_inst0_read(avm_kernel_rd_read[179]),
      .avm_local_bb24_ld__u140_inst0_write(avm_kernel_rd_write[179]),
      .avm_local_bb24_ld__u140_inst0_burstcount(avm_kernel_rd_burstcount[179]),
      .avm_local_bb24_ld__u140_inst0_address(avm_kernel_rd_address[179]),
      .avm_local_bb24_ld__u140_inst0_writedata(avm_kernel_rd_writedata[179]),
      .avm_local_bb24_ld__u140_inst0_byteenable(avm_kernel_rd_byteenable[179]),
      .avm_local_bb24_ld__u140_inst0_waitrequest(avm_kernel_rd_waitrequest[179]),
      .avm_local_bb24_ld__u140_inst0_readdata(avm_kernel_rd_readdata[179]),
      .avm_local_bb24_ld__u140_inst0_readdatavalid(avm_kernel_rd_readdatavalid[179]),
      .avm_local_bb24_ld__u140_inst0_writeack(avm_kernel_rd_writeack[179]),
      // AVM avm_local_bb24_ld__u141_inst0
      .avm_local_bb24_ld__u141_inst0_enable(avm_kernel_rd_enable[180]),
      .avm_local_bb24_ld__u141_inst0_read(avm_kernel_rd_read[180]),
      .avm_local_bb24_ld__u141_inst0_write(avm_kernel_rd_write[180]),
      .avm_local_bb24_ld__u141_inst0_burstcount(avm_kernel_rd_burstcount[180]),
      .avm_local_bb24_ld__u141_inst0_address(avm_kernel_rd_address[180]),
      .avm_local_bb24_ld__u141_inst0_writedata(avm_kernel_rd_writedata[180]),
      .avm_local_bb24_ld__u141_inst0_byteenable(avm_kernel_rd_byteenable[180]),
      .avm_local_bb24_ld__u141_inst0_waitrequest(avm_kernel_rd_waitrequest[180]),
      .avm_local_bb24_ld__u141_inst0_readdata(avm_kernel_rd_readdata[180]),
      .avm_local_bb24_ld__u141_inst0_readdatavalid(avm_kernel_rd_readdatavalid[180]),
      .avm_local_bb24_ld__u141_inst0_writeack(avm_kernel_rd_writeack[180]),
      // AVM avm_local_bb24_ld__u142_inst0
      .avm_local_bb24_ld__u142_inst0_enable(avm_kernel_rd_enable[181]),
      .avm_local_bb24_ld__u142_inst0_read(avm_kernel_rd_read[181]),
      .avm_local_bb24_ld__u142_inst0_write(avm_kernel_rd_write[181]),
      .avm_local_bb24_ld__u142_inst0_burstcount(avm_kernel_rd_burstcount[181]),
      .avm_local_bb24_ld__u142_inst0_address(avm_kernel_rd_address[181]),
      .avm_local_bb24_ld__u142_inst0_writedata(avm_kernel_rd_writedata[181]),
      .avm_local_bb24_ld__u142_inst0_byteenable(avm_kernel_rd_byteenable[181]),
      .avm_local_bb24_ld__u142_inst0_waitrequest(avm_kernel_rd_waitrequest[181]),
      .avm_local_bb24_ld__u142_inst0_readdata(avm_kernel_rd_readdata[181]),
      .avm_local_bb24_ld__u142_inst0_readdatavalid(avm_kernel_rd_readdatavalid[181]),
      .avm_local_bb24_ld__u142_inst0_writeack(avm_kernel_rd_writeack[181]),
      // AVM avm_local_bb24_ld__u143_inst0
      .avm_local_bb24_ld__u143_inst0_enable(avm_kernel_rd_enable[182]),
      .avm_local_bb24_ld__u143_inst0_read(avm_kernel_rd_read[182]),
      .avm_local_bb24_ld__u143_inst0_write(avm_kernel_rd_write[182]),
      .avm_local_bb24_ld__u143_inst0_burstcount(avm_kernel_rd_burstcount[182]),
      .avm_local_bb24_ld__u143_inst0_address(avm_kernel_rd_address[182]),
      .avm_local_bb24_ld__u143_inst0_writedata(avm_kernel_rd_writedata[182]),
      .avm_local_bb24_ld__u143_inst0_byteenable(avm_kernel_rd_byteenable[182]),
      .avm_local_bb24_ld__u143_inst0_waitrequest(avm_kernel_rd_waitrequest[182]),
      .avm_local_bb24_ld__u143_inst0_readdata(avm_kernel_rd_readdata[182]),
      .avm_local_bb24_ld__u143_inst0_readdatavalid(avm_kernel_rd_readdatavalid[182]),
      .avm_local_bb24_ld__u143_inst0_writeack(avm_kernel_rd_writeack[182]),
      // AVM avm_local_bb24_ld__u144_inst0
      .avm_local_bb24_ld__u144_inst0_enable(avm_kernel_rd_enable[183]),
      .avm_local_bb24_ld__u144_inst0_read(avm_kernel_rd_read[183]),
      .avm_local_bb24_ld__u144_inst0_write(avm_kernel_rd_write[183]),
      .avm_local_bb24_ld__u144_inst0_burstcount(avm_kernel_rd_burstcount[183]),
      .avm_local_bb24_ld__u144_inst0_address(avm_kernel_rd_address[183]),
      .avm_local_bb24_ld__u144_inst0_writedata(avm_kernel_rd_writedata[183]),
      .avm_local_bb24_ld__u144_inst0_byteenable(avm_kernel_rd_byteenable[183]),
      .avm_local_bb24_ld__u144_inst0_waitrequest(avm_kernel_rd_waitrequest[183]),
      .avm_local_bb24_ld__u144_inst0_readdata(avm_kernel_rd_readdata[183]),
      .avm_local_bb24_ld__u144_inst0_readdatavalid(avm_kernel_rd_readdatavalid[183]),
      .avm_local_bb24_ld__u144_inst0_writeack(avm_kernel_rd_writeack[183]),
      // AVM avm_local_bb24_ld__u145_inst0
      .avm_local_bb24_ld__u145_inst0_enable(avm_kernel_rd_enable[184]),
      .avm_local_bb24_ld__u145_inst0_read(avm_kernel_rd_read[184]),
      .avm_local_bb24_ld__u145_inst0_write(avm_kernel_rd_write[184]),
      .avm_local_bb24_ld__u145_inst0_burstcount(avm_kernel_rd_burstcount[184]),
      .avm_local_bb24_ld__u145_inst0_address(avm_kernel_rd_address[184]),
      .avm_local_bb24_ld__u145_inst0_writedata(avm_kernel_rd_writedata[184]),
      .avm_local_bb24_ld__u145_inst0_byteenable(avm_kernel_rd_byteenable[184]),
      .avm_local_bb24_ld__u145_inst0_waitrequest(avm_kernel_rd_waitrequest[184]),
      .avm_local_bb24_ld__u145_inst0_readdata(avm_kernel_rd_readdata[184]),
      .avm_local_bb24_ld__u145_inst0_readdatavalid(avm_kernel_rd_readdatavalid[184]),
      .avm_local_bb24_ld__u145_inst0_writeack(avm_kernel_rd_writeack[184]),
      // AVM avm_local_bb24_ld__u146_inst0
      .avm_local_bb24_ld__u146_inst0_enable(avm_kernel_rd_enable[185]),
      .avm_local_bb24_ld__u146_inst0_read(avm_kernel_rd_read[185]),
      .avm_local_bb24_ld__u146_inst0_write(avm_kernel_rd_write[185]),
      .avm_local_bb24_ld__u146_inst0_burstcount(avm_kernel_rd_burstcount[185]),
      .avm_local_bb24_ld__u146_inst0_address(avm_kernel_rd_address[185]),
      .avm_local_bb24_ld__u146_inst0_writedata(avm_kernel_rd_writedata[185]),
      .avm_local_bb24_ld__u146_inst0_byteenable(avm_kernel_rd_byteenable[185]),
      .avm_local_bb24_ld__u146_inst0_waitrequest(avm_kernel_rd_waitrequest[185]),
      .avm_local_bb24_ld__u146_inst0_readdata(avm_kernel_rd_readdata[185]),
      .avm_local_bb24_ld__u146_inst0_readdatavalid(avm_kernel_rd_readdatavalid[185]),
      .avm_local_bb24_ld__u146_inst0_writeack(avm_kernel_rd_writeack[185]),
      // AVM avm_local_bb24_ld__u147_inst0
      .avm_local_bb24_ld__u147_inst0_enable(avm_kernel_rd_enable[186]),
      .avm_local_bb24_ld__u147_inst0_read(avm_kernel_rd_read[186]),
      .avm_local_bb24_ld__u147_inst0_write(avm_kernel_rd_write[186]),
      .avm_local_bb24_ld__u147_inst0_burstcount(avm_kernel_rd_burstcount[186]),
      .avm_local_bb24_ld__u147_inst0_address(avm_kernel_rd_address[186]),
      .avm_local_bb24_ld__u147_inst0_writedata(avm_kernel_rd_writedata[186]),
      .avm_local_bb24_ld__u147_inst0_byteenable(avm_kernel_rd_byteenable[186]),
      .avm_local_bb24_ld__u147_inst0_waitrequest(avm_kernel_rd_waitrequest[186]),
      .avm_local_bb24_ld__u147_inst0_readdata(avm_kernel_rd_readdata[186]),
      .avm_local_bb24_ld__u147_inst0_readdatavalid(avm_kernel_rd_readdatavalid[186]),
      .avm_local_bb24_ld__u147_inst0_writeack(avm_kernel_rd_writeack[186]),
      // AVM avm_local_bb26_ld__u154_inst0
      .avm_local_bb26_ld__u154_inst0_enable(avm_kernel_rd_enable[187]),
      .avm_local_bb26_ld__u154_inst0_read(avm_kernel_rd_read[187]),
      .avm_local_bb26_ld__u154_inst0_write(avm_kernel_rd_write[187]),
      .avm_local_bb26_ld__u154_inst0_burstcount(avm_kernel_rd_burstcount[187]),
      .avm_local_bb26_ld__u154_inst0_address(avm_kernel_rd_address[187]),
      .avm_local_bb26_ld__u154_inst0_writedata(avm_kernel_rd_writedata[187]),
      .avm_local_bb26_ld__u154_inst0_byteenable(avm_kernel_rd_byteenable[187]),
      .avm_local_bb26_ld__u154_inst0_waitrequest(avm_kernel_rd_waitrequest[187]),
      .avm_local_bb26_ld__u154_inst0_readdata(avm_kernel_rd_readdata[187]),
      .avm_local_bb26_ld__u154_inst0_readdatavalid(avm_kernel_rd_readdatavalid[187]),
      .avm_local_bb26_ld__u154_inst0_writeack(avm_kernel_rd_writeack[187]),
      // AVM avm_local_bb26_ld__u155_inst0
      .avm_local_bb26_ld__u155_inst0_enable(avm_kernel_rd_enable[188]),
      .avm_local_bb26_ld__u155_inst0_read(avm_kernel_rd_read[188]),
      .avm_local_bb26_ld__u155_inst0_write(avm_kernel_rd_write[188]),
      .avm_local_bb26_ld__u155_inst0_burstcount(avm_kernel_rd_burstcount[188]),
      .avm_local_bb26_ld__u155_inst0_address(avm_kernel_rd_address[188]),
      .avm_local_bb26_ld__u155_inst0_writedata(avm_kernel_rd_writedata[188]),
      .avm_local_bb26_ld__u155_inst0_byteenable(avm_kernel_rd_byteenable[188]),
      .avm_local_bb26_ld__u155_inst0_waitrequest(avm_kernel_rd_waitrequest[188]),
      .avm_local_bb26_ld__u155_inst0_readdata(avm_kernel_rd_readdata[188]),
      .avm_local_bb26_ld__u155_inst0_readdatavalid(avm_kernel_rd_readdatavalid[188]),
      .avm_local_bb26_ld__u155_inst0_writeack(avm_kernel_rd_writeack[188]),
      // AVM avm_local_bb26_ld__u156_inst0
      .avm_local_bb26_ld__u156_inst0_enable(avm_kernel_rd_enable[189]),
      .avm_local_bb26_ld__u156_inst0_read(avm_kernel_rd_read[189]),
      .avm_local_bb26_ld__u156_inst0_write(avm_kernel_rd_write[189]),
      .avm_local_bb26_ld__u156_inst0_burstcount(avm_kernel_rd_burstcount[189]),
      .avm_local_bb26_ld__u156_inst0_address(avm_kernel_rd_address[189]),
      .avm_local_bb26_ld__u156_inst0_writedata(avm_kernel_rd_writedata[189]),
      .avm_local_bb26_ld__u156_inst0_byteenable(avm_kernel_rd_byteenable[189]),
      .avm_local_bb26_ld__u156_inst0_waitrequest(avm_kernel_rd_waitrequest[189]),
      .avm_local_bb26_ld__u156_inst0_readdata(avm_kernel_rd_readdata[189]),
      .avm_local_bb26_ld__u156_inst0_readdatavalid(avm_kernel_rd_readdatavalid[189]),
      .avm_local_bb26_ld__u156_inst0_writeack(avm_kernel_rd_writeack[189]),
      // AVM avm_local_bb26_ld__u157_inst0
      .avm_local_bb26_ld__u157_inst0_enable(avm_kernel_rd_enable[190]),
      .avm_local_bb26_ld__u157_inst0_read(avm_kernel_rd_read[190]),
      .avm_local_bb26_ld__u157_inst0_write(avm_kernel_rd_write[190]),
      .avm_local_bb26_ld__u157_inst0_burstcount(avm_kernel_rd_burstcount[190]),
      .avm_local_bb26_ld__u157_inst0_address(avm_kernel_rd_address[190]),
      .avm_local_bb26_ld__u157_inst0_writedata(avm_kernel_rd_writedata[190]),
      .avm_local_bb26_ld__u157_inst0_byteenable(avm_kernel_rd_byteenable[190]),
      .avm_local_bb26_ld__u157_inst0_waitrequest(avm_kernel_rd_waitrequest[190]),
      .avm_local_bb26_ld__u157_inst0_readdata(avm_kernel_rd_readdata[190]),
      .avm_local_bb26_ld__u157_inst0_readdatavalid(avm_kernel_rd_readdatavalid[190]),
      .avm_local_bb26_ld__u157_inst0_writeack(avm_kernel_rd_writeack[190]),
      // AVM avm_local_bb26_ld__u158_inst0
      .avm_local_bb26_ld__u158_inst0_enable(avm_kernel_rd_enable[191]),
      .avm_local_bb26_ld__u158_inst0_read(avm_kernel_rd_read[191]),
      .avm_local_bb26_ld__u158_inst0_write(avm_kernel_rd_write[191]),
      .avm_local_bb26_ld__u158_inst0_burstcount(avm_kernel_rd_burstcount[191]),
      .avm_local_bb26_ld__u158_inst0_address(avm_kernel_rd_address[191]),
      .avm_local_bb26_ld__u158_inst0_writedata(avm_kernel_rd_writedata[191]),
      .avm_local_bb26_ld__u158_inst0_byteenable(avm_kernel_rd_byteenable[191]),
      .avm_local_bb26_ld__u158_inst0_waitrequest(avm_kernel_rd_waitrequest[191]),
      .avm_local_bb26_ld__u158_inst0_readdata(avm_kernel_rd_readdata[191]),
      .avm_local_bb26_ld__u158_inst0_readdatavalid(avm_kernel_rd_readdatavalid[191]),
      .avm_local_bb26_ld__u158_inst0_writeack(avm_kernel_rd_writeack[191]),
      // AVM avm_local_bb26_ld__u160_inst0
      .avm_local_bb26_ld__u160_inst0_enable(avm_kernel_rd_enable[192]),
      .avm_local_bb26_ld__u160_inst0_read(avm_kernel_rd_read[192]),
      .avm_local_bb26_ld__u160_inst0_write(avm_kernel_rd_write[192]),
      .avm_local_bb26_ld__u160_inst0_burstcount(avm_kernel_rd_burstcount[192]),
      .avm_local_bb26_ld__u160_inst0_address(avm_kernel_rd_address[192]),
      .avm_local_bb26_ld__u160_inst0_writedata(avm_kernel_rd_writedata[192]),
      .avm_local_bb26_ld__u160_inst0_byteenable(avm_kernel_rd_byteenable[192]),
      .avm_local_bb26_ld__u160_inst0_waitrequest(avm_kernel_rd_waitrequest[192]),
      .avm_local_bb26_ld__u160_inst0_readdata(avm_kernel_rd_readdata[192]),
      .avm_local_bb26_ld__u160_inst0_readdatavalid(avm_kernel_rd_readdatavalid[192]),
      .avm_local_bb26_ld__u160_inst0_writeack(avm_kernel_rd_writeack[192]),
      // AVM avm_local_bb26_ld__u161_inst0
      .avm_local_bb26_ld__u161_inst0_enable(avm_kernel_rd_enable[193]),
      .avm_local_bb26_ld__u161_inst0_read(avm_kernel_rd_read[193]),
      .avm_local_bb26_ld__u161_inst0_write(avm_kernel_rd_write[193]),
      .avm_local_bb26_ld__u161_inst0_burstcount(avm_kernel_rd_burstcount[193]),
      .avm_local_bb26_ld__u161_inst0_address(avm_kernel_rd_address[193]),
      .avm_local_bb26_ld__u161_inst0_writedata(avm_kernel_rd_writedata[193]),
      .avm_local_bb26_ld__u161_inst0_byteenable(avm_kernel_rd_byteenable[193]),
      .avm_local_bb26_ld__u161_inst0_waitrequest(avm_kernel_rd_waitrequest[193]),
      .avm_local_bb26_ld__u161_inst0_readdata(avm_kernel_rd_readdata[193]),
      .avm_local_bb26_ld__u161_inst0_readdatavalid(avm_kernel_rd_readdatavalid[193]),
      .avm_local_bb26_ld__u161_inst0_writeack(avm_kernel_rd_writeack[193]),
      // AVM avm_local_bb26_ld__u162_inst0
      .avm_local_bb26_ld__u162_inst0_enable(avm_kernel_rd_enable[194]),
      .avm_local_bb26_ld__u162_inst0_read(avm_kernel_rd_read[194]),
      .avm_local_bb26_ld__u162_inst0_write(avm_kernel_rd_write[194]),
      .avm_local_bb26_ld__u162_inst0_burstcount(avm_kernel_rd_burstcount[194]),
      .avm_local_bb26_ld__u162_inst0_address(avm_kernel_rd_address[194]),
      .avm_local_bb26_ld__u162_inst0_writedata(avm_kernel_rd_writedata[194]),
      .avm_local_bb26_ld__u162_inst0_byteenable(avm_kernel_rd_byteenable[194]),
      .avm_local_bb26_ld__u162_inst0_waitrequest(avm_kernel_rd_waitrequest[194]),
      .avm_local_bb26_ld__u162_inst0_readdata(avm_kernel_rd_readdata[194]),
      .avm_local_bb26_ld__u162_inst0_readdatavalid(avm_kernel_rd_readdatavalid[194]),
      .avm_local_bb26_ld__u162_inst0_writeack(avm_kernel_rd_writeack[194]),
      // AVM avm_local_bb26_ld__u163_inst0
      .avm_local_bb26_ld__u163_inst0_enable(avm_kernel_rd_enable[195]),
      .avm_local_bb26_ld__u163_inst0_read(avm_kernel_rd_read[195]),
      .avm_local_bb26_ld__u163_inst0_write(avm_kernel_rd_write[195]),
      .avm_local_bb26_ld__u163_inst0_burstcount(avm_kernel_rd_burstcount[195]),
      .avm_local_bb26_ld__u163_inst0_address(avm_kernel_rd_address[195]),
      .avm_local_bb26_ld__u163_inst0_writedata(avm_kernel_rd_writedata[195]),
      .avm_local_bb26_ld__u163_inst0_byteenable(avm_kernel_rd_byteenable[195]),
      .avm_local_bb26_ld__u163_inst0_waitrequest(avm_kernel_rd_waitrequest[195]),
      .avm_local_bb26_ld__u163_inst0_readdata(avm_kernel_rd_readdata[195]),
      .avm_local_bb26_ld__u163_inst0_readdatavalid(avm_kernel_rd_readdatavalid[195]),
      .avm_local_bb26_ld__u163_inst0_writeack(avm_kernel_rd_writeack[195]),
      // AVM avm_local_bb26_ld__u164_inst0
      .avm_local_bb26_ld__u164_inst0_enable(avm_kernel_rd_enable[196]),
      .avm_local_bb26_ld__u164_inst0_read(avm_kernel_rd_read[196]),
      .avm_local_bb26_ld__u164_inst0_write(avm_kernel_rd_write[196]),
      .avm_local_bb26_ld__u164_inst0_burstcount(avm_kernel_rd_burstcount[196]),
      .avm_local_bb26_ld__u164_inst0_address(avm_kernel_rd_address[196]),
      .avm_local_bb26_ld__u164_inst0_writedata(avm_kernel_rd_writedata[196]),
      .avm_local_bb26_ld__u164_inst0_byteenable(avm_kernel_rd_byteenable[196]),
      .avm_local_bb26_ld__u164_inst0_waitrequest(avm_kernel_rd_waitrequest[196]),
      .avm_local_bb26_ld__u164_inst0_readdata(avm_kernel_rd_readdata[196]),
      .avm_local_bb26_ld__u164_inst0_readdatavalid(avm_kernel_rd_readdatavalid[196]),
      .avm_local_bb26_ld__u164_inst0_writeack(avm_kernel_rd_writeack[196]),
      // AVM avm_local_bb26_ld__u165_inst0
      .avm_local_bb26_ld__u165_inst0_enable(avm_kernel_rd_enable[197]),
      .avm_local_bb26_ld__u165_inst0_read(avm_kernel_rd_read[197]),
      .avm_local_bb26_ld__u165_inst0_write(avm_kernel_rd_write[197]),
      .avm_local_bb26_ld__u165_inst0_burstcount(avm_kernel_rd_burstcount[197]),
      .avm_local_bb26_ld__u165_inst0_address(avm_kernel_rd_address[197]),
      .avm_local_bb26_ld__u165_inst0_writedata(avm_kernel_rd_writedata[197]),
      .avm_local_bb26_ld__u165_inst0_byteenable(avm_kernel_rd_byteenable[197]),
      .avm_local_bb26_ld__u165_inst0_waitrequest(avm_kernel_rd_waitrequest[197]),
      .avm_local_bb26_ld__u165_inst0_readdata(avm_kernel_rd_readdata[197]),
      .avm_local_bb26_ld__u165_inst0_readdatavalid(avm_kernel_rd_readdatavalid[197]),
      .avm_local_bb26_ld__u165_inst0_writeack(avm_kernel_rd_writeack[197]),
      // AVM avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_enable(avm_kernel_rd_enable[198]),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_read(avm_kernel_rd_read[198]),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_write(avm_kernel_rd_write[198]),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_burstcount(avm_kernel_rd_burstcount[198]),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_address(avm_kernel_rd_address[198]),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_writedata(avm_kernel_rd_writedata[198]),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_byteenable(avm_kernel_rd_byteenable[198]),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_waitrequest(avm_kernel_rd_waitrequest[198]),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_readdata(avm_kernel_rd_readdata[198]),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_readdatavalid(avm_kernel_rd_readdatavalid[198]),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_writeack(avm_kernel_rd_writeack[198]),
      // AVM avm_local_bb33_ld__u179_inst0
      .avm_local_bb33_ld__u179_inst0_enable(avm_kernel_rd_enable[199]),
      .avm_local_bb33_ld__u179_inst0_read(avm_kernel_rd_read[199]),
      .avm_local_bb33_ld__u179_inst0_write(avm_kernel_rd_write[199]),
      .avm_local_bb33_ld__u179_inst0_burstcount(avm_kernel_rd_burstcount[199]),
      .avm_local_bb33_ld__u179_inst0_address(avm_kernel_rd_address[199]),
      .avm_local_bb33_ld__u179_inst0_writedata(avm_kernel_rd_writedata[199]),
      .avm_local_bb33_ld__u179_inst0_byteenable(avm_kernel_rd_byteenable[199]),
      .avm_local_bb33_ld__u179_inst0_waitrequest(avm_kernel_rd_waitrequest[199]),
      .avm_local_bb33_ld__u179_inst0_readdata(avm_kernel_rd_readdata[199]),
      .avm_local_bb33_ld__u179_inst0_readdatavalid(avm_kernel_rd_readdatavalid[199]),
      .avm_local_bb33_ld__u179_inst0_writeack(avm_kernel_rd_writeack[199]),
      // AVM avm_local_bb33_st__inst0
      .avm_local_bb33_st__inst0_enable(avm_kernel_wr_enable[11]),
      .avm_local_bb33_st__inst0_read(avm_kernel_wr_read[11]),
      .avm_local_bb33_st__inst0_write(avm_kernel_wr_write[11]),
      .avm_local_bb33_st__inst0_burstcount(avm_kernel_wr_burstcount[11]),
      .avm_local_bb33_st__inst0_address(avm_kernel_wr_address[11]),
      .avm_local_bb33_st__inst0_writedata(avm_kernel_wr_writedata[11]),
      .avm_local_bb33_st__inst0_byteenable(avm_kernel_wr_byteenable[11]),
      .avm_local_bb33_st__inst0_waitrequest(avm_kernel_wr_waitrequest[11]),
      .avm_local_bb33_st__inst0_readdata(avm_kernel_wr_readdata[11]),
      .avm_local_bb33_st__inst0_readdatavalid(avm_kernel_wr_readdatavalid[11]),
      .avm_local_bb33_st__inst0_writeack(avm_kernel_wr_writeack[11]),
      // AVM avm_local_bb33_st_add239_inst0
      .avm_local_bb33_st_add239_inst0_enable(avm_kernel_wr_enable[12]),
      .avm_local_bb33_st_add239_inst0_read(avm_kernel_wr_read[12]),
      .avm_local_bb33_st_add239_inst0_write(avm_kernel_wr_write[12]),
      .avm_local_bb33_st_add239_inst0_burstcount(avm_kernel_wr_burstcount[12]),
      .avm_local_bb33_st_add239_inst0_address(avm_kernel_wr_address[12]),
      .avm_local_bb33_st_add239_inst0_writedata(avm_kernel_wr_writedata[12]),
      .avm_local_bb33_st_add239_inst0_byteenable(avm_kernel_wr_byteenable[12]),
      .avm_local_bb33_st_add239_inst0_waitrequest(avm_kernel_wr_waitrequest[12]),
      .avm_local_bb33_st_add239_inst0_readdata(avm_kernel_wr_readdata[12]),
      .avm_local_bb33_st_add239_inst0_readdatavalid(avm_kernel_wr_readdatavalid[12]),
      .avm_local_bb33_st_add239_inst0_writeack(avm_kernel_wr_writeack[12]),
      // AVM avm_local_bb3_ld__inst0
      .avm_local_bb3_ld__inst0_enable(avm_kernel_rd_enable[200]),
      .avm_local_bb3_ld__inst0_read(avm_kernel_rd_read[200]),
      .avm_local_bb3_ld__inst0_write(avm_kernel_rd_write[200]),
      .avm_local_bb3_ld__inst0_burstcount(avm_kernel_rd_burstcount[200]),
      .avm_local_bb3_ld__inst0_address(avm_kernel_rd_address[200]),
      .avm_local_bb3_ld__inst0_writedata(avm_kernel_rd_writedata[200]),
      .avm_local_bb3_ld__inst0_byteenable(avm_kernel_rd_byteenable[200]),
      .avm_local_bb3_ld__inst0_waitrequest(avm_kernel_rd_waitrequest[200]),
      .avm_local_bb3_ld__inst0_readdata(avm_kernel_rd_readdata[200]),
      .avm_local_bb3_ld__inst0_readdatavalid(avm_kernel_rd_readdatavalid[200]),
      .avm_local_bb3_ld__inst0_writeack(avm_kernel_rd_writeack[200]),
      // AVM avm_local_bb40_st__inst0
      .avm_local_bb40_st__inst0_enable(avm_kernel_wr_enable[13]),
      .avm_local_bb40_st__inst0_read(avm_kernel_wr_read[13]),
      .avm_local_bb40_st__inst0_write(avm_kernel_wr_write[13]),
      .avm_local_bb40_st__inst0_burstcount(avm_kernel_wr_burstcount[13]),
      .avm_local_bb40_st__inst0_address(avm_kernel_wr_address[13]),
      .avm_local_bb40_st__inst0_writedata(avm_kernel_wr_writedata[13]),
      .avm_local_bb40_st__inst0_byteenable(avm_kernel_wr_byteenable[13]),
      .avm_local_bb40_st__inst0_waitrequest(avm_kernel_wr_waitrequest[13]),
      .avm_local_bb40_st__inst0_readdata(avm_kernel_wr_readdata[13]),
      .avm_local_bb40_st__inst0_readdatavalid(avm_kernel_wr_readdatavalid[13]),
      .avm_local_bb40_st__inst0_writeack(avm_kernel_wr_writeack[13]),
      // AVM avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_enable(avm_kernel_rd_enable[201]),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_read(avm_kernel_rd_read[201]),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_write(avm_kernel_rd_write[201]),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_burstcount(avm_kernel_rd_burstcount[201]),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_address(avm_kernel_rd_address[201]),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_writedata(avm_kernel_rd_writedata[201]),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_byteenable(avm_kernel_rd_byteenable[201]),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_waitrequest(avm_kernel_rd_waitrequest[201]),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_readdata(avm_kernel_rd_readdata[201]),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_readdatavalid(avm_kernel_rd_readdatavalid[201]),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_writeack(avm_kernel_rd_writeack[201]),
      // AVM avm_local_bb8_st_c0_exe1270_inst0
      .avm_local_bb8_st_c0_exe1270_inst0_enable(avm_kernel_wr_enable[14]),
      .avm_local_bb8_st_c0_exe1270_inst0_read(avm_kernel_wr_read[14]),
      .avm_local_bb8_st_c0_exe1270_inst0_write(avm_kernel_wr_write[14]),
      .avm_local_bb8_st_c0_exe1270_inst0_burstcount(avm_kernel_wr_burstcount[14]),
      .avm_local_bb8_st_c0_exe1270_inst0_address(avm_kernel_wr_address[14]),
      .avm_local_bb8_st_c0_exe1270_inst0_writedata(avm_kernel_wr_writedata[14]),
      .avm_local_bb8_st_c0_exe1270_inst0_byteenable(avm_kernel_wr_byteenable[14]),
      .avm_local_bb8_st_c0_exe1270_inst0_waitrequest(avm_kernel_wr_waitrequest[14]),
      .avm_local_bb8_st_c0_exe1270_inst0_readdata(avm_kernel_wr_readdata[14]),
      .avm_local_bb8_st_c0_exe1270_inst0_readdatavalid(avm_kernel_wr_readdatavalid[14]),
      .avm_local_bb8_st_c0_exe1270_inst0_writeack(avm_kernel_wr_writeack[14])
   );

   // INST perform_ls_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element perform_ls_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(perform_ls_start_chain[0]),
      .start_kernel(perform_ls_start_kernel_copy[0]),
      .start_finish_detector(perform_ls_start_task_fd[0]),
      .start_finish_chain_element(perform_ls_start_finish_element[0]),
      .start_chain()
   );

   assign sum_evals_start_chain[0] = sum_evals_start;
   assign sum_evals_finish_chain[0] = 1'b1;
   assign sum_evals_cra_pending_write = |sum_evals_pending_write;
   assign sum_evals_cra_lsu_active = |sum_evals_lsu_active;
   assign sum_evals_cra_valid_in = |sum_evals_valid_in;
   assign sum_evals_stall_in = 0;
   // INST sum_evals_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0)
   )
   sum_evals_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(sum_evals_start),
      .num_groups(sum_evals_num_groups),
      .local_size(sum_evals_local_size),
      .stall_in(sum_evals_wg_disp_stall_in),
      .valid_out(sum_evals_wg_disp_valid_out),
      .group_id_out(sum_evals_wg_disp_group_id_out),
      .global_id_base_out(sum_evals_wg_disp_global_id_base_out),
      .start_out(sum_evals_wg_disp_start_out),
      .dispatched_all_groups(sum_evals_wg_disp_dispatched_all_groups)
   );

   // INST sum_evals_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(19)
   )
   sum_evals_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(sum_evals_start),
      .wg_size(sum_evals_wg_size),
      .wg_dispatch_valid_out(sum_evals_wg_disp_valid_out),
      .wg_dispatch_stall_in(sum_evals_wg_disp_stall_in),
      .dispatched_all_groups(sum_evals_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(sum_evals_valid_out),
      .kernel_copy_stall_in(sum_evals_stall_in),
      .pending_writes(sum_evals_cra_pending_write),
      .finish(sum_evals_finish)
   );

   // INST sum_evals_cra_slave_inst of sum_evals_function_cra_slave
   sum_evals_function_cra_slave sum_evals_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(sum_evals_start),
      .finish(sum_evals_finish),
      .global_offset_0(sum_evals_global_offset[0]),
      .global_offset_1(sum_evals_global_offset[1]),
      .global_offset_2(sum_evals_global_offset[2]),
      .work_dim(sum_evals_work_dim),
      .has_a_lsu_active(sum_evals_cra_lsu_active),
      .has_a_write_pending(sum_evals_cra_pending_write),
      .valid_in(sum_evals_cra_valid_in),
      .global_size_0(sum_evals_global_size[0]),
      .global_size_1(sum_evals_global_size[1]),
      .global_size_2(sum_evals_global_size[2]),
      .num_groups_0(sum_evals_num_groups[0]),
      .num_groups_1(sum_evals_num_groups[1]),
      .num_groups_2(sum_evals_num_groups[2]),
      .local_size_0(sum_evals_local_size[0]),
      .local_size_1(sum_evals_local_size[1]),
      .local_size_2(sum_evals_local_size[2]),
      .workgroup_size(sum_evals_wg_size),
      .kernel_arguments(sum_evals_kernel_arguments),
      .cra_irq(kernel_irqs[3]),
      // AVS avs_cra
      .avs_cra_enable(avs_sum_evals_cra_enable),
      .avs_cra_read(avs_sum_evals_cra_read),
      .avs_cra_write(avs_sum_evals_cra_write),
      .avs_cra_address(avs_sum_evals_cra_address),
      .avs_cra_writedata(avs_sum_evals_cra_writedata),
      .avs_cra_byteenable(avs_sum_evals_cra_byteenable),
      .avs_cra_readdata(avs_sum_evals_cra_readdata),
      .avs_cra_readdatavalid(avs_sum_evals_cra_readdatavalid)
   );

   // INST sum_evals_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(5),
      .LOCAL_WIDTH_Y(1),
      .LOCAL_WIDTH_Z(1),
      .ENABLE_TESSELLATION(1)
   )
   sum_evals_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(sum_evals_wg_disp_start_out),
      .valid_in(sum_evals_wg_disp_valid_out[0]),
      .stall_out(sum_evals_wg_disp_stall_in[0]),
      .stall_in(sum_evals_stall_out[0]),
      .valid_out(sum_evals_valid_in[0]),
      .group_id_in(sum_evals_wg_disp_group_id_out),
      .global_id_base_in(sum_evals_wg_disp_global_id_base_out),
      .local_size(sum_evals_local_size),
      .global_size(sum_evals_global_size),
      .local_id(sum_evals_local_id[0]),
      .global_id(sum_evals_global_id[0]),
      .group_id(sum_evals_group_id[0])
   );

   // INST sum_evals_inst_0 of sum_evals_top_wrapper_0
   sum_evals_top_wrapper_0 sum_evals_inst_0
   (
      .start(sum_evals_start_kernel_copy[0]),
      .kernel_arguments(sum_evals_kernel_arguments),
      .work_dim(sum_evals_work_dim),
      .global_offset(sum_evals_global_offset),
      .kernel_valid_out(sum_evals_valid_out[0]),
      .has_a_write_pending(sum_evals_pending_write[0]),
      .has_a_lsu_active(sum_evals_lsu_active[0]),
      .global_id(sum_evals_global_id[0]),
      .local_id(sum_evals_local_id[0]),
      .group_id(sum_evals_group_id[0]),
      .global_size(sum_evals_global_size),
      .local_size(sum_evals_local_size),
      .num_groups(sum_evals_num_groups),
      .workgroup_size(sum_evals_wg_size),
      .kernel_stall_out(sum_evals_stall_out[0]),
      .kernel_valid_in(sum_evals_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_local_bb2_ld__inst0
      .avm_local_bb2_ld__inst0_enable(avm_kernel_rd_enable[202]),
      .avm_local_bb2_ld__inst0_read(avm_kernel_rd_read[202]),
      .avm_local_bb2_ld__inst0_write(avm_kernel_rd_write[202]),
      .avm_local_bb2_ld__inst0_burstcount(avm_kernel_rd_burstcount[202]),
      .avm_local_bb2_ld__inst0_address(avm_kernel_rd_address[202]),
      .avm_local_bb2_ld__inst0_writedata(avm_kernel_rd_writedata[202]),
      .avm_local_bb2_ld__inst0_byteenable(avm_kernel_rd_byteenable[202]),
      .avm_local_bb2_ld__inst0_waitrequest(avm_kernel_rd_waitrequest[202]),
      .avm_local_bb2_ld__inst0_readdata(avm_kernel_rd_readdata[202]),
      .avm_local_bb2_ld__inst0_readdatavalid(avm_kernel_rd_readdatavalid[202]),
      .avm_local_bb2_ld__inst0_writeack(avm_kernel_rd_writeack[202]),
      // AVM avm_local_bb7_ld__inst0
      .avm_local_bb7_ld__inst0_enable(avm_kernel_rd_enable[203]),
      .avm_local_bb7_ld__inst0_read(avm_kernel_rd_read[203]),
      .avm_local_bb7_ld__inst0_write(avm_kernel_rd_write[203]),
      .avm_local_bb7_ld__inst0_burstcount(avm_kernel_rd_burstcount[203]),
      .avm_local_bb7_ld__inst0_address(avm_kernel_rd_address[203]),
      .avm_local_bb7_ld__inst0_writedata(avm_kernel_rd_writedata[203]),
      .avm_local_bb7_ld__inst0_byteenable(avm_kernel_rd_byteenable[203]),
      .avm_local_bb7_ld__inst0_waitrequest(avm_kernel_rd_waitrequest[203]),
      .avm_local_bb7_ld__inst0_readdata(avm_kernel_rd_readdata[203]),
      .avm_local_bb7_ld__inst0_readdatavalid(avm_kernel_rd_readdatavalid[203]),
      .avm_local_bb7_ld__inst0_writeack(avm_kernel_rd_writeack[203]),
      // AVM avm_local_bb7_st_add26_inst0
      .avm_local_bb7_st_add26_inst0_enable(avm_kernel_wr_enable[15]),
      .avm_local_bb7_st_add26_inst0_read(avm_kernel_wr_read[15]),
      .avm_local_bb7_st_add26_inst0_write(avm_kernel_wr_write[15]),
      .avm_local_bb7_st_add26_inst0_burstcount(avm_kernel_wr_burstcount[15]),
      .avm_local_bb7_st_add26_inst0_address(avm_kernel_wr_address[15]),
      .avm_local_bb7_st_add26_inst0_writedata(avm_kernel_wr_writedata[15]),
      .avm_local_bb7_st_add26_inst0_byteenable(avm_kernel_wr_byteenable[15]),
      .avm_local_bb7_st_add26_inst0_waitrequest(avm_kernel_wr_waitrequest[15]),
      .avm_local_bb7_st_add26_inst0_readdata(avm_kernel_wr_readdata[15]),
      .avm_local_bb7_st_add26_inst0_readdatavalid(avm_kernel_wr_readdatavalid[15]),
      .avm_local_bb7_st_add26_inst0_writeack(avm_kernel_wr_writeack[15])
   );

   // INST sum_evals_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element sum_evals_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(sum_evals_start_chain[0]),
      .start_kernel(sum_evals_start_kernel_copy[0]),
      .start_finish_detector(sum_evals_start_task_fd[0]),
      .start_finish_chain_element(sum_evals_start_finish_element[0]),
      .start_chain()
   );

   assign kernel_irq = |kernel_irqs;
   // INST lsu_ic_top of lsu_ic_top
   lsu_ic_top
   #(
      .AWIDTH(31),
      .SHIFT(31),
      .MWIDTH_BYTES(64),
      .BURST_CNT_W(5),
      .NUM_RD_PORT(204),
      .NUM_WR_PORT(16),
      .NUM_DIMM(1),
      .ENABLE_DUAL_RING(1),
      .ENABLE_MULTIPLE_WR_RING(0),
      .ENABLE_LAST_WAIT(0),
      .ENABLE_REORDER(0),
      .NUM_REORDER(1)
   )
   lsu_ic_top
   (
      .clk(clock),
      .resetn(resetn),
      .i_rd_request(avm_kernel_rd_read),
      .i_rd_address(avm_kernel_rd_address),
      .i_rd_burstcount(avm_kernel_rd_burstcount),
      .i_wr_byteenable(avm_kernel_wr_byteenable),
      .i_wr_address(avm_kernel_wr_address),
      .i_wr_request(avm_kernel_wr_write),
      .i_wr_burstcount(avm_kernel_wr_burstcount),
      .i_wr_writedata(avm_kernel_wr_writedata),
      .i_avm_waitrequest(ic_avm_waitrequest),
      .i_avm_readdata(ic_avm_readdata),
      .i_avm_readdatavalid(ic_avm_readdatavalid),
      .o_avm_byteenable(ic_avm_byteenable),
      .o_avm_address(ic_avm_address),
      .o_avm_read(ic_avm_read),
      .o_avm_write(ic_avm_write),
      .o_avm_burstcount(ic_avm_burstcount),
      .o_wr_waitrequest(avm_kernel_wr_waitrequest),
      .o_avm_writedata(ic_avm_writedata),
      .o_avm_writeack(avm_kernel_wr_writeack),
      .o_rd_waitrequest(avm_kernel_rd_waitrequest),
      .o_avm_readdata(avm_kernel_rd_readdata),
      .o_avm_readdatavalid(avm_kernel_rd_readdatavalid)
   );

   assign avm_memgmem0_DDR_port_0_0_rw_read = ic_avm_read[0];
   assign avm_memgmem0_DDR_port_0_0_rw_write = ic_avm_write[0];
   assign avm_memgmem0_DDR_port_0_0_rw_burstcount = ic_avm_burstcount[0];
   assign avm_memgmem0_DDR_port_0_0_rw_address = ic_avm_address[0];
   assign avm_memgmem0_DDR_port_0_0_rw_writedata = ic_avm_writedata[0];
   assign avm_memgmem0_DDR_port_0_0_rw_byteenable = ic_avm_byteenable[0];
   assign ic_avm_waitrequest[0] = avm_memgmem0_DDR_port_0_0_rw_waitrequest;
   assign ic_avm_readdata[0] = avm_memgmem0_DDR_port_0_0_rw_readdata;
   assign ic_avm_readdatavalid[0] = avm_memgmem0_DDR_port_0_0_rw_readdatavalid;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_top_wrapper_0
/////////////////////////////////////////////////////////////////
module calc_initpop_top_wrapper_0
(
   input logic start,
   input logic [583:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_local_bb12_st__inst0
   output logic avm_local_bb12_st__inst0_enable,
   output logic avm_local_bb12_st__inst0_read,
   output logic avm_local_bb12_st__inst0_write,
   output logic [4:0] avm_local_bb12_st__inst0_burstcount,
   output logic [30:0] avm_local_bb12_st__inst0_address,
   output logic [511:0] avm_local_bb12_st__inst0_writedata,
   output logic [63:0] avm_local_bb12_st__inst0_byteenable,
   input logic avm_local_bb12_st__inst0_waitrequest,
   input logic [511:0] avm_local_bb12_st__inst0_readdata,
   input logic avm_local_bb12_st__inst0_readdatavalid,
   input logic avm_local_bb12_st__inst0_writeack,
   // AVM avm_local_bb12_st_add1001_i_hfp_inst0
   output logic avm_local_bb12_st_add1001_i_hfp_inst0_enable,
   output logic avm_local_bb12_st_add1001_i_hfp_inst0_read,
   output logic avm_local_bb12_st_add1001_i_hfp_inst0_write,
   output logic [4:0] avm_local_bb12_st_add1001_i_hfp_inst0_burstcount,
   output logic [30:0] avm_local_bb12_st_add1001_i_hfp_inst0_address,
   output logic [511:0] avm_local_bb12_st_add1001_i_hfp_inst0_writedata,
   output logic [63:0] avm_local_bb12_st_add1001_i_hfp_inst0_byteenable,
   input logic avm_local_bb12_st_add1001_i_hfp_inst0_waitrequest,
   input logic [511:0] avm_local_bb12_st_add1001_i_hfp_inst0_readdata,
   input logic avm_local_bb12_st_add1001_i_hfp_inst0_readdatavalid,
   input logic avm_local_bb12_st_add1001_i_hfp_inst0_writeack,
   // AVM avm_local_bb2_ld__inst0
   output logic avm_local_bb2_ld__inst0_enable,
   output logic avm_local_bb2_ld__inst0_read,
   output logic avm_local_bb2_ld__inst0_write,
   output logic [4:0] avm_local_bb2_ld__inst0_burstcount,
   output logic [30:0] avm_local_bb2_ld__inst0_address,
   output logic [511:0] avm_local_bb2_ld__inst0_writedata,
   output logic [63:0] avm_local_bb2_ld__inst0_byteenable,
   input logic avm_local_bb2_ld__inst0_waitrequest,
   input logic [511:0] avm_local_bb2_ld__inst0_readdata,
   input logic avm_local_bb2_ld__inst0_readdatavalid,
   input logic avm_local_bb2_ld__inst0_writeack,
   // AVM avm_local_bb6_ld__105_inst0
   output logic avm_local_bb6_ld__105_inst0_enable,
   output logic avm_local_bb6_ld__105_inst0_read,
   output logic avm_local_bb6_ld__105_inst0_write,
   output logic [4:0] avm_local_bb6_ld__105_inst0_burstcount,
   output logic [30:0] avm_local_bb6_ld__105_inst0_address,
   output logic [511:0] avm_local_bb6_ld__105_inst0_writedata,
   output logic [63:0] avm_local_bb6_ld__105_inst0_byteenable,
   input logic avm_local_bb6_ld__105_inst0_waitrequest,
   input logic [511:0] avm_local_bb6_ld__105_inst0_readdata,
   input logic avm_local_bb6_ld__105_inst0_readdatavalid,
   input logic avm_local_bb6_ld__105_inst0_writeack,
   // AVM avm_local_bb6_ld__107_inst0
   output logic avm_local_bb6_ld__107_inst0_enable,
   output logic avm_local_bb6_ld__107_inst0_read,
   output logic avm_local_bb6_ld__107_inst0_write,
   output logic [4:0] avm_local_bb6_ld__107_inst0_burstcount,
   output logic [30:0] avm_local_bb6_ld__107_inst0_address,
   output logic [511:0] avm_local_bb6_ld__107_inst0_writedata,
   output logic [63:0] avm_local_bb6_ld__107_inst0_byteenable,
   input logic avm_local_bb6_ld__107_inst0_waitrequest,
   input logic [511:0] avm_local_bb6_ld__107_inst0_readdata,
   input logic avm_local_bb6_ld__107_inst0_readdatavalid,
   input logic avm_local_bb6_ld__107_inst0_writeack,
   // AVM avm_local_bb6_ld__109_inst0
   output logic avm_local_bb6_ld__109_inst0_enable,
   output logic avm_local_bb6_ld__109_inst0_read,
   output logic avm_local_bb6_ld__109_inst0_write,
   output logic [4:0] avm_local_bb6_ld__109_inst0_burstcount,
   output logic [30:0] avm_local_bb6_ld__109_inst0_address,
   output logic [511:0] avm_local_bb6_ld__109_inst0_writedata,
   output logic [63:0] avm_local_bb6_ld__109_inst0_byteenable,
   input logic avm_local_bb6_ld__109_inst0_waitrequest,
   input logic [511:0] avm_local_bb6_ld__109_inst0_readdata,
   input logic avm_local_bb6_ld__109_inst0_readdatavalid,
   input logic avm_local_bb6_ld__109_inst0_writeack,
   // AVM avm_local_bb6_ld__111_inst0
   output logic avm_local_bb6_ld__111_inst0_enable,
   output logic avm_local_bb6_ld__111_inst0_read,
   output logic avm_local_bb6_ld__111_inst0_write,
   output logic [4:0] avm_local_bb6_ld__111_inst0_burstcount,
   output logic [30:0] avm_local_bb6_ld__111_inst0_address,
   output logic [511:0] avm_local_bb6_ld__111_inst0_writedata,
   output logic [63:0] avm_local_bb6_ld__111_inst0_byteenable,
   input logic avm_local_bb6_ld__111_inst0_waitrequest,
   input logic [511:0] avm_local_bb6_ld__111_inst0_readdata,
   input logic avm_local_bb6_ld__111_inst0_readdatavalid,
   input logic avm_local_bb6_ld__111_inst0_writeack,
   // AVM avm_local_bb6_ld__inst0
   output logic avm_local_bb6_ld__inst0_enable,
   output logic avm_local_bb6_ld__inst0_read,
   output logic avm_local_bb6_ld__inst0_write,
   output logic [4:0] avm_local_bb6_ld__inst0_burstcount,
   output logic [30:0] avm_local_bb6_ld__inst0_address,
   output logic [511:0] avm_local_bb6_ld__inst0_writedata,
   output logic [63:0] avm_local_bb6_ld__inst0_byteenable,
   input logic avm_local_bb6_ld__inst0_waitrequest,
   input logic [511:0] avm_local_bb6_ld__inst0_readdata,
   input logic avm_local_bb6_ld__inst0_readdatavalid,
   input logic avm_local_bb6_ld__inst0_writeack,
   // AVM avm_local_bb6_ld__u7_inst0
   output logic avm_local_bb6_ld__u7_inst0_enable,
   output logic avm_local_bb6_ld__u7_inst0_read,
   output logic avm_local_bb6_ld__u7_inst0_write,
   output logic [4:0] avm_local_bb6_ld__u7_inst0_burstcount,
   output logic [30:0] avm_local_bb6_ld__u7_inst0_address,
   output logic [511:0] avm_local_bb6_ld__u7_inst0_writedata,
   output logic [63:0] avm_local_bb6_ld__u7_inst0_byteenable,
   input logic avm_local_bb6_ld__u7_inst0_waitrequest,
   input logic [511:0] avm_local_bb6_ld__u7_inst0_readdata,
   input logic avm_local_bb6_ld__u7_inst0_readdatavalid,
   input logic avm_local_bb6_ld__u7_inst0_writeack,
   // AVM avm_local_bb6_ld__u8_inst0
   output logic avm_local_bb6_ld__u8_inst0_enable,
   output logic avm_local_bb6_ld__u8_inst0_read,
   output logic avm_local_bb6_ld__u8_inst0_write,
   output logic [4:0] avm_local_bb6_ld__u8_inst0_burstcount,
   output logic [30:0] avm_local_bb6_ld__u8_inst0_address,
   output logic [511:0] avm_local_bb6_ld__u8_inst0_writedata,
   output logic [63:0] avm_local_bb6_ld__u8_inst0_byteenable,
   input logic avm_local_bb6_ld__u8_inst0_waitrequest,
   input logic [511:0] avm_local_bb6_ld__u8_inst0_readdata,
   input logic avm_local_bb6_ld__u8_inst0_readdatavalid,
   input logic avm_local_bb6_ld__u8_inst0_writeack,
   // AVM avm_local_bb6_ld__u9_inst0
   output logic avm_local_bb6_ld__u9_inst0_enable,
   output logic avm_local_bb6_ld__u9_inst0_read,
   output logic avm_local_bb6_ld__u9_inst0_write,
   output logic [4:0] avm_local_bb6_ld__u9_inst0_burstcount,
   output logic [30:0] avm_local_bb6_ld__u9_inst0_address,
   output logic [511:0] avm_local_bb6_ld__u9_inst0_writedata,
   output logic [63:0] avm_local_bb6_ld__u9_inst0_byteenable,
   input logic avm_local_bb6_ld__u9_inst0_waitrequest,
   input logic [511:0] avm_local_bb6_ld__u9_inst0_readdata,
   input logic avm_local_bb6_ld__u9_inst0_readdatavalid,
   input logic avm_local_bb6_ld__u9_inst0_writeack,
   // AVM avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0
   output logic avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_enable,
   output logic avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_read,
   output logic avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_write,
   output logic [4:0] avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_burstcount,
   output logic [30:0] avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_address,
   output logic [511:0] avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_writedata,
   output logic [63:0] avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_byteenable,
   input logic avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_waitrequest,
   input logic [511:0] avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_readdata,
   input logic avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_readdatavalid,
   input logic avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_writeack,
   // AVM avm_local_bb8_ld__u17_inst0
   output logic avm_local_bb8_ld__u17_inst0_enable,
   output logic avm_local_bb8_ld__u17_inst0_read,
   output logic avm_local_bb8_ld__u17_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u17_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u17_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u17_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u17_inst0_byteenable,
   input logic avm_local_bb8_ld__u17_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u17_inst0_readdata,
   input logic avm_local_bb8_ld__u17_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u17_inst0_writeack,
   // AVM avm_local_bb8_ld__u18_inst0
   output logic avm_local_bb8_ld__u18_inst0_enable,
   output logic avm_local_bb8_ld__u18_inst0_read,
   output logic avm_local_bb8_ld__u18_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u18_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u18_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u18_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u18_inst0_byteenable,
   input logic avm_local_bb8_ld__u18_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u18_inst0_readdata,
   input logic avm_local_bb8_ld__u18_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u18_inst0_writeack,
   // AVM avm_local_bb8_ld__u19_inst0
   output logic avm_local_bb8_ld__u19_inst0_enable,
   output logic avm_local_bb8_ld__u19_inst0_read,
   output logic avm_local_bb8_ld__u19_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u19_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u19_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u19_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u19_inst0_byteenable,
   input logic avm_local_bb8_ld__u19_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u19_inst0_readdata,
   input logic avm_local_bb8_ld__u19_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u19_inst0_writeack,
   // AVM avm_local_bb8_ld__u20_inst0
   output logic avm_local_bb8_ld__u20_inst0_enable,
   output logic avm_local_bb8_ld__u20_inst0_read,
   output logic avm_local_bb8_ld__u20_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u20_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u20_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u20_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u20_inst0_byteenable,
   input logic avm_local_bb8_ld__u20_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u20_inst0_readdata,
   input logic avm_local_bb8_ld__u20_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u20_inst0_writeack,
   // AVM avm_local_bb8_ld__u21_inst0
   output logic avm_local_bb8_ld__u21_inst0_enable,
   output logic avm_local_bb8_ld__u21_inst0_read,
   output logic avm_local_bb8_ld__u21_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u21_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u21_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u21_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u21_inst0_byteenable,
   input logic avm_local_bb8_ld__u21_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u21_inst0_readdata,
   input logic avm_local_bb8_ld__u21_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u21_inst0_writeack,
   // AVM avm_local_bb8_ld__u22_inst0
   output logic avm_local_bb8_ld__u22_inst0_enable,
   output logic avm_local_bb8_ld__u22_inst0_read,
   output logic avm_local_bb8_ld__u22_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u22_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u22_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u22_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u22_inst0_byteenable,
   input logic avm_local_bb8_ld__u22_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u22_inst0_readdata,
   input logic avm_local_bb8_ld__u22_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u22_inst0_writeack,
   // AVM avm_local_bb8_ld__u23_inst0
   output logic avm_local_bb8_ld__u23_inst0_enable,
   output logic avm_local_bb8_ld__u23_inst0_read,
   output logic avm_local_bb8_ld__u23_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u23_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u23_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u23_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u23_inst0_byteenable,
   input logic avm_local_bb8_ld__u23_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u23_inst0_readdata,
   input logic avm_local_bb8_ld__u23_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u23_inst0_writeack,
   // AVM avm_local_bb8_ld__u24_inst0
   output logic avm_local_bb8_ld__u24_inst0_enable,
   output logic avm_local_bb8_ld__u24_inst0_read,
   output logic avm_local_bb8_ld__u24_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u24_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u24_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u24_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u24_inst0_byteenable,
   input logic avm_local_bb8_ld__u24_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u24_inst0_readdata,
   input logic avm_local_bb8_ld__u24_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u24_inst0_writeack,
   // AVM avm_local_bb8_ld__u25_inst0
   output logic avm_local_bb8_ld__u25_inst0_enable,
   output logic avm_local_bb8_ld__u25_inst0_read,
   output logic avm_local_bb8_ld__u25_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u25_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u25_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u25_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u25_inst0_byteenable,
   input logic avm_local_bb8_ld__u25_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u25_inst0_readdata,
   input logic avm_local_bb8_ld__u25_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u25_inst0_writeack,
   // AVM avm_local_bb8_ld__u26_inst0
   output logic avm_local_bb8_ld__u26_inst0_enable,
   output logic avm_local_bb8_ld__u26_inst0_read,
   output logic avm_local_bb8_ld__u26_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u26_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u26_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u26_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u26_inst0_byteenable,
   input logic avm_local_bb8_ld__u26_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u26_inst0_readdata,
   input logic avm_local_bb8_ld__u26_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u26_inst0_writeack,
   // AVM avm_local_bb8_ld__u27_inst0
   output logic avm_local_bb8_ld__u27_inst0_enable,
   output logic avm_local_bb8_ld__u27_inst0_read,
   output logic avm_local_bb8_ld__u27_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u27_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u27_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u27_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u27_inst0_byteenable,
   input logic avm_local_bb8_ld__u27_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u27_inst0_readdata,
   input logic avm_local_bb8_ld__u27_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u27_inst0_writeack,
   // AVM avm_local_bb8_ld__u28_inst0
   output logic avm_local_bb8_ld__u28_inst0_enable,
   output logic avm_local_bb8_ld__u28_inst0_read,
   output logic avm_local_bb8_ld__u28_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u28_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u28_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u28_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u28_inst0_byteenable,
   input logic avm_local_bb8_ld__u28_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u28_inst0_readdata,
   input logic avm_local_bb8_ld__u28_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u28_inst0_writeack,
   // AVM avm_local_bb8_ld__u29_inst0
   output logic avm_local_bb8_ld__u29_inst0_enable,
   output logic avm_local_bb8_ld__u29_inst0_read,
   output logic avm_local_bb8_ld__u29_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u29_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u29_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u29_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u29_inst0_byteenable,
   input logic avm_local_bb8_ld__u29_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u29_inst0_readdata,
   input logic avm_local_bb8_ld__u29_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u29_inst0_writeack,
   // AVM avm_local_bb8_ld__u30_inst0
   output logic avm_local_bb8_ld__u30_inst0_enable,
   output logic avm_local_bb8_ld__u30_inst0_read,
   output logic avm_local_bb8_ld__u30_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u30_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u30_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u30_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u30_inst0_byteenable,
   input logic avm_local_bb8_ld__u30_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u30_inst0_readdata,
   input logic avm_local_bb8_ld__u30_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u30_inst0_writeack,
   // AVM avm_local_bb8_ld__u31_inst0
   output logic avm_local_bb8_ld__u31_inst0_enable,
   output logic avm_local_bb8_ld__u31_inst0_read,
   output logic avm_local_bb8_ld__u31_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u31_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u31_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u31_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u31_inst0_byteenable,
   input logic avm_local_bb8_ld__u31_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u31_inst0_readdata,
   input logic avm_local_bb8_ld__u31_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u31_inst0_writeack,
   // AVM avm_local_bb8_ld__u32_inst0
   output logic avm_local_bb8_ld__u32_inst0_enable,
   output logic avm_local_bb8_ld__u32_inst0_read,
   output logic avm_local_bb8_ld__u32_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u32_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u32_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u32_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u32_inst0_byteenable,
   input logic avm_local_bb8_ld__u32_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u32_inst0_readdata,
   input logic avm_local_bb8_ld__u32_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u32_inst0_writeack,
   // AVM avm_local_bb8_ld__u33_inst0
   output logic avm_local_bb8_ld__u33_inst0_enable,
   output logic avm_local_bb8_ld__u33_inst0_read,
   output logic avm_local_bb8_ld__u33_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u33_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u33_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u33_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u33_inst0_byteenable,
   input logic avm_local_bb8_ld__u33_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u33_inst0_readdata,
   input logic avm_local_bb8_ld__u33_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u33_inst0_writeack,
   // AVM avm_local_bb8_ld__u34_inst0
   output logic avm_local_bb8_ld__u34_inst0_enable,
   output logic avm_local_bb8_ld__u34_inst0_read,
   output logic avm_local_bb8_ld__u34_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u34_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u34_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u34_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u34_inst0_byteenable,
   input logic avm_local_bb8_ld__u34_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u34_inst0_readdata,
   input logic avm_local_bb8_ld__u34_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u34_inst0_writeack,
   // AVM avm_local_bb8_ld__u35_inst0
   output logic avm_local_bb8_ld__u35_inst0_enable,
   output logic avm_local_bb8_ld__u35_inst0_read,
   output logic avm_local_bb8_ld__u35_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u35_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u35_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u35_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u35_inst0_byteenable,
   input logic avm_local_bb8_ld__u35_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u35_inst0_readdata,
   input logic avm_local_bb8_ld__u35_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u35_inst0_writeack,
   // AVM avm_local_bb8_ld__u36_inst0
   output logic avm_local_bb8_ld__u36_inst0_enable,
   output logic avm_local_bb8_ld__u36_inst0_read,
   output logic avm_local_bb8_ld__u36_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u36_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u36_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u36_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u36_inst0_byteenable,
   input logic avm_local_bb8_ld__u36_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u36_inst0_readdata,
   input logic avm_local_bb8_ld__u36_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u36_inst0_writeack,
   // AVM avm_local_bb8_ld__u37_inst0
   output logic avm_local_bb8_ld__u37_inst0_enable,
   output logic avm_local_bb8_ld__u37_inst0_read,
   output logic avm_local_bb8_ld__u37_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u37_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u37_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u37_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u37_inst0_byteenable,
   input logic avm_local_bb8_ld__u37_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u37_inst0_readdata,
   input logic avm_local_bb8_ld__u37_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u37_inst0_writeack,
   // AVM avm_local_bb8_ld__u38_inst0
   output logic avm_local_bb8_ld__u38_inst0_enable,
   output logic avm_local_bb8_ld__u38_inst0_read,
   output logic avm_local_bb8_ld__u38_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u38_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u38_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u38_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u38_inst0_byteenable,
   input logic avm_local_bb8_ld__u38_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u38_inst0_readdata,
   input logic avm_local_bb8_ld__u38_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u38_inst0_writeack,
   // AVM avm_local_bb8_ld__u39_inst0
   output logic avm_local_bb8_ld__u39_inst0_enable,
   output logic avm_local_bb8_ld__u39_inst0_read,
   output logic avm_local_bb8_ld__u39_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u39_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u39_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u39_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u39_inst0_byteenable,
   input logic avm_local_bb8_ld__u39_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u39_inst0_readdata,
   input logic avm_local_bb8_ld__u39_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u39_inst0_writeack,
   // AVM avm_local_bb8_ld__u40_inst0
   output logic avm_local_bb8_ld__u40_inst0_enable,
   output logic avm_local_bb8_ld__u40_inst0_read,
   output logic avm_local_bb8_ld__u40_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u40_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u40_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u40_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u40_inst0_byteenable,
   input logic avm_local_bb8_ld__u40_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u40_inst0_readdata,
   input logic avm_local_bb8_ld__u40_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u40_inst0_writeack,
   // AVM avm_local_bb8_ld__u41_inst0
   output logic avm_local_bb8_ld__u41_inst0_enable,
   output logic avm_local_bb8_ld__u41_inst0_read,
   output logic avm_local_bb8_ld__u41_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u41_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u41_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u41_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u41_inst0_byteenable,
   input logic avm_local_bb8_ld__u41_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u41_inst0_readdata,
   input logic avm_local_bb8_ld__u41_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u41_inst0_writeack,
   // AVM avm_local_bb8_ld__u42_inst0
   output logic avm_local_bb8_ld__u42_inst0_enable,
   output logic avm_local_bb8_ld__u42_inst0_read,
   output logic avm_local_bb8_ld__u42_inst0_write,
   output logic [4:0] avm_local_bb8_ld__u42_inst0_burstcount,
   output logic [30:0] avm_local_bb8_ld__u42_inst0_address,
   output logic [511:0] avm_local_bb8_ld__u42_inst0_writedata,
   output logic [63:0] avm_local_bb8_ld__u42_inst0_byteenable,
   input logic avm_local_bb8_ld__u42_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_ld__u42_inst0_readdata,
   input logic avm_local_bb8_ld__u42_inst0_readdatavalid,
   input logic avm_local_bb8_ld__u42_inst0_writeack,
   // AVM avm_local_bb9_ld__u49_inst0
   output logic avm_local_bb9_ld__u49_inst0_enable,
   output logic avm_local_bb9_ld__u49_inst0_read,
   output logic avm_local_bb9_ld__u49_inst0_write,
   output logic [4:0] avm_local_bb9_ld__u49_inst0_burstcount,
   output logic [30:0] avm_local_bb9_ld__u49_inst0_address,
   output logic [511:0] avm_local_bb9_ld__u49_inst0_writedata,
   output logic [63:0] avm_local_bb9_ld__u49_inst0_byteenable,
   input logic avm_local_bb9_ld__u49_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_ld__u49_inst0_readdata,
   input logic avm_local_bb9_ld__u49_inst0_readdatavalid,
   input logic avm_local_bb9_ld__u49_inst0_writeack,
   // AVM avm_local_bb9_ld__u50_inst0
   output logic avm_local_bb9_ld__u50_inst0_enable,
   output logic avm_local_bb9_ld__u50_inst0_read,
   output logic avm_local_bb9_ld__u50_inst0_write,
   output logic [4:0] avm_local_bb9_ld__u50_inst0_burstcount,
   output logic [30:0] avm_local_bb9_ld__u50_inst0_address,
   output logic [511:0] avm_local_bb9_ld__u50_inst0_writedata,
   output logic [63:0] avm_local_bb9_ld__u50_inst0_byteenable,
   input logic avm_local_bb9_ld__u50_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_ld__u50_inst0_readdata,
   input logic avm_local_bb9_ld__u50_inst0_readdatavalid,
   input logic avm_local_bb9_ld__u50_inst0_writeack,
   // AVM avm_local_bb9_ld__u51_inst0
   output logic avm_local_bb9_ld__u51_inst0_enable,
   output logic avm_local_bb9_ld__u51_inst0_read,
   output logic avm_local_bb9_ld__u51_inst0_write,
   output logic [4:0] avm_local_bb9_ld__u51_inst0_burstcount,
   output logic [30:0] avm_local_bb9_ld__u51_inst0_address,
   output logic [511:0] avm_local_bb9_ld__u51_inst0_writedata,
   output logic [63:0] avm_local_bb9_ld__u51_inst0_byteenable,
   input logic avm_local_bb9_ld__u51_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_ld__u51_inst0_readdata,
   input logic avm_local_bb9_ld__u51_inst0_readdatavalid,
   input logic avm_local_bb9_ld__u51_inst0_writeack,
   // AVM avm_local_bb9_ld__u52_inst0
   output logic avm_local_bb9_ld__u52_inst0_enable,
   output logic avm_local_bb9_ld__u52_inst0_read,
   output logic avm_local_bb9_ld__u52_inst0_write,
   output logic [4:0] avm_local_bb9_ld__u52_inst0_burstcount,
   output logic [30:0] avm_local_bb9_ld__u52_inst0_address,
   output logic [511:0] avm_local_bb9_ld__u52_inst0_writedata,
   output logic [63:0] avm_local_bb9_ld__u52_inst0_byteenable,
   input logic avm_local_bb9_ld__u52_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_ld__u52_inst0_readdata,
   input logic avm_local_bb9_ld__u52_inst0_readdatavalid,
   input logic avm_local_bb9_ld__u52_inst0_writeack,
   // AVM avm_local_bb9_ld__u53_inst0
   output logic avm_local_bb9_ld__u53_inst0_enable,
   output logic avm_local_bb9_ld__u53_inst0_read,
   output logic avm_local_bb9_ld__u53_inst0_write,
   output logic [4:0] avm_local_bb9_ld__u53_inst0_burstcount,
   output logic [30:0] avm_local_bb9_ld__u53_inst0_address,
   output logic [511:0] avm_local_bb9_ld__u53_inst0_writedata,
   output logic [63:0] avm_local_bb9_ld__u53_inst0_byteenable,
   input logic avm_local_bb9_ld__u53_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_ld__u53_inst0_readdata,
   input logic avm_local_bb9_ld__u53_inst0_readdatavalid,
   input logic avm_local_bb9_ld__u53_inst0_writeack,
   // AVM avm_local_bb9_ld__u54_inst0
   output logic avm_local_bb9_ld__u54_inst0_enable,
   output logic avm_local_bb9_ld__u54_inst0_read,
   output logic avm_local_bb9_ld__u54_inst0_write,
   output logic [4:0] avm_local_bb9_ld__u54_inst0_burstcount,
   output logic [30:0] avm_local_bb9_ld__u54_inst0_address,
   output logic [511:0] avm_local_bb9_ld__u54_inst0_writedata,
   output logic [63:0] avm_local_bb9_ld__u54_inst0_byteenable,
   input logic avm_local_bb9_ld__u54_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_ld__u54_inst0_readdata,
   input logic avm_local_bb9_ld__u54_inst0_readdatavalid,
   input logic avm_local_bb9_ld__u54_inst0_writeack,
   // AVM avm_local_bb9_ld__u55_inst0
   output logic avm_local_bb9_ld__u55_inst0_enable,
   output logic avm_local_bb9_ld__u55_inst0_read,
   output logic avm_local_bb9_ld__u55_inst0_write,
   output logic [4:0] avm_local_bb9_ld__u55_inst0_burstcount,
   output logic [30:0] avm_local_bb9_ld__u55_inst0_address,
   output logic [511:0] avm_local_bb9_ld__u55_inst0_writedata,
   output logic [63:0] avm_local_bb9_ld__u55_inst0_byteenable,
   input logic avm_local_bb9_ld__u55_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_ld__u55_inst0_readdata,
   input logic avm_local_bb9_ld__u55_inst0_readdatavalid,
   input logic avm_local_bb9_ld__u55_inst0_writeack,
   // AVM avm_local_bb9_ld__u56_inst0
   output logic avm_local_bb9_ld__u56_inst0_enable,
   output logic avm_local_bb9_ld__u56_inst0_read,
   output logic avm_local_bb9_ld__u56_inst0_write,
   output logic [4:0] avm_local_bb9_ld__u56_inst0_burstcount,
   output logic [30:0] avm_local_bb9_ld__u56_inst0_address,
   output logic [511:0] avm_local_bb9_ld__u56_inst0_writedata,
   output logic [63:0] avm_local_bb9_ld__u56_inst0_byteenable,
   input logic avm_local_bb9_ld__u56_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_ld__u56_inst0_readdata,
   input logic avm_local_bb9_ld__u56_inst0_readdatavalid,
   input logic avm_local_bb9_ld__u56_inst0_writeack,
   // AVM avm_local_bb9_ld__u57_inst0
   output logic avm_local_bb9_ld__u57_inst0_enable,
   output logic avm_local_bb9_ld__u57_inst0_read,
   output logic avm_local_bb9_ld__u57_inst0_write,
   output logic [4:0] avm_local_bb9_ld__u57_inst0_burstcount,
   output logic [30:0] avm_local_bb9_ld__u57_inst0_address,
   output logic [511:0] avm_local_bb9_ld__u57_inst0_writedata,
   output logic [63:0] avm_local_bb9_ld__u57_inst0_byteenable,
   input logic avm_local_bb9_ld__u57_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_ld__u57_inst0_readdata,
   input logic avm_local_bb9_ld__u57_inst0_readdatavalid,
   input logic avm_local_bb9_ld__u57_inst0_writeack,
   // AVM avm_local_bb9_ld__u58_inst0
   output logic avm_local_bb9_ld__u58_inst0_enable,
   output logic avm_local_bb9_ld__u58_inst0_read,
   output logic avm_local_bb9_ld__u58_inst0_write,
   output logic [4:0] avm_local_bb9_ld__u58_inst0_burstcount,
   output logic [30:0] avm_local_bb9_ld__u58_inst0_address,
   output logic [511:0] avm_local_bb9_ld__u58_inst0_writedata,
   output logic [63:0] avm_local_bb9_ld__u58_inst0_byteenable,
   input logic avm_local_bb9_ld__u58_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_ld__u58_inst0_readdata,
   input logic avm_local_bb9_ld__u58_inst0_readdatavalid,
   input logic avm_local_bb9_ld__u58_inst0_writeack,
   // AVM avm_local_bb9_ld__u59_inst0
   output logic avm_local_bb9_ld__u59_inst0_enable,
   output logic avm_local_bb9_ld__u59_inst0_read,
   output logic avm_local_bb9_ld__u59_inst0_write,
   output logic [4:0] avm_local_bb9_ld__u59_inst0_burstcount,
   output logic [30:0] avm_local_bb9_ld__u59_inst0_address,
   output logic [511:0] avm_local_bb9_ld__u59_inst0_writedata,
   output logic [63:0] avm_local_bb9_ld__u59_inst0_byteenable,
   input logic avm_local_bb9_ld__u59_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_ld__u59_inst0_readdata,
   input logic avm_local_bb9_ld__u59_inst0_readdatavalid,
   input logic avm_local_bb9_ld__u59_inst0_writeack,
   // AVM avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0
   output logic avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_enable,
   output logic avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_read,
   output logic avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_write,
   output logic [4:0] avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_burstcount,
   output logic [30:0] avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_address,
   output logic [511:0] avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_writedata,
   output logic [63:0] avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_byteenable,
   input logic avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_readdata,
   input logic avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_readdatavalid,
   input logic avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_writeack
);
   genvar __i;
   genvar __j;
   genvar __k;
   genvar __l;
   genvar __m;
   genvar __n;
   genvar __o;
   logic lmem_invalid_single_bit;
   logic [5:0] lmem_invalid_aspaces;
   logic local_avm_aspace5_enable [1][6];
   logic local_avm_aspace5_read [1][6];
   logic local_avm_aspace5_write [1][6];
   logic local_avm_aspace5_burstcount [1][6];
   logic [31:0] local_avm_aspace5_address [1][6];
   logic [63:0] local_avm_aspace5_writedata [1][6];
   logic [7:0] local_avm_aspace5_byteenable [1][6];
   logic local_avm_aspace5_waitrequest [1][6];
   logic [63:0] local_avm_aspace5_readdata [1][6];
   logic local_avm_aspace5_readdatavalid [1][6];
   logic local_avm_aspace5_writeack [1][6];
   logic local_avm_aspace6_enable [1][2];
   logic local_avm_aspace6_read [1][2];
   logic local_avm_aspace6_write [1][2];
   logic local_avm_aspace6_burstcount [1][2];
   logic [31:0] local_avm_aspace6_address [1][2];
   logic [31:0] local_avm_aspace6_writedata [1][2];
   logic [3:0] local_avm_aspace6_byteenable [1][2];
   logic local_avm_aspace6_waitrequest [1][2];
   logic [31:0] local_avm_aspace6_readdata [1][2];
   logic local_avm_aspace6_readdatavalid [1][2];
   logic local_avm_aspace6_writeack [1][2];
   logic local_avm_aspace7_enable [1][7];
   logic local_avm_aspace7_read [1][7];
   logic local_avm_aspace7_write [1][7];
   logic local_avm_aspace7_burstcount [1][7];
   logic [31:0] local_avm_aspace7_address [1][7];
   logic [31:0] local_avm_aspace7_writedata [1][7];
   logic [3:0] local_avm_aspace7_byteenable [1][7];
   logic local_avm_aspace7_waitrequest [1][7];
   logic [31:0] local_avm_aspace7_readdata [1][7];
   logic local_avm_aspace7_readdatavalid [1][7];
   logic local_avm_aspace7_writeack [1][7];
   logic local_avm_aspace8_enable [1][5];
   logic local_avm_aspace8_read [1][5];
   logic local_avm_aspace8_write [1][5];
   logic local_avm_aspace8_burstcount [1][5];
   logic [31:0] local_avm_aspace8_address [1][5];
   logic [31:0] local_avm_aspace8_writedata [1][5];
   logic [3:0] local_avm_aspace8_byteenable [1][5];
   logic local_avm_aspace8_waitrequest [1][5];
   logic [31:0] local_avm_aspace8_readdata [1][5];
   logic local_avm_aspace8_readdatavalid [1][5];
   logic local_avm_aspace8_writeack [1][5];
   logic local_avm_aspace9_enable [1][5];
   logic local_avm_aspace9_read [1][5];
   logic local_avm_aspace9_write [1][5];
   logic local_avm_aspace9_burstcount [1][5];
   logic [31:0] local_avm_aspace9_address [1][5];
   logic [31:0] local_avm_aspace9_writedata [1][5];
   logic [3:0] local_avm_aspace9_byteenable [1][5];
   logic local_avm_aspace9_waitrequest [1][5];
   logic [31:0] local_avm_aspace9_readdata [1][5];
   logic local_avm_aspace9_readdatavalid [1][5];
   logic local_avm_aspace9_writeack [1][5];
   logic local_avm_aspace10_enable [1][5];
   logic local_avm_aspace10_read [1][5];
   logic local_avm_aspace10_write [1][5];
   logic local_avm_aspace10_burstcount [1][5];
   logic [31:0] local_avm_aspace10_address [1][5];
   logic [31:0] local_avm_aspace10_writedata [1][5];
   logic [3:0] local_avm_aspace10_byteenable [1][5];
   logic local_avm_aspace10_waitrequest [1][5];
   logic [31:0] local_avm_aspace10_readdata [1][5];
   logic local_avm_aspace10_readdatavalid [1][5];
   logic local_avm_aspace10_writeack [1][5];

   // INST kernel of calc_initpop_function_wrapper
   calc_initpop_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_local_bb12_st__inst0
      .avm_local_bb12_st__inst0_enable(avm_local_bb12_st__inst0_enable),
      .avm_local_bb12_st__inst0_read(avm_local_bb12_st__inst0_read),
      .avm_local_bb12_st__inst0_write(avm_local_bb12_st__inst0_write),
      .avm_local_bb12_st__inst0_burstcount(avm_local_bb12_st__inst0_burstcount),
      .avm_local_bb12_st__inst0_address(avm_local_bb12_st__inst0_address),
      .avm_local_bb12_st__inst0_writedata(avm_local_bb12_st__inst0_writedata),
      .avm_local_bb12_st__inst0_byteenable(avm_local_bb12_st__inst0_byteenable),
      .avm_local_bb12_st__inst0_waitrequest(avm_local_bb12_st__inst0_waitrequest),
      .avm_local_bb12_st__inst0_readdata(avm_local_bb12_st__inst0_readdata),
      .avm_local_bb12_st__inst0_readdatavalid(avm_local_bb12_st__inst0_readdatavalid),
      .avm_local_bb12_st__inst0_writeack(avm_local_bb12_st__inst0_writeack),
      // AVM avm_local_bb12_st_add1001_i_hfp_inst0
      .avm_local_bb12_st_add1001_i_hfp_inst0_enable(avm_local_bb12_st_add1001_i_hfp_inst0_enable),
      .avm_local_bb12_st_add1001_i_hfp_inst0_read(avm_local_bb12_st_add1001_i_hfp_inst0_read),
      .avm_local_bb12_st_add1001_i_hfp_inst0_write(avm_local_bb12_st_add1001_i_hfp_inst0_write),
      .avm_local_bb12_st_add1001_i_hfp_inst0_burstcount(avm_local_bb12_st_add1001_i_hfp_inst0_burstcount),
      .avm_local_bb12_st_add1001_i_hfp_inst0_address(avm_local_bb12_st_add1001_i_hfp_inst0_address),
      .avm_local_bb12_st_add1001_i_hfp_inst0_writedata(avm_local_bb12_st_add1001_i_hfp_inst0_writedata),
      .avm_local_bb12_st_add1001_i_hfp_inst0_byteenable(avm_local_bb12_st_add1001_i_hfp_inst0_byteenable),
      .avm_local_bb12_st_add1001_i_hfp_inst0_waitrequest(avm_local_bb12_st_add1001_i_hfp_inst0_waitrequest),
      .avm_local_bb12_st_add1001_i_hfp_inst0_readdata(avm_local_bb12_st_add1001_i_hfp_inst0_readdata),
      .avm_local_bb12_st_add1001_i_hfp_inst0_readdatavalid(avm_local_bb12_st_add1001_i_hfp_inst0_readdatavalid),
      .avm_local_bb12_st_add1001_i_hfp_inst0_writeack(avm_local_bb12_st_add1001_i_hfp_inst0_writeack),
      // AVM avm_local_bb2_ld__inst0
      .avm_local_bb2_ld__inst0_enable(avm_local_bb2_ld__inst0_enable),
      .avm_local_bb2_ld__inst0_read(avm_local_bb2_ld__inst0_read),
      .avm_local_bb2_ld__inst0_write(avm_local_bb2_ld__inst0_write),
      .avm_local_bb2_ld__inst0_burstcount(avm_local_bb2_ld__inst0_burstcount),
      .avm_local_bb2_ld__inst0_address(avm_local_bb2_ld__inst0_address),
      .avm_local_bb2_ld__inst0_writedata(avm_local_bb2_ld__inst0_writedata),
      .avm_local_bb2_ld__inst0_byteenable(avm_local_bb2_ld__inst0_byteenable),
      .avm_local_bb2_ld__inst0_waitrequest(avm_local_bb2_ld__inst0_waitrequest),
      .avm_local_bb2_ld__inst0_readdata(avm_local_bb2_ld__inst0_readdata),
      .avm_local_bb2_ld__inst0_readdatavalid(avm_local_bb2_ld__inst0_readdatavalid),
      .avm_local_bb2_ld__inst0_writeack(avm_local_bb2_ld__inst0_writeack),
      // AVM avm_local_bb6_ld__105_inst0
      .avm_local_bb6_ld__105_inst0_enable(avm_local_bb6_ld__105_inst0_enable),
      .avm_local_bb6_ld__105_inst0_read(avm_local_bb6_ld__105_inst0_read),
      .avm_local_bb6_ld__105_inst0_write(avm_local_bb6_ld__105_inst0_write),
      .avm_local_bb6_ld__105_inst0_burstcount(avm_local_bb6_ld__105_inst0_burstcount),
      .avm_local_bb6_ld__105_inst0_address(avm_local_bb6_ld__105_inst0_address),
      .avm_local_bb6_ld__105_inst0_writedata(avm_local_bb6_ld__105_inst0_writedata),
      .avm_local_bb6_ld__105_inst0_byteenable(avm_local_bb6_ld__105_inst0_byteenable),
      .avm_local_bb6_ld__105_inst0_waitrequest(avm_local_bb6_ld__105_inst0_waitrequest),
      .avm_local_bb6_ld__105_inst0_readdata(avm_local_bb6_ld__105_inst0_readdata),
      .avm_local_bb6_ld__105_inst0_readdatavalid(avm_local_bb6_ld__105_inst0_readdatavalid),
      .avm_local_bb6_ld__105_inst0_writeack(avm_local_bb6_ld__105_inst0_writeack),
      // AVM avm_local_bb6_ld__107_inst0
      .avm_local_bb6_ld__107_inst0_enable(avm_local_bb6_ld__107_inst0_enable),
      .avm_local_bb6_ld__107_inst0_read(avm_local_bb6_ld__107_inst0_read),
      .avm_local_bb6_ld__107_inst0_write(avm_local_bb6_ld__107_inst0_write),
      .avm_local_bb6_ld__107_inst0_burstcount(avm_local_bb6_ld__107_inst0_burstcount),
      .avm_local_bb6_ld__107_inst0_address(avm_local_bb6_ld__107_inst0_address),
      .avm_local_bb6_ld__107_inst0_writedata(avm_local_bb6_ld__107_inst0_writedata),
      .avm_local_bb6_ld__107_inst0_byteenable(avm_local_bb6_ld__107_inst0_byteenable),
      .avm_local_bb6_ld__107_inst0_waitrequest(avm_local_bb6_ld__107_inst0_waitrequest),
      .avm_local_bb6_ld__107_inst0_readdata(avm_local_bb6_ld__107_inst0_readdata),
      .avm_local_bb6_ld__107_inst0_readdatavalid(avm_local_bb6_ld__107_inst0_readdatavalid),
      .avm_local_bb6_ld__107_inst0_writeack(avm_local_bb6_ld__107_inst0_writeack),
      // AVM avm_local_bb6_ld__109_inst0
      .avm_local_bb6_ld__109_inst0_enable(avm_local_bb6_ld__109_inst0_enable),
      .avm_local_bb6_ld__109_inst0_read(avm_local_bb6_ld__109_inst0_read),
      .avm_local_bb6_ld__109_inst0_write(avm_local_bb6_ld__109_inst0_write),
      .avm_local_bb6_ld__109_inst0_burstcount(avm_local_bb6_ld__109_inst0_burstcount),
      .avm_local_bb6_ld__109_inst0_address(avm_local_bb6_ld__109_inst0_address),
      .avm_local_bb6_ld__109_inst0_writedata(avm_local_bb6_ld__109_inst0_writedata),
      .avm_local_bb6_ld__109_inst0_byteenable(avm_local_bb6_ld__109_inst0_byteenable),
      .avm_local_bb6_ld__109_inst0_waitrequest(avm_local_bb6_ld__109_inst0_waitrequest),
      .avm_local_bb6_ld__109_inst0_readdata(avm_local_bb6_ld__109_inst0_readdata),
      .avm_local_bb6_ld__109_inst0_readdatavalid(avm_local_bb6_ld__109_inst0_readdatavalid),
      .avm_local_bb6_ld__109_inst0_writeack(avm_local_bb6_ld__109_inst0_writeack),
      // AVM avm_local_bb6_ld__111_inst0
      .avm_local_bb6_ld__111_inst0_enable(avm_local_bb6_ld__111_inst0_enable),
      .avm_local_bb6_ld__111_inst0_read(avm_local_bb6_ld__111_inst0_read),
      .avm_local_bb6_ld__111_inst0_write(avm_local_bb6_ld__111_inst0_write),
      .avm_local_bb6_ld__111_inst0_burstcount(avm_local_bb6_ld__111_inst0_burstcount),
      .avm_local_bb6_ld__111_inst0_address(avm_local_bb6_ld__111_inst0_address),
      .avm_local_bb6_ld__111_inst0_writedata(avm_local_bb6_ld__111_inst0_writedata),
      .avm_local_bb6_ld__111_inst0_byteenable(avm_local_bb6_ld__111_inst0_byteenable),
      .avm_local_bb6_ld__111_inst0_waitrequest(avm_local_bb6_ld__111_inst0_waitrequest),
      .avm_local_bb6_ld__111_inst0_readdata(avm_local_bb6_ld__111_inst0_readdata),
      .avm_local_bb6_ld__111_inst0_readdatavalid(avm_local_bb6_ld__111_inst0_readdatavalid),
      .avm_local_bb6_ld__111_inst0_writeack(avm_local_bb6_ld__111_inst0_writeack),
      // AVM avm_local_bb6_ld__inst0
      .avm_local_bb6_ld__inst0_enable(avm_local_bb6_ld__inst0_enable),
      .avm_local_bb6_ld__inst0_read(avm_local_bb6_ld__inst0_read),
      .avm_local_bb6_ld__inst0_write(avm_local_bb6_ld__inst0_write),
      .avm_local_bb6_ld__inst0_burstcount(avm_local_bb6_ld__inst0_burstcount),
      .avm_local_bb6_ld__inst0_address(avm_local_bb6_ld__inst0_address),
      .avm_local_bb6_ld__inst0_writedata(avm_local_bb6_ld__inst0_writedata),
      .avm_local_bb6_ld__inst0_byteenable(avm_local_bb6_ld__inst0_byteenable),
      .avm_local_bb6_ld__inst0_waitrequest(avm_local_bb6_ld__inst0_waitrequest),
      .avm_local_bb6_ld__inst0_readdata(avm_local_bb6_ld__inst0_readdata),
      .avm_local_bb6_ld__inst0_readdatavalid(avm_local_bb6_ld__inst0_readdatavalid),
      .avm_local_bb6_ld__inst0_writeack(avm_local_bb6_ld__inst0_writeack),
      // AVM avm_local_bb6_ld__u7_inst0
      .avm_local_bb6_ld__u7_inst0_enable(avm_local_bb6_ld__u7_inst0_enable),
      .avm_local_bb6_ld__u7_inst0_read(avm_local_bb6_ld__u7_inst0_read),
      .avm_local_bb6_ld__u7_inst0_write(avm_local_bb6_ld__u7_inst0_write),
      .avm_local_bb6_ld__u7_inst0_burstcount(avm_local_bb6_ld__u7_inst0_burstcount),
      .avm_local_bb6_ld__u7_inst0_address(avm_local_bb6_ld__u7_inst0_address),
      .avm_local_bb6_ld__u7_inst0_writedata(avm_local_bb6_ld__u7_inst0_writedata),
      .avm_local_bb6_ld__u7_inst0_byteenable(avm_local_bb6_ld__u7_inst0_byteenable),
      .avm_local_bb6_ld__u7_inst0_waitrequest(avm_local_bb6_ld__u7_inst0_waitrequest),
      .avm_local_bb6_ld__u7_inst0_readdata(avm_local_bb6_ld__u7_inst0_readdata),
      .avm_local_bb6_ld__u7_inst0_readdatavalid(avm_local_bb6_ld__u7_inst0_readdatavalid),
      .avm_local_bb6_ld__u7_inst0_writeack(avm_local_bb6_ld__u7_inst0_writeack),
      // AVM avm_local_bb6_ld__u8_inst0
      .avm_local_bb6_ld__u8_inst0_enable(avm_local_bb6_ld__u8_inst0_enable),
      .avm_local_bb6_ld__u8_inst0_read(avm_local_bb6_ld__u8_inst0_read),
      .avm_local_bb6_ld__u8_inst0_write(avm_local_bb6_ld__u8_inst0_write),
      .avm_local_bb6_ld__u8_inst0_burstcount(avm_local_bb6_ld__u8_inst0_burstcount),
      .avm_local_bb6_ld__u8_inst0_address(avm_local_bb6_ld__u8_inst0_address),
      .avm_local_bb6_ld__u8_inst0_writedata(avm_local_bb6_ld__u8_inst0_writedata),
      .avm_local_bb6_ld__u8_inst0_byteenable(avm_local_bb6_ld__u8_inst0_byteenable),
      .avm_local_bb6_ld__u8_inst0_waitrequest(avm_local_bb6_ld__u8_inst0_waitrequest),
      .avm_local_bb6_ld__u8_inst0_readdata(avm_local_bb6_ld__u8_inst0_readdata),
      .avm_local_bb6_ld__u8_inst0_readdatavalid(avm_local_bb6_ld__u8_inst0_readdatavalid),
      .avm_local_bb6_ld__u8_inst0_writeack(avm_local_bb6_ld__u8_inst0_writeack),
      // AVM avm_local_bb6_ld__u9_inst0
      .avm_local_bb6_ld__u9_inst0_enable(avm_local_bb6_ld__u9_inst0_enable),
      .avm_local_bb6_ld__u9_inst0_read(avm_local_bb6_ld__u9_inst0_read),
      .avm_local_bb6_ld__u9_inst0_write(avm_local_bb6_ld__u9_inst0_write),
      .avm_local_bb6_ld__u9_inst0_burstcount(avm_local_bb6_ld__u9_inst0_burstcount),
      .avm_local_bb6_ld__u9_inst0_address(avm_local_bb6_ld__u9_inst0_address),
      .avm_local_bb6_ld__u9_inst0_writedata(avm_local_bb6_ld__u9_inst0_writedata),
      .avm_local_bb6_ld__u9_inst0_byteenable(avm_local_bb6_ld__u9_inst0_byteenable),
      .avm_local_bb6_ld__u9_inst0_waitrequest(avm_local_bb6_ld__u9_inst0_waitrequest),
      .avm_local_bb6_ld__u9_inst0_readdata(avm_local_bb6_ld__u9_inst0_readdata),
      .avm_local_bb6_ld__u9_inst0_readdatavalid(avm_local_bb6_ld__u9_inst0_readdatavalid),
      .avm_local_bb6_ld__u9_inst0_writeack(avm_local_bb6_ld__u9_inst0_writeack),
      // AVM avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_enable(avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_enable),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_read(avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_read),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_write(avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_write),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_burstcount(avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_burstcount),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_address(avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_address),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_writedata(avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_writedata),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_byteenable(avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_byteenable),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_waitrequest(avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_waitrequest),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_readdata(avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_readdata),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_readdatavalid(avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_readdatavalid),
      .avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_writeack(avm_local_bb6_ld_memcoalesce_KerConst_load_0_inst0_writeack),
      // AVM avm_local_bb8_ld__u17_inst0
      .avm_local_bb8_ld__u17_inst0_enable(avm_local_bb8_ld__u17_inst0_enable),
      .avm_local_bb8_ld__u17_inst0_read(avm_local_bb8_ld__u17_inst0_read),
      .avm_local_bb8_ld__u17_inst0_write(avm_local_bb8_ld__u17_inst0_write),
      .avm_local_bb8_ld__u17_inst0_burstcount(avm_local_bb8_ld__u17_inst0_burstcount),
      .avm_local_bb8_ld__u17_inst0_address(avm_local_bb8_ld__u17_inst0_address),
      .avm_local_bb8_ld__u17_inst0_writedata(avm_local_bb8_ld__u17_inst0_writedata),
      .avm_local_bb8_ld__u17_inst0_byteenable(avm_local_bb8_ld__u17_inst0_byteenable),
      .avm_local_bb8_ld__u17_inst0_waitrequest(avm_local_bb8_ld__u17_inst0_waitrequest),
      .avm_local_bb8_ld__u17_inst0_readdata(avm_local_bb8_ld__u17_inst0_readdata),
      .avm_local_bb8_ld__u17_inst0_readdatavalid(avm_local_bb8_ld__u17_inst0_readdatavalid),
      .avm_local_bb8_ld__u17_inst0_writeack(avm_local_bb8_ld__u17_inst0_writeack),
      // AVM avm_local_bb8_ld__u18_inst0
      .avm_local_bb8_ld__u18_inst0_enable(avm_local_bb8_ld__u18_inst0_enable),
      .avm_local_bb8_ld__u18_inst0_read(avm_local_bb8_ld__u18_inst0_read),
      .avm_local_bb8_ld__u18_inst0_write(avm_local_bb8_ld__u18_inst0_write),
      .avm_local_bb8_ld__u18_inst0_burstcount(avm_local_bb8_ld__u18_inst0_burstcount),
      .avm_local_bb8_ld__u18_inst0_address(avm_local_bb8_ld__u18_inst0_address),
      .avm_local_bb8_ld__u18_inst0_writedata(avm_local_bb8_ld__u18_inst0_writedata),
      .avm_local_bb8_ld__u18_inst0_byteenable(avm_local_bb8_ld__u18_inst0_byteenable),
      .avm_local_bb8_ld__u18_inst0_waitrequest(avm_local_bb8_ld__u18_inst0_waitrequest),
      .avm_local_bb8_ld__u18_inst0_readdata(avm_local_bb8_ld__u18_inst0_readdata),
      .avm_local_bb8_ld__u18_inst0_readdatavalid(avm_local_bb8_ld__u18_inst0_readdatavalid),
      .avm_local_bb8_ld__u18_inst0_writeack(avm_local_bb8_ld__u18_inst0_writeack),
      // AVM avm_local_bb8_ld__u19_inst0
      .avm_local_bb8_ld__u19_inst0_enable(avm_local_bb8_ld__u19_inst0_enable),
      .avm_local_bb8_ld__u19_inst0_read(avm_local_bb8_ld__u19_inst0_read),
      .avm_local_bb8_ld__u19_inst0_write(avm_local_bb8_ld__u19_inst0_write),
      .avm_local_bb8_ld__u19_inst0_burstcount(avm_local_bb8_ld__u19_inst0_burstcount),
      .avm_local_bb8_ld__u19_inst0_address(avm_local_bb8_ld__u19_inst0_address),
      .avm_local_bb8_ld__u19_inst0_writedata(avm_local_bb8_ld__u19_inst0_writedata),
      .avm_local_bb8_ld__u19_inst0_byteenable(avm_local_bb8_ld__u19_inst0_byteenable),
      .avm_local_bb8_ld__u19_inst0_waitrequest(avm_local_bb8_ld__u19_inst0_waitrequest),
      .avm_local_bb8_ld__u19_inst0_readdata(avm_local_bb8_ld__u19_inst0_readdata),
      .avm_local_bb8_ld__u19_inst0_readdatavalid(avm_local_bb8_ld__u19_inst0_readdatavalid),
      .avm_local_bb8_ld__u19_inst0_writeack(avm_local_bb8_ld__u19_inst0_writeack),
      // AVM avm_local_bb8_ld__u20_inst0
      .avm_local_bb8_ld__u20_inst0_enable(avm_local_bb8_ld__u20_inst0_enable),
      .avm_local_bb8_ld__u20_inst0_read(avm_local_bb8_ld__u20_inst0_read),
      .avm_local_bb8_ld__u20_inst0_write(avm_local_bb8_ld__u20_inst0_write),
      .avm_local_bb8_ld__u20_inst0_burstcount(avm_local_bb8_ld__u20_inst0_burstcount),
      .avm_local_bb8_ld__u20_inst0_address(avm_local_bb8_ld__u20_inst0_address),
      .avm_local_bb8_ld__u20_inst0_writedata(avm_local_bb8_ld__u20_inst0_writedata),
      .avm_local_bb8_ld__u20_inst0_byteenable(avm_local_bb8_ld__u20_inst0_byteenable),
      .avm_local_bb8_ld__u20_inst0_waitrequest(avm_local_bb8_ld__u20_inst0_waitrequest),
      .avm_local_bb8_ld__u20_inst0_readdata(avm_local_bb8_ld__u20_inst0_readdata),
      .avm_local_bb8_ld__u20_inst0_readdatavalid(avm_local_bb8_ld__u20_inst0_readdatavalid),
      .avm_local_bb8_ld__u20_inst0_writeack(avm_local_bb8_ld__u20_inst0_writeack),
      // AVM avm_local_bb8_ld__u21_inst0
      .avm_local_bb8_ld__u21_inst0_enable(avm_local_bb8_ld__u21_inst0_enable),
      .avm_local_bb8_ld__u21_inst0_read(avm_local_bb8_ld__u21_inst0_read),
      .avm_local_bb8_ld__u21_inst0_write(avm_local_bb8_ld__u21_inst0_write),
      .avm_local_bb8_ld__u21_inst0_burstcount(avm_local_bb8_ld__u21_inst0_burstcount),
      .avm_local_bb8_ld__u21_inst0_address(avm_local_bb8_ld__u21_inst0_address),
      .avm_local_bb8_ld__u21_inst0_writedata(avm_local_bb8_ld__u21_inst0_writedata),
      .avm_local_bb8_ld__u21_inst0_byteenable(avm_local_bb8_ld__u21_inst0_byteenable),
      .avm_local_bb8_ld__u21_inst0_waitrequest(avm_local_bb8_ld__u21_inst0_waitrequest),
      .avm_local_bb8_ld__u21_inst0_readdata(avm_local_bb8_ld__u21_inst0_readdata),
      .avm_local_bb8_ld__u21_inst0_readdatavalid(avm_local_bb8_ld__u21_inst0_readdatavalid),
      .avm_local_bb8_ld__u21_inst0_writeack(avm_local_bb8_ld__u21_inst0_writeack),
      // AVM avm_local_bb8_ld__u22_inst0
      .avm_local_bb8_ld__u22_inst0_enable(avm_local_bb8_ld__u22_inst0_enable),
      .avm_local_bb8_ld__u22_inst0_read(avm_local_bb8_ld__u22_inst0_read),
      .avm_local_bb8_ld__u22_inst0_write(avm_local_bb8_ld__u22_inst0_write),
      .avm_local_bb8_ld__u22_inst0_burstcount(avm_local_bb8_ld__u22_inst0_burstcount),
      .avm_local_bb8_ld__u22_inst0_address(avm_local_bb8_ld__u22_inst0_address),
      .avm_local_bb8_ld__u22_inst0_writedata(avm_local_bb8_ld__u22_inst0_writedata),
      .avm_local_bb8_ld__u22_inst0_byteenable(avm_local_bb8_ld__u22_inst0_byteenable),
      .avm_local_bb8_ld__u22_inst0_waitrequest(avm_local_bb8_ld__u22_inst0_waitrequest),
      .avm_local_bb8_ld__u22_inst0_readdata(avm_local_bb8_ld__u22_inst0_readdata),
      .avm_local_bb8_ld__u22_inst0_readdatavalid(avm_local_bb8_ld__u22_inst0_readdatavalid),
      .avm_local_bb8_ld__u22_inst0_writeack(avm_local_bb8_ld__u22_inst0_writeack),
      // AVM avm_local_bb8_ld__u23_inst0
      .avm_local_bb8_ld__u23_inst0_enable(avm_local_bb8_ld__u23_inst0_enable),
      .avm_local_bb8_ld__u23_inst0_read(avm_local_bb8_ld__u23_inst0_read),
      .avm_local_bb8_ld__u23_inst0_write(avm_local_bb8_ld__u23_inst0_write),
      .avm_local_bb8_ld__u23_inst0_burstcount(avm_local_bb8_ld__u23_inst0_burstcount),
      .avm_local_bb8_ld__u23_inst0_address(avm_local_bb8_ld__u23_inst0_address),
      .avm_local_bb8_ld__u23_inst0_writedata(avm_local_bb8_ld__u23_inst0_writedata),
      .avm_local_bb8_ld__u23_inst0_byteenable(avm_local_bb8_ld__u23_inst0_byteenable),
      .avm_local_bb8_ld__u23_inst0_waitrequest(avm_local_bb8_ld__u23_inst0_waitrequest),
      .avm_local_bb8_ld__u23_inst0_readdata(avm_local_bb8_ld__u23_inst0_readdata),
      .avm_local_bb8_ld__u23_inst0_readdatavalid(avm_local_bb8_ld__u23_inst0_readdatavalid),
      .avm_local_bb8_ld__u23_inst0_writeack(avm_local_bb8_ld__u23_inst0_writeack),
      // AVM avm_local_bb8_ld__u24_inst0
      .avm_local_bb8_ld__u24_inst0_enable(avm_local_bb8_ld__u24_inst0_enable),
      .avm_local_bb8_ld__u24_inst0_read(avm_local_bb8_ld__u24_inst0_read),
      .avm_local_bb8_ld__u24_inst0_write(avm_local_bb8_ld__u24_inst0_write),
      .avm_local_bb8_ld__u24_inst0_burstcount(avm_local_bb8_ld__u24_inst0_burstcount),
      .avm_local_bb8_ld__u24_inst0_address(avm_local_bb8_ld__u24_inst0_address),
      .avm_local_bb8_ld__u24_inst0_writedata(avm_local_bb8_ld__u24_inst0_writedata),
      .avm_local_bb8_ld__u24_inst0_byteenable(avm_local_bb8_ld__u24_inst0_byteenable),
      .avm_local_bb8_ld__u24_inst0_waitrequest(avm_local_bb8_ld__u24_inst0_waitrequest),
      .avm_local_bb8_ld__u24_inst0_readdata(avm_local_bb8_ld__u24_inst0_readdata),
      .avm_local_bb8_ld__u24_inst0_readdatavalid(avm_local_bb8_ld__u24_inst0_readdatavalid),
      .avm_local_bb8_ld__u24_inst0_writeack(avm_local_bb8_ld__u24_inst0_writeack),
      // AVM avm_local_bb8_ld__u25_inst0
      .avm_local_bb8_ld__u25_inst0_enable(avm_local_bb8_ld__u25_inst0_enable),
      .avm_local_bb8_ld__u25_inst0_read(avm_local_bb8_ld__u25_inst0_read),
      .avm_local_bb8_ld__u25_inst0_write(avm_local_bb8_ld__u25_inst0_write),
      .avm_local_bb8_ld__u25_inst0_burstcount(avm_local_bb8_ld__u25_inst0_burstcount),
      .avm_local_bb8_ld__u25_inst0_address(avm_local_bb8_ld__u25_inst0_address),
      .avm_local_bb8_ld__u25_inst0_writedata(avm_local_bb8_ld__u25_inst0_writedata),
      .avm_local_bb8_ld__u25_inst0_byteenable(avm_local_bb8_ld__u25_inst0_byteenable),
      .avm_local_bb8_ld__u25_inst0_waitrequest(avm_local_bb8_ld__u25_inst0_waitrequest),
      .avm_local_bb8_ld__u25_inst0_readdata(avm_local_bb8_ld__u25_inst0_readdata),
      .avm_local_bb8_ld__u25_inst0_readdatavalid(avm_local_bb8_ld__u25_inst0_readdatavalid),
      .avm_local_bb8_ld__u25_inst0_writeack(avm_local_bb8_ld__u25_inst0_writeack),
      // AVM avm_local_bb8_ld__u26_inst0
      .avm_local_bb8_ld__u26_inst0_enable(avm_local_bb8_ld__u26_inst0_enable),
      .avm_local_bb8_ld__u26_inst0_read(avm_local_bb8_ld__u26_inst0_read),
      .avm_local_bb8_ld__u26_inst0_write(avm_local_bb8_ld__u26_inst0_write),
      .avm_local_bb8_ld__u26_inst0_burstcount(avm_local_bb8_ld__u26_inst0_burstcount),
      .avm_local_bb8_ld__u26_inst0_address(avm_local_bb8_ld__u26_inst0_address),
      .avm_local_bb8_ld__u26_inst0_writedata(avm_local_bb8_ld__u26_inst0_writedata),
      .avm_local_bb8_ld__u26_inst0_byteenable(avm_local_bb8_ld__u26_inst0_byteenable),
      .avm_local_bb8_ld__u26_inst0_waitrequest(avm_local_bb8_ld__u26_inst0_waitrequest),
      .avm_local_bb8_ld__u26_inst0_readdata(avm_local_bb8_ld__u26_inst0_readdata),
      .avm_local_bb8_ld__u26_inst0_readdatavalid(avm_local_bb8_ld__u26_inst0_readdatavalid),
      .avm_local_bb8_ld__u26_inst0_writeack(avm_local_bb8_ld__u26_inst0_writeack),
      // AVM avm_local_bb8_ld__u27_inst0
      .avm_local_bb8_ld__u27_inst0_enable(avm_local_bb8_ld__u27_inst0_enable),
      .avm_local_bb8_ld__u27_inst0_read(avm_local_bb8_ld__u27_inst0_read),
      .avm_local_bb8_ld__u27_inst0_write(avm_local_bb8_ld__u27_inst0_write),
      .avm_local_bb8_ld__u27_inst0_burstcount(avm_local_bb8_ld__u27_inst0_burstcount),
      .avm_local_bb8_ld__u27_inst0_address(avm_local_bb8_ld__u27_inst0_address),
      .avm_local_bb8_ld__u27_inst0_writedata(avm_local_bb8_ld__u27_inst0_writedata),
      .avm_local_bb8_ld__u27_inst0_byteenable(avm_local_bb8_ld__u27_inst0_byteenable),
      .avm_local_bb8_ld__u27_inst0_waitrequest(avm_local_bb8_ld__u27_inst0_waitrequest),
      .avm_local_bb8_ld__u27_inst0_readdata(avm_local_bb8_ld__u27_inst0_readdata),
      .avm_local_bb8_ld__u27_inst0_readdatavalid(avm_local_bb8_ld__u27_inst0_readdatavalid),
      .avm_local_bb8_ld__u27_inst0_writeack(avm_local_bb8_ld__u27_inst0_writeack),
      // AVM avm_local_bb8_ld__u28_inst0
      .avm_local_bb8_ld__u28_inst0_enable(avm_local_bb8_ld__u28_inst0_enable),
      .avm_local_bb8_ld__u28_inst0_read(avm_local_bb8_ld__u28_inst0_read),
      .avm_local_bb8_ld__u28_inst0_write(avm_local_bb8_ld__u28_inst0_write),
      .avm_local_bb8_ld__u28_inst0_burstcount(avm_local_bb8_ld__u28_inst0_burstcount),
      .avm_local_bb8_ld__u28_inst0_address(avm_local_bb8_ld__u28_inst0_address),
      .avm_local_bb8_ld__u28_inst0_writedata(avm_local_bb8_ld__u28_inst0_writedata),
      .avm_local_bb8_ld__u28_inst0_byteenable(avm_local_bb8_ld__u28_inst0_byteenable),
      .avm_local_bb8_ld__u28_inst0_waitrequest(avm_local_bb8_ld__u28_inst0_waitrequest),
      .avm_local_bb8_ld__u28_inst0_readdata(avm_local_bb8_ld__u28_inst0_readdata),
      .avm_local_bb8_ld__u28_inst0_readdatavalid(avm_local_bb8_ld__u28_inst0_readdatavalid),
      .avm_local_bb8_ld__u28_inst0_writeack(avm_local_bb8_ld__u28_inst0_writeack),
      // AVM avm_local_bb8_ld__u29_inst0
      .avm_local_bb8_ld__u29_inst0_enable(avm_local_bb8_ld__u29_inst0_enable),
      .avm_local_bb8_ld__u29_inst0_read(avm_local_bb8_ld__u29_inst0_read),
      .avm_local_bb8_ld__u29_inst0_write(avm_local_bb8_ld__u29_inst0_write),
      .avm_local_bb8_ld__u29_inst0_burstcount(avm_local_bb8_ld__u29_inst0_burstcount),
      .avm_local_bb8_ld__u29_inst0_address(avm_local_bb8_ld__u29_inst0_address),
      .avm_local_bb8_ld__u29_inst0_writedata(avm_local_bb8_ld__u29_inst0_writedata),
      .avm_local_bb8_ld__u29_inst0_byteenable(avm_local_bb8_ld__u29_inst0_byteenable),
      .avm_local_bb8_ld__u29_inst0_waitrequest(avm_local_bb8_ld__u29_inst0_waitrequest),
      .avm_local_bb8_ld__u29_inst0_readdata(avm_local_bb8_ld__u29_inst0_readdata),
      .avm_local_bb8_ld__u29_inst0_readdatavalid(avm_local_bb8_ld__u29_inst0_readdatavalid),
      .avm_local_bb8_ld__u29_inst0_writeack(avm_local_bb8_ld__u29_inst0_writeack),
      // AVM avm_local_bb8_ld__u30_inst0
      .avm_local_bb8_ld__u30_inst0_enable(avm_local_bb8_ld__u30_inst0_enable),
      .avm_local_bb8_ld__u30_inst0_read(avm_local_bb8_ld__u30_inst0_read),
      .avm_local_bb8_ld__u30_inst0_write(avm_local_bb8_ld__u30_inst0_write),
      .avm_local_bb8_ld__u30_inst0_burstcount(avm_local_bb8_ld__u30_inst0_burstcount),
      .avm_local_bb8_ld__u30_inst0_address(avm_local_bb8_ld__u30_inst0_address),
      .avm_local_bb8_ld__u30_inst0_writedata(avm_local_bb8_ld__u30_inst0_writedata),
      .avm_local_bb8_ld__u30_inst0_byteenable(avm_local_bb8_ld__u30_inst0_byteenable),
      .avm_local_bb8_ld__u30_inst0_waitrequest(avm_local_bb8_ld__u30_inst0_waitrequest),
      .avm_local_bb8_ld__u30_inst0_readdata(avm_local_bb8_ld__u30_inst0_readdata),
      .avm_local_bb8_ld__u30_inst0_readdatavalid(avm_local_bb8_ld__u30_inst0_readdatavalid),
      .avm_local_bb8_ld__u30_inst0_writeack(avm_local_bb8_ld__u30_inst0_writeack),
      // AVM avm_local_bb8_ld__u31_inst0
      .avm_local_bb8_ld__u31_inst0_enable(avm_local_bb8_ld__u31_inst0_enable),
      .avm_local_bb8_ld__u31_inst0_read(avm_local_bb8_ld__u31_inst0_read),
      .avm_local_bb8_ld__u31_inst0_write(avm_local_bb8_ld__u31_inst0_write),
      .avm_local_bb8_ld__u31_inst0_burstcount(avm_local_bb8_ld__u31_inst0_burstcount),
      .avm_local_bb8_ld__u31_inst0_address(avm_local_bb8_ld__u31_inst0_address),
      .avm_local_bb8_ld__u31_inst0_writedata(avm_local_bb8_ld__u31_inst0_writedata),
      .avm_local_bb8_ld__u31_inst0_byteenable(avm_local_bb8_ld__u31_inst0_byteenable),
      .avm_local_bb8_ld__u31_inst0_waitrequest(avm_local_bb8_ld__u31_inst0_waitrequest),
      .avm_local_bb8_ld__u31_inst0_readdata(avm_local_bb8_ld__u31_inst0_readdata),
      .avm_local_bb8_ld__u31_inst0_readdatavalid(avm_local_bb8_ld__u31_inst0_readdatavalid),
      .avm_local_bb8_ld__u31_inst0_writeack(avm_local_bb8_ld__u31_inst0_writeack),
      // AVM avm_local_bb8_ld__u32_inst0
      .avm_local_bb8_ld__u32_inst0_enable(avm_local_bb8_ld__u32_inst0_enable),
      .avm_local_bb8_ld__u32_inst0_read(avm_local_bb8_ld__u32_inst0_read),
      .avm_local_bb8_ld__u32_inst0_write(avm_local_bb8_ld__u32_inst0_write),
      .avm_local_bb8_ld__u32_inst0_burstcount(avm_local_bb8_ld__u32_inst0_burstcount),
      .avm_local_bb8_ld__u32_inst0_address(avm_local_bb8_ld__u32_inst0_address),
      .avm_local_bb8_ld__u32_inst0_writedata(avm_local_bb8_ld__u32_inst0_writedata),
      .avm_local_bb8_ld__u32_inst0_byteenable(avm_local_bb8_ld__u32_inst0_byteenable),
      .avm_local_bb8_ld__u32_inst0_waitrequest(avm_local_bb8_ld__u32_inst0_waitrequest),
      .avm_local_bb8_ld__u32_inst0_readdata(avm_local_bb8_ld__u32_inst0_readdata),
      .avm_local_bb8_ld__u32_inst0_readdatavalid(avm_local_bb8_ld__u32_inst0_readdatavalid),
      .avm_local_bb8_ld__u32_inst0_writeack(avm_local_bb8_ld__u32_inst0_writeack),
      // AVM avm_local_bb8_ld__u33_inst0
      .avm_local_bb8_ld__u33_inst0_enable(avm_local_bb8_ld__u33_inst0_enable),
      .avm_local_bb8_ld__u33_inst0_read(avm_local_bb8_ld__u33_inst0_read),
      .avm_local_bb8_ld__u33_inst0_write(avm_local_bb8_ld__u33_inst0_write),
      .avm_local_bb8_ld__u33_inst0_burstcount(avm_local_bb8_ld__u33_inst0_burstcount),
      .avm_local_bb8_ld__u33_inst0_address(avm_local_bb8_ld__u33_inst0_address),
      .avm_local_bb8_ld__u33_inst0_writedata(avm_local_bb8_ld__u33_inst0_writedata),
      .avm_local_bb8_ld__u33_inst0_byteenable(avm_local_bb8_ld__u33_inst0_byteenable),
      .avm_local_bb8_ld__u33_inst0_waitrequest(avm_local_bb8_ld__u33_inst0_waitrequest),
      .avm_local_bb8_ld__u33_inst0_readdata(avm_local_bb8_ld__u33_inst0_readdata),
      .avm_local_bb8_ld__u33_inst0_readdatavalid(avm_local_bb8_ld__u33_inst0_readdatavalid),
      .avm_local_bb8_ld__u33_inst0_writeack(avm_local_bb8_ld__u33_inst0_writeack),
      // AVM avm_local_bb8_ld__u34_inst0
      .avm_local_bb8_ld__u34_inst0_enable(avm_local_bb8_ld__u34_inst0_enable),
      .avm_local_bb8_ld__u34_inst0_read(avm_local_bb8_ld__u34_inst0_read),
      .avm_local_bb8_ld__u34_inst0_write(avm_local_bb8_ld__u34_inst0_write),
      .avm_local_bb8_ld__u34_inst0_burstcount(avm_local_bb8_ld__u34_inst0_burstcount),
      .avm_local_bb8_ld__u34_inst0_address(avm_local_bb8_ld__u34_inst0_address),
      .avm_local_bb8_ld__u34_inst0_writedata(avm_local_bb8_ld__u34_inst0_writedata),
      .avm_local_bb8_ld__u34_inst0_byteenable(avm_local_bb8_ld__u34_inst0_byteenable),
      .avm_local_bb8_ld__u34_inst0_waitrequest(avm_local_bb8_ld__u34_inst0_waitrequest),
      .avm_local_bb8_ld__u34_inst0_readdata(avm_local_bb8_ld__u34_inst0_readdata),
      .avm_local_bb8_ld__u34_inst0_readdatavalid(avm_local_bb8_ld__u34_inst0_readdatavalid),
      .avm_local_bb8_ld__u34_inst0_writeack(avm_local_bb8_ld__u34_inst0_writeack),
      // AVM avm_local_bb8_ld__u35_inst0
      .avm_local_bb8_ld__u35_inst0_enable(avm_local_bb8_ld__u35_inst0_enable),
      .avm_local_bb8_ld__u35_inst0_read(avm_local_bb8_ld__u35_inst0_read),
      .avm_local_bb8_ld__u35_inst0_write(avm_local_bb8_ld__u35_inst0_write),
      .avm_local_bb8_ld__u35_inst0_burstcount(avm_local_bb8_ld__u35_inst0_burstcount),
      .avm_local_bb8_ld__u35_inst0_address(avm_local_bb8_ld__u35_inst0_address),
      .avm_local_bb8_ld__u35_inst0_writedata(avm_local_bb8_ld__u35_inst0_writedata),
      .avm_local_bb8_ld__u35_inst0_byteenable(avm_local_bb8_ld__u35_inst0_byteenable),
      .avm_local_bb8_ld__u35_inst0_waitrequest(avm_local_bb8_ld__u35_inst0_waitrequest),
      .avm_local_bb8_ld__u35_inst0_readdata(avm_local_bb8_ld__u35_inst0_readdata),
      .avm_local_bb8_ld__u35_inst0_readdatavalid(avm_local_bb8_ld__u35_inst0_readdatavalid),
      .avm_local_bb8_ld__u35_inst0_writeack(avm_local_bb8_ld__u35_inst0_writeack),
      // AVM avm_local_bb8_ld__u36_inst0
      .avm_local_bb8_ld__u36_inst0_enable(avm_local_bb8_ld__u36_inst0_enable),
      .avm_local_bb8_ld__u36_inst0_read(avm_local_bb8_ld__u36_inst0_read),
      .avm_local_bb8_ld__u36_inst0_write(avm_local_bb8_ld__u36_inst0_write),
      .avm_local_bb8_ld__u36_inst0_burstcount(avm_local_bb8_ld__u36_inst0_burstcount),
      .avm_local_bb8_ld__u36_inst0_address(avm_local_bb8_ld__u36_inst0_address),
      .avm_local_bb8_ld__u36_inst0_writedata(avm_local_bb8_ld__u36_inst0_writedata),
      .avm_local_bb8_ld__u36_inst0_byteenable(avm_local_bb8_ld__u36_inst0_byteenable),
      .avm_local_bb8_ld__u36_inst0_waitrequest(avm_local_bb8_ld__u36_inst0_waitrequest),
      .avm_local_bb8_ld__u36_inst0_readdata(avm_local_bb8_ld__u36_inst0_readdata),
      .avm_local_bb8_ld__u36_inst0_readdatavalid(avm_local_bb8_ld__u36_inst0_readdatavalid),
      .avm_local_bb8_ld__u36_inst0_writeack(avm_local_bb8_ld__u36_inst0_writeack),
      // AVM avm_local_bb8_ld__u37_inst0
      .avm_local_bb8_ld__u37_inst0_enable(avm_local_bb8_ld__u37_inst0_enable),
      .avm_local_bb8_ld__u37_inst0_read(avm_local_bb8_ld__u37_inst0_read),
      .avm_local_bb8_ld__u37_inst0_write(avm_local_bb8_ld__u37_inst0_write),
      .avm_local_bb8_ld__u37_inst0_burstcount(avm_local_bb8_ld__u37_inst0_burstcount),
      .avm_local_bb8_ld__u37_inst0_address(avm_local_bb8_ld__u37_inst0_address),
      .avm_local_bb8_ld__u37_inst0_writedata(avm_local_bb8_ld__u37_inst0_writedata),
      .avm_local_bb8_ld__u37_inst0_byteenable(avm_local_bb8_ld__u37_inst0_byteenable),
      .avm_local_bb8_ld__u37_inst0_waitrequest(avm_local_bb8_ld__u37_inst0_waitrequest),
      .avm_local_bb8_ld__u37_inst0_readdata(avm_local_bb8_ld__u37_inst0_readdata),
      .avm_local_bb8_ld__u37_inst0_readdatavalid(avm_local_bb8_ld__u37_inst0_readdatavalid),
      .avm_local_bb8_ld__u37_inst0_writeack(avm_local_bb8_ld__u37_inst0_writeack),
      // AVM avm_local_bb8_ld__u38_inst0
      .avm_local_bb8_ld__u38_inst0_enable(avm_local_bb8_ld__u38_inst0_enable),
      .avm_local_bb8_ld__u38_inst0_read(avm_local_bb8_ld__u38_inst0_read),
      .avm_local_bb8_ld__u38_inst0_write(avm_local_bb8_ld__u38_inst0_write),
      .avm_local_bb8_ld__u38_inst0_burstcount(avm_local_bb8_ld__u38_inst0_burstcount),
      .avm_local_bb8_ld__u38_inst0_address(avm_local_bb8_ld__u38_inst0_address),
      .avm_local_bb8_ld__u38_inst0_writedata(avm_local_bb8_ld__u38_inst0_writedata),
      .avm_local_bb8_ld__u38_inst0_byteenable(avm_local_bb8_ld__u38_inst0_byteenable),
      .avm_local_bb8_ld__u38_inst0_waitrequest(avm_local_bb8_ld__u38_inst0_waitrequest),
      .avm_local_bb8_ld__u38_inst0_readdata(avm_local_bb8_ld__u38_inst0_readdata),
      .avm_local_bb8_ld__u38_inst0_readdatavalid(avm_local_bb8_ld__u38_inst0_readdatavalid),
      .avm_local_bb8_ld__u38_inst0_writeack(avm_local_bb8_ld__u38_inst0_writeack),
      // AVM avm_local_bb8_ld__u39_inst0
      .avm_local_bb8_ld__u39_inst0_enable(avm_local_bb8_ld__u39_inst0_enable),
      .avm_local_bb8_ld__u39_inst0_read(avm_local_bb8_ld__u39_inst0_read),
      .avm_local_bb8_ld__u39_inst0_write(avm_local_bb8_ld__u39_inst0_write),
      .avm_local_bb8_ld__u39_inst0_burstcount(avm_local_bb8_ld__u39_inst0_burstcount),
      .avm_local_bb8_ld__u39_inst0_address(avm_local_bb8_ld__u39_inst0_address),
      .avm_local_bb8_ld__u39_inst0_writedata(avm_local_bb8_ld__u39_inst0_writedata),
      .avm_local_bb8_ld__u39_inst0_byteenable(avm_local_bb8_ld__u39_inst0_byteenable),
      .avm_local_bb8_ld__u39_inst0_waitrequest(avm_local_bb8_ld__u39_inst0_waitrequest),
      .avm_local_bb8_ld__u39_inst0_readdata(avm_local_bb8_ld__u39_inst0_readdata),
      .avm_local_bb8_ld__u39_inst0_readdatavalid(avm_local_bb8_ld__u39_inst0_readdatavalid),
      .avm_local_bb8_ld__u39_inst0_writeack(avm_local_bb8_ld__u39_inst0_writeack),
      // AVM avm_local_bb8_ld__u40_inst0
      .avm_local_bb8_ld__u40_inst0_enable(avm_local_bb8_ld__u40_inst0_enable),
      .avm_local_bb8_ld__u40_inst0_read(avm_local_bb8_ld__u40_inst0_read),
      .avm_local_bb8_ld__u40_inst0_write(avm_local_bb8_ld__u40_inst0_write),
      .avm_local_bb8_ld__u40_inst0_burstcount(avm_local_bb8_ld__u40_inst0_burstcount),
      .avm_local_bb8_ld__u40_inst0_address(avm_local_bb8_ld__u40_inst0_address),
      .avm_local_bb8_ld__u40_inst0_writedata(avm_local_bb8_ld__u40_inst0_writedata),
      .avm_local_bb8_ld__u40_inst0_byteenable(avm_local_bb8_ld__u40_inst0_byteenable),
      .avm_local_bb8_ld__u40_inst0_waitrequest(avm_local_bb8_ld__u40_inst0_waitrequest),
      .avm_local_bb8_ld__u40_inst0_readdata(avm_local_bb8_ld__u40_inst0_readdata),
      .avm_local_bb8_ld__u40_inst0_readdatavalid(avm_local_bb8_ld__u40_inst0_readdatavalid),
      .avm_local_bb8_ld__u40_inst0_writeack(avm_local_bb8_ld__u40_inst0_writeack),
      // AVM avm_local_bb8_ld__u41_inst0
      .avm_local_bb8_ld__u41_inst0_enable(avm_local_bb8_ld__u41_inst0_enable),
      .avm_local_bb8_ld__u41_inst0_read(avm_local_bb8_ld__u41_inst0_read),
      .avm_local_bb8_ld__u41_inst0_write(avm_local_bb8_ld__u41_inst0_write),
      .avm_local_bb8_ld__u41_inst0_burstcount(avm_local_bb8_ld__u41_inst0_burstcount),
      .avm_local_bb8_ld__u41_inst0_address(avm_local_bb8_ld__u41_inst0_address),
      .avm_local_bb8_ld__u41_inst0_writedata(avm_local_bb8_ld__u41_inst0_writedata),
      .avm_local_bb8_ld__u41_inst0_byteenable(avm_local_bb8_ld__u41_inst0_byteenable),
      .avm_local_bb8_ld__u41_inst0_waitrequest(avm_local_bb8_ld__u41_inst0_waitrequest),
      .avm_local_bb8_ld__u41_inst0_readdata(avm_local_bb8_ld__u41_inst0_readdata),
      .avm_local_bb8_ld__u41_inst0_readdatavalid(avm_local_bb8_ld__u41_inst0_readdatavalid),
      .avm_local_bb8_ld__u41_inst0_writeack(avm_local_bb8_ld__u41_inst0_writeack),
      // AVM avm_local_bb8_ld__u42_inst0
      .avm_local_bb8_ld__u42_inst0_enable(avm_local_bb8_ld__u42_inst0_enable),
      .avm_local_bb8_ld__u42_inst0_read(avm_local_bb8_ld__u42_inst0_read),
      .avm_local_bb8_ld__u42_inst0_write(avm_local_bb8_ld__u42_inst0_write),
      .avm_local_bb8_ld__u42_inst0_burstcount(avm_local_bb8_ld__u42_inst0_burstcount),
      .avm_local_bb8_ld__u42_inst0_address(avm_local_bb8_ld__u42_inst0_address),
      .avm_local_bb8_ld__u42_inst0_writedata(avm_local_bb8_ld__u42_inst0_writedata),
      .avm_local_bb8_ld__u42_inst0_byteenable(avm_local_bb8_ld__u42_inst0_byteenable),
      .avm_local_bb8_ld__u42_inst0_waitrequest(avm_local_bb8_ld__u42_inst0_waitrequest),
      .avm_local_bb8_ld__u42_inst0_readdata(avm_local_bb8_ld__u42_inst0_readdata),
      .avm_local_bb8_ld__u42_inst0_readdatavalid(avm_local_bb8_ld__u42_inst0_readdatavalid),
      .avm_local_bb8_ld__u42_inst0_writeack(avm_local_bb8_ld__u42_inst0_writeack),
      // AVM avm_local_bb9_ld__u49_inst0
      .avm_local_bb9_ld__u49_inst0_enable(avm_local_bb9_ld__u49_inst0_enable),
      .avm_local_bb9_ld__u49_inst0_read(avm_local_bb9_ld__u49_inst0_read),
      .avm_local_bb9_ld__u49_inst0_write(avm_local_bb9_ld__u49_inst0_write),
      .avm_local_bb9_ld__u49_inst0_burstcount(avm_local_bb9_ld__u49_inst0_burstcount),
      .avm_local_bb9_ld__u49_inst0_address(avm_local_bb9_ld__u49_inst0_address),
      .avm_local_bb9_ld__u49_inst0_writedata(avm_local_bb9_ld__u49_inst0_writedata),
      .avm_local_bb9_ld__u49_inst0_byteenable(avm_local_bb9_ld__u49_inst0_byteenable),
      .avm_local_bb9_ld__u49_inst0_waitrequest(avm_local_bb9_ld__u49_inst0_waitrequest),
      .avm_local_bb9_ld__u49_inst0_readdata(avm_local_bb9_ld__u49_inst0_readdata),
      .avm_local_bb9_ld__u49_inst0_readdatavalid(avm_local_bb9_ld__u49_inst0_readdatavalid),
      .avm_local_bb9_ld__u49_inst0_writeack(avm_local_bb9_ld__u49_inst0_writeack),
      // AVM avm_local_bb9_ld__u50_inst0
      .avm_local_bb9_ld__u50_inst0_enable(avm_local_bb9_ld__u50_inst0_enable),
      .avm_local_bb9_ld__u50_inst0_read(avm_local_bb9_ld__u50_inst0_read),
      .avm_local_bb9_ld__u50_inst0_write(avm_local_bb9_ld__u50_inst0_write),
      .avm_local_bb9_ld__u50_inst0_burstcount(avm_local_bb9_ld__u50_inst0_burstcount),
      .avm_local_bb9_ld__u50_inst0_address(avm_local_bb9_ld__u50_inst0_address),
      .avm_local_bb9_ld__u50_inst0_writedata(avm_local_bb9_ld__u50_inst0_writedata),
      .avm_local_bb9_ld__u50_inst0_byteenable(avm_local_bb9_ld__u50_inst0_byteenable),
      .avm_local_bb9_ld__u50_inst0_waitrequest(avm_local_bb9_ld__u50_inst0_waitrequest),
      .avm_local_bb9_ld__u50_inst0_readdata(avm_local_bb9_ld__u50_inst0_readdata),
      .avm_local_bb9_ld__u50_inst0_readdatavalid(avm_local_bb9_ld__u50_inst0_readdatavalid),
      .avm_local_bb9_ld__u50_inst0_writeack(avm_local_bb9_ld__u50_inst0_writeack),
      // AVM avm_local_bb9_ld__u51_inst0
      .avm_local_bb9_ld__u51_inst0_enable(avm_local_bb9_ld__u51_inst0_enable),
      .avm_local_bb9_ld__u51_inst0_read(avm_local_bb9_ld__u51_inst0_read),
      .avm_local_bb9_ld__u51_inst0_write(avm_local_bb9_ld__u51_inst0_write),
      .avm_local_bb9_ld__u51_inst0_burstcount(avm_local_bb9_ld__u51_inst0_burstcount),
      .avm_local_bb9_ld__u51_inst0_address(avm_local_bb9_ld__u51_inst0_address),
      .avm_local_bb9_ld__u51_inst0_writedata(avm_local_bb9_ld__u51_inst0_writedata),
      .avm_local_bb9_ld__u51_inst0_byteenable(avm_local_bb9_ld__u51_inst0_byteenable),
      .avm_local_bb9_ld__u51_inst0_waitrequest(avm_local_bb9_ld__u51_inst0_waitrequest),
      .avm_local_bb9_ld__u51_inst0_readdata(avm_local_bb9_ld__u51_inst0_readdata),
      .avm_local_bb9_ld__u51_inst0_readdatavalid(avm_local_bb9_ld__u51_inst0_readdatavalid),
      .avm_local_bb9_ld__u51_inst0_writeack(avm_local_bb9_ld__u51_inst0_writeack),
      // AVM avm_local_bb9_ld__u52_inst0
      .avm_local_bb9_ld__u52_inst0_enable(avm_local_bb9_ld__u52_inst0_enable),
      .avm_local_bb9_ld__u52_inst0_read(avm_local_bb9_ld__u52_inst0_read),
      .avm_local_bb9_ld__u52_inst0_write(avm_local_bb9_ld__u52_inst0_write),
      .avm_local_bb9_ld__u52_inst0_burstcount(avm_local_bb9_ld__u52_inst0_burstcount),
      .avm_local_bb9_ld__u52_inst0_address(avm_local_bb9_ld__u52_inst0_address),
      .avm_local_bb9_ld__u52_inst0_writedata(avm_local_bb9_ld__u52_inst0_writedata),
      .avm_local_bb9_ld__u52_inst0_byteenable(avm_local_bb9_ld__u52_inst0_byteenable),
      .avm_local_bb9_ld__u52_inst0_waitrequest(avm_local_bb9_ld__u52_inst0_waitrequest),
      .avm_local_bb9_ld__u52_inst0_readdata(avm_local_bb9_ld__u52_inst0_readdata),
      .avm_local_bb9_ld__u52_inst0_readdatavalid(avm_local_bb9_ld__u52_inst0_readdatavalid),
      .avm_local_bb9_ld__u52_inst0_writeack(avm_local_bb9_ld__u52_inst0_writeack),
      // AVM avm_local_bb9_ld__u53_inst0
      .avm_local_bb9_ld__u53_inst0_enable(avm_local_bb9_ld__u53_inst0_enable),
      .avm_local_bb9_ld__u53_inst0_read(avm_local_bb9_ld__u53_inst0_read),
      .avm_local_bb9_ld__u53_inst0_write(avm_local_bb9_ld__u53_inst0_write),
      .avm_local_bb9_ld__u53_inst0_burstcount(avm_local_bb9_ld__u53_inst0_burstcount),
      .avm_local_bb9_ld__u53_inst0_address(avm_local_bb9_ld__u53_inst0_address),
      .avm_local_bb9_ld__u53_inst0_writedata(avm_local_bb9_ld__u53_inst0_writedata),
      .avm_local_bb9_ld__u53_inst0_byteenable(avm_local_bb9_ld__u53_inst0_byteenable),
      .avm_local_bb9_ld__u53_inst0_waitrequest(avm_local_bb9_ld__u53_inst0_waitrequest),
      .avm_local_bb9_ld__u53_inst0_readdata(avm_local_bb9_ld__u53_inst0_readdata),
      .avm_local_bb9_ld__u53_inst0_readdatavalid(avm_local_bb9_ld__u53_inst0_readdatavalid),
      .avm_local_bb9_ld__u53_inst0_writeack(avm_local_bb9_ld__u53_inst0_writeack),
      // AVM avm_local_bb9_ld__u54_inst0
      .avm_local_bb9_ld__u54_inst0_enable(avm_local_bb9_ld__u54_inst0_enable),
      .avm_local_bb9_ld__u54_inst0_read(avm_local_bb9_ld__u54_inst0_read),
      .avm_local_bb9_ld__u54_inst0_write(avm_local_bb9_ld__u54_inst0_write),
      .avm_local_bb9_ld__u54_inst0_burstcount(avm_local_bb9_ld__u54_inst0_burstcount),
      .avm_local_bb9_ld__u54_inst0_address(avm_local_bb9_ld__u54_inst0_address),
      .avm_local_bb9_ld__u54_inst0_writedata(avm_local_bb9_ld__u54_inst0_writedata),
      .avm_local_bb9_ld__u54_inst0_byteenable(avm_local_bb9_ld__u54_inst0_byteenable),
      .avm_local_bb9_ld__u54_inst0_waitrequest(avm_local_bb9_ld__u54_inst0_waitrequest),
      .avm_local_bb9_ld__u54_inst0_readdata(avm_local_bb9_ld__u54_inst0_readdata),
      .avm_local_bb9_ld__u54_inst0_readdatavalid(avm_local_bb9_ld__u54_inst0_readdatavalid),
      .avm_local_bb9_ld__u54_inst0_writeack(avm_local_bb9_ld__u54_inst0_writeack),
      // AVM avm_local_bb9_ld__u55_inst0
      .avm_local_bb9_ld__u55_inst0_enable(avm_local_bb9_ld__u55_inst0_enable),
      .avm_local_bb9_ld__u55_inst0_read(avm_local_bb9_ld__u55_inst0_read),
      .avm_local_bb9_ld__u55_inst0_write(avm_local_bb9_ld__u55_inst0_write),
      .avm_local_bb9_ld__u55_inst0_burstcount(avm_local_bb9_ld__u55_inst0_burstcount),
      .avm_local_bb9_ld__u55_inst0_address(avm_local_bb9_ld__u55_inst0_address),
      .avm_local_bb9_ld__u55_inst0_writedata(avm_local_bb9_ld__u55_inst0_writedata),
      .avm_local_bb9_ld__u55_inst0_byteenable(avm_local_bb9_ld__u55_inst0_byteenable),
      .avm_local_bb9_ld__u55_inst0_waitrequest(avm_local_bb9_ld__u55_inst0_waitrequest),
      .avm_local_bb9_ld__u55_inst0_readdata(avm_local_bb9_ld__u55_inst0_readdata),
      .avm_local_bb9_ld__u55_inst0_readdatavalid(avm_local_bb9_ld__u55_inst0_readdatavalid),
      .avm_local_bb9_ld__u55_inst0_writeack(avm_local_bb9_ld__u55_inst0_writeack),
      // AVM avm_local_bb9_ld__u56_inst0
      .avm_local_bb9_ld__u56_inst0_enable(avm_local_bb9_ld__u56_inst0_enable),
      .avm_local_bb9_ld__u56_inst0_read(avm_local_bb9_ld__u56_inst0_read),
      .avm_local_bb9_ld__u56_inst0_write(avm_local_bb9_ld__u56_inst0_write),
      .avm_local_bb9_ld__u56_inst0_burstcount(avm_local_bb9_ld__u56_inst0_burstcount),
      .avm_local_bb9_ld__u56_inst0_address(avm_local_bb9_ld__u56_inst0_address),
      .avm_local_bb9_ld__u56_inst0_writedata(avm_local_bb9_ld__u56_inst0_writedata),
      .avm_local_bb9_ld__u56_inst0_byteenable(avm_local_bb9_ld__u56_inst0_byteenable),
      .avm_local_bb9_ld__u56_inst0_waitrequest(avm_local_bb9_ld__u56_inst0_waitrequest),
      .avm_local_bb9_ld__u56_inst0_readdata(avm_local_bb9_ld__u56_inst0_readdata),
      .avm_local_bb9_ld__u56_inst0_readdatavalid(avm_local_bb9_ld__u56_inst0_readdatavalid),
      .avm_local_bb9_ld__u56_inst0_writeack(avm_local_bb9_ld__u56_inst0_writeack),
      // AVM avm_local_bb9_ld__u57_inst0
      .avm_local_bb9_ld__u57_inst0_enable(avm_local_bb9_ld__u57_inst0_enable),
      .avm_local_bb9_ld__u57_inst0_read(avm_local_bb9_ld__u57_inst0_read),
      .avm_local_bb9_ld__u57_inst0_write(avm_local_bb9_ld__u57_inst0_write),
      .avm_local_bb9_ld__u57_inst0_burstcount(avm_local_bb9_ld__u57_inst0_burstcount),
      .avm_local_bb9_ld__u57_inst0_address(avm_local_bb9_ld__u57_inst0_address),
      .avm_local_bb9_ld__u57_inst0_writedata(avm_local_bb9_ld__u57_inst0_writedata),
      .avm_local_bb9_ld__u57_inst0_byteenable(avm_local_bb9_ld__u57_inst0_byteenable),
      .avm_local_bb9_ld__u57_inst0_waitrequest(avm_local_bb9_ld__u57_inst0_waitrequest),
      .avm_local_bb9_ld__u57_inst0_readdata(avm_local_bb9_ld__u57_inst0_readdata),
      .avm_local_bb9_ld__u57_inst0_readdatavalid(avm_local_bb9_ld__u57_inst0_readdatavalid),
      .avm_local_bb9_ld__u57_inst0_writeack(avm_local_bb9_ld__u57_inst0_writeack),
      // AVM avm_local_bb9_ld__u58_inst0
      .avm_local_bb9_ld__u58_inst0_enable(avm_local_bb9_ld__u58_inst0_enable),
      .avm_local_bb9_ld__u58_inst0_read(avm_local_bb9_ld__u58_inst0_read),
      .avm_local_bb9_ld__u58_inst0_write(avm_local_bb9_ld__u58_inst0_write),
      .avm_local_bb9_ld__u58_inst0_burstcount(avm_local_bb9_ld__u58_inst0_burstcount),
      .avm_local_bb9_ld__u58_inst0_address(avm_local_bb9_ld__u58_inst0_address),
      .avm_local_bb9_ld__u58_inst0_writedata(avm_local_bb9_ld__u58_inst0_writedata),
      .avm_local_bb9_ld__u58_inst0_byteenable(avm_local_bb9_ld__u58_inst0_byteenable),
      .avm_local_bb9_ld__u58_inst0_waitrequest(avm_local_bb9_ld__u58_inst0_waitrequest),
      .avm_local_bb9_ld__u58_inst0_readdata(avm_local_bb9_ld__u58_inst0_readdata),
      .avm_local_bb9_ld__u58_inst0_readdatavalid(avm_local_bb9_ld__u58_inst0_readdatavalid),
      .avm_local_bb9_ld__u58_inst0_writeack(avm_local_bb9_ld__u58_inst0_writeack),
      // AVM avm_local_bb9_ld__u59_inst0
      .avm_local_bb9_ld__u59_inst0_enable(avm_local_bb9_ld__u59_inst0_enable),
      .avm_local_bb9_ld__u59_inst0_read(avm_local_bb9_ld__u59_inst0_read),
      .avm_local_bb9_ld__u59_inst0_write(avm_local_bb9_ld__u59_inst0_write),
      .avm_local_bb9_ld__u59_inst0_burstcount(avm_local_bb9_ld__u59_inst0_burstcount),
      .avm_local_bb9_ld__u59_inst0_address(avm_local_bb9_ld__u59_inst0_address),
      .avm_local_bb9_ld__u59_inst0_writedata(avm_local_bb9_ld__u59_inst0_writedata),
      .avm_local_bb9_ld__u59_inst0_byteenable(avm_local_bb9_ld__u59_inst0_byteenable),
      .avm_local_bb9_ld__u59_inst0_waitrequest(avm_local_bb9_ld__u59_inst0_waitrequest),
      .avm_local_bb9_ld__u59_inst0_readdata(avm_local_bb9_ld__u59_inst0_readdata),
      .avm_local_bb9_ld__u59_inst0_readdatavalid(avm_local_bb9_ld__u59_inst0_readdatavalid),
      .avm_local_bb9_ld__u59_inst0_writeack(avm_local_bb9_ld__u59_inst0_writeack),
      // AVM avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_enable(avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_enable),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_read(avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_read),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_write(avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_write),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_burstcount(avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_burstcount),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_address(avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_address),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_writedata(avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_writedata),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_byteenable(avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_byteenable),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_waitrequest(avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_waitrequest),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_readdata(avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_readdata),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_readdatavalid(avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_readdatavalid),
      .avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_writeack(avm_local_bb9_ld_memcoalesce_KerConst_load_02_inst0_writeack),
      // AVM avm_local_bb2_st__inst0
      .avm_local_bb2_st__inst0_enable(local_avm_aspace5_enable[0][0]),
      .avm_local_bb2_st__inst0_read(local_avm_aspace5_read[0][0]),
      .avm_local_bb2_st__inst0_write(local_avm_aspace5_write[0][0]),
      .avm_local_bb2_st__inst0_burstcount(local_avm_aspace5_burstcount[0][0]),
      .avm_local_bb2_st__inst0_address(local_avm_aspace5_address[0][0]),
      .avm_local_bb2_st__inst0_writedata(local_avm_aspace5_writedata[0][0]),
      .avm_local_bb2_st__inst0_byteenable(local_avm_aspace5_byteenable[0][0]),
      .avm_local_bb2_st__inst0_waitrequest(local_avm_aspace5_waitrequest[0][0]),
      .avm_local_bb2_st__inst0_readdata(local_avm_aspace5_readdata[0][0]),
      .avm_local_bb2_st__inst0_readdatavalid(local_avm_aspace5_readdatavalid[0][0]),
      .avm_local_bb2_st__inst0_writeack(local_avm_aspace5_writeack[0][0]),
      // AVM avm_local_bb3_ld__inst0
      .avm_local_bb3_ld__inst0_enable(local_avm_aspace5_enable[0][1]),
      .avm_local_bb3_ld__inst0_read(local_avm_aspace5_read[0][1]),
      .avm_local_bb3_ld__inst0_write(local_avm_aspace5_write[0][1]),
      .avm_local_bb3_ld__inst0_burstcount(local_avm_aspace5_burstcount[0][1]),
      .avm_local_bb3_ld__inst0_address(local_avm_aspace5_address[0][1]),
      .avm_local_bb3_ld__inst0_writedata(local_avm_aspace5_writedata[0][1]),
      .avm_local_bb3_ld__inst0_byteenable(local_avm_aspace5_byteenable[0][1]),
      .avm_local_bb3_ld__inst0_waitrequest(local_avm_aspace5_waitrequest[0][1]),
      .avm_local_bb3_ld__inst0_readdata(local_avm_aspace5_readdata[0][1]),
      .avm_local_bb3_ld__inst0_readdatavalid(local_avm_aspace5_readdatavalid[0][1]),
      .avm_local_bb3_ld__inst0_writeack(local_avm_aspace5_writeack[0][1]),
      // AVM avm_local_bb3_ld_memcoalesce_null_load_0_inst0
      .avm_local_bb3_ld_memcoalesce_null_load_0_inst0_enable(local_avm_aspace5_enable[0][2]),
      .avm_local_bb3_ld_memcoalesce_null_load_0_inst0_read(local_avm_aspace5_read[0][2]),
      .avm_local_bb3_ld_memcoalesce_null_load_0_inst0_write(local_avm_aspace5_write[0][2]),
      .avm_local_bb3_ld_memcoalesce_null_load_0_inst0_burstcount(local_avm_aspace5_burstcount[0][2]),
      .avm_local_bb3_ld_memcoalesce_null_load_0_inst0_address(local_avm_aspace5_address[0][2]),
      .avm_local_bb3_ld_memcoalesce_null_load_0_inst0_writedata(local_avm_aspace5_writedata[0][2]),
      .avm_local_bb3_ld_memcoalesce_null_load_0_inst0_byteenable(local_avm_aspace5_byteenable[0][2]),
      .avm_local_bb3_ld_memcoalesce_null_load_0_inst0_waitrequest(local_avm_aspace5_waitrequest[0][2]),
      .avm_local_bb3_ld_memcoalesce_null_load_0_inst0_readdata(local_avm_aspace5_readdata[0][2]),
      .avm_local_bb3_ld_memcoalesce_null_load_0_inst0_readdatavalid(local_avm_aspace5_readdatavalid[0][2]),
      .avm_local_bb3_ld_memcoalesce_null_load_0_inst0_writeack(local_avm_aspace5_writeack[0][2]),
      // AVM avm_local_bb6_ld__102_inst0
      .avm_local_bb6_ld__102_inst0_enable(local_avm_aspace5_enable[0][3]),
      .avm_local_bb6_ld__102_inst0_read(local_avm_aspace5_read[0][3]),
      .avm_local_bb6_ld__102_inst0_write(local_avm_aspace5_write[0][3]),
      .avm_local_bb6_ld__102_inst0_burstcount(local_avm_aspace5_burstcount[0][3]),
      .avm_local_bb6_ld__102_inst0_address(local_avm_aspace5_address[0][3]),
      .avm_local_bb6_ld__102_inst0_writedata(local_avm_aspace5_writedata[0][3]),
      .avm_local_bb6_ld__102_inst0_byteenable(local_avm_aspace5_byteenable[0][3]),
      .avm_local_bb6_ld__102_inst0_waitrequest(local_avm_aspace5_waitrequest[0][3]),
      .avm_local_bb6_ld__102_inst0_readdata(local_avm_aspace5_readdata[0][3]),
      .avm_local_bb6_ld__102_inst0_readdatavalid(local_avm_aspace5_readdatavalid[0][3]),
      .avm_local_bb6_ld__102_inst0_writeack(local_avm_aspace5_writeack[0][3]),
      // AVM avm_local_bb6_ld__u13_inst0
      .avm_local_bb6_ld__u13_inst0_enable(local_avm_aspace5_enable[0][4]),
      .avm_local_bb6_ld__u13_inst0_read(local_avm_aspace5_read[0][4]),
      .avm_local_bb6_ld__u13_inst0_write(local_avm_aspace5_write[0][4]),
      .avm_local_bb6_ld__u13_inst0_burstcount(local_avm_aspace5_burstcount[0][4]),
      .avm_local_bb6_ld__u13_inst0_address(local_avm_aspace5_address[0][4]),
      .avm_local_bb6_ld__u13_inst0_writedata(local_avm_aspace5_writedata[0][4]),
      .avm_local_bb6_ld__u13_inst0_byteenable(local_avm_aspace5_byteenable[0][4]),
      .avm_local_bb6_ld__u13_inst0_waitrequest(local_avm_aspace5_waitrequest[0][4]),
      .avm_local_bb6_ld__u13_inst0_readdata(local_avm_aspace5_readdata[0][4]),
      .avm_local_bb6_ld__u13_inst0_readdatavalid(local_avm_aspace5_readdatavalid[0][4]),
      .avm_local_bb6_ld__u13_inst0_writeack(local_avm_aspace5_writeack[0][4]),
      // AVM avm_local_bb6_ld__u14_inst0
      .avm_local_bb6_ld__u14_inst0_enable(local_avm_aspace5_enable[0][5]),
      .avm_local_bb6_ld__u14_inst0_read(local_avm_aspace5_read[0][5]),
      .avm_local_bb6_ld__u14_inst0_write(local_avm_aspace5_write[0][5]),
      .avm_local_bb6_ld__u14_inst0_burstcount(local_avm_aspace5_burstcount[0][5]),
      .avm_local_bb6_ld__u14_inst0_address(local_avm_aspace5_address[0][5]),
      .avm_local_bb6_ld__u14_inst0_writedata(local_avm_aspace5_writedata[0][5]),
      .avm_local_bb6_ld__u14_inst0_byteenable(local_avm_aspace5_byteenable[0][5]),
      .avm_local_bb6_ld__u14_inst0_waitrequest(local_avm_aspace5_waitrequest[0][5]),
      .avm_local_bb6_ld__u14_inst0_readdata(local_avm_aspace5_readdata[0][5]),
      .avm_local_bb6_ld__u14_inst0_readdatavalid(local_avm_aspace5_readdatavalid[0][5]),
      .avm_local_bb6_ld__u14_inst0_writeack(local_avm_aspace5_writeack[0][5]),
      // AVM avm_local_bb3_st_conv4_inst0
      .avm_local_bb3_st_conv4_inst0_enable(local_avm_aspace6_enable[0][0]),
      .avm_local_bb3_st_conv4_inst0_read(local_avm_aspace6_read[0][0]),
      .avm_local_bb3_st_conv4_inst0_write(local_avm_aspace6_write[0][0]),
      .avm_local_bb3_st_conv4_inst0_burstcount(local_avm_aspace6_burstcount[0][0]),
      .avm_local_bb3_st_conv4_inst0_address(local_avm_aspace6_address[0][0]),
      .avm_local_bb3_st_conv4_inst0_writedata(local_avm_aspace6_writedata[0][0]),
      .avm_local_bb3_st_conv4_inst0_byteenable(local_avm_aspace6_byteenable[0][0]),
      .avm_local_bb3_st_conv4_inst0_waitrequest(local_avm_aspace6_waitrequest[0][0]),
      .avm_local_bb3_st_conv4_inst0_readdata(local_avm_aspace6_readdata[0][0]),
      .avm_local_bb3_st_conv4_inst0_readdatavalid(local_avm_aspace6_readdatavalid[0][0]),
      .avm_local_bb3_st_conv4_inst0_writeack(local_avm_aspace6_writeack[0][0]),
      // AVM avm_local_bb6_ld__u10_inst0
      .avm_local_bb6_ld__u10_inst0_enable(local_avm_aspace6_enable[0][1]),
      .avm_local_bb6_ld__u10_inst0_read(local_avm_aspace6_read[0][1]),
      .avm_local_bb6_ld__u10_inst0_write(local_avm_aspace6_write[0][1]),
      .avm_local_bb6_ld__u10_inst0_burstcount(local_avm_aspace6_burstcount[0][1]),
      .avm_local_bb6_ld__u10_inst0_address(local_avm_aspace6_address[0][1]),
      .avm_local_bb6_ld__u10_inst0_writedata(local_avm_aspace6_writedata[0][1]),
      .avm_local_bb6_ld__u10_inst0_byteenable(local_avm_aspace6_byteenable[0][1]),
      .avm_local_bb6_ld__u10_inst0_waitrequest(local_avm_aspace6_waitrequest[0][1]),
      .avm_local_bb6_ld__u10_inst0_readdata(local_avm_aspace6_readdata[0][1]),
      .avm_local_bb6_ld__u10_inst0_readdatavalid(local_avm_aspace6_readdatavalid[0][1]),
      .avm_local_bb6_ld__u10_inst0_writeack(local_avm_aspace6_writeack[0][1]),
      // AVM avm_local_bb10_ld__inst0
      .avm_local_bb10_ld__inst0_enable(local_avm_aspace7_enable[0][0]),
      .avm_local_bb10_ld__inst0_read(local_avm_aspace7_read[0][0]),
      .avm_local_bb10_ld__inst0_write(local_avm_aspace7_write[0][0]),
      .avm_local_bb10_ld__inst0_burstcount(local_avm_aspace7_burstcount[0][0]),
      .avm_local_bb10_ld__inst0_address(local_avm_aspace7_address[0][0]),
      .avm_local_bb10_ld__inst0_writedata(local_avm_aspace7_writedata[0][0]),
      .avm_local_bb10_ld__inst0_byteenable(local_avm_aspace7_byteenable[0][0]),
      .avm_local_bb10_ld__inst0_waitrequest(local_avm_aspace7_waitrequest[0][0]),
      .avm_local_bb10_ld__inst0_readdata(local_avm_aspace7_readdata[0][0]),
      .avm_local_bb10_ld__inst0_readdatavalid(local_avm_aspace7_readdatavalid[0][0]),
      .avm_local_bb10_ld__inst0_writeack(local_avm_aspace7_writeack[0][0]),
      // AVM avm_local_bb11_ld__inst0
      .avm_local_bb11_ld__inst0_enable(local_avm_aspace7_enable[0][1]),
      .avm_local_bb11_ld__inst0_read(local_avm_aspace7_read[0][1]),
      .avm_local_bb11_ld__inst0_write(local_avm_aspace7_write[0][1]),
      .avm_local_bb11_ld__inst0_burstcount(local_avm_aspace7_burstcount[0][1]),
      .avm_local_bb11_ld__inst0_address(local_avm_aspace7_address[0][1]),
      .avm_local_bb11_ld__inst0_writedata(local_avm_aspace7_writedata[0][1]),
      .avm_local_bb11_ld__inst0_byteenable(local_avm_aspace7_byteenable[0][1]),
      .avm_local_bb11_ld__inst0_waitrequest(local_avm_aspace7_waitrequest[0][1]),
      .avm_local_bb11_ld__inst0_readdata(local_avm_aspace7_readdata[0][1]),
      .avm_local_bb11_ld__inst0_readdatavalid(local_avm_aspace7_readdatavalid[0][1]),
      .avm_local_bb11_ld__inst0_writeack(local_avm_aspace7_writeack[0][1]),
      // AVM avm_local_bb3_st__inst0
      .avm_local_bb3_st__inst0_enable(local_avm_aspace7_enable[0][2]),
      .avm_local_bb3_st__inst0_read(local_avm_aspace7_read[0][2]),
      .avm_local_bb3_st__inst0_write(local_avm_aspace7_write[0][2]),
      .avm_local_bb3_st__inst0_burstcount(local_avm_aspace7_burstcount[0][2]),
      .avm_local_bb3_st__inst0_address(local_avm_aspace7_address[0][2]),
      .avm_local_bb3_st__inst0_writedata(local_avm_aspace7_writedata[0][2]),
      .avm_local_bb3_st__inst0_byteenable(local_avm_aspace7_byteenable[0][2]),
      .avm_local_bb3_st__inst0_waitrequest(local_avm_aspace7_waitrequest[0][2]),
      .avm_local_bb3_st__inst0_readdata(local_avm_aspace7_readdata[0][2]),
      .avm_local_bb3_st__inst0_readdatavalid(local_avm_aspace7_readdatavalid[0][2]),
      .avm_local_bb3_st__inst0_writeack(local_avm_aspace7_writeack[0][2]),
      // AVM avm_local_bb4_ld__inst0
      .avm_local_bb4_ld__inst0_enable(local_avm_aspace7_enable[0][3]),
      .avm_local_bb4_ld__inst0_read(local_avm_aspace7_read[0][3]),
      .avm_local_bb4_ld__inst0_write(local_avm_aspace7_write[0][3]),
      .avm_local_bb4_ld__inst0_burstcount(local_avm_aspace7_burstcount[0][3]),
      .avm_local_bb4_ld__inst0_address(local_avm_aspace7_address[0][3]),
      .avm_local_bb4_ld__inst0_writedata(local_avm_aspace7_writedata[0][3]),
      .avm_local_bb4_ld__inst0_byteenable(local_avm_aspace7_byteenable[0][3]),
      .avm_local_bb4_ld__inst0_waitrequest(local_avm_aspace7_waitrequest[0][3]),
      .avm_local_bb4_ld__inst0_readdata(local_avm_aspace7_readdata[0][3]),
      .avm_local_bb4_ld__inst0_readdatavalid(local_avm_aspace7_readdatavalid[0][3]),
      .avm_local_bb4_ld__inst0_writeack(local_avm_aspace7_writeack[0][3]),
      // AVM avm_local_bb7_st_c2_exe1_inst0
      .avm_local_bb7_st_c2_exe1_inst0_enable(local_avm_aspace7_enable[0][4]),
      .avm_local_bb7_st_c2_exe1_inst0_read(local_avm_aspace7_read[0][4]),
      .avm_local_bb7_st_c2_exe1_inst0_write(local_avm_aspace7_write[0][4]),
      .avm_local_bb7_st_c2_exe1_inst0_burstcount(local_avm_aspace7_burstcount[0][4]),
      .avm_local_bb7_st_c2_exe1_inst0_address(local_avm_aspace7_address[0][4]),
      .avm_local_bb7_st_c2_exe1_inst0_writedata(local_avm_aspace7_writedata[0][4]),
      .avm_local_bb7_st_c2_exe1_inst0_byteenable(local_avm_aspace7_byteenable[0][4]),
      .avm_local_bb7_st_c2_exe1_inst0_waitrequest(local_avm_aspace7_waitrequest[0][4]),
      .avm_local_bb7_st_c2_exe1_inst0_readdata(local_avm_aspace7_readdata[0][4]),
      .avm_local_bb7_st_c2_exe1_inst0_readdatavalid(local_avm_aspace7_readdatavalid[0][4]),
      .avm_local_bb7_st_c2_exe1_inst0_writeack(local_avm_aspace7_writeack[0][4]),
      // AVM avm_local_bb9_ld__u60_inst0
      .avm_local_bb9_ld__u60_inst0_enable(local_avm_aspace7_enable[0][5]),
      .avm_local_bb9_ld__u60_inst0_read(local_avm_aspace7_read[0][5]),
      .avm_local_bb9_ld__u60_inst0_write(local_avm_aspace7_write[0][5]),
      .avm_local_bb9_ld__u60_inst0_burstcount(local_avm_aspace7_burstcount[0][5]),
      .avm_local_bb9_ld__u60_inst0_address(local_avm_aspace7_address[0][5]),
      .avm_local_bb9_ld__u60_inst0_writedata(local_avm_aspace7_writedata[0][5]),
      .avm_local_bb9_ld__u60_inst0_byteenable(local_avm_aspace7_byteenable[0][5]),
      .avm_local_bb9_ld__u60_inst0_waitrequest(local_avm_aspace7_waitrequest[0][5]),
      .avm_local_bb9_ld__u60_inst0_readdata(local_avm_aspace7_readdata[0][5]),
      .avm_local_bb9_ld__u60_inst0_readdatavalid(local_avm_aspace7_readdatavalid[0][5]),
      .avm_local_bb9_ld__u60_inst0_writeack(local_avm_aspace7_writeack[0][5]),
      // AVM avm_local_bb9_st_c1_exe1253_inst0
      .avm_local_bb9_st_c1_exe1253_inst0_enable(local_avm_aspace7_enable[0][6]),
      .avm_local_bb9_st_c1_exe1253_inst0_read(local_avm_aspace7_read[0][6]),
      .avm_local_bb9_st_c1_exe1253_inst0_write(local_avm_aspace7_write[0][6]),
      .avm_local_bb9_st_c1_exe1253_inst0_burstcount(local_avm_aspace7_burstcount[0][6]),
      .avm_local_bb9_st_c1_exe1253_inst0_address(local_avm_aspace7_address[0][6]),
      .avm_local_bb9_st_c1_exe1253_inst0_writedata(local_avm_aspace7_writedata[0][6]),
      .avm_local_bb9_st_c1_exe1253_inst0_byteenable(local_avm_aspace7_byteenable[0][6]),
      .avm_local_bb9_st_c1_exe1253_inst0_waitrequest(local_avm_aspace7_waitrequest[0][6]),
      .avm_local_bb9_st_c1_exe1253_inst0_readdata(local_avm_aspace7_readdata[0][6]),
      .avm_local_bb9_st_c1_exe1253_inst0_readdatavalid(local_avm_aspace7_readdatavalid[0][6]),
      .avm_local_bb9_st_c1_exe1253_inst0_writeack(local_avm_aspace7_writeack[0][6]),
      // AVM avm_local_bb6_ld__u2_inst0
      .avm_local_bb6_ld__u2_inst0_enable(local_avm_aspace8_enable[0][0]),
      .avm_local_bb6_ld__u2_inst0_read(local_avm_aspace8_read[0][0]),
      .avm_local_bb6_ld__u2_inst0_write(local_avm_aspace8_write[0][0]),
      .avm_local_bb6_ld__u2_inst0_burstcount(local_avm_aspace8_burstcount[0][0]),
      .avm_local_bb6_ld__u2_inst0_address(local_avm_aspace8_address[0][0]),
      .avm_local_bb6_ld__u2_inst0_writedata(local_avm_aspace8_writedata[0][0]),
      .avm_local_bb6_ld__u2_inst0_byteenable(local_avm_aspace8_byteenable[0][0]),
      .avm_local_bb6_ld__u2_inst0_waitrequest(local_avm_aspace8_waitrequest[0][0]),
      .avm_local_bb6_ld__u2_inst0_readdata(local_avm_aspace8_readdata[0][0]),
      .avm_local_bb6_ld__u2_inst0_readdatavalid(local_avm_aspace8_readdatavalid[0][0]),
      .avm_local_bb6_ld__u2_inst0_writeack(local_avm_aspace8_writeack[0][0]),
      // AVM avm_local_bb6_st_add291_i_hfp_inst0
      .avm_local_bb6_st_add291_i_hfp_inst0_enable(local_avm_aspace8_enable[0][1]),
      .avm_local_bb6_st_add291_i_hfp_inst0_read(local_avm_aspace8_read[0][1]),
      .avm_local_bb6_st_add291_i_hfp_inst0_write(local_avm_aspace8_write[0][1]),
      .avm_local_bb6_st_add291_i_hfp_inst0_burstcount(local_avm_aspace8_burstcount[0][1]),
      .avm_local_bb6_st_add291_i_hfp_inst0_address(local_avm_aspace8_address[0][1]),
      .avm_local_bb6_st_add291_i_hfp_inst0_writedata(local_avm_aspace8_writedata[0][1]),
      .avm_local_bb6_st_add291_i_hfp_inst0_byteenable(local_avm_aspace8_byteenable[0][1]),
      .avm_local_bb6_st_add291_i_hfp_inst0_waitrequest(local_avm_aspace8_waitrequest[0][1]),
      .avm_local_bb6_st_add291_i_hfp_inst0_readdata(local_avm_aspace8_readdata[0][1]),
      .avm_local_bb6_st_add291_i_hfp_inst0_readdatavalid(local_avm_aspace8_readdatavalid[0][1]),
      .avm_local_bb6_st_add291_i_hfp_inst0_writeack(local_avm_aspace8_writeack[0][1]),
      // AVM avm_local_bb8_ld__inst0
      .avm_local_bb8_ld__inst0_enable(local_avm_aspace8_enable[0][2]),
      .avm_local_bb8_ld__inst0_read(local_avm_aspace8_read[0][2]),
      .avm_local_bb8_ld__inst0_write(local_avm_aspace8_write[0][2]),
      .avm_local_bb8_ld__inst0_burstcount(local_avm_aspace8_burstcount[0][2]),
      .avm_local_bb8_ld__inst0_address(local_avm_aspace8_address[0][2]),
      .avm_local_bb8_ld__inst0_writedata(local_avm_aspace8_writedata[0][2]),
      .avm_local_bb8_ld__inst0_byteenable(local_avm_aspace8_byteenable[0][2]),
      .avm_local_bb8_ld__inst0_waitrequest(local_avm_aspace8_waitrequest[0][2]),
      .avm_local_bb8_ld__inst0_readdata(local_avm_aspace8_readdata[0][2]),
      .avm_local_bb8_ld__inst0_readdatavalid(local_avm_aspace8_readdatavalid[0][2]),
      .avm_local_bb8_ld__inst0_writeack(local_avm_aspace8_writeack[0][2]),
      // AVM avm_local_bb9_ld__inst0
      .avm_local_bb9_ld__inst0_enable(local_avm_aspace8_enable[0][3]),
      .avm_local_bb9_ld__inst0_read(local_avm_aspace8_read[0][3]),
      .avm_local_bb9_ld__inst0_write(local_avm_aspace8_write[0][3]),
      .avm_local_bb9_ld__inst0_burstcount(local_avm_aspace8_burstcount[0][3]),
      .avm_local_bb9_ld__inst0_address(local_avm_aspace8_address[0][3]),
      .avm_local_bb9_ld__inst0_writedata(local_avm_aspace8_writedata[0][3]),
      .avm_local_bb9_ld__inst0_byteenable(local_avm_aspace8_byteenable[0][3]),
      .avm_local_bb9_ld__inst0_waitrequest(local_avm_aspace8_waitrequest[0][3]),
      .avm_local_bb9_ld__inst0_readdata(local_avm_aspace8_readdata[0][3]),
      .avm_local_bb9_ld__inst0_readdatavalid(local_avm_aspace8_readdatavalid[0][3]),
      .avm_local_bb9_ld__inst0_writeack(local_avm_aspace8_writeack[0][3]),
      // AVM avm_local_bb9_ld__u46_inst0
      .avm_local_bb9_ld__u46_inst0_enable(local_avm_aspace8_enable[0][4]),
      .avm_local_bb9_ld__u46_inst0_read(local_avm_aspace8_read[0][4]),
      .avm_local_bb9_ld__u46_inst0_write(local_avm_aspace8_write[0][4]),
      .avm_local_bb9_ld__u46_inst0_burstcount(local_avm_aspace8_burstcount[0][4]),
      .avm_local_bb9_ld__u46_inst0_address(local_avm_aspace8_address[0][4]),
      .avm_local_bb9_ld__u46_inst0_writedata(local_avm_aspace8_writedata[0][4]),
      .avm_local_bb9_ld__u46_inst0_byteenable(local_avm_aspace8_byteenable[0][4]),
      .avm_local_bb9_ld__u46_inst0_waitrequest(local_avm_aspace8_waitrequest[0][4]),
      .avm_local_bb9_ld__u46_inst0_readdata(local_avm_aspace8_readdata[0][4]),
      .avm_local_bb9_ld__u46_inst0_readdatavalid(local_avm_aspace8_readdatavalid[0][4]),
      .avm_local_bb9_ld__u46_inst0_writeack(local_avm_aspace8_writeack[0][4]),
      // AVM avm_local_bb6_ld__u1_inst0
      .avm_local_bb6_ld__u1_inst0_enable(local_avm_aspace9_enable[0][0]),
      .avm_local_bb6_ld__u1_inst0_read(local_avm_aspace9_read[0][0]),
      .avm_local_bb6_ld__u1_inst0_write(local_avm_aspace9_write[0][0]),
      .avm_local_bb6_ld__u1_inst0_burstcount(local_avm_aspace9_burstcount[0][0]),
      .avm_local_bb6_ld__u1_inst0_address(local_avm_aspace9_address[0][0]),
      .avm_local_bb6_ld__u1_inst0_writedata(local_avm_aspace9_writedata[0][0]),
      .avm_local_bb6_ld__u1_inst0_byteenable(local_avm_aspace9_byteenable[0][0]),
      .avm_local_bb6_ld__u1_inst0_waitrequest(local_avm_aspace9_waitrequest[0][0]),
      .avm_local_bb6_ld__u1_inst0_readdata(local_avm_aspace9_readdata[0][0]),
      .avm_local_bb6_ld__u1_inst0_readdatavalid(local_avm_aspace9_readdatavalid[0][0]),
      .avm_local_bb6_ld__u1_inst0_writeack(local_avm_aspace9_writeack[0][0]),
      // AVM avm_local_bb6_st_add296_i_hfp_inst0
      .avm_local_bb6_st_add296_i_hfp_inst0_enable(local_avm_aspace9_enable[0][1]),
      .avm_local_bb6_st_add296_i_hfp_inst0_read(local_avm_aspace9_read[0][1]),
      .avm_local_bb6_st_add296_i_hfp_inst0_write(local_avm_aspace9_write[0][1]),
      .avm_local_bb6_st_add296_i_hfp_inst0_burstcount(local_avm_aspace9_burstcount[0][1]),
      .avm_local_bb6_st_add296_i_hfp_inst0_address(local_avm_aspace9_address[0][1]),
      .avm_local_bb6_st_add296_i_hfp_inst0_writedata(local_avm_aspace9_writedata[0][1]),
      .avm_local_bb6_st_add296_i_hfp_inst0_byteenable(local_avm_aspace9_byteenable[0][1]),
      .avm_local_bb6_st_add296_i_hfp_inst0_waitrequest(local_avm_aspace9_waitrequest[0][1]),
      .avm_local_bb6_st_add296_i_hfp_inst0_readdata(local_avm_aspace9_readdata[0][1]),
      .avm_local_bb6_st_add296_i_hfp_inst0_readdatavalid(local_avm_aspace9_readdatavalid[0][1]),
      .avm_local_bb6_st_add296_i_hfp_inst0_writeack(local_avm_aspace9_writeack[0][1]),
      // AVM avm_local_bb8_ld__u15_inst0
      .avm_local_bb8_ld__u15_inst0_enable(local_avm_aspace9_enable[0][2]),
      .avm_local_bb8_ld__u15_inst0_read(local_avm_aspace9_read[0][2]),
      .avm_local_bb8_ld__u15_inst0_write(local_avm_aspace9_write[0][2]),
      .avm_local_bb8_ld__u15_inst0_burstcount(local_avm_aspace9_burstcount[0][2]),
      .avm_local_bb8_ld__u15_inst0_address(local_avm_aspace9_address[0][2]),
      .avm_local_bb8_ld__u15_inst0_writedata(local_avm_aspace9_writedata[0][2]),
      .avm_local_bb8_ld__u15_inst0_byteenable(local_avm_aspace9_byteenable[0][2]),
      .avm_local_bb8_ld__u15_inst0_waitrequest(local_avm_aspace9_waitrequest[0][2]),
      .avm_local_bb8_ld__u15_inst0_readdata(local_avm_aspace9_readdata[0][2]),
      .avm_local_bb8_ld__u15_inst0_readdatavalid(local_avm_aspace9_readdatavalid[0][2]),
      .avm_local_bb8_ld__u15_inst0_writeack(local_avm_aspace9_writeack[0][2]),
      // AVM avm_local_bb9_ld__u44_inst0
      .avm_local_bb9_ld__u44_inst0_enable(local_avm_aspace9_enable[0][3]),
      .avm_local_bb9_ld__u44_inst0_read(local_avm_aspace9_read[0][3]),
      .avm_local_bb9_ld__u44_inst0_write(local_avm_aspace9_write[0][3]),
      .avm_local_bb9_ld__u44_inst0_burstcount(local_avm_aspace9_burstcount[0][3]),
      .avm_local_bb9_ld__u44_inst0_address(local_avm_aspace9_address[0][3]),
      .avm_local_bb9_ld__u44_inst0_writedata(local_avm_aspace9_writedata[0][3]),
      .avm_local_bb9_ld__u44_inst0_byteenable(local_avm_aspace9_byteenable[0][3]),
      .avm_local_bb9_ld__u44_inst0_waitrequest(local_avm_aspace9_waitrequest[0][3]),
      .avm_local_bb9_ld__u44_inst0_readdata(local_avm_aspace9_readdata[0][3]),
      .avm_local_bb9_ld__u44_inst0_readdatavalid(local_avm_aspace9_readdatavalid[0][3]),
      .avm_local_bb9_ld__u44_inst0_writeack(local_avm_aspace9_writeack[0][3]),
      // AVM avm_local_bb9_ld__u47_inst0
      .avm_local_bb9_ld__u47_inst0_enable(local_avm_aspace9_enable[0][4]),
      .avm_local_bb9_ld__u47_inst0_read(local_avm_aspace9_read[0][4]),
      .avm_local_bb9_ld__u47_inst0_write(local_avm_aspace9_write[0][4]),
      .avm_local_bb9_ld__u47_inst0_burstcount(local_avm_aspace9_burstcount[0][4]),
      .avm_local_bb9_ld__u47_inst0_address(local_avm_aspace9_address[0][4]),
      .avm_local_bb9_ld__u47_inst0_writedata(local_avm_aspace9_writedata[0][4]),
      .avm_local_bb9_ld__u47_inst0_byteenable(local_avm_aspace9_byteenable[0][4]),
      .avm_local_bb9_ld__u47_inst0_waitrequest(local_avm_aspace9_waitrequest[0][4]),
      .avm_local_bb9_ld__u47_inst0_readdata(local_avm_aspace9_readdata[0][4]),
      .avm_local_bb9_ld__u47_inst0_readdatavalid(local_avm_aspace9_readdatavalid[0][4]),
      .avm_local_bb9_ld__u47_inst0_writeack(local_avm_aspace9_writeack[0][4]),
      // AVM avm_local_bb6_ld__u0_inst0
      .avm_local_bb6_ld__u0_inst0_enable(local_avm_aspace10_enable[0][0]),
      .avm_local_bb6_ld__u0_inst0_read(local_avm_aspace10_read[0][0]),
      .avm_local_bb6_ld__u0_inst0_write(local_avm_aspace10_write[0][0]),
      .avm_local_bb6_ld__u0_inst0_burstcount(local_avm_aspace10_burstcount[0][0]),
      .avm_local_bb6_ld__u0_inst0_address(local_avm_aspace10_address[0][0]),
      .avm_local_bb6_ld__u0_inst0_writedata(local_avm_aspace10_writedata[0][0]),
      .avm_local_bb6_ld__u0_inst0_byteenable(local_avm_aspace10_byteenable[0][0]),
      .avm_local_bb6_ld__u0_inst0_waitrequest(local_avm_aspace10_waitrequest[0][0]),
      .avm_local_bb6_ld__u0_inst0_readdata(local_avm_aspace10_readdata[0][0]),
      .avm_local_bb6_ld__u0_inst0_readdatavalid(local_avm_aspace10_readdatavalid[0][0]),
      .avm_local_bb6_ld__u0_inst0_writeack(local_avm_aspace10_writeack[0][0]),
      // AVM avm_local_bb6_st_add301_i_hfp_inst0
      .avm_local_bb6_st_add301_i_hfp_inst0_enable(local_avm_aspace10_enable[0][1]),
      .avm_local_bb6_st_add301_i_hfp_inst0_read(local_avm_aspace10_read[0][1]),
      .avm_local_bb6_st_add301_i_hfp_inst0_write(local_avm_aspace10_write[0][1]),
      .avm_local_bb6_st_add301_i_hfp_inst0_burstcount(local_avm_aspace10_burstcount[0][1]),
      .avm_local_bb6_st_add301_i_hfp_inst0_address(local_avm_aspace10_address[0][1]),
      .avm_local_bb6_st_add301_i_hfp_inst0_writedata(local_avm_aspace10_writedata[0][1]),
      .avm_local_bb6_st_add301_i_hfp_inst0_byteenable(local_avm_aspace10_byteenable[0][1]),
      .avm_local_bb6_st_add301_i_hfp_inst0_waitrequest(local_avm_aspace10_waitrequest[0][1]),
      .avm_local_bb6_st_add301_i_hfp_inst0_readdata(local_avm_aspace10_readdata[0][1]),
      .avm_local_bb6_st_add301_i_hfp_inst0_readdatavalid(local_avm_aspace10_readdatavalid[0][1]),
      .avm_local_bb6_st_add301_i_hfp_inst0_writeack(local_avm_aspace10_writeack[0][1]),
      // AVM avm_local_bb8_ld__u16_inst0
      .avm_local_bb8_ld__u16_inst0_enable(local_avm_aspace10_enable[0][2]),
      .avm_local_bb8_ld__u16_inst0_read(local_avm_aspace10_read[0][2]),
      .avm_local_bb8_ld__u16_inst0_write(local_avm_aspace10_write[0][2]),
      .avm_local_bb8_ld__u16_inst0_burstcount(local_avm_aspace10_burstcount[0][2]),
      .avm_local_bb8_ld__u16_inst0_address(local_avm_aspace10_address[0][2]),
      .avm_local_bb8_ld__u16_inst0_writedata(local_avm_aspace10_writedata[0][2]),
      .avm_local_bb8_ld__u16_inst0_byteenable(local_avm_aspace10_byteenable[0][2]),
      .avm_local_bb8_ld__u16_inst0_waitrequest(local_avm_aspace10_waitrequest[0][2]),
      .avm_local_bb8_ld__u16_inst0_readdata(local_avm_aspace10_readdata[0][2]),
      .avm_local_bb8_ld__u16_inst0_readdatavalid(local_avm_aspace10_readdatavalid[0][2]),
      .avm_local_bb8_ld__u16_inst0_writeack(local_avm_aspace10_writeack[0][2]),
      // AVM avm_local_bb9_ld__u45_inst0
      .avm_local_bb9_ld__u45_inst0_enable(local_avm_aspace10_enable[0][3]),
      .avm_local_bb9_ld__u45_inst0_read(local_avm_aspace10_read[0][3]),
      .avm_local_bb9_ld__u45_inst0_write(local_avm_aspace10_write[0][3]),
      .avm_local_bb9_ld__u45_inst0_burstcount(local_avm_aspace10_burstcount[0][3]),
      .avm_local_bb9_ld__u45_inst0_address(local_avm_aspace10_address[0][3]),
      .avm_local_bb9_ld__u45_inst0_writedata(local_avm_aspace10_writedata[0][3]),
      .avm_local_bb9_ld__u45_inst0_byteenable(local_avm_aspace10_byteenable[0][3]),
      .avm_local_bb9_ld__u45_inst0_waitrequest(local_avm_aspace10_waitrequest[0][3]),
      .avm_local_bb9_ld__u45_inst0_readdata(local_avm_aspace10_readdata[0][3]),
      .avm_local_bb9_ld__u45_inst0_readdatavalid(local_avm_aspace10_readdatavalid[0][3]),
      .avm_local_bb9_ld__u45_inst0_writeack(local_avm_aspace10_writeack[0][3]),
      // AVM avm_local_bb9_ld__u48_inst0
      .avm_local_bb9_ld__u48_inst0_enable(local_avm_aspace10_enable[0][4]),
      .avm_local_bb9_ld__u48_inst0_read(local_avm_aspace10_read[0][4]),
      .avm_local_bb9_ld__u48_inst0_write(local_avm_aspace10_write[0][4]),
      .avm_local_bb9_ld__u48_inst0_burstcount(local_avm_aspace10_burstcount[0][4]),
      .avm_local_bb9_ld__u48_inst0_address(local_avm_aspace10_address[0][4]),
      .avm_local_bb9_ld__u48_inst0_writedata(local_avm_aspace10_writedata[0][4]),
      .avm_local_bb9_ld__u48_inst0_byteenable(local_avm_aspace10_byteenable[0][4]),
      .avm_local_bb9_ld__u48_inst0_waitrequest(local_avm_aspace10_waitrequest[0][4]),
      .avm_local_bb9_ld__u48_inst0_readdata(local_avm_aspace10_readdata[0][4]),
      .avm_local_bb9_ld__u48_inst0_readdatavalid(local_avm_aspace10_readdatavalid[0][4]),
      .avm_local_bb9_ld__u48_inst0_writeack(local_avm_aspace10_writeack[0][4])
   );

   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace5
      logic local_icm_arb_request [1][6];
      logic local_icm_arb_enable [1][6];
      logic local_icm_arb_read [1][6];
      logic local_icm_arb_write [1][6];
      logic local_icm_arb_burstcount [1][6];
      logic [5:0] local_icm_arb_address [1][6];
      logic [63:0] local_icm_arb_writedata [1][6];
      logic [7:0] local_icm_arb_byteenable [1][6];
      logic local_icm_arb_stall [1][6];
      logic local_icm_wrp_ack [1][6];
      logic local_icm_rrp_datavalid [1][6];
      logic [63:0] local_icm_rrp_data [1][6];
      logic invalid_access_grps;

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         logic [3:0] invalid_access_terms;

         for( __j = 0; __j < 6; __j = __j + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(64),
               .WRITEDATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(8)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace5_enable[__i][__j]),
               .avm_read(local_avm_aspace5_read[__i][__j]),
               .avm_write(local_avm_aspace5_write[__i][__j]),
               .avm_burstcount(local_avm_aspace5_burstcount[__i][__j]),
               .avm_address(local_avm_aspace5_address[__i][__j]),
               .avm_writedata(local_avm_aspace5_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace5_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace5_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace5_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace5_readdatavalid[__i][__j]),
               .avm_writeack(local_avm_aspace5_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 2; __j = __j + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [4:0] port_address [1:4];
            logic [63:0] port_writedata [1:4];
            logic [7:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [63:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(32),
               .WIDTH(64),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __j = 0; __j < 6; __j = __j + 1 )
         begin:router
            logic b_arb_request [2];
            logic b_arb_enable [2];
            logic b_arb_read [2];
            logic b_arb_write [2];
            logic b_arb_burstcount [2];
            logic [4:0] b_arb_address [2];
            logic [63:0] b_arb_writedata [2];
            logic [7:0] b_arb_byteenable [2];
            logic b_arb_stall [2];
            logic b_wrp_ack [2];
            logic b_rrp_datavalid [2];
            logic [63:0] b_rrp_data [2];
            logic [1:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(6),
               .BYTEENA_W(8),
               .NUM_BANKS(2)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__i][__j][5] == 1'b0);
            assign bank_select[1] = (local_icm_arb_address[__i][__j][5] == 1'b1);
         end

         assign invalid_access_grps = |invalid_access_terms;
         // INST acl_ic_local_mem_router_terminator_m1b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(64)
         )
         acl_ic_local_mem_router_terminator_m1b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[1].b_arb_request[0]),
            .b_arb_read(router[1].b_arb_read[0]),
            .b_arb_write(router[1].b_arb_write[0]),
            .b_arb_stall(router[1].b_arb_stall[0]),
            .b_wrp_ack(router[1].b_wrp_ack[0]),
            .b_rrp_datavalid(router[1].b_rrp_datavalid[0]),
            .b_rrp_data(router[1].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[0])
         );

         // INST acl_ic_local_mem_router_terminator_m2b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(64)
         )
         acl_ic_local_mem_router_terminator_m2b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[2].b_arb_request[1]),
            .b_arb_read(router[2].b_arb_read[1]),
            .b_arb_write(router[2].b_arb_write[1]),
            .b_arb_stall(router[2].b_arb_stall[1]),
            .b_wrp_ack(router[2].b_wrp_ack[1]),
            .b_rrp_datavalid(router[2].b_rrp_datavalid[1]),
            .b_rrp_data(router[2].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[1])
         );

         // INST acl_ic_local_mem_router_terminator_m4b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(64)
         )
         acl_ic_local_mem_router_terminator_m4b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[4].b_arb_request[1]),
            .b_arb_read(router[4].b_arb_read[1]),
            .b_arb_write(router[4].b_arb_write[1]),
            .b_arb_stall(router[4].b_arb_stall[1]),
            .b_wrp_ack(router[4].b_wrp_ack[1]),
            .b_rrp_datavalid(router[4].b_rrp_datavalid[1]),
            .b_rrp_data(router[4].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[2])
         );

         // INST acl_ic_local_mem_router_terminator_m5b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(64)
         )
         acl_ic_local_mem_router_terminator_m5b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[5].b_arb_request[0]),
            .b_arb_read(router[5].b_arb_read[0]),
            .b_arb_write(router[5].b_arb_write[0]),
            .b_arb_stall(router[5].b_arb_stall[0]),
            .b_wrp_ack(router[5].b_wrp_ack[0]),
            .b_rrp_datavalid(router[5].b_rrp_datavalid[0]),
            .b_rrp_data(router[5].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[3])
         );

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_0
            calc_initpop_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_0
            calc_initpop_system_interconnect_0 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_1
            calc_initpop_system_interconnect_1 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_1
            calc_initpop_system_interconnect_1 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_1
            calc_initpop_system_interconnect_1 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[5].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[5].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[5].b_arb_read[1];
            assign icm_in_arb_write[0] = router[5].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[5].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[5].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[5].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[5].b_arb_byteenable[1];
            assign router[5].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[5].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[5].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[5].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_1
            calc_initpop_system_interconnect_1 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_1
            calc_initpop_system_interconnect_1 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[3].b_arb_read[1];
            assign icm_in_arb_write[0] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_1
            calc_initpop_system_interconnect_1 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[0] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace6
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __j = 0; __j < 1; __j = __j + 1 )
      begin:local_mem_group
         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace6_enable[__j][__k]),
               .avm_read(local_avm_aspace6_read[__j][__k]),
               .avm_write(local_avm_aspace6_write[__j][__k]),
               .avm_burstcount(local_avm_aspace6_burstcount[__j][__k]),
               .avm_address(local_avm_aspace6_address[__j][__k]),
               .avm_writedata(local_avm_aspace6_writedata[__j][__k]),
               .avm_byteenable(local_avm_aspace6_byteenable[__j][__k]),
               .avm_waitrequest(local_avm_aspace6_waitrequest[__j][__k]),
               .avm_readdata(local_avm_aspace6_readdata[__j][__k]),
               .avm_readdatavalid(local_avm_aspace6_readdatavalid[__j][__k]),
               .avm_writeack(local_avm_aspace6_writeack[__j][__k]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__j][__k]),
               .ic_arb_enable(local_icm_arb_enable[__j][__k]),
               .ic_arb_read(local_icm_arb_read[__j][__k]),
               .ic_arb_write(local_icm_arb_write[__j][__k]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .ic_arb_address(local_icm_arb_address[__j][__k]),
               .ic_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .ic_arb_stall(local_icm_arb_stall[__j][__k]),
               .ic_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .ic_rrp_data(local_icm_rrp_data[__j][__k])
            );

         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .PREFERRED_WIDTH(320),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__j][__k]),
               .m_arb_enable(local_icm_arb_enable[__j][__k]),
               .m_arb_read(local_icm_arb_read[__j][__k]),
               .m_arb_write(local_icm_arb_write[__j][__k]),
               .m_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .m_arb_address(local_icm_arb_address[__j][__k]),
               .m_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .m_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .m_arb_stall(local_icm_arb_stall[__j][__k]),
               .m_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .m_rrp_data(local_icm_rrp_data[__j][__k]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_2
            calc_initpop_system_interconnect_2 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_3
            calc_initpop_system_interconnect_3 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace7
      logic local_icm_arb_request [1][7];
      logic local_icm_arb_enable [1][7];
      logic local_icm_arb_read [1][7];
      logic local_icm_arb_write [1][7];
      logic local_icm_arb_burstcount [1][7];
      logic [5:0] local_icm_arb_address [1][7];
      logic [31:0] local_icm_arb_writedata [1][7];
      logic [3:0] local_icm_arb_byteenable [1][7];
      logic local_icm_arb_stall [1][7];
      logic local_icm_wrp_ack [1][7];
      logic local_icm_rrp_datavalid [1][7];
      logic [31:0] local_icm_rrp_data [1][7];
      logic invalid_access_grps;

      for( __k = 0; __k < 1; __k = __k + 1 )
      begin:local_mem_group
         logic invalid_access_terms;

         for( __l = 0; __l < 7; __l = __l + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace7_enable[__k][__l]),
               .avm_read(local_avm_aspace7_read[__k][__l]),
               .avm_write(local_avm_aspace7_write[__k][__l]),
               .avm_burstcount(local_avm_aspace7_burstcount[__k][__l]),
               .avm_address(local_avm_aspace7_address[__k][__l]),
               .avm_writedata(local_avm_aspace7_writedata[__k][__l]),
               .avm_byteenable(local_avm_aspace7_byteenable[__k][__l]),
               .avm_waitrequest(local_avm_aspace7_waitrequest[__k][__l]),
               .avm_readdata(local_avm_aspace7_readdata[__k][__l]),
               .avm_readdatavalid(local_avm_aspace7_readdatavalid[__k][__l]),
               .avm_writeack(local_avm_aspace7_writeack[__k][__l]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__k][__l]),
               .ic_arb_enable(local_icm_arb_enable[__k][__l]),
               .ic_arb_read(local_icm_arb_read[__k][__l]),
               .ic_arb_write(local_icm_arb_write[__k][__l]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .ic_arb_address(local_icm_arb_address[__k][__l]),
               .ic_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .ic_arb_stall(local_icm_arb_stall[__k][__l]),
               .ic_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .ic_rrp_data(local_icm_rrp_data[__k][__l])
            );

         end

         for( __l = 0; __l < 2; __l = __l + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [4:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(32),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __l = 0; __l < 7; __l = __l + 1 )
         begin:router
            logic b_arb_request [2];
            logic b_arb_enable [2];
            logic b_arb_read [2];
            logic b_arb_write [2];
            logic b_arb_burstcount [2];
            logic [4:0] b_arb_address [2];
            logic [31:0] b_arb_writedata [2];
            logic [3:0] b_arb_byteenable [2];
            logic b_arb_stall [2];
            logic b_wrp_ack [2];
            logic b_rrp_datavalid [2];
            logic [31:0] b_rrp_data [2];
            logic [1:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(6),
               .BYTEENA_W(4),
               .NUM_BANKS(2)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__k][__l]),
               .m_arb_enable(local_icm_arb_enable[__k][__l]),
               .m_arb_read(local_icm_arb_read[__k][__l]),
               .m_arb_write(local_icm_arb_write[__k][__l]),
               .m_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .m_arb_address(local_icm_arb_address[__k][__l]),
               .m_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .m_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .m_arb_stall(local_icm_arb_stall[__k][__l]),
               .m_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .m_rrp_data(local_icm_rrp_data[__k][__l]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__k][__l][5] == 1'b0);
            assign bank_select[1] = (local_icm_arb_address[__k][__l][5] == 1'b1);
         end

         assign invalid_access_grps = |invalid_access_terms;
         // INST acl_ic_local_mem_router_terminator_m0b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m0b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[0].b_arb_request[1]),
            .b_arb_read(router[0].b_arb_read[1]),
            .b_arb_write(router[0].b_arb_write[1]),
            .b_arb_stall(router[0].b_arb_stall[1]),
            .b_wrp_ack(router[0].b_wrp_ack[1]),
            .b_rrp_datavalid(router[0].b_rrp_datavalid[1]),
            .b_rrp_data(router[0].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms)
         );

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[6].b_arb_read[0];
            assign icm_in_arb_write[1] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_4
            calc_initpop_system_interconnect_4 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[6].b_arb_read[1];
            assign icm_in_arb_write[1] = router[6].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[6].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[1];
            assign router[6].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_4
            calc_initpop_system_interconnect_4 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[3].b_arb_read[1];
            assign icm_in_arb_write[1] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[4].b_arb_read[0];
            assign icm_in_arb_write[1] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_6
            calc_initpop_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[4].b_arb_read[1];
            assign icm_in_arb_write[0] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_7
            calc_initpop_system_interconnect_7 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[5].b_arb_read[0];
            assign icm_in_arb_write[0] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_8
            calc_initpop_system_interconnect_8 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[5].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[5].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[5].b_arb_read[1];
            assign icm_in_arb_write[0] = router[5].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[5].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[5].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[5].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[5].b_arb_byteenable[1];
            assign router[5].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[5].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[5].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[5].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_8
            calc_initpop_system_interconnect_8 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[2] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace8
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic [7:0] local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];
      logic invalid_access_grps;

      for( __l = 0; __l < 1; __l = __l + 1 )
      begin:local_mem_group
         for( __m = 0; __m < 5; __m = __m + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace8_enable[__l][__m]),
               .avm_read(local_avm_aspace8_read[__l][__m]),
               .avm_write(local_avm_aspace8_write[__l][__m]),
               .avm_burstcount(local_avm_aspace8_burstcount[__l][__m]),
               .avm_address(local_avm_aspace8_address[__l][__m]),
               .avm_writedata(local_avm_aspace8_writedata[__l][__m]),
               .avm_byteenable(local_avm_aspace8_byteenable[__l][__m]),
               .avm_waitrequest(local_avm_aspace8_waitrequest[__l][__m]),
               .avm_readdata(local_avm_aspace8_readdata[__l][__m]),
               .avm_readdatavalid(local_avm_aspace8_readdatavalid[__l][__m]),
               .avm_writeack(local_avm_aspace8_writeack[__l][__m]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__l][__m]),
               .ic_arb_enable(local_icm_arb_enable[__l][__m]),
               .ic_arb_read(local_icm_arb_read[__l][__m]),
               .ic_arb_write(local_icm_arb_write[__l][__m]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .ic_arb_address(local_icm_arb_address[__l][__m]),
               .ic_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .ic_arb_stall(local_icm_arb_stall[__l][__m]),
               .ic_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .ic_rrp_data(local_icm_rrp_data[__l][__m])
            );

         end

         for( __m = 0; __m < 2; __m = __m + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [6:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __m = 0; __m < 5; __m = __m + 1 )
         begin:router
            logic b_arb_request [2];
            logic b_arb_enable [2];
            logic b_arb_read [2];
            logic b_arb_write [2];
            logic b_arb_burstcount [2];
            logic [6:0] b_arb_address [2];
            logic [31:0] b_arb_writedata [2];
            logic [3:0] b_arb_byteenable [2];
            logic b_arb_stall [2];
            logic b_wrp_ack [2];
            logic b_rrp_datavalid [2];
            logic [31:0] b_rrp_data [2];
            logic [1:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(8),
               .BYTEENA_W(4),
               .NUM_BANKS(2)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__l][__m]),
               .m_arb_enable(local_icm_arb_enable[__l][__m]),
               .m_arb_read(local_icm_arb_read[__l][__m]),
               .m_arb_write(local_icm_arb_write[__l][__m]),
               .m_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .m_arb_address(local_icm_arb_address[__l][__m]),
               .m_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .m_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .m_arb_stall(local_icm_arb_stall[__l][__m]),
               .m_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .m_rrp_data(local_icm_rrp_data[__l][__m]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__l][__m][7] == 1'b0);
            assign bank_select[1] = (local_icm_arb_address[__l][__m][7] == 1'b1);
         end

         assign invalid_access_grps = 'b0;
         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_9
            calc_initpop_system_interconnect_9 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[3].b_arb_read[1];
            assign icm_in_arb_write[1] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_9
            calc_initpop_system_interconnect_9 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_10
            calc_initpop_system_interconnect_10 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_10
            calc_initpop_system_interconnect_10 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[4].b_arb_read[1];
            assign icm_in_arb_write[0] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[3] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace9
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic [7:0] local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];
      logic invalid_access_grps;

      for( __m = 0; __m < 1; __m = __m + 1 )
      begin:local_mem_group
         for( __n = 0; __n < 5; __n = __n + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace9_enable[__m][__n]),
               .avm_read(local_avm_aspace9_read[__m][__n]),
               .avm_write(local_avm_aspace9_write[__m][__n]),
               .avm_burstcount(local_avm_aspace9_burstcount[__m][__n]),
               .avm_address(local_avm_aspace9_address[__m][__n]),
               .avm_writedata(local_avm_aspace9_writedata[__m][__n]),
               .avm_byteenable(local_avm_aspace9_byteenable[__m][__n]),
               .avm_waitrequest(local_avm_aspace9_waitrequest[__m][__n]),
               .avm_readdata(local_avm_aspace9_readdata[__m][__n]),
               .avm_readdatavalid(local_avm_aspace9_readdatavalid[__m][__n]),
               .avm_writeack(local_avm_aspace9_writeack[__m][__n]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__m][__n]),
               .ic_arb_enable(local_icm_arb_enable[__m][__n]),
               .ic_arb_read(local_icm_arb_read[__m][__n]),
               .ic_arb_write(local_icm_arb_write[__m][__n]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__m][__n]),
               .ic_arb_address(local_icm_arb_address[__m][__n]),
               .ic_arb_writedata(local_icm_arb_writedata[__m][__n]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__m][__n]),
               .ic_arb_stall(local_icm_arb_stall[__m][__n]),
               .ic_wrp_ack(local_icm_wrp_ack[__m][__n]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__m][__n]),
               .ic_rrp_data(local_icm_rrp_data[__m][__n])
            );

         end

         for( __n = 0; __n < 2; __n = __n + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [6:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __n = 0; __n < 5; __n = __n + 1 )
         begin:router
            logic b_arb_request [2];
            logic b_arb_enable [2];
            logic b_arb_read [2];
            logic b_arb_write [2];
            logic b_arb_burstcount [2];
            logic [6:0] b_arb_address [2];
            logic [31:0] b_arb_writedata [2];
            logic [3:0] b_arb_byteenable [2];
            logic b_arb_stall [2];
            logic b_wrp_ack [2];
            logic b_rrp_datavalid [2];
            logic [31:0] b_rrp_data [2];
            logic [1:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(8),
               .BYTEENA_W(4),
               .NUM_BANKS(2)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__m][__n]),
               .m_arb_enable(local_icm_arb_enable[__m][__n]),
               .m_arb_read(local_icm_arb_read[__m][__n]),
               .m_arb_write(local_icm_arb_write[__m][__n]),
               .m_arb_burstcount(local_icm_arb_burstcount[__m][__n]),
               .m_arb_address(local_icm_arb_address[__m][__n]),
               .m_arb_writedata(local_icm_arb_writedata[__m][__n]),
               .m_arb_byteenable(local_icm_arb_byteenable[__m][__n]),
               .m_arb_stall(local_icm_arb_stall[__m][__n]),
               .m_wrp_ack(local_icm_wrp_ack[__m][__n]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__m][__n]),
               .m_rrp_data(local_icm_rrp_data[__m][__n]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__m][__n][7] == 1'b0);
            assign bank_select[1] = (local_icm_arb_address[__m][__n][7] == 1'b1);
         end

         assign invalid_access_grps = 'b0;
         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_9
            calc_initpop_system_interconnect_9 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port1bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[3].b_arb_read[1];
            assign icm_in_arb_write[1] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_9
            calc_initpop_system_interconnect_9 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_10
            calc_initpop_system_interconnect_10 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_10
            calc_initpop_system_interconnect_10 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[4].b_arb_read[1];
            assign icm_in_arb_write[0] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[4] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace10
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic [7:0] local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];
      logic invalid_access_grps;

      for( __n = 0; __n < 1; __n = __n + 1 )
      begin:local_mem_group
         for( __o = 0; __o < 5; __o = __o + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace10_enable[__n][__o]),
               .avm_read(local_avm_aspace10_read[__n][__o]),
               .avm_write(local_avm_aspace10_write[__n][__o]),
               .avm_burstcount(local_avm_aspace10_burstcount[__n][__o]),
               .avm_address(local_avm_aspace10_address[__n][__o]),
               .avm_writedata(local_avm_aspace10_writedata[__n][__o]),
               .avm_byteenable(local_avm_aspace10_byteenable[__n][__o]),
               .avm_waitrequest(local_avm_aspace10_waitrequest[__n][__o]),
               .avm_readdata(local_avm_aspace10_readdata[__n][__o]),
               .avm_readdatavalid(local_avm_aspace10_readdatavalid[__n][__o]),
               .avm_writeack(local_avm_aspace10_writeack[__n][__o]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__n][__o]),
               .ic_arb_enable(local_icm_arb_enable[__n][__o]),
               .ic_arb_read(local_icm_arb_read[__n][__o]),
               .ic_arb_write(local_icm_arb_write[__n][__o]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__n][__o]),
               .ic_arb_address(local_icm_arb_address[__n][__o]),
               .ic_arb_writedata(local_icm_arb_writedata[__n][__o]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__n][__o]),
               .ic_arb_stall(local_icm_arb_stall[__n][__o]),
               .ic_wrp_ack(local_icm_wrp_ack[__n][__o]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__n][__o]),
               .ic_rrp_data(local_icm_rrp_data[__n][__o])
            );

         end

         for( __o = 0; __o < 2; __o = __o + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [6:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __o = 0; __o < 5; __o = __o + 1 )
         begin:router
            logic b_arb_request [2];
            logic b_arb_enable [2];
            logic b_arb_read [2];
            logic b_arb_write [2];
            logic b_arb_burstcount [2];
            logic [6:0] b_arb_address [2];
            logic [31:0] b_arb_writedata [2];
            logic [3:0] b_arb_byteenable [2];
            logic b_arb_stall [2];
            logic b_wrp_ack [2];
            logic b_rrp_datavalid [2];
            logic [31:0] b_rrp_data [2];
            logic [1:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(8),
               .BYTEENA_W(4),
               .NUM_BANKS(2)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__n][__o]),
               .m_arb_enable(local_icm_arb_enable[__n][__o]),
               .m_arb_read(local_icm_arb_read[__n][__o]),
               .m_arb_write(local_icm_arb_write[__n][__o]),
               .m_arb_burstcount(local_icm_arb_burstcount[__n][__o]),
               .m_arb_address(local_icm_arb_address[__n][__o]),
               .m_arb_writedata(local_icm_arb_writedata[__n][__o]),
               .m_arb_byteenable(local_icm_arb_byteenable[__n][__o]),
               .m_arb_stall(local_icm_arb_stall[__n][__o]),
               .m_wrp_ack(local_icm_wrp_ack[__n][__o]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__n][__o]),
               .m_rrp_data(local_icm_rrp_data[__n][__o]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__n][__o][7] == 1'b0);
            assign bank_select[1] = (local_icm_arb_address[__n][__o][7] == 1'b1);
         end

         assign invalid_access_grps = 'b0;
         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_9
            calc_initpop_system_interconnect_9 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port1bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[3].b_arb_read[1];
            assign icm_in_arb_write[1] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_9
            calc_initpop_system_interconnect_9 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_10
            calc_initpop_system_interconnect_10 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_10
            calc_initpop_system_interconnect_10 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[4].b_arb_read[1];
            assign icm_in_arb_write[0] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[5] = |invalid_access_grps;
   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE gen_and_eval_newpops_top_wrapper_0
/////////////////////////////////////////////////////////////////
module gen_and_eval_newpops_top_wrapper_0
(
   input logic start,
   input logic [967:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_local_bb11_ld__353_inst0
   output logic avm_local_bb11_ld__353_inst0_enable,
   output logic avm_local_bb11_ld__353_inst0_read,
   output logic avm_local_bb11_ld__353_inst0_write,
   output logic [4:0] avm_local_bb11_ld__353_inst0_burstcount,
   output logic [30:0] avm_local_bb11_ld__353_inst0_address,
   output logic [511:0] avm_local_bb11_ld__353_inst0_writedata,
   output logic [63:0] avm_local_bb11_ld__353_inst0_byteenable,
   input logic avm_local_bb11_ld__353_inst0_waitrequest,
   input logic [511:0] avm_local_bb11_ld__353_inst0_readdata,
   input logic avm_local_bb11_ld__353_inst0_readdatavalid,
   input logic avm_local_bb11_ld__353_inst0_writeack,
   // AVM avm_local_bb12_ld__inst0
   output logic avm_local_bb12_ld__inst0_enable,
   output logic avm_local_bb12_ld__inst0_read,
   output logic avm_local_bb12_ld__inst0_write,
   output logic [4:0] avm_local_bb12_ld__inst0_burstcount,
   output logic [30:0] avm_local_bb12_ld__inst0_address,
   output logic [511:0] avm_local_bb12_ld__inst0_writedata,
   output logic [63:0] avm_local_bb12_ld__inst0_byteenable,
   input logic avm_local_bb12_ld__inst0_waitrequest,
   input logic [511:0] avm_local_bb12_ld__inst0_readdata,
   input logic avm_local_bb12_ld__inst0_readdatavalid,
   input logic avm_local_bb12_ld__inst0_writeack,
   // AVM avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0
   output logic avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_enable,
   output logic avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_read,
   output logic avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_write,
   output logic [4:0] avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_address,
   output logic [511:0] avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_byteenable,
   input logic avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_readdata,
   input logic avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_readdatavalid,
   input logic avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_writeack,
   // AVM avm_local_bb19_st_select457_inst0
   output logic avm_local_bb19_st_select457_inst0_enable,
   output logic avm_local_bb19_st_select457_inst0_read,
   output logic avm_local_bb19_st_select457_inst0_write,
   output logic [4:0] avm_local_bb19_st_select457_inst0_burstcount,
   output logic [30:0] avm_local_bb19_st_select457_inst0_address,
   output logic [511:0] avm_local_bb19_st_select457_inst0_writedata,
   output logic [63:0] avm_local_bb19_st_select457_inst0_byteenable,
   input logic avm_local_bb19_st_select457_inst0_waitrequest,
   input logic [511:0] avm_local_bb19_st_select457_inst0_readdata,
   input logic avm_local_bb19_st_select457_inst0_readdatavalid,
   input logic avm_local_bb19_st_select457_inst0_writeack,
   // AVM avm_local_bb1_ld__inst0
   output logic avm_local_bb1_ld__inst0_enable,
   output logic avm_local_bb1_ld__inst0_read,
   output logic avm_local_bb1_ld__inst0_write,
   output logic [4:0] avm_local_bb1_ld__inst0_burstcount,
   output logic [30:0] avm_local_bb1_ld__inst0_address,
   output logic [511:0] avm_local_bb1_ld__inst0_writedata,
   output logic [63:0] avm_local_bb1_ld__inst0_byteenable,
   input logic avm_local_bb1_ld__inst0_waitrequest,
   input logic [511:0] avm_local_bb1_ld__inst0_readdata,
   input logic avm_local_bb1_ld__inst0_readdatavalid,
   input logic avm_local_bb1_ld__inst0_writeack,
   // AVM avm_local_bb1_ld_arrayidx_i_i_promoted_inst0
   output logic avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_enable,
   output logic avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_read,
   output logic avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_write,
   output logic [4:0] avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_burstcount,
   output logic [30:0] avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_address,
   output logic [511:0] avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_writedata,
   output logic [63:0] avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_byteenable,
   input logic avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_waitrequest,
   input logic [511:0] avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_readdata,
   input logic avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_readdatavalid,
   input logic avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_writeack,
   // AVM avm_local_bb22_ld__378_inst0
   output logic avm_local_bb22_ld__378_inst0_enable,
   output logic avm_local_bb22_ld__378_inst0_read,
   output logic avm_local_bb22_ld__378_inst0_write,
   output logic [4:0] avm_local_bb22_ld__378_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__378_inst0_address,
   output logic [511:0] avm_local_bb22_ld__378_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__378_inst0_byteenable,
   input logic avm_local_bb22_ld__378_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__378_inst0_readdata,
   input logic avm_local_bb22_ld__378_inst0_readdatavalid,
   input logic avm_local_bb22_ld__378_inst0_writeack,
   // AVM avm_local_bb22_ld__380_inst0
   output logic avm_local_bb22_ld__380_inst0_enable,
   output logic avm_local_bb22_ld__380_inst0_read,
   output logic avm_local_bb22_ld__380_inst0_write,
   output logic [4:0] avm_local_bb22_ld__380_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__380_inst0_address,
   output logic [511:0] avm_local_bb22_ld__380_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__380_inst0_byteenable,
   input logic avm_local_bb22_ld__380_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__380_inst0_readdata,
   input logic avm_local_bb22_ld__380_inst0_readdatavalid,
   input logic avm_local_bb22_ld__380_inst0_writeack,
   // AVM avm_local_bb22_ld__382_inst0
   output logic avm_local_bb22_ld__382_inst0_enable,
   output logic avm_local_bb22_ld__382_inst0_read,
   output logic avm_local_bb22_ld__382_inst0_write,
   output logic [4:0] avm_local_bb22_ld__382_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__382_inst0_address,
   output logic [511:0] avm_local_bb22_ld__382_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__382_inst0_byteenable,
   input logic avm_local_bb22_ld__382_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__382_inst0_readdata,
   input logic avm_local_bb22_ld__382_inst0_readdatavalid,
   input logic avm_local_bb22_ld__382_inst0_writeack,
   // AVM avm_local_bb22_ld__384_inst0
   output logic avm_local_bb22_ld__384_inst0_enable,
   output logic avm_local_bb22_ld__384_inst0_read,
   output logic avm_local_bb22_ld__384_inst0_write,
   output logic [4:0] avm_local_bb22_ld__384_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__384_inst0_address,
   output logic [511:0] avm_local_bb22_ld__384_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__384_inst0_byteenable,
   input logic avm_local_bb22_ld__384_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__384_inst0_readdata,
   input logic avm_local_bb22_ld__384_inst0_readdatavalid,
   input logic avm_local_bb22_ld__384_inst0_writeack,
   // AVM avm_local_bb22_ld__inst0
   output logic avm_local_bb22_ld__inst0_enable,
   output logic avm_local_bb22_ld__inst0_read,
   output logic avm_local_bb22_ld__inst0_write,
   output logic [4:0] avm_local_bb22_ld__inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__inst0_address,
   output logic [511:0] avm_local_bb22_ld__inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__inst0_byteenable,
   input logic avm_local_bb22_ld__inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__inst0_readdata,
   input logic avm_local_bb22_ld__inst0_readdatavalid,
   input logic avm_local_bb22_ld__inst0_writeack,
   // AVM avm_local_bb22_ld__u62_inst0
   output logic avm_local_bb22_ld__u62_inst0_enable,
   output logic avm_local_bb22_ld__u62_inst0_read,
   output logic avm_local_bb22_ld__u62_inst0_write,
   output logic [4:0] avm_local_bb22_ld__u62_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__u62_inst0_address,
   output logic [511:0] avm_local_bb22_ld__u62_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__u62_inst0_byteenable,
   input logic avm_local_bb22_ld__u62_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__u62_inst0_readdata,
   input logic avm_local_bb22_ld__u62_inst0_readdatavalid,
   input logic avm_local_bb22_ld__u62_inst0_writeack,
   // AVM avm_local_bb22_ld__u63_inst0
   output logic avm_local_bb22_ld__u63_inst0_enable,
   output logic avm_local_bb22_ld__u63_inst0_read,
   output logic avm_local_bb22_ld__u63_inst0_write,
   output logic [4:0] avm_local_bb22_ld__u63_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__u63_inst0_address,
   output logic [511:0] avm_local_bb22_ld__u63_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__u63_inst0_byteenable,
   input logic avm_local_bb22_ld__u63_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__u63_inst0_readdata,
   input logic avm_local_bb22_ld__u63_inst0_readdatavalid,
   input logic avm_local_bb22_ld__u63_inst0_writeack,
   // AVM avm_local_bb22_ld__u64_inst0
   output logic avm_local_bb22_ld__u64_inst0_enable,
   output logic avm_local_bb22_ld__u64_inst0_read,
   output logic avm_local_bb22_ld__u64_inst0_write,
   output logic [4:0] avm_local_bb22_ld__u64_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__u64_inst0_address,
   output logic [511:0] avm_local_bb22_ld__u64_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__u64_inst0_byteenable,
   input logic avm_local_bb22_ld__u64_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__u64_inst0_readdata,
   input logic avm_local_bb22_ld__u64_inst0_readdatavalid,
   input logic avm_local_bb22_ld__u64_inst0_writeack,
   // AVM avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0
   output logic avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_enable,
   output logic avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_read,
   output logic avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_write,
   output logic [4:0] avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_address,
   output logic [511:0] avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_byteenable,
   input logic avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_readdata,
   input logic avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_readdatavalid,
   input logic avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_writeack,
   // AVM avm_local_bb24_ld__u69_inst0
   output logic avm_local_bb24_ld__u69_inst0_enable,
   output logic avm_local_bb24_ld__u69_inst0_read,
   output logic avm_local_bb24_ld__u69_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u69_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u69_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u69_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u69_inst0_byteenable,
   input logic avm_local_bb24_ld__u69_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u69_inst0_readdata,
   input logic avm_local_bb24_ld__u69_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u69_inst0_writeack,
   // AVM avm_local_bb24_ld__u70_inst0
   output logic avm_local_bb24_ld__u70_inst0_enable,
   output logic avm_local_bb24_ld__u70_inst0_read,
   output logic avm_local_bb24_ld__u70_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u70_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u70_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u70_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u70_inst0_byteenable,
   input logic avm_local_bb24_ld__u70_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u70_inst0_readdata,
   input logic avm_local_bb24_ld__u70_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u70_inst0_writeack,
   // AVM avm_local_bb24_ld__u71_inst0
   output logic avm_local_bb24_ld__u71_inst0_enable,
   output logic avm_local_bb24_ld__u71_inst0_read,
   output logic avm_local_bb24_ld__u71_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u71_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u71_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u71_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u71_inst0_byteenable,
   input logic avm_local_bb24_ld__u71_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u71_inst0_readdata,
   input logic avm_local_bb24_ld__u71_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u71_inst0_writeack,
   // AVM avm_local_bb24_ld__u72_inst0
   output logic avm_local_bb24_ld__u72_inst0_enable,
   output logic avm_local_bb24_ld__u72_inst0_read,
   output logic avm_local_bb24_ld__u72_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u72_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u72_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u72_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u72_inst0_byteenable,
   input logic avm_local_bb24_ld__u72_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u72_inst0_readdata,
   input logic avm_local_bb24_ld__u72_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u72_inst0_writeack,
   // AVM avm_local_bb24_ld__u73_inst0
   output logic avm_local_bb24_ld__u73_inst0_enable,
   output logic avm_local_bb24_ld__u73_inst0_read,
   output logic avm_local_bb24_ld__u73_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u73_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u73_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u73_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u73_inst0_byteenable,
   input logic avm_local_bb24_ld__u73_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u73_inst0_readdata,
   input logic avm_local_bb24_ld__u73_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u73_inst0_writeack,
   // AVM avm_local_bb24_ld__u74_inst0
   output logic avm_local_bb24_ld__u74_inst0_enable,
   output logic avm_local_bb24_ld__u74_inst0_read,
   output logic avm_local_bb24_ld__u74_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u74_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u74_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u74_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u74_inst0_byteenable,
   input logic avm_local_bb24_ld__u74_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u74_inst0_readdata,
   input logic avm_local_bb24_ld__u74_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u74_inst0_writeack,
   // AVM avm_local_bb24_ld__u75_inst0
   output logic avm_local_bb24_ld__u75_inst0_enable,
   output logic avm_local_bb24_ld__u75_inst0_read,
   output logic avm_local_bb24_ld__u75_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u75_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u75_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u75_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u75_inst0_byteenable,
   input logic avm_local_bb24_ld__u75_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u75_inst0_readdata,
   input logic avm_local_bb24_ld__u75_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u75_inst0_writeack,
   // AVM avm_local_bb24_ld__u76_inst0
   output logic avm_local_bb24_ld__u76_inst0_enable,
   output logic avm_local_bb24_ld__u76_inst0_read,
   output logic avm_local_bb24_ld__u76_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u76_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u76_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u76_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u76_inst0_byteenable,
   input logic avm_local_bb24_ld__u76_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u76_inst0_readdata,
   input logic avm_local_bb24_ld__u76_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u76_inst0_writeack,
   // AVM avm_local_bb24_ld__u77_inst0
   output logic avm_local_bb24_ld__u77_inst0_enable,
   output logic avm_local_bb24_ld__u77_inst0_read,
   output logic avm_local_bb24_ld__u77_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u77_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u77_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u77_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u77_inst0_byteenable,
   input logic avm_local_bb24_ld__u77_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u77_inst0_readdata,
   input logic avm_local_bb24_ld__u77_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u77_inst0_writeack,
   // AVM avm_local_bb24_ld__u78_inst0
   output logic avm_local_bb24_ld__u78_inst0_enable,
   output logic avm_local_bb24_ld__u78_inst0_read,
   output logic avm_local_bb24_ld__u78_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u78_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u78_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u78_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u78_inst0_byteenable,
   input logic avm_local_bb24_ld__u78_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u78_inst0_readdata,
   input logic avm_local_bb24_ld__u78_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u78_inst0_writeack,
   // AVM avm_local_bb24_ld__u79_inst0
   output logic avm_local_bb24_ld__u79_inst0_enable,
   output logic avm_local_bb24_ld__u79_inst0_read,
   output logic avm_local_bb24_ld__u79_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u79_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u79_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u79_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u79_inst0_byteenable,
   input logic avm_local_bb24_ld__u79_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u79_inst0_readdata,
   input logic avm_local_bb24_ld__u79_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u79_inst0_writeack,
   // AVM avm_local_bb24_ld__u80_inst0
   output logic avm_local_bb24_ld__u80_inst0_enable,
   output logic avm_local_bb24_ld__u80_inst0_read,
   output logic avm_local_bb24_ld__u80_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u80_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u80_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u80_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u80_inst0_byteenable,
   input logic avm_local_bb24_ld__u80_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u80_inst0_readdata,
   input logic avm_local_bb24_ld__u80_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u80_inst0_writeack,
   // AVM avm_local_bb24_ld__u81_inst0
   output logic avm_local_bb24_ld__u81_inst0_enable,
   output logic avm_local_bb24_ld__u81_inst0_read,
   output logic avm_local_bb24_ld__u81_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u81_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u81_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u81_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u81_inst0_byteenable,
   input logic avm_local_bb24_ld__u81_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u81_inst0_readdata,
   input logic avm_local_bb24_ld__u81_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u81_inst0_writeack,
   // AVM avm_local_bb24_ld__u82_inst0
   output logic avm_local_bb24_ld__u82_inst0_enable,
   output logic avm_local_bb24_ld__u82_inst0_read,
   output logic avm_local_bb24_ld__u82_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u82_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u82_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u82_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u82_inst0_byteenable,
   input logic avm_local_bb24_ld__u82_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u82_inst0_readdata,
   input logic avm_local_bb24_ld__u82_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u82_inst0_writeack,
   // AVM avm_local_bb24_ld__u83_inst0
   output logic avm_local_bb24_ld__u83_inst0_enable,
   output logic avm_local_bb24_ld__u83_inst0_read,
   output logic avm_local_bb24_ld__u83_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u83_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u83_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u83_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u83_inst0_byteenable,
   input logic avm_local_bb24_ld__u83_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u83_inst0_readdata,
   input logic avm_local_bb24_ld__u83_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u83_inst0_writeack,
   // AVM avm_local_bb24_ld__u84_inst0
   output logic avm_local_bb24_ld__u84_inst0_enable,
   output logic avm_local_bb24_ld__u84_inst0_read,
   output logic avm_local_bb24_ld__u84_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u84_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u84_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u84_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u84_inst0_byteenable,
   input logic avm_local_bb24_ld__u84_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u84_inst0_readdata,
   input logic avm_local_bb24_ld__u84_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u84_inst0_writeack,
   // AVM avm_local_bb24_ld__u85_inst0
   output logic avm_local_bb24_ld__u85_inst0_enable,
   output logic avm_local_bb24_ld__u85_inst0_read,
   output logic avm_local_bb24_ld__u85_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u85_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u85_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u85_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u85_inst0_byteenable,
   input logic avm_local_bb24_ld__u85_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u85_inst0_readdata,
   input logic avm_local_bb24_ld__u85_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u85_inst0_writeack,
   // AVM avm_local_bb24_ld__u86_inst0
   output logic avm_local_bb24_ld__u86_inst0_enable,
   output logic avm_local_bb24_ld__u86_inst0_read,
   output logic avm_local_bb24_ld__u86_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u86_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u86_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u86_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u86_inst0_byteenable,
   input logic avm_local_bb24_ld__u86_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u86_inst0_readdata,
   input logic avm_local_bb24_ld__u86_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u86_inst0_writeack,
   // AVM avm_local_bb24_ld__u87_inst0
   output logic avm_local_bb24_ld__u87_inst0_enable,
   output logic avm_local_bb24_ld__u87_inst0_read,
   output logic avm_local_bb24_ld__u87_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u87_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u87_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u87_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u87_inst0_byteenable,
   input logic avm_local_bb24_ld__u87_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u87_inst0_readdata,
   input logic avm_local_bb24_ld__u87_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u87_inst0_writeack,
   // AVM avm_local_bb24_ld__u88_inst0
   output logic avm_local_bb24_ld__u88_inst0_enable,
   output logic avm_local_bb24_ld__u88_inst0_read,
   output logic avm_local_bb24_ld__u88_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u88_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u88_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u88_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u88_inst0_byteenable,
   input logic avm_local_bb24_ld__u88_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u88_inst0_readdata,
   input logic avm_local_bb24_ld__u88_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u88_inst0_writeack,
   // AVM avm_local_bb24_ld__u89_inst0
   output logic avm_local_bb24_ld__u89_inst0_enable,
   output logic avm_local_bb24_ld__u89_inst0_read,
   output logic avm_local_bb24_ld__u89_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u89_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u89_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u89_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u89_inst0_byteenable,
   input logic avm_local_bb24_ld__u89_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u89_inst0_readdata,
   input logic avm_local_bb24_ld__u89_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u89_inst0_writeack,
   // AVM avm_local_bb24_ld__u90_inst0
   output logic avm_local_bb24_ld__u90_inst0_enable,
   output logic avm_local_bb24_ld__u90_inst0_read,
   output logic avm_local_bb24_ld__u90_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u90_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u90_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u90_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u90_inst0_byteenable,
   input logic avm_local_bb24_ld__u90_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u90_inst0_readdata,
   input logic avm_local_bb24_ld__u90_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u90_inst0_writeack,
   // AVM avm_local_bb24_ld__u91_inst0
   output logic avm_local_bb24_ld__u91_inst0_enable,
   output logic avm_local_bb24_ld__u91_inst0_read,
   output logic avm_local_bb24_ld__u91_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u91_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u91_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u91_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u91_inst0_byteenable,
   input logic avm_local_bb24_ld__u91_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u91_inst0_readdata,
   input logic avm_local_bb24_ld__u91_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u91_inst0_writeack,
   // AVM avm_local_bb24_ld__u92_inst0
   output logic avm_local_bb24_ld__u92_inst0_enable,
   output logic avm_local_bb24_ld__u92_inst0_read,
   output logic avm_local_bb24_ld__u92_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u92_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u92_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u92_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u92_inst0_byteenable,
   input logic avm_local_bb24_ld__u92_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u92_inst0_readdata,
   input logic avm_local_bb24_ld__u92_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u92_inst0_writeack,
   // AVM avm_local_bb24_ld__u93_inst0
   output logic avm_local_bb24_ld__u93_inst0_enable,
   output logic avm_local_bb24_ld__u93_inst0_read,
   output logic avm_local_bb24_ld__u93_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u93_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u93_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u93_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u93_inst0_byteenable,
   input logic avm_local_bb24_ld__u93_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u93_inst0_readdata,
   input logic avm_local_bb24_ld__u93_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u93_inst0_writeack,
   // AVM avm_local_bb24_ld__u94_inst0
   output logic avm_local_bb24_ld__u94_inst0_enable,
   output logic avm_local_bb24_ld__u94_inst0_read,
   output logic avm_local_bb24_ld__u94_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u94_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u94_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u94_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u94_inst0_byteenable,
   input logic avm_local_bb24_ld__u94_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u94_inst0_readdata,
   input logic avm_local_bb24_ld__u94_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u94_inst0_writeack,
   // AVM avm_local_bb25_ld__u101_inst0
   output logic avm_local_bb25_ld__u101_inst0_enable,
   output logic avm_local_bb25_ld__u101_inst0_read,
   output logic avm_local_bb25_ld__u101_inst0_write,
   output logic [4:0] avm_local_bb25_ld__u101_inst0_burstcount,
   output logic [30:0] avm_local_bb25_ld__u101_inst0_address,
   output logic [511:0] avm_local_bb25_ld__u101_inst0_writedata,
   output logic [63:0] avm_local_bb25_ld__u101_inst0_byteenable,
   input logic avm_local_bb25_ld__u101_inst0_waitrequest,
   input logic [511:0] avm_local_bb25_ld__u101_inst0_readdata,
   input logic avm_local_bb25_ld__u101_inst0_readdatavalid,
   input logic avm_local_bb25_ld__u101_inst0_writeack,
   // AVM avm_local_bb25_ld__u102_inst0
   output logic avm_local_bb25_ld__u102_inst0_enable,
   output logic avm_local_bb25_ld__u102_inst0_read,
   output logic avm_local_bb25_ld__u102_inst0_write,
   output logic [4:0] avm_local_bb25_ld__u102_inst0_burstcount,
   output logic [30:0] avm_local_bb25_ld__u102_inst0_address,
   output logic [511:0] avm_local_bb25_ld__u102_inst0_writedata,
   output logic [63:0] avm_local_bb25_ld__u102_inst0_byteenable,
   input logic avm_local_bb25_ld__u102_inst0_waitrequest,
   input logic [511:0] avm_local_bb25_ld__u102_inst0_readdata,
   input logic avm_local_bb25_ld__u102_inst0_readdatavalid,
   input logic avm_local_bb25_ld__u102_inst0_writeack,
   // AVM avm_local_bb25_ld__u103_inst0
   output logic avm_local_bb25_ld__u103_inst0_enable,
   output logic avm_local_bb25_ld__u103_inst0_read,
   output logic avm_local_bb25_ld__u103_inst0_write,
   output logic [4:0] avm_local_bb25_ld__u103_inst0_burstcount,
   output logic [30:0] avm_local_bb25_ld__u103_inst0_address,
   output logic [511:0] avm_local_bb25_ld__u103_inst0_writedata,
   output logic [63:0] avm_local_bb25_ld__u103_inst0_byteenable,
   input logic avm_local_bb25_ld__u103_inst0_waitrequest,
   input logic [511:0] avm_local_bb25_ld__u103_inst0_readdata,
   input logic avm_local_bb25_ld__u103_inst0_readdatavalid,
   input logic avm_local_bb25_ld__u103_inst0_writeack,
   // AVM avm_local_bb25_ld__u104_inst0
   output logic avm_local_bb25_ld__u104_inst0_enable,
   output logic avm_local_bb25_ld__u104_inst0_read,
   output logic avm_local_bb25_ld__u104_inst0_write,
   output logic [4:0] avm_local_bb25_ld__u104_inst0_burstcount,
   output logic [30:0] avm_local_bb25_ld__u104_inst0_address,
   output logic [511:0] avm_local_bb25_ld__u104_inst0_writedata,
   output logic [63:0] avm_local_bb25_ld__u104_inst0_byteenable,
   input logic avm_local_bb25_ld__u104_inst0_waitrequest,
   input logic [511:0] avm_local_bb25_ld__u104_inst0_readdata,
   input logic avm_local_bb25_ld__u104_inst0_readdatavalid,
   input logic avm_local_bb25_ld__u104_inst0_writeack,
   // AVM avm_local_bb25_ld__u105_inst0
   output logic avm_local_bb25_ld__u105_inst0_enable,
   output logic avm_local_bb25_ld__u105_inst0_read,
   output logic avm_local_bb25_ld__u105_inst0_write,
   output logic [4:0] avm_local_bb25_ld__u105_inst0_burstcount,
   output logic [30:0] avm_local_bb25_ld__u105_inst0_address,
   output logic [511:0] avm_local_bb25_ld__u105_inst0_writedata,
   output logic [63:0] avm_local_bb25_ld__u105_inst0_byteenable,
   input logic avm_local_bb25_ld__u105_inst0_waitrequest,
   input logic [511:0] avm_local_bb25_ld__u105_inst0_readdata,
   input logic avm_local_bb25_ld__u105_inst0_readdatavalid,
   input logic avm_local_bb25_ld__u105_inst0_writeack,
   // AVM avm_local_bb25_ld__u106_inst0
   output logic avm_local_bb25_ld__u106_inst0_enable,
   output logic avm_local_bb25_ld__u106_inst0_read,
   output logic avm_local_bb25_ld__u106_inst0_write,
   output logic [4:0] avm_local_bb25_ld__u106_inst0_burstcount,
   output logic [30:0] avm_local_bb25_ld__u106_inst0_address,
   output logic [511:0] avm_local_bb25_ld__u106_inst0_writedata,
   output logic [63:0] avm_local_bb25_ld__u106_inst0_byteenable,
   input logic avm_local_bb25_ld__u106_inst0_waitrequest,
   input logic [511:0] avm_local_bb25_ld__u106_inst0_readdata,
   input logic avm_local_bb25_ld__u106_inst0_readdatavalid,
   input logic avm_local_bb25_ld__u106_inst0_writeack,
   // AVM avm_local_bb25_ld__u107_inst0
   output logic avm_local_bb25_ld__u107_inst0_enable,
   output logic avm_local_bb25_ld__u107_inst0_read,
   output logic avm_local_bb25_ld__u107_inst0_write,
   output logic [4:0] avm_local_bb25_ld__u107_inst0_burstcount,
   output logic [30:0] avm_local_bb25_ld__u107_inst0_address,
   output logic [511:0] avm_local_bb25_ld__u107_inst0_writedata,
   output logic [63:0] avm_local_bb25_ld__u107_inst0_byteenable,
   input logic avm_local_bb25_ld__u107_inst0_waitrequest,
   input logic [511:0] avm_local_bb25_ld__u107_inst0_readdata,
   input logic avm_local_bb25_ld__u107_inst0_readdatavalid,
   input logic avm_local_bb25_ld__u107_inst0_writeack,
   // AVM avm_local_bb25_ld__u108_inst0
   output logic avm_local_bb25_ld__u108_inst0_enable,
   output logic avm_local_bb25_ld__u108_inst0_read,
   output logic avm_local_bb25_ld__u108_inst0_write,
   output logic [4:0] avm_local_bb25_ld__u108_inst0_burstcount,
   output logic [30:0] avm_local_bb25_ld__u108_inst0_address,
   output logic [511:0] avm_local_bb25_ld__u108_inst0_writedata,
   output logic [63:0] avm_local_bb25_ld__u108_inst0_byteenable,
   input logic avm_local_bb25_ld__u108_inst0_waitrequest,
   input logic [511:0] avm_local_bb25_ld__u108_inst0_readdata,
   input logic avm_local_bb25_ld__u108_inst0_readdatavalid,
   input logic avm_local_bb25_ld__u108_inst0_writeack,
   // AVM avm_local_bb25_ld__u109_inst0
   output logic avm_local_bb25_ld__u109_inst0_enable,
   output logic avm_local_bb25_ld__u109_inst0_read,
   output logic avm_local_bb25_ld__u109_inst0_write,
   output logic [4:0] avm_local_bb25_ld__u109_inst0_burstcount,
   output logic [30:0] avm_local_bb25_ld__u109_inst0_address,
   output logic [511:0] avm_local_bb25_ld__u109_inst0_writedata,
   output logic [63:0] avm_local_bb25_ld__u109_inst0_byteenable,
   input logic avm_local_bb25_ld__u109_inst0_waitrequest,
   input logic [511:0] avm_local_bb25_ld__u109_inst0_readdata,
   input logic avm_local_bb25_ld__u109_inst0_readdatavalid,
   input logic avm_local_bb25_ld__u109_inst0_writeack,
   // AVM avm_local_bb25_ld__u110_inst0
   output logic avm_local_bb25_ld__u110_inst0_enable,
   output logic avm_local_bb25_ld__u110_inst0_read,
   output logic avm_local_bb25_ld__u110_inst0_write,
   output logic [4:0] avm_local_bb25_ld__u110_inst0_burstcount,
   output logic [30:0] avm_local_bb25_ld__u110_inst0_address,
   output logic [511:0] avm_local_bb25_ld__u110_inst0_writedata,
   output logic [63:0] avm_local_bb25_ld__u110_inst0_byteenable,
   input logic avm_local_bb25_ld__u110_inst0_waitrequest,
   input logic [511:0] avm_local_bb25_ld__u110_inst0_readdata,
   input logic avm_local_bb25_ld__u110_inst0_readdatavalid,
   input logic avm_local_bb25_ld__u110_inst0_writeack,
   // AVM avm_local_bb25_ld__u111_inst0
   output logic avm_local_bb25_ld__u111_inst0_enable,
   output logic avm_local_bb25_ld__u111_inst0_read,
   output logic avm_local_bb25_ld__u111_inst0_write,
   output logic [4:0] avm_local_bb25_ld__u111_inst0_burstcount,
   output logic [30:0] avm_local_bb25_ld__u111_inst0_address,
   output logic [511:0] avm_local_bb25_ld__u111_inst0_writedata,
   output logic [63:0] avm_local_bb25_ld__u111_inst0_byteenable,
   input logic avm_local_bb25_ld__u111_inst0_waitrequest,
   input logic [511:0] avm_local_bb25_ld__u111_inst0_readdata,
   input logic avm_local_bb25_ld__u111_inst0_readdatavalid,
   input logic avm_local_bb25_ld__u111_inst0_writeack,
   // AVM avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0
   output logic avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_enable,
   output logic avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_read,
   output logic avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_write,
   output logic [4:0] avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_burstcount,
   output logic [30:0] avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_address,
   output logic [511:0] avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_writedata,
   output logic [63:0] avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_byteenable,
   input logic avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_waitrequest,
   input logic [511:0] avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_readdata,
   input logic avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_readdatavalid,
   input logic avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_writeack,
   // AVM avm_local_bb28_st__inst0
   output logic avm_local_bb28_st__inst0_enable,
   output logic avm_local_bb28_st__inst0_read,
   output logic avm_local_bb28_st__inst0_write,
   output logic [4:0] avm_local_bb28_st__inst0_burstcount,
   output logic [30:0] avm_local_bb28_st__inst0_address,
   output logic [511:0] avm_local_bb28_st__inst0_writedata,
   output logic [63:0] avm_local_bb28_st__inst0_byteenable,
   input logic avm_local_bb28_st__inst0_waitrequest,
   input logic [511:0] avm_local_bb28_st__inst0_readdata,
   input logic avm_local_bb28_st__inst0_readdatavalid,
   input logic avm_local_bb28_st__inst0_writeack,
   // AVM avm_local_bb28_st_add1001_i_hfp_inst0
   output logic avm_local_bb28_st_add1001_i_hfp_inst0_enable,
   output logic avm_local_bb28_st_add1001_i_hfp_inst0_read,
   output logic avm_local_bb28_st_add1001_i_hfp_inst0_write,
   output logic [4:0] avm_local_bb28_st_add1001_i_hfp_inst0_burstcount,
   output logic [30:0] avm_local_bb28_st_add1001_i_hfp_inst0_address,
   output logic [511:0] avm_local_bb28_st_add1001_i_hfp_inst0_writedata,
   output logic [63:0] avm_local_bb28_st_add1001_i_hfp_inst0_byteenable,
   input logic avm_local_bb28_st_add1001_i_hfp_inst0_waitrequest,
   input logic [511:0] avm_local_bb28_st_add1001_i_hfp_inst0_readdata,
   input logic avm_local_bb28_st_add1001_i_hfp_inst0_readdatavalid,
   input logic avm_local_bb28_st_add1001_i_hfp_inst0_writeack,
   // AVM avm_local_bb29_st__inst0
   output logic avm_local_bb29_st__inst0_enable,
   output logic avm_local_bb29_st__inst0_read,
   output logic avm_local_bb29_st__inst0_write,
   output logic [4:0] avm_local_bb29_st__inst0_burstcount,
   output logic [30:0] avm_local_bb29_st__inst0_address,
   output logic [511:0] avm_local_bb29_st__inst0_writedata,
   output logic [63:0] avm_local_bb29_st__inst0_byteenable,
   input logic avm_local_bb29_st__inst0_waitrequest,
   input logic [511:0] avm_local_bb29_st__inst0_readdata,
   input logic avm_local_bb29_st__inst0_readdatavalid,
   input logic avm_local_bb29_st__inst0_writeack,
   // AVM avm_local_bb3_ld__inst0
   output logic avm_local_bb3_ld__inst0_enable,
   output logic avm_local_bb3_ld__inst0_read,
   output logic avm_local_bb3_ld__inst0_write,
   output logic [4:0] avm_local_bb3_ld__inst0_burstcount,
   output logic [30:0] avm_local_bb3_ld__inst0_address,
   output logic [511:0] avm_local_bb3_ld__inst0_writedata,
   output logic [63:0] avm_local_bb3_ld__inst0_byteenable,
   input logic avm_local_bb3_ld__inst0_waitrequest,
   input logic [511:0] avm_local_bb3_ld__inst0_readdata,
   input logic avm_local_bb3_ld__inst0_readdatavalid,
   input logic avm_local_bb3_ld__inst0_writeack,
   // AVM avm_local_bb6_st__inst0
   output logic avm_local_bb6_st__inst0_enable,
   output logic avm_local_bb6_st__inst0_read,
   output logic avm_local_bb6_st__inst0_write,
   output logic [4:0] avm_local_bb6_st__inst0_burstcount,
   output logic [30:0] avm_local_bb6_st__inst0_address,
   output logic [511:0] avm_local_bb6_st__inst0_writedata,
   output logic [63:0] avm_local_bb6_st__inst0_byteenable,
   input logic avm_local_bb6_st__inst0_waitrequest,
   input logic [511:0] avm_local_bb6_st__inst0_readdata,
   input logic avm_local_bb6_st__inst0_readdatavalid,
   input logic avm_local_bb6_st__inst0_writeack,
   // AVM avm_local_bb6_st_c0_exe1165_inst0
   output logic avm_local_bb6_st_c0_exe1165_inst0_enable,
   output logic avm_local_bb6_st_c0_exe1165_inst0_read,
   output logic avm_local_bb6_st_c0_exe1165_inst0_write,
   output logic [4:0] avm_local_bb6_st_c0_exe1165_inst0_burstcount,
   output logic [30:0] avm_local_bb6_st_c0_exe1165_inst0_address,
   output logic [511:0] avm_local_bb6_st_c0_exe1165_inst0_writedata,
   output logic [63:0] avm_local_bb6_st_c0_exe1165_inst0_byteenable,
   input logic avm_local_bb6_st_c0_exe1165_inst0_waitrequest,
   input logic [511:0] avm_local_bb6_st_c0_exe1165_inst0_readdata,
   input logic avm_local_bb6_st_c0_exe1165_inst0_readdatavalid,
   input logic avm_local_bb6_st_c0_exe1165_inst0_writeack,
   // AVM avm_local_bb7_ld__inst0
   output logic avm_local_bb7_ld__inst0_enable,
   output logic avm_local_bb7_ld__inst0_read,
   output logic avm_local_bb7_ld__inst0_write,
   output logic [4:0] avm_local_bb7_ld__inst0_burstcount,
   output logic [30:0] avm_local_bb7_ld__inst0_address,
   output logic [511:0] avm_local_bb7_ld__inst0_writedata,
   output logic [63:0] avm_local_bb7_ld__inst0_byteenable,
   input logic avm_local_bb7_ld__inst0_waitrequest,
   input logic [511:0] avm_local_bb7_ld__inst0_readdata,
   input logic avm_local_bb7_ld__inst0_readdatavalid,
   input logic avm_local_bb7_ld__inst0_writeack,
   // AVM avm_local_bb7_st__inst0
   output logic avm_local_bb7_st__inst0_enable,
   output logic avm_local_bb7_st__inst0_read,
   output logic avm_local_bb7_st__inst0_write,
   output logic [4:0] avm_local_bb7_st__inst0_burstcount,
   output logic [30:0] avm_local_bb7_st__inst0_address,
   output logic [511:0] avm_local_bb7_st__inst0_writedata,
   output logic [63:0] avm_local_bb7_st__inst0_byteenable,
   input logic avm_local_bb7_st__inst0_waitrequest,
   input logic [511:0] avm_local_bb7_st__inst0_readdata,
   input logic avm_local_bb7_st__inst0_readdatavalid,
   input logic avm_local_bb7_st__inst0_writeack,
   // AVM avm_local_bb9_ld__u8_inst0
   output logic avm_local_bb9_ld__u8_inst0_enable,
   output logic avm_local_bb9_ld__u8_inst0_read,
   output logic avm_local_bb9_ld__u8_inst0_write,
   output logic [4:0] avm_local_bb9_ld__u8_inst0_burstcount,
   output logic [30:0] avm_local_bb9_ld__u8_inst0_address,
   output logic [511:0] avm_local_bb9_ld__u8_inst0_writedata,
   output logic [63:0] avm_local_bb9_ld__u8_inst0_byteenable,
   input logic avm_local_bb9_ld__u8_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_ld__u8_inst0_readdata,
   input logic avm_local_bb9_ld__u8_inst0_readdatavalid,
   input logic avm_local_bb9_ld__u8_inst0_writeack,
   // AVM avm_local_bb9_st_c0_exe1180_inst0
   output logic avm_local_bb9_st_c0_exe1180_inst0_enable,
   output logic avm_local_bb9_st_c0_exe1180_inst0_read,
   output logic avm_local_bb9_st_c0_exe1180_inst0_write,
   output logic [4:0] avm_local_bb9_st_c0_exe1180_inst0_burstcount,
   output logic [30:0] avm_local_bb9_st_c0_exe1180_inst0_address,
   output logic [511:0] avm_local_bb9_st_c0_exe1180_inst0_writedata,
   output logic [63:0] avm_local_bb9_st_c0_exe1180_inst0_byteenable,
   input logic avm_local_bb9_st_c0_exe1180_inst0_waitrequest,
   input logic [511:0] avm_local_bb9_st_c0_exe1180_inst0_readdata,
   input logic avm_local_bb9_st_c0_exe1180_inst0_readdatavalid,
   input logic avm_local_bb9_st_c0_exe1180_inst0_writeack
);
   genvar __i;
   genvar __j;
   genvar __k;
   genvar __l;
   genvar __m;
   genvar __n;
   genvar __o;
   genvar __p;
   genvar __q;
   genvar __r;
   genvar __s;
   genvar __t;
   genvar __u;
   genvar __v;
   genvar __w;
   logic lmem_invalid_single_bit;
   logic [13:0] lmem_invalid_aspaces;
   logic local_avm_aspace14_enable [1][5];
   logic local_avm_aspace14_read [1][5];
   logic local_avm_aspace14_write [1][5];
   logic local_avm_aspace14_burstcount [1][5];
   logic [31:0] local_avm_aspace14_address [1][5];
   logic [31:0] local_avm_aspace14_writedata [1][5];
   logic [3:0] local_avm_aspace14_byteenable [1][5];
   logic local_avm_aspace14_waitrequest [1][5];
   logic [31:0] local_avm_aspace14_readdata [1][5];
   logic local_avm_aspace14_readdatavalid [1][5];
   logic local_avm_aspace14_writeack [1][5];
   logic local_avm_aspace15_enable [1][4];
   logic local_avm_aspace15_read [1][4];
   logic local_avm_aspace15_write [1][4];
   logic local_avm_aspace15_burstcount [1][4];
   logic [31:0] local_avm_aspace15_address [1][4];
   logic [31:0] local_avm_aspace15_writedata [1][4];
   logic [3:0] local_avm_aspace15_byteenable [1][4];
   logic local_avm_aspace15_waitrequest [1][4];
   logic [31:0] local_avm_aspace15_readdata [1][4];
   logic local_avm_aspace15_readdatavalid [1][4];
   logic local_avm_aspace15_writeack [1][4];
   logic local_avm_aspace16_enable [1][3];
   logic local_avm_aspace16_read [1][3];
   logic local_avm_aspace16_write [1][3];
   logic local_avm_aspace16_burstcount [1][3];
   logic [31:0] local_avm_aspace16_address [1][3];
   logic [31:0] local_avm_aspace16_writedata [1][3];
   logic [3:0] local_avm_aspace16_byteenable [1][3];
   logic local_avm_aspace16_waitrequest [1][3];
   logic [31:0] local_avm_aspace16_readdata [1][3];
   logic local_avm_aspace16_readdatavalid [1][3];
   logic local_avm_aspace16_writeack [1][3];
   logic local_avm_aspace17_enable [1][5];
   logic local_avm_aspace17_read [1][5];
   logic local_avm_aspace17_write [1][5];
   logic local_avm_aspace17_burstcount [1][5];
   logic [31:0] local_avm_aspace17_address [1][5];
   logic [31:0] local_avm_aspace17_writedata [1][5];
   logic [3:0] local_avm_aspace17_byteenable [1][5];
   logic local_avm_aspace17_waitrequest [1][5];
   logic [31:0] local_avm_aspace17_readdata [1][5];
   logic local_avm_aspace17_readdatavalid [1][5];
   logic local_avm_aspace17_writeack [1][5];
   logic local_avm_aspace18_enable [1][5];
   logic local_avm_aspace18_read [1][5];
   logic local_avm_aspace18_write [1][5];
   logic local_avm_aspace18_burstcount [1][5];
   logic [31:0] local_avm_aspace18_address [1][5];
   logic [31:0] local_avm_aspace18_writedata [1][5];
   logic [3:0] local_avm_aspace18_byteenable [1][5];
   logic local_avm_aspace18_waitrequest [1][5];
   logic [31:0] local_avm_aspace18_readdata [1][5];
   logic local_avm_aspace18_readdatavalid [1][5];
   logic local_avm_aspace18_writeack [1][5];
   logic local_avm_aspace19_enable [1][2];
   logic local_avm_aspace19_read [1][2];
   logic local_avm_aspace19_write [1][2];
   logic local_avm_aspace19_burstcount [1][2];
   logic [31:0] local_avm_aspace19_address [1][2];
   logic [63:0] local_avm_aspace19_writedata [1][2];
   logic [7:0] local_avm_aspace19_byteenable [1][2];
   logic local_avm_aspace19_waitrequest [1][2];
   logic [63:0] local_avm_aspace19_readdata [1][2];
   logic local_avm_aspace19_readdatavalid [1][2];
   logic local_avm_aspace19_writeack [1][2];
   logic local_avm_aspace20_enable [1][2];
   logic local_avm_aspace20_read [1][2];
   logic local_avm_aspace20_write [1][2];
   logic local_avm_aspace20_burstcount [1][2];
   logic [31:0] local_avm_aspace20_address [1][2];
   logic [63:0] local_avm_aspace20_writedata [1][2];
   logic [7:0] local_avm_aspace20_byteenable [1][2];
   logic local_avm_aspace20_waitrequest [1][2];
   logic [63:0] local_avm_aspace20_readdata [1][2];
   logic local_avm_aspace20_readdatavalid [1][2];
   logic local_avm_aspace20_writeack [1][2];
   logic local_avm_aspace21_enable [1][4];
   logic local_avm_aspace21_read [1][4];
   logic local_avm_aspace21_write [1][4];
   logic local_avm_aspace21_burstcount [1][4];
   logic [31:0] local_avm_aspace21_address [1][4];
   logic [63:0] local_avm_aspace21_writedata [1][4];
   logic [7:0] local_avm_aspace21_byteenable [1][4];
   logic local_avm_aspace21_waitrequest [1][4];
   logic [63:0] local_avm_aspace21_readdata [1][4];
   logic local_avm_aspace21_readdatavalid [1][4];
   logic local_avm_aspace21_writeack [1][4];
   logic local_avm_aspace22_enable [1][4];
   logic local_avm_aspace22_read [1][4];
   logic local_avm_aspace22_write [1][4];
   logic local_avm_aspace22_burstcount [1][4];
   logic [31:0] local_avm_aspace22_address [1][4];
   logic [63:0] local_avm_aspace22_writedata [1][4];
   logic [7:0] local_avm_aspace22_byteenable [1][4];
   logic local_avm_aspace22_waitrequest [1][4];
   logic [63:0] local_avm_aspace22_readdata [1][4];
   logic local_avm_aspace22_readdatavalid [1][4];
   logic local_avm_aspace22_writeack [1][4];
   logic local_avm_aspace23_enable [1][14];
   logic local_avm_aspace23_read [1][14];
   logic local_avm_aspace23_write [1][14];
   logic local_avm_aspace23_burstcount [1][14];
   logic [31:0] local_avm_aspace23_address [1][14];
   logic [31:0] local_avm_aspace23_writedata [1][14];
   logic [3:0] local_avm_aspace23_byteenable [1][14];
   logic local_avm_aspace23_waitrequest [1][14];
   logic [31:0] local_avm_aspace23_readdata [1][14];
   logic local_avm_aspace23_readdatavalid [1][14];
   logic local_avm_aspace23_writeack [1][14];
   logic local_avm_aspace24_enable [1][7];
   logic local_avm_aspace24_read [1][7];
   logic local_avm_aspace24_write [1][7];
   logic local_avm_aspace24_burstcount [1][7];
   logic [31:0] local_avm_aspace24_address [1][7];
   logic [31:0] local_avm_aspace24_writedata [1][7];
   logic [3:0] local_avm_aspace24_byteenable [1][7];
   logic local_avm_aspace24_waitrequest [1][7];
   logic [31:0] local_avm_aspace24_readdata [1][7];
   logic local_avm_aspace24_readdatavalid [1][7];
   logic local_avm_aspace24_writeack [1][7];
   logic local_avm_aspace25_enable [1][5];
   logic local_avm_aspace25_read [1][5];
   logic local_avm_aspace25_write [1][5];
   logic local_avm_aspace25_burstcount [1][5];
   logic [31:0] local_avm_aspace25_address [1][5];
   logic [31:0] local_avm_aspace25_writedata [1][5];
   logic [3:0] local_avm_aspace25_byteenable [1][5];
   logic local_avm_aspace25_waitrequest [1][5];
   logic [31:0] local_avm_aspace25_readdata [1][5];
   logic local_avm_aspace25_readdatavalid [1][5];
   logic local_avm_aspace25_writeack [1][5];
   logic local_avm_aspace26_enable [1][5];
   logic local_avm_aspace26_read [1][5];
   logic local_avm_aspace26_write [1][5];
   logic local_avm_aspace26_burstcount [1][5];
   logic [31:0] local_avm_aspace26_address [1][5];
   logic [31:0] local_avm_aspace26_writedata [1][5];
   logic [3:0] local_avm_aspace26_byteenable [1][5];
   logic local_avm_aspace26_waitrequest [1][5];
   logic [31:0] local_avm_aspace26_readdata [1][5];
   logic local_avm_aspace26_readdatavalid [1][5];
   logic local_avm_aspace26_writeack [1][5];
   logic local_avm_aspace27_enable [1][5];
   logic local_avm_aspace27_read [1][5];
   logic local_avm_aspace27_write [1][5];
   logic local_avm_aspace27_burstcount [1][5];
   logic [31:0] local_avm_aspace27_address [1][5];
   logic [31:0] local_avm_aspace27_writedata [1][5];
   logic [3:0] local_avm_aspace27_byteenable [1][5];
   logic local_avm_aspace27_waitrequest [1][5];
   logic [31:0] local_avm_aspace27_readdata [1][5];
   logic local_avm_aspace27_readdatavalid [1][5];
   logic local_avm_aspace27_writeack [1][5];

   // INST kernel of gen_and_eval_newpops_function_wrapper
   gen_and_eval_newpops_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_local_bb11_ld__353_inst0
      .avm_local_bb11_ld__353_inst0_enable(avm_local_bb11_ld__353_inst0_enable),
      .avm_local_bb11_ld__353_inst0_read(avm_local_bb11_ld__353_inst0_read),
      .avm_local_bb11_ld__353_inst0_write(avm_local_bb11_ld__353_inst0_write),
      .avm_local_bb11_ld__353_inst0_burstcount(avm_local_bb11_ld__353_inst0_burstcount),
      .avm_local_bb11_ld__353_inst0_address(avm_local_bb11_ld__353_inst0_address),
      .avm_local_bb11_ld__353_inst0_writedata(avm_local_bb11_ld__353_inst0_writedata),
      .avm_local_bb11_ld__353_inst0_byteenable(avm_local_bb11_ld__353_inst0_byteenable),
      .avm_local_bb11_ld__353_inst0_waitrequest(avm_local_bb11_ld__353_inst0_waitrequest),
      .avm_local_bb11_ld__353_inst0_readdata(avm_local_bb11_ld__353_inst0_readdata),
      .avm_local_bb11_ld__353_inst0_readdatavalid(avm_local_bb11_ld__353_inst0_readdatavalid),
      .avm_local_bb11_ld__353_inst0_writeack(avm_local_bb11_ld__353_inst0_writeack),
      // AVM avm_local_bb12_ld__inst0
      .avm_local_bb12_ld__inst0_enable(avm_local_bb12_ld__inst0_enable),
      .avm_local_bb12_ld__inst0_read(avm_local_bb12_ld__inst0_read),
      .avm_local_bb12_ld__inst0_write(avm_local_bb12_ld__inst0_write),
      .avm_local_bb12_ld__inst0_burstcount(avm_local_bb12_ld__inst0_burstcount),
      .avm_local_bb12_ld__inst0_address(avm_local_bb12_ld__inst0_address),
      .avm_local_bb12_ld__inst0_writedata(avm_local_bb12_ld__inst0_writedata),
      .avm_local_bb12_ld__inst0_byteenable(avm_local_bb12_ld__inst0_byteenable),
      .avm_local_bb12_ld__inst0_waitrequest(avm_local_bb12_ld__inst0_waitrequest),
      .avm_local_bb12_ld__inst0_readdata(avm_local_bb12_ld__inst0_readdata),
      .avm_local_bb12_ld__inst0_readdatavalid(avm_local_bb12_ld__inst0_readdatavalid),
      .avm_local_bb12_ld__inst0_writeack(avm_local_bb12_ld__inst0_writeack),
      // AVM avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_enable(avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_enable),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_read(avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_read),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_write(avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_write),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_burstcount(avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_burstcount),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_address(avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_address),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_writedata(avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_writedata),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_byteenable(avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_byteenable),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_waitrequest(avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_waitrequest),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_readdata(avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_readdata),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_readdatavalid(avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_readdatavalid),
      .avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_writeack(avm_local_bb13_ld_arrayidx_i_i80_promoted_inst0_writeack),
      // AVM avm_local_bb19_st_select457_inst0
      .avm_local_bb19_st_select457_inst0_enable(avm_local_bb19_st_select457_inst0_enable),
      .avm_local_bb19_st_select457_inst0_read(avm_local_bb19_st_select457_inst0_read),
      .avm_local_bb19_st_select457_inst0_write(avm_local_bb19_st_select457_inst0_write),
      .avm_local_bb19_st_select457_inst0_burstcount(avm_local_bb19_st_select457_inst0_burstcount),
      .avm_local_bb19_st_select457_inst0_address(avm_local_bb19_st_select457_inst0_address),
      .avm_local_bb19_st_select457_inst0_writedata(avm_local_bb19_st_select457_inst0_writedata),
      .avm_local_bb19_st_select457_inst0_byteenable(avm_local_bb19_st_select457_inst0_byteenable),
      .avm_local_bb19_st_select457_inst0_waitrequest(avm_local_bb19_st_select457_inst0_waitrequest),
      .avm_local_bb19_st_select457_inst0_readdata(avm_local_bb19_st_select457_inst0_readdata),
      .avm_local_bb19_st_select457_inst0_readdatavalid(avm_local_bb19_st_select457_inst0_readdatavalid),
      .avm_local_bb19_st_select457_inst0_writeack(avm_local_bb19_st_select457_inst0_writeack),
      // AVM avm_local_bb1_ld__inst0
      .avm_local_bb1_ld__inst0_enable(avm_local_bb1_ld__inst0_enable),
      .avm_local_bb1_ld__inst0_read(avm_local_bb1_ld__inst0_read),
      .avm_local_bb1_ld__inst0_write(avm_local_bb1_ld__inst0_write),
      .avm_local_bb1_ld__inst0_burstcount(avm_local_bb1_ld__inst0_burstcount),
      .avm_local_bb1_ld__inst0_address(avm_local_bb1_ld__inst0_address),
      .avm_local_bb1_ld__inst0_writedata(avm_local_bb1_ld__inst0_writedata),
      .avm_local_bb1_ld__inst0_byteenable(avm_local_bb1_ld__inst0_byteenable),
      .avm_local_bb1_ld__inst0_waitrequest(avm_local_bb1_ld__inst0_waitrequest),
      .avm_local_bb1_ld__inst0_readdata(avm_local_bb1_ld__inst0_readdata),
      .avm_local_bb1_ld__inst0_readdatavalid(avm_local_bb1_ld__inst0_readdatavalid),
      .avm_local_bb1_ld__inst0_writeack(avm_local_bb1_ld__inst0_writeack),
      // AVM avm_local_bb1_ld_arrayidx_i_i_promoted_inst0
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_enable(avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_enable),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_read(avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_read),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_write(avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_write),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_burstcount(avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_burstcount),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_address(avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_address),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_writedata(avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_writedata),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_byteenable(avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_byteenable),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_waitrequest(avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_waitrequest),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_readdata(avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_readdata),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_readdatavalid(avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_readdatavalid),
      .avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_writeack(avm_local_bb1_ld_arrayidx_i_i_promoted_inst0_writeack),
      // AVM avm_local_bb22_ld__378_inst0
      .avm_local_bb22_ld__378_inst0_enable(avm_local_bb22_ld__378_inst0_enable),
      .avm_local_bb22_ld__378_inst0_read(avm_local_bb22_ld__378_inst0_read),
      .avm_local_bb22_ld__378_inst0_write(avm_local_bb22_ld__378_inst0_write),
      .avm_local_bb22_ld__378_inst0_burstcount(avm_local_bb22_ld__378_inst0_burstcount),
      .avm_local_bb22_ld__378_inst0_address(avm_local_bb22_ld__378_inst0_address),
      .avm_local_bb22_ld__378_inst0_writedata(avm_local_bb22_ld__378_inst0_writedata),
      .avm_local_bb22_ld__378_inst0_byteenable(avm_local_bb22_ld__378_inst0_byteenable),
      .avm_local_bb22_ld__378_inst0_waitrequest(avm_local_bb22_ld__378_inst0_waitrequest),
      .avm_local_bb22_ld__378_inst0_readdata(avm_local_bb22_ld__378_inst0_readdata),
      .avm_local_bb22_ld__378_inst0_readdatavalid(avm_local_bb22_ld__378_inst0_readdatavalid),
      .avm_local_bb22_ld__378_inst0_writeack(avm_local_bb22_ld__378_inst0_writeack),
      // AVM avm_local_bb22_ld__380_inst0
      .avm_local_bb22_ld__380_inst0_enable(avm_local_bb22_ld__380_inst0_enable),
      .avm_local_bb22_ld__380_inst0_read(avm_local_bb22_ld__380_inst0_read),
      .avm_local_bb22_ld__380_inst0_write(avm_local_bb22_ld__380_inst0_write),
      .avm_local_bb22_ld__380_inst0_burstcount(avm_local_bb22_ld__380_inst0_burstcount),
      .avm_local_bb22_ld__380_inst0_address(avm_local_bb22_ld__380_inst0_address),
      .avm_local_bb22_ld__380_inst0_writedata(avm_local_bb22_ld__380_inst0_writedata),
      .avm_local_bb22_ld__380_inst0_byteenable(avm_local_bb22_ld__380_inst0_byteenable),
      .avm_local_bb22_ld__380_inst0_waitrequest(avm_local_bb22_ld__380_inst0_waitrequest),
      .avm_local_bb22_ld__380_inst0_readdata(avm_local_bb22_ld__380_inst0_readdata),
      .avm_local_bb22_ld__380_inst0_readdatavalid(avm_local_bb22_ld__380_inst0_readdatavalid),
      .avm_local_bb22_ld__380_inst0_writeack(avm_local_bb22_ld__380_inst0_writeack),
      // AVM avm_local_bb22_ld__382_inst0
      .avm_local_bb22_ld__382_inst0_enable(avm_local_bb22_ld__382_inst0_enable),
      .avm_local_bb22_ld__382_inst0_read(avm_local_bb22_ld__382_inst0_read),
      .avm_local_bb22_ld__382_inst0_write(avm_local_bb22_ld__382_inst0_write),
      .avm_local_bb22_ld__382_inst0_burstcount(avm_local_bb22_ld__382_inst0_burstcount),
      .avm_local_bb22_ld__382_inst0_address(avm_local_bb22_ld__382_inst0_address),
      .avm_local_bb22_ld__382_inst0_writedata(avm_local_bb22_ld__382_inst0_writedata),
      .avm_local_bb22_ld__382_inst0_byteenable(avm_local_bb22_ld__382_inst0_byteenable),
      .avm_local_bb22_ld__382_inst0_waitrequest(avm_local_bb22_ld__382_inst0_waitrequest),
      .avm_local_bb22_ld__382_inst0_readdata(avm_local_bb22_ld__382_inst0_readdata),
      .avm_local_bb22_ld__382_inst0_readdatavalid(avm_local_bb22_ld__382_inst0_readdatavalid),
      .avm_local_bb22_ld__382_inst0_writeack(avm_local_bb22_ld__382_inst0_writeack),
      // AVM avm_local_bb22_ld__384_inst0
      .avm_local_bb22_ld__384_inst0_enable(avm_local_bb22_ld__384_inst0_enable),
      .avm_local_bb22_ld__384_inst0_read(avm_local_bb22_ld__384_inst0_read),
      .avm_local_bb22_ld__384_inst0_write(avm_local_bb22_ld__384_inst0_write),
      .avm_local_bb22_ld__384_inst0_burstcount(avm_local_bb22_ld__384_inst0_burstcount),
      .avm_local_bb22_ld__384_inst0_address(avm_local_bb22_ld__384_inst0_address),
      .avm_local_bb22_ld__384_inst0_writedata(avm_local_bb22_ld__384_inst0_writedata),
      .avm_local_bb22_ld__384_inst0_byteenable(avm_local_bb22_ld__384_inst0_byteenable),
      .avm_local_bb22_ld__384_inst0_waitrequest(avm_local_bb22_ld__384_inst0_waitrequest),
      .avm_local_bb22_ld__384_inst0_readdata(avm_local_bb22_ld__384_inst0_readdata),
      .avm_local_bb22_ld__384_inst0_readdatavalid(avm_local_bb22_ld__384_inst0_readdatavalid),
      .avm_local_bb22_ld__384_inst0_writeack(avm_local_bb22_ld__384_inst0_writeack),
      // AVM avm_local_bb22_ld__inst0
      .avm_local_bb22_ld__inst0_enable(avm_local_bb22_ld__inst0_enable),
      .avm_local_bb22_ld__inst0_read(avm_local_bb22_ld__inst0_read),
      .avm_local_bb22_ld__inst0_write(avm_local_bb22_ld__inst0_write),
      .avm_local_bb22_ld__inst0_burstcount(avm_local_bb22_ld__inst0_burstcount),
      .avm_local_bb22_ld__inst0_address(avm_local_bb22_ld__inst0_address),
      .avm_local_bb22_ld__inst0_writedata(avm_local_bb22_ld__inst0_writedata),
      .avm_local_bb22_ld__inst0_byteenable(avm_local_bb22_ld__inst0_byteenable),
      .avm_local_bb22_ld__inst0_waitrequest(avm_local_bb22_ld__inst0_waitrequest),
      .avm_local_bb22_ld__inst0_readdata(avm_local_bb22_ld__inst0_readdata),
      .avm_local_bb22_ld__inst0_readdatavalid(avm_local_bb22_ld__inst0_readdatavalid),
      .avm_local_bb22_ld__inst0_writeack(avm_local_bb22_ld__inst0_writeack),
      // AVM avm_local_bb22_ld__u62_inst0
      .avm_local_bb22_ld__u62_inst0_enable(avm_local_bb22_ld__u62_inst0_enable),
      .avm_local_bb22_ld__u62_inst0_read(avm_local_bb22_ld__u62_inst0_read),
      .avm_local_bb22_ld__u62_inst0_write(avm_local_bb22_ld__u62_inst0_write),
      .avm_local_bb22_ld__u62_inst0_burstcount(avm_local_bb22_ld__u62_inst0_burstcount),
      .avm_local_bb22_ld__u62_inst0_address(avm_local_bb22_ld__u62_inst0_address),
      .avm_local_bb22_ld__u62_inst0_writedata(avm_local_bb22_ld__u62_inst0_writedata),
      .avm_local_bb22_ld__u62_inst0_byteenable(avm_local_bb22_ld__u62_inst0_byteenable),
      .avm_local_bb22_ld__u62_inst0_waitrequest(avm_local_bb22_ld__u62_inst0_waitrequest),
      .avm_local_bb22_ld__u62_inst0_readdata(avm_local_bb22_ld__u62_inst0_readdata),
      .avm_local_bb22_ld__u62_inst0_readdatavalid(avm_local_bb22_ld__u62_inst0_readdatavalid),
      .avm_local_bb22_ld__u62_inst0_writeack(avm_local_bb22_ld__u62_inst0_writeack),
      // AVM avm_local_bb22_ld__u63_inst0
      .avm_local_bb22_ld__u63_inst0_enable(avm_local_bb22_ld__u63_inst0_enable),
      .avm_local_bb22_ld__u63_inst0_read(avm_local_bb22_ld__u63_inst0_read),
      .avm_local_bb22_ld__u63_inst0_write(avm_local_bb22_ld__u63_inst0_write),
      .avm_local_bb22_ld__u63_inst0_burstcount(avm_local_bb22_ld__u63_inst0_burstcount),
      .avm_local_bb22_ld__u63_inst0_address(avm_local_bb22_ld__u63_inst0_address),
      .avm_local_bb22_ld__u63_inst0_writedata(avm_local_bb22_ld__u63_inst0_writedata),
      .avm_local_bb22_ld__u63_inst0_byteenable(avm_local_bb22_ld__u63_inst0_byteenable),
      .avm_local_bb22_ld__u63_inst0_waitrequest(avm_local_bb22_ld__u63_inst0_waitrequest),
      .avm_local_bb22_ld__u63_inst0_readdata(avm_local_bb22_ld__u63_inst0_readdata),
      .avm_local_bb22_ld__u63_inst0_readdatavalid(avm_local_bb22_ld__u63_inst0_readdatavalid),
      .avm_local_bb22_ld__u63_inst0_writeack(avm_local_bb22_ld__u63_inst0_writeack),
      // AVM avm_local_bb22_ld__u64_inst0
      .avm_local_bb22_ld__u64_inst0_enable(avm_local_bb22_ld__u64_inst0_enable),
      .avm_local_bb22_ld__u64_inst0_read(avm_local_bb22_ld__u64_inst0_read),
      .avm_local_bb22_ld__u64_inst0_write(avm_local_bb22_ld__u64_inst0_write),
      .avm_local_bb22_ld__u64_inst0_burstcount(avm_local_bb22_ld__u64_inst0_burstcount),
      .avm_local_bb22_ld__u64_inst0_address(avm_local_bb22_ld__u64_inst0_address),
      .avm_local_bb22_ld__u64_inst0_writedata(avm_local_bb22_ld__u64_inst0_writedata),
      .avm_local_bb22_ld__u64_inst0_byteenable(avm_local_bb22_ld__u64_inst0_byteenable),
      .avm_local_bb22_ld__u64_inst0_waitrequest(avm_local_bb22_ld__u64_inst0_waitrequest),
      .avm_local_bb22_ld__u64_inst0_readdata(avm_local_bb22_ld__u64_inst0_readdata),
      .avm_local_bb22_ld__u64_inst0_readdatavalid(avm_local_bb22_ld__u64_inst0_readdatavalid),
      .avm_local_bb22_ld__u64_inst0_writeack(avm_local_bb22_ld__u64_inst0_writeack),
      // AVM avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_enable(avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_enable),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_read(avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_read),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_write(avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_write),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_burstcount(avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_burstcount),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_address(avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_address),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_writedata(avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_writedata),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_byteenable(avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_byteenable),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_waitrequest(avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_waitrequest),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_readdata(avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_readdata),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_readdatavalid(avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_readdatavalid),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_writeack(avm_local_bb22_ld_memcoalesce_KerConst_load_0_inst0_writeack),
      // AVM avm_local_bb24_ld__u69_inst0
      .avm_local_bb24_ld__u69_inst0_enable(avm_local_bb24_ld__u69_inst0_enable),
      .avm_local_bb24_ld__u69_inst0_read(avm_local_bb24_ld__u69_inst0_read),
      .avm_local_bb24_ld__u69_inst0_write(avm_local_bb24_ld__u69_inst0_write),
      .avm_local_bb24_ld__u69_inst0_burstcount(avm_local_bb24_ld__u69_inst0_burstcount),
      .avm_local_bb24_ld__u69_inst0_address(avm_local_bb24_ld__u69_inst0_address),
      .avm_local_bb24_ld__u69_inst0_writedata(avm_local_bb24_ld__u69_inst0_writedata),
      .avm_local_bb24_ld__u69_inst0_byteenable(avm_local_bb24_ld__u69_inst0_byteenable),
      .avm_local_bb24_ld__u69_inst0_waitrequest(avm_local_bb24_ld__u69_inst0_waitrequest),
      .avm_local_bb24_ld__u69_inst0_readdata(avm_local_bb24_ld__u69_inst0_readdata),
      .avm_local_bb24_ld__u69_inst0_readdatavalid(avm_local_bb24_ld__u69_inst0_readdatavalid),
      .avm_local_bb24_ld__u69_inst0_writeack(avm_local_bb24_ld__u69_inst0_writeack),
      // AVM avm_local_bb24_ld__u70_inst0
      .avm_local_bb24_ld__u70_inst0_enable(avm_local_bb24_ld__u70_inst0_enable),
      .avm_local_bb24_ld__u70_inst0_read(avm_local_bb24_ld__u70_inst0_read),
      .avm_local_bb24_ld__u70_inst0_write(avm_local_bb24_ld__u70_inst0_write),
      .avm_local_bb24_ld__u70_inst0_burstcount(avm_local_bb24_ld__u70_inst0_burstcount),
      .avm_local_bb24_ld__u70_inst0_address(avm_local_bb24_ld__u70_inst0_address),
      .avm_local_bb24_ld__u70_inst0_writedata(avm_local_bb24_ld__u70_inst0_writedata),
      .avm_local_bb24_ld__u70_inst0_byteenable(avm_local_bb24_ld__u70_inst0_byteenable),
      .avm_local_bb24_ld__u70_inst0_waitrequest(avm_local_bb24_ld__u70_inst0_waitrequest),
      .avm_local_bb24_ld__u70_inst0_readdata(avm_local_bb24_ld__u70_inst0_readdata),
      .avm_local_bb24_ld__u70_inst0_readdatavalid(avm_local_bb24_ld__u70_inst0_readdatavalid),
      .avm_local_bb24_ld__u70_inst0_writeack(avm_local_bb24_ld__u70_inst0_writeack),
      // AVM avm_local_bb24_ld__u71_inst0
      .avm_local_bb24_ld__u71_inst0_enable(avm_local_bb24_ld__u71_inst0_enable),
      .avm_local_bb24_ld__u71_inst0_read(avm_local_bb24_ld__u71_inst0_read),
      .avm_local_bb24_ld__u71_inst0_write(avm_local_bb24_ld__u71_inst0_write),
      .avm_local_bb24_ld__u71_inst0_burstcount(avm_local_bb24_ld__u71_inst0_burstcount),
      .avm_local_bb24_ld__u71_inst0_address(avm_local_bb24_ld__u71_inst0_address),
      .avm_local_bb24_ld__u71_inst0_writedata(avm_local_bb24_ld__u71_inst0_writedata),
      .avm_local_bb24_ld__u71_inst0_byteenable(avm_local_bb24_ld__u71_inst0_byteenable),
      .avm_local_bb24_ld__u71_inst0_waitrequest(avm_local_bb24_ld__u71_inst0_waitrequest),
      .avm_local_bb24_ld__u71_inst0_readdata(avm_local_bb24_ld__u71_inst0_readdata),
      .avm_local_bb24_ld__u71_inst0_readdatavalid(avm_local_bb24_ld__u71_inst0_readdatavalid),
      .avm_local_bb24_ld__u71_inst0_writeack(avm_local_bb24_ld__u71_inst0_writeack),
      // AVM avm_local_bb24_ld__u72_inst0
      .avm_local_bb24_ld__u72_inst0_enable(avm_local_bb24_ld__u72_inst0_enable),
      .avm_local_bb24_ld__u72_inst0_read(avm_local_bb24_ld__u72_inst0_read),
      .avm_local_bb24_ld__u72_inst0_write(avm_local_bb24_ld__u72_inst0_write),
      .avm_local_bb24_ld__u72_inst0_burstcount(avm_local_bb24_ld__u72_inst0_burstcount),
      .avm_local_bb24_ld__u72_inst0_address(avm_local_bb24_ld__u72_inst0_address),
      .avm_local_bb24_ld__u72_inst0_writedata(avm_local_bb24_ld__u72_inst0_writedata),
      .avm_local_bb24_ld__u72_inst0_byteenable(avm_local_bb24_ld__u72_inst0_byteenable),
      .avm_local_bb24_ld__u72_inst0_waitrequest(avm_local_bb24_ld__u72_inst0_waitrequest),
      .avm_local_bb24_ld__u72_inst0_readdata(avm_local_bb24_ld__u72_inst0_readdata),
      .avm_local_bb24_ld__u72_inst0_readdatavalid(avm_local_bb24_ld__u72_inst0_readdatavalid),
      .avm_local_bb24_ld__u72_inst0_writeack(avm_local_bb24_ld__u72_inst0_writeack),
      // AVM avm_local_bb24_ld__u73_inst0
      .avm_local_bb24_ld__u73_inst0_enable(avm_local_bb24_ld__u73_inst0_enable),
      .avm_local_bb24_ld__u73_inst0_read(avm_local_bb24_ld__u73_inst0_read),
      .avm_local_bb24_ld__u73_inst0_write(avm_local_bb24_ld__u73_inst0_write),
      .avm_local_bb24_ld__u73_inst0_burstcount(avm_local_bb24_ld__u73_inst0_burstcount),
      .avm_local_bb24_ld__u73_inst0_address(avm_local_bb24_ld__u73_inst0_address),
      .avm_local_bb24_ld__u73_inst0_writedata(avm_local_bb24_ld__u73_inst0_writedata),
      .avm_local_bb24_ld__u73_inst0_byteenable(avm_local_bb24_ld__u73_inst0_byteenable),
      .avm_local_bb24_ld__u73_inst0_waitrequest(avm_local_bb24_ld__u73_inst0_waitrequest),
      .avm_local_bb24_ld__u73_inst0_readdata(avm_local_bb24_ld__u73_inst0_readdata),
      .avm_local_bb24_ld__u73_inst0_readdatavalid(avm_local_bb24_ld__u73_inst0_readdatavalid),
      .avm_local_bb24_ld__u73_inst0_writeack(avm_local_bb24_ld__u73_inst0_writeack),
      // AVM avm_local_bb24_ld__u74_inst0
      .avm_local_bb24_ld__u74_inst0_enable(avm_local_bb24_ld__u74_inst0_enable),
      .avm_local_bb24_ld__u74_inst0_read(avm_local_bb24_ld__u74_inst0_read),
      .avm_local_bb24_ld__u74_inst0_write(avm_local_bb24_ld__u74_inst0_write),
      .avm_local_bb24_ld__u74_inst0_burstcount(avm_local_bb24_ld__u74_inst0_burstcount),
      .avm_local_bb24_ld__u74_inst0_address(avm_local_bb24_ld__u74_inst0_address),
      .avm_local_bb24_ld__u74_inst0_writedata(avm_local_bb24_ld__u74_inst0_writedata),
      .avm_local_bb24_ld__u74_inst0_byteenable(avm_local_bb24_ld__u74_inst0_byteenable),
      .avm_local_bb24_ld__u74_inst0_waitrequest(avm_local_bb24_ld__u74_inst0_waitrequest),
      .avm_local_bb24_ld__u74_inst0_readdata(avm_local_bb24_ld__u74_inst0_readdata),
      .avm_local_bb24_ld__u74_inst0_readdatavalid(avm_local_bb24_ld__u74_inst0_readdatavalid),
      .avm_local_bb24_ld__u74_inst0_writeack(avm_local_bb24_ld__u74_inst0_writeack),
      // AVM avm_local_bb24_ld__u75_inst0
      .avm_local_bb24_ld__u75_inst0_enable(avm_local_bb24_ld__u75_inst0_enable),
      .avm_local_bb24_ld__u75_inst0_read(avm_local_bb24_ld__u75_inst0_read),
      .avm_local_bb24_ld__u75_inst0_write(avm_local_bb24_ld__u75_inst0_write),
      .avm_local_bb24_ld__u75_inst0_burstcount(avm_local_bb24_ld__u75_inst0_burstcount),
      .avm_local_bb24_ld__u75_inst0_address(avm_local_bb24_ld__u75_inst0_address),
      .avm_local_bb24_ld__u75_inst0_writedata(avm_local_bb24_ld__u75_inst0_writedata),
      .avm_local_bb24_ld__u75_inst0_byteenable(avm_local_bb24_ld__u75_inst0_byteenable),
      .avm_local_bb24_ld__u75_inst0_waitrequest(avm_local_bb24_ld__u75_inst0_waitrequest),
      .avm_local_bb24_ld__u75_inst0_readdata(avm_local_bb24_ld__u75_inst0_readdata),
      .avm_local_bb24_ld__u75_inst0_readdatavalid(avm_local_bb24_ld__u75_inst0_readdatavalid),
      .avm_local_bb24_ld__u75_inst0_writeack(avm_local_bb24_ld__u75_inst0_writeack),
      // AVM avm_local_bb24_ld__u76_inst0
      .avm_local_bb24_ld__u76_inst0_enable(avm_local_bb24_ld__u76_inst0_enable),
      .avm_local_bb24_ld__u76_inst0_read(avm_local_bb24_ld__u76_inst0_read),
      .avm_local_bb24_ld__u76_inst0_write(avm_local_bb24_ld__u76_inst0_write),
      .avm_local_bb24_ld__u76_inst0_burstcount(avm_local_bb24_ld__u76_inst0_burstcount),
      .avm_local_bb24_ld__u76_inst0_address(avm_local_bb24_ld__u76_inst0_address),
      .avm_local_bb24_ld__u76_inst0_writedata(avm_local_bb24_ld__u76_inst0_writedata),
      .avm_local_bb24_ld__u76_inst0_byteenable(avm_local_bb24_ld__u76_inst0_byteenable),
      .avm_local_bb24_ld__u76_inst0_waitrequest(avm_local_bb24_ld__u76_inst0_waitrequest),
      .avm_local_bb24_ld__u76_inst0_readdata(avm_local_bb24_ld__u76_inst0_readdata),
      .avm_local_bb24_ld__u76_inst0_readdatavalid(avm_local_bb24_ld__u76_inst0_readdatavalid),
      .avm_local_bb24_ld__u76_inst0_writeack(avm_local_bb24_ld__u76_inst0_writeack),
      // AVM avm_local_bb24_ld__u77_inst0
      .avm_local_bb24_ld__u77_inst0_enable(avm_local_bb24_ld__u77_inst0_enable),
      .avm_local_bb24_ld__u77_inst0_read(avm_local_bb24_ld__u77_inst0_read),
      .avm_local_bb24_ld__u77_inst0_write(avm_local_bb24_ld__u77_inst0_write),
      .avm_local_bb24_ld__u77_inst0_burstcount(avm_local_bb24_ld__u77_inst0_burstcount),
      .avm_local_bb24_ld__u77_inst0_address(avm_local_bb24_ld__u77_inst0_address),
      .avm_local_bb24_ld__u77_inst0_writedata(avm_local_bb24_ld__u77_inst0_writedata),
      .avm_local_bb24_ld__u77_inst0_byteenable(avm_local_bb24_ld__u77_inst0_byteenable),
      .avm_local_bb24_ld__u77_inst0_waitrequest(avm_local_bb24_ld__u77_inst0_waitrequest),
      .avm_local_bb24_ld__u77_inst0_readdata(avm_local_bb24_ld__u77_inst0_readdata),
      .avm_local_bb24_ld__u77_inst0_readdatavalid(avm_local_bb24_ld__u77_inst0_readdatavalid),
      .avm_local_bb24_ld__u77_inst0_writeack(avm_local_bb24_ld__u77_inst0_writeack),
      // AVM avm_local_bb24_ld__u78_inst0
      .avm_local_bb24_ld__u78_inst0_enable(avm_local_bb24_ld__u78_inst0_enable),
      .avm_local_bb24_ld__u78_inst0_read(avm_local_bb24_ld__u78_inst0_read),
      .avm_local_bb24_ld__u78_inst0_write(avm_local_bb24_ld__u78_inst0_write),
      .avm_local_bb24_ld__u78_inst0_burstcount(avm_local_bb24_ld__u78_inst0_burstcount),
      .avm_local_bb24_ld__u78_inst0_address(avm_local_bb24_ld__u78_inst0_address),
      .avm_local_bb24_ld__u78_inst0_writedata(avm_local_bb24_ld__u78_inst0_writedata),
      .avm_local_bb24_ld__u78_inst0_byteenable(avm_local_bb24_ld__u78_inst0_byteenable),
      .avm_local_bb24_ld__u78_inst0_waitrequest(avm_local_bb24_ld__u78_inst0_waitrequest),
      .avm_local_bb24_ld__u78_inst0_readdata(avm_local_bb24_ld__u78_inst0_readdata),
      .avm_local_bb24_ld__u78_inst0_readdatavalid(avm_local_bb24_ld__u78_inst0_readdatavalid),
      .avm_local_bb24_ld__u78_inst0_writeack(avm_local_bb24_ld__u78_inst0_writeack),
      // AVM avm_local_bb24_ld__u79_inst0
      .avm_local_bb24_ld__u79_inst0_enable(avm_local_bb24_ld__u79_inst0_enable),
      .avm_local_bb24_ld__u79_inst0_read(avm_local_bb24_ld__u79_inst0_read),
      .avm_local_bb24_ld__u79_inst0_write(avm_local_bb24_ld__u79_inst0_write),
      .avm_local_bb24_ld__u79_inst0_burstcount(avm_local_bb24_ld__u79_inst0_burstcount),
      .avm_local_bb24_ld__u79_inst0_address(avm_local_bb24_ld__u79_inst0_address),
      .avm_local_bb24_ld__u79_inst0_writedata(avm_local_bb24_ld__u79_inst0_writedata),
      .avm_local_bb24_ld__u79_inst0_byteenable(avm_local_bb24_ld__u79_inst0_byteenable),
      .avm_local_bb24_ld__u79_inst0_waitrequest(avm_local_bb24_ld__u79_inst0_waitrequest),
      .avm_local_bb24_ld__u79_inst0_readdata(avm_local_bb24_ld__u79_inst0_readdata),
      .avm_local_bb24_ld__u79_inst0_readdatavalid(avm_local_bb24_ld__u79_inst0_readdatavalid),
      .avm_local_bb24_ld__u79_inst0_writeack(avm_local_bb24_ld__u79_inst0_writeack),
      // AVM avm_local_bb24_ld__u80_inst0
      .avm_local_bb24_ld__u80_inst0_enable(avm_local_bb24_ld__u80_inst0_enable),
      .avm_local_bb24_ld__u80_inst0_read(avm_local_bb24_ld__u80_inst0_read),
      .avm_local_bb24_ld__u80_inst0_write(avm_local_bb24_ld__u80_inst0_write),
      .avm_local_bb24_ld__u80_inst0_burstcount(avm_local_bb24_ld__u80_inst0_burstcount),
      .avm_local_bb24_ld__u80_inst0_address(avm_local_bb24_ld__u80_inst0_address),
      .avm_local_bb24_ld__u80_inst0_writedata(avm_local_bb24_ld__u80_inst0_writedata),
      .avm_local_bb24_ld__u80_inst0_byteenable(avm_local_bb24_ld__u80_inst0_byteenable),
      .avm_local_bb24_ld__u80_inst0_waitrequest(avm_local_bb24_ld__u80_inst0_waitrequest),
      .avm_local_bb24_ld__u80_inst0_readdata(avm_local_bb24_ld__u80_inst0_readdata),
      .avm_local_bb24_ld__u80_inst0_readdatavalid(avm_local_bb24_ld__u80_inst0_readdatavalid),
      .avm_local_bb24_ld__u80_inst0_writeack(avm_local_bb24_ld__u80_inst0_writeack),
      // AVM avm_local_bb24_ld__u81_inst0
      .avm_local_bb24_ld__u81_inst0_enable(avm_local_bb24_ld__u81_inst0_enable),
      .avm_local_bb24_ld__u81_inst0_read(avm_local_bb24_ld__u81_inst0_read),
      .avm_local_bb24_ld__u81_inst0_write(avm_local_bb24_ld__u81_inst0_write),
      .avm_local_bb24_ld__u81_inst0_burstcount(avm_local_bb24_ld__u81_inst0_burstcount),
      .avm_local_bb24_ld__u81_inst0_address(avm_local_bb24_ld__u81_inst0_address),
      .avm_local_bb24_ld__u81_inst0_writedata(avm_local_bb24_ld__u81_inst0_writedata),
      .avm_local_bb24_ld__u81_inst0_byteenable(avm_local_bb24_ld__u81_inst0_byteenable),
      .avm_local_bb24_ld__u81_inst0_waitrequest(avm_local_bb24_ld__u81_inst0_waitrequest),
      .avm_local_bb24_ld__u81_inst0_readdata(avm_local_bb24_ld__u81_inst0_readdata),
      .avm_local_bb24_ld__u81_inst0_readdatavalid(avm_local_bb24_ld__u81_inst0_readdatavalid),
      .avm_local_bb24_ld__u81_inst0_writeack(avm_local_bb24_ld__u81_inst0_writeack),
      // AVM avm_local_bb24_ld__u82_inst0
      .avm_local_bb24_ld__u82_inst0_enable(avm_local_bb24_ld__u82_inst0_enable),
      .avm_local_bb24_ld__u82_inst0_read(avm_local_bb24_ld__u82_inst0_read),
      .avm_local_bb24_ld__u82_inst0_write(avm_local_bb24_ld__u82_inst0_write),
      .avm_local_bb24_ld__u82_inst0_burstcount(avm_local_bb24_ld__u82_inst0_burstcount),
      .avm_local_bb24_ld__u82_inst0_address(avm_local_bb24_ld__u82_inst0_address),
      .avm_local_bb24_ld__u82_inst0_writedata(avm_local_bb24_ld__u82_inst0_writedata),
      .avm_local_bb24_ld__u82_inst0_byteenable(avm_local_bb24_ld__u82_inst0_byteenable),
      .avm_local_bb24_ld__u82_inst0_waitrequest(avm_local_bb24_ld__u82_inst0_waitrequest),
      .avm_local_bb24_ld__u82_inst0_readdata(avm_local_bb24_ld__u82_inst0_readdata),
      .avm_local_bb24_ld__u82_inst0_readdatavalid(avm_local_bb24_ld__u82_inst0_readdatavalid),
      .avm_local_bb24_ld__u82_inst0_writeack(avm_local_bb24_ld__u82_inst0_writeack),
      // AVM avm_local_bb24_ld__u83_inst0
      .avm_local_bb24_ld__u83_inst0_enable(avm_local_bb24_ld__u83_inst0_enable),
      .avm_local_bb24_ld__u83_inst0_read(avm_local_bb24_ld__u83_inst0_read),
      .avm_local_bb24_ld__u83_inst0_write(avm_local_bb24_ld__u83_inst0_write),
      .avm_local_bb24_ld__u83_inst0_burstcount(avm_local_bb24_ld__u83_inst0_burstcount),
      .avm_local_bb24_ld__u83_inst0_address(avm_local_bb24_ld__u83_inst0_address),
      .avm_local_bb24_ld__u83_inst0_writedata(avm_local_bb24_ld__u83_inst0_writedata),
      .avm_local_bb24_ld__u83_inst0_byteenable(avm_local_bb24_ld__u83_inst0_byteenable),
      .avm_local_bb24_ld__u83_inst0_waitrequest(avm_local_bb24_ld__u83_inst0_waitrequest),
      .avm_local_bb24_ld__u83_inst0_readdata(avm_local_bb24_ld__u83_inst0_readdata),
      .avm_local_bb24_ld__u83_inst0_readdatavalid(avm_local_bb24_ld__u83_inst0_readdatavalid),
      .avm_local_bb24_ld__u83_inst0_writeack(avm_local_bb24_ld__u83_inst0_writeack),
      // AVM avm_local_bb24_ld__u84_inst0
      .avm_local_bb24_ld__u84_inst0_enable(avm_local_bb24_ld__u84_inst0_enable),
      .avm_local_bb24_ld__u84_inst0_read(avm_local_bb24_ld__u84_inst0_read),
      .avm_local_bb24_ld__u84_inst0_write(avm_local_bb24_ld__u84_inst0_write),
      .avm_local_bb24_ld__u84_inst0_burstcount(avm_local_bb24_ld__u84_inst0_burstcount),
      .avm_local_bb24_ld__u84_inst0_address(avm_local_bb24_ld__u84_inst0_address),
      .avm_local_bb24_ld__u84_inst0_writedata(avm_local_bb24_ld__u84_inst0_writedata),
      .avm_local_bb24_ld__u84_inst0_byteenable(avm_local_bb24_ld__u84_inst0_byteenable),
      .avm_local_bb24_ld__u84_inst0_waitrequest(avm_local_bb24_ld__u84_inst0_waitrequest),
      .avm_local_bb24_ld__u84_inst0_readdata(avm_local_bb24_ld__u84_inst0_readdata),
      .avm_local_bb24_ld__u84_inst0_readdatavalid(avm_local_bb24_ld__u84_inst0_readdatavalid),
      .avm_local_bb24_ld__u84_inst0_writeack(avm_local_bb24_ld__u84_inst0_writeack),
      // AVM avm_local_bb24_ld__u85_inst0
      .avm_local_bb24_ld__u85_inst0_enable(avm_local_bb24_ld__u85_inst0_enable),
      .avm_local_bb24_ld__u85_inst0_read(avm_local_bb24_ld__u85_inst0_read),
      .avm_local_bb24_ld__u85_inst0_write(avm_local_bb24_ld__u85_inst0_write),
      .avm_local_bb24_ld__u85_inst0_burstcount(avm_local_bb24_ld__u85_inst0_burstcount),
      .avm_local_bb24_ld__u85_inst0_address(avm_local_bb24_ld__u85_inst0_address),
      .avm_local_bb24_ld__u85_inst0_writedata(avm_local_bb24_ld__u85_inst0_writedata),
      .avm_local_bb24_ld__u85_inst0_byteenable(avm_local_bb24_ld__u85_inst0_byteenable),
      .avm_local_bb24_ld__u85_inst0_waitrequest(avm_local_bb24_ld__u85_inst0_waitrequest),
      .avm_local_bb24_ld__u85_inst0_readdata(avm_local_bb24_ld__u85_inst0_readdata),
      .avm_local_bb24_ld__u85_inst0_readdatavalid(avm_local_bb24_ld__u85_inst0_readdatavalid),
      .avm_local_bb24_ld__u85_inst0_writeack(avm_local_bb24_ld__u85_inst0_writeack),
      // AVM avm_local_bb24_ld__u86_inst0
      .avm_local_bb24_ld__u86_inst0_enable(avm_local_bb24_ld__u86_inst0_enable),
      .avm_local_bb24_ld__u86_inst0_read(avm_local_bb24_ld__u86_inst0_read),
      .avm_local_bb24_ld__u86_inst0_write(avm_local_bb24_ld__u86_inst0_write),
      .avm_local_bb24_ld__u86_inst0_burstcount(avm_local_bb24_ld__u86_inst0_burstcount),
      .avm_local_bb24_ld__u86_inst0_address(avm_local_bb24_ld__u86_inst0_address),
      .avm_local_bb24_ld__u86_inst0_writedata(avm_local_bb24_ld__u86_inst0_writedata),
      .avm_local_bb24_ld__u86_inst0_byteenable(avm_local_bb24_ld__u86_inst0_byteenable),
      .avm_local_bb24_ld__u86_inst0_waitrequest(avm_local_bb24_ld__u86_inst0_waitrequest),
      .avm_local_bb24_ld__u86_inst0_readdata(avm_local_bb24_ld__u86_inst0_readdata),
      .avm_local_bb24_ld__u86_inst0_readdatavalid(avm_local_bb24_ld__u86_inst0_readdatavalid),
      .avm_local_bb24_ld__u86_inst0_writeack(avm_local_bb24_ld__u86_inst0_writeack),
      // AVM avm_local_bb24_ld__u87_inst0
      .avm_local_bb24_ld__u87_inst0_enable(avm_local_bb24_ld__u87_inst0_enable),
      .avm_local_bb24_ld__u87_inst0_read(avm_local_bb24_ld__u87_inst0_read),
      .avm_local_bb24_ld__u87_inst0_write(avm_local_bb24_ld__u87_inst0_write),
      .avm_local_bb24_ld__u87_inst0_burstcount(avm_local_bb24_ld__u87_inst0_burstcount),
      .avm_local_bb24_ld__u87_inst0_address(avm_local_bb24_ld__u87_inst0_address),
      .avm_local_bb24_ld__u87_inst0_writedata(avm_local_bb24_ld__u87_inst0_writedata),
      .avm_local_bb24_ld__u87_inst0_byteenable(avm_local_bb24_ld__u87_inst0_byteenable),
      .avm_local_bb24_ld__u87_inst0_waitrequest(avm_local_bb24_ld__u87_inst0_waitrequest),
      .avm_local_bb24_ld__u87_inst0_readdata(avm_local_bb24_ld__u87_inst0_readdata),
      .avm_local_bb24_ld__u87_inst0_readdatavalid(avm_local_bb24_ld__u87_inst0_readdatavalid),
      .avm_local_bb24_ld__u87_inst0_writeack(avm_local_bb24_ld__u87_inst0_writeack),
      // AVM avm_local_bb24_ld__u88_inst0
      .avm_local_bb24_ld__u88_inst0_enable(avm_local_bb24_ld__u88_inst0_enable),
      .avm_local_bb24_ld__u88_inst0_read(avm_local_bb24_ld__u88_inst0_read),
      .avm_local_bb24_ld__u88_inst0_write(avm_local_bb24_ld__u88_inst0_write),
      .avm_local_bb24_ld__u88_inst0_burstcount(avm_local_bb24_ld__u88_inst0_burstcount),
      .avm_local_bb24_ld__u88_inst0_address(avm_local_bb24_ld__u88_inst0_address),
      .avm_local_bb24_ld__u88_inst0_writedata(avm_local_bb24_ld__u88_inst0_writedata),
      .avm_local_bb24_ld__u88_inst0_byteenable(avm_local_bb24_ld__u88_inst0_byteenable),
      .avm_local_bb24_ld__u88_inst0_waitrequest(avm_local_bb24_ld__u88_inst0_waitrequest),
      .avm_local_bb24_ld__u88_inst0_readdata(avm_local_bb24_ld__u88_inst0_readdata),
      .avm_local_bb24_ld__u88_inst0_readdatavalid(avm_local_bb24_ld__u88_inst0_readdatavalid),
      .avm_local_bb24_ld__u88_inst0_writeack(avm_local_bb24_ld__u88_inst0_writeack),
      // AVM avm_local_bb24_ld__u89_inst0
      .avm_local_bb24_ld__u89_inst0_enable(avm_local_bb24_ld__u89_inst0_enable),
      .avm_local_bb24_ld__u89_inst0_read(avm_local_bb24_ld__u89_inst0_read),
      .avm_local_bb24_ld__u89_inst0_write(avm_local_bb24_ld__u89_inst0_write),
      .avm_local_bb24_ld__u89_inst0_burstcount(avm_local_bb24_ld__u89_inst0_burstcount),
      .avm_local_bb24_ld__u89_inst0_address(avm_local_bb24_ld__u89_inst0_address),
      .avm_local_bb24_ld__u89_inst0_writedata(avm_local_bb24_ld__u89_inst0_writedata),
      .avm_local_bb24_ld__u89_inst0_byteenable(avm_local_bb24_ld__u89_inst0_byteenable),
      .avm_local_bb24_ld__u89_inst0_waitrequest(avm_local_bb24_ld__u89_inst0_waitrequest),
      .avm_local_bb24_ld__u89_inst0_readdata(avm_local_bb24_ld__u89_inst0_readdata),
      .avm_local_bb24_ld__u89_inst0_readdatavalid(avm_local_bb24_ld__u89_inst0_readdatavalid),
      .avm_local_bb24_ld__u89_inst0_writeack(avm_local_bb24_ld__u89_inst0_writeack),
      // AVM avm_local_bb24_ld__u90_inst0
      .avm_local_bb24_ld__u90_inst0_enable(avm_local_bb24_ld__u90_inst0_enable),
      .avm_local_bb24_ld__u90_inst0_read(avm_local_bb24_ld__u90_inst0_read),
      .avm_local_bb24_ld__u90_inst0_write(avm_local_bb24_ld__u90_inst0_write),
      .avm_local_bb24_ld__u90_inst0_burstcount(avm_local_bb24_ld__u90_inst0_burstcount),
      .avm_local_bb24_ld__u90_inst0_address(avm_local_bb24_ld__u90_inst0_address),
      .avm_local_bb24_ld__u90_inst0_writedata(avm_local_bb24_ld__u90_inst0_writedata),
      .avm_local_bb24_ld__u90_inst0_byteenable(avm_local_bb24_ld__u90_inst0_byteenable),
      .avm_local_bb24_ld__u90_inst0_waitrequest(avm_local_bb24_ld__u90_inst0_waitrequest),
      .avm_local_bb24_ld__u90_inst0_readdata(avm_local_bb24_ld__u90_inst0_readdata),
      .avm_local_bb24_ld__u90_inst0_readdatavalid(avm_local_bb24_ld__u90_inst0_readdatavalid),
      .avm_local_bb24_ld__u90_inst0_writeack(avm_local_bb24_ld__u90_inst0_writeack),
      // AVM avm_local_bb24_ld__u91_inst0
      .avm_local_bb24_ld__u91_inst0_enable(avm_local_bb24_ld__u91_inst0_enable),
      .avm_local_bb24_ld__u91_inst0_read(avm_local_bb24_ld__u91_inst0_read),
      .avm_local_bb24_ld__u91_inst0_write(avm_local_bb24_ld__u91_inst0_write),
      .avm_local_bb24_ld__u91_inst0_burstcount(avm_local_bb24_ld__u91_inst0_burstcount),
      .avm_local_bb24_ld__u91_inst0_address(avm_local_bb24_ld__u91_inst0_address),
      .avm_local_bb24_ld__u91_inst0_writedata(avm_local_bb24_ld__u91_inst0_writedata),
      .avm_local_bb24_ld__u91_inst0_byteenable(avm_local_bb24_ld__u91_inst0_byteenable),
      .avm_local_bb24_ld__u91_inst0_waitrequest(avm_local_bb24_ld__u91_inst0_waitrequest),
      .avm_local_bb24_ld__u91_inst0_readdata(avm_local_bb24_ld__u91_inst0_readdata),
      .avm_local_bb24_ld__u91_inst0_readdatavalid(avm_local_bb24_ld__u91_inst0_readdatavalid),
      .avm_local_bb24_ld__u91_inst0_writeack(avm_local_bb24_ld__u91_inst0_writeack),
      // AVM avm_local_bb24_ld__u92_inst0
      .avm_local_bb24_ld__u92_inst0_enable(avm_local_bb24_ld__u92_inst0_enable),
      .avm_local_bb24_ld__u92_inst0_read(avm_local_bb24_ld__u92_inst0_read),
      .avm_local_bb24_ld__u92_inst0_write(avm_local_bb24_ld__u92_inst0_write),
      .avm_local_bb24_ld__u92_inst0_burstcount(avm_local_bb24_ld__u92_inst0_burstcount),
      .avm_local_bb24_ld__u92_inst0_address(avm_local_bb24_ld__u92_inst0_address),
      .avm_local_bb24_ld__u92_inst0_writedata(avm_local_bb24_ld__u92_inst0_writedata),
      .avm_local_bb24_ld__u92_inst0_byteenable(avm_local_bb24_ld__u92_inst0_byteenable),
      .avm_local_bb24_ld__u92_inst0_waitrequest(avm_local_bb24_ld__u92_inst0_waitrequest),
      .avm_local_bb24_ld__u92_inst0_readdata(avm_local_bb24_ld__u92_inst0_readdata),
      .avm_local_bb24_ld__u92_inst0_readdatavalid(avm_local_bb24_ld__u92_inst0_readdatavalid),
      .avm_local_bb24_ld__u92_inst0_writeack(avm_local_bb24_ld__u92_inst0_writeack),
      // AVM avm_local_bb24_ld__u93_inst0
      .avm_local_bb24_ld__u93_inst0_enable(avm_local_bb24_ld__u93_inst0_enable),
      .avm_local_bb24_ld__u93_inst0_read(avm_local_bb24_ld__u93_inst0_read),
      .avm_local_bb24_ld__u93_inst0_write(avm_local_bb24_ld__u93_inst0_write),
      .avm_local_bb24_ld__u93_inst0_burstcount(avm_local_bb24_ld__u93_inst0_burstcount),
      .avm_local_bb24_ld__u93_inst0_address(avm_local_bb24_ld__u93_inst0_address),
      .avm_local_bb24_ld__u93_inst0_writedata(avm_local_bb24_ld__u93_inst0_writedata),
      .avm_local_bb24_ld__u93_inst0_byteenable(avm_local_bb24_ld__u93_inst0_byteenable),
      .avm_local_bb24_ld__u93_inst0_waitrequest(avm_local_bb24_ld__u93_inst0_waitrequest),
      .avm_local_bb24_ld__u93_inst0_readdata(avm_local_bb24_ld__u93_inst0_readdata),
      .avm_local_bb24_ld__u93_inst0_readdatavalid(avm_local_bb24_ld__u93_inst0_readdatavalid),
      .avm_local_bb24_ld__u93_inst0_writeack(avm_local_bb24_ld__u93_inst0_writeack),
      // AVM avm_local_bb24_ld__u94_inst0
      .avm_local_bb24_ld__u94_inst0_enable(avm_local_bb24_ld__u94_inst0_enable),
      .avm_local_bb24_ld__u94_inst0_read(avm_local_bb24_ld__u94_inst0_read),
      .avm_local_bb24_ld__u94_inst0_write(avm_local_bb24_ld__u94_inst0_write),
      .avm_local_bb24_ld__u94_inst0_burstcount(avm_local_bb24_ld__u94_inst0_burstcount),
      .avm_local_bb24_ld__u94_inst0_address(avm_local_bb24_ld__u94_inst0_address),
      .avm_local_bb24_ld__u94_inst0_writedata(avm_local_bb24_ld__u94_inst0_writedata),
      .avm_local_bb24_ld__u94_inst0_byteenable(avm_local_bb24_ld__u94_inst0_byteenable),
      .avm_local_bb24_ld__u94_inst0_waitrequest(avm_local_bb24_ld__u94_inst0_waitrequest),
      .avm_local_bb24_ld__u94_inst0_readdata(avm_local_bb24_ld__u94_inst0_readdata),
      .avm_local_bb24_ld__u94_inst0_readdatavalid(avm_local_bb24_ld__u94_inst0_readdatavalid),
      .avm_local_bb24_ld__u94_inst0_writeack(avm_local_bb24_ld__u94_inst0_writeack),
      // AVM avm_local_bb25_ld__u101_inst0
      .avm_local_bb25_ld__u101_inst0_enable(avm_local_bb25_ld__u101_inst0_enable),
      .avm_local_bb25_ld__u101_inst0_read(avm_local_bb25_ld__u101_inst0_read),
      .avm_local_bb25_ld__u101_inst0_write(avm_local_bb25_ld__u101_inst0_write),
      .avm_local_bb25_ld__u101_inst0_burstcount(avm_local_bb25_ld__u101_inst0_burstcount),
      .avm_local_bb25_ld__u101_inst0_address(avm_local_bb25_ld__u101_inst0_address),
      .avm_local_bb25_ld__u101_inst0_writedata(avm_local_bb25_ld__u101_inst0_writedata),
      .avm_local_bb25_ld__u101_inst0_byteenable(avm_local_bb25_ld__u101_inst0_byteenable),
      .avm_local_bb25_ld__u101_inst0_waitrequest(avm_local_bb25_ld__u101_inst0_waitrequest),
      .avm_local_bb25_ld__u101_inst0_readdata(avm_local_bb25_ld__u101_inst0_readdata),
      .avm_local_bb25_ld__u101_inst0_readdatavalid(avm_local_bb25_ld__u101_inst0_readdatavalid),
      .avm_local_bb25_ld__u101_inst0_writeack(avm_local_bb25_ld__u101_inst0_writeack),
      // AVM avm_local_bb25_ld__u102_inst0
      .avm_local_bb25_ld__u102_inst0_enable(avm_local_bb25_ld__u102_inst0_enable),
      .avm_local_bb25_ld__u102_inst0_read(avm_local_bb25_ld__u102_inst0_read),
      .avm_local_bb25_ld__u102_inst0_write(avm_local_bb25_ld__u102_inst0_write),
      .avm_local_bb25_ld__u102_inst0_burstcount(avm_local_bb25_ld__u102_inst0_burstcount),
      .avm_local_bb25_ld__u102_inst0_address(avm_local_bb25_ld__u102_inst0_address),
      .avm_local_bb25_ld__u102_inst0_writedata(avm_local_bb25_ld__u102_inst0_writedata),
      .avm_local_bb25_ld__u102_inst0_byteenable(avm_local_bb25_ld__u102_inst0_byteenable),
      .avm_local_bb25_ld__u102_inst0_waitrequest(avm_local_bb25_ld__u102_inst0_waitrequest),
      .avm_local_bb25_ld__u102_inst0_readdata(avm_local_bb25_ld__u102_inst0_readdata),
      .avm_local_bb25_ld__u102_inst0_readdatavalid(avm_local_bb25_ld__u102_inst0_readdatavalid),
      .avm_local_bb25_ld__u102_inst0_writeack(avm_local_bb25_ld__u102_inst0_writeack),
      // AVM avm_local_bb25_ld__u103_inst0
      .avm_local_bb25_ld__u103_inst0_enable(avm_local_bb25_ld__u103_inst0_enable),
      .avm_local_bb25_ld__u103_inst0_read(avm_local_bb25_ld__u103_inst0_read),
      .avm_local_bb25_ld__u103_inst0_write(avm_local_bb25_ld__u103_inst0_write),
      .avm_local_bb25_ld__u103_inst0_burstcount(avm_local_bb25_ld__u103_inst0_burstcount),
      .avm_local_bb25_ld__u103_inst0_address(avm_local_bb25_ld__u103_inst0_address),
      .avm_local_bb25_ld__u103_inst0_writedata(avm_local_bb25_ld__u103_inst0_writedata),
      .avm_local_bb25_ld__u103_inst0_byteenable(avm_local_bb25_ld__u103_inst0_byteenable),
      .avm_local_bb25_ld__u103_inst0_waitrequest(avm_local_bb25_ld__u103_inst0_waitrequest),
      .avm_local_bb25_ld__u103_inst0_readdata(avm_local_bb25_ld__u103_inst0_readdata),
      .avm_local_bb25_ld__u103_inst0_readdatavalid(avm_local_bb25_ld__u103_inst0_readdatavalid),
      .avm_local_bb25_ld__u103_inst0_writeack(avm_local_bb25_ld__u103_inst0_writeack),
      // AVM avm_local_bb25_ld__u104_inst0
      .avm_local_bb25_ld__u104_inst0_enable(avm_local_bb25_ld__u104_inst0_enable),
      .avm_local_bb25_ld__u104_inst0_read(avm_local_bb25_ld__u104_inst0_read),
      .avm_local_bb25_ld__u104_inst0_write(avm_local_bb25_ld__u104_inst0_write),
      .avm_local_bb25_ld__u104_inst0_burstcount(avm_local_bb25_ld__u104_inst0_burstcount),
      .avm_local_bb25_ld__u104_inst0_address(avm_local_bb25_ld__u104_inst0_address),
      .avm_local_bb25_ld__u104_inst0_writedata(avm_local_bb25_ld__u104_inst0_writedata),
      .avm_local_bb25_ld__u104_inst0_byteenable(avm_local_bb25_ld__u104_inst0_byteenable),
      .avm_local_bb25_ld__u104_inst0_waitrequest(avm_local_bb25_ld__u104_inst0_waitrequest),
      .avm_local_bb25_ld__u104_inst0_readdata(avm_local_bb25_ld__u104_inst0_readdata),
      .avm_local_bb25_ld__u104_inst0_readdatavalid(avm_local_bb25_ld__u104_inst0_readdatavalid),
      .avm_local_bb25_ld__u104_inst0_writeack(avm_local_bb25_ld__u104_inst0_writeack),
      // AVM avm_local_bb25_ld__u105_inst0
      .avm_local_bb25_ld__u105_inst0_enable(avm_local_bb25_ld__u105_inst0_enable),
      .avm_local_bb25_ld__u105_inst0_read(avm_local_bb25_ld__u105_inst0_read),
      .avm_local_bb25_ld__u105_inst0_write(avm_local_bb25_ld__u105_inst0_write),
      .avm_local_bb25_ld__u105_inst0_burstcount(avm_local_bb25_ld__u105_inst0_burstcount),
      .avm_local_bb25_ld__u105_inst0_address(avm_local_bb25_ld__u105_inst0_address),
      .avm_local_bb25_ld__u105_inst0_writedata(avm_local_bb25_ld__u105_inst0_writedata),
      .avm_local_bb25_ld__u105_inst0_byteenable(avm_local_bb25_ld__u105_inst0_byteenable),
      .avm_local_bb25_ld__u105_inst0_waitrequest(avm_local_bb25_ld__u105_inst0_waitrequest),
      .avm_local_bb25_ld__u105_inst0_readdata(avm_local_bb25_ld__u105_inst0_readdata),
      .avm_local_bb25_ld__u105_inst0_readdatavalid(avm_local_bb25_ld__u105_inst0_readdatavalid),
      .avm_local_bb25_ld__u105_inst0_writeack(avm_local_bb25_ld__u105_inst0_writeack),
      // AVM avm_local_bb25_ld__u106_inst0
      .avm_local_bb25_ld__u106_inst0_enable(avm_local_bb25_ld__u106_inst0_enable),
      .avm_local_bb25_ld__u106_inst0_read(avm_local_bb25_ld__u106_inst0_read),
      .avm_local_bb25_ld__u106_inst0_write(avm_local_bb25_ld__u106_inst0_write),
      .avm_local_bb25_ld__u106_inst0_burstcount(avm_local_bb25_ld__u106_inst0_burstcount),
      .avm_local_bb25_ld__u106_inst0_address(avm_local_bb25_ld__u106_inst0_address),
      .avm_local_bb25_ld__u106_inst0_writedata(avm_local_bb25_ld__u106_inst0_writedata),
      .avm_local_bb25_ld__u106_inst0_byteenable(avm_local_bb25_ld__u106_inst0_byteenable),
      .avm_local_bb25_ld__u106_inst0_waitrequest(avm_local_bb25_ld__u106_inst0_waitrequest),
      .avm_local_bb25_ld__u106_inst0_readdata(avm_local_bb25_ld__u106_inst0_readdata),
      .avm_local_bb25_ld__u106_inst0_readdatavalid(avm_local_bb25_ld__u106_inst0_readdatavalid),
      .avm_local_bb25_ld__u106_inst0_writeack(avm_local_bb25_ld__u106_inst0_writeack),
      // AVM avm_local_bb25_ld__u107_inst0
      .avm_local_bb25_ld__u107_inst0_enable(avm_local_bb25_ld__u107_inst0_enable),
      .avm_local_bb25_ld__u107_inst0_read(avm_local_bb25_ld__u107_inst0_read),
      .avm_local_bb25_ld__u107_inst0_write(avm_local_bb25_ld__u107_inst0_write),
      .avm_local_bb25_ld__u107_inst0_burstcount(avm_local_bb25_ld__u107_inst0_burstcount),
      .avm_local_bb25_ld__u107_inst0_address(avm_local_bb25_ld__u107_inst0_address),
      .avm_local_bb25_ld__u107_inst0_writedata(avm_local_bb25_ld__u107_inst0_writedata),
      .avm_local_bb25_ld__u107_inst0_byteenable(avm_local_bb25_ld__u107_inst0_byteenable),
      .avm_local_bb25_ld__u107_inst0_waitrequest(avm_local_bb25_ld__u107_inst0_waitrequest),
      .avm_local_bb25_ld__u107_inst0_readdata(avm_local_bb25_ld__u107_inst0_readdata),
      .avm_local_bb25_ld__u107_inst0_readdatavalid(avm_local_bb25_ld__u107_inst0_readdatavalid),
      .avm_local_bb25_ld__u107_inst0_writeack(avm_local_bb25_ld__u107_inst0_writeack),
      // AVM avm_local_bb25_ld__u108_inst0
      .avm_local_bb25_ld__u108_inst0_enable(avm_local_bb25_ld__u108_inst0_enable),
      .avm_local_bb25_ld__u108_inst0_read(avm_local_bb25_ld__u108_inst0_read),
      .avm_local_bb25_ld__u108_inst0_write(avm_local_bb25_ld__u108_inst0_write),
      .avm_local_bb25_ld__u108_inst0_burstcount(avm_local_bb25_ld__u108_inst0_burstcount),
      .avm_local_bb25_ld__u108_inst0_address(avm_local_bb25_ld__u108_inst0_address),
      .avm_local_bb25_ld__u108_inst0_writedata(avm_local_bb25_ld__u108_inst0_writedata),
      .avm_local_bb25_ld__u108_inst0_byteenable(avm_local_bb25_ld__u108_inst0_byteenable),
      .avm_local_bb25_ld__u108_inst0_waitrequest(avm_local_bb25_ld__u108_inst0_waitrequest),
      .avm_local_bb25_ld__u108_inst0_readdata(avm_local_bb25_ld__u108_inst0_readdata),
      .avm_local_bb25_ld__u108_inst0_readdatavalid(avm_local_bb25_ld__u108_inst0_readdatavalid),
      .avm_local_bb25_ld__u108_inst0_writeack(avm_local_bb25_ld__u108_inst0_writeack),
      // AVM avm_local_bb25_ld__u109_inst0
      .avm_local_bb25_ld__u109_inst0_enable(avm_local_bb25_ld__u109_inst0_enable),
      .avm_local_bb25_ld__u109_inst0_read(avm_local_bb25_ld__u109_inst0_read),
      .avm_local_bb25_ld__u109_inst0_write(avm_local_bb25_ld__u109_inst0_write),
      .avm_local_bb25_ld__u109_inst0_burstcount(avm_local_bb25_ld__u109_inst0_burstcount),
      .avm_local_bb25_ld__u109_inst0_address(avm_local_bb25_ld__u109_inst0_address),
      .avm_local_bb25_ld__u109_inst0_writedata(avm_local_bb25_ld__u109_inst0_writedata),
      .avm_local_bb25_ld__u109_inst0_byteenable(avm_local_bb25_ld__u109_inst0_byteenable),
      .avm_local_bb25_ld__u109_inst0_waitrequest(avm_local_bb25_ld__u109_inst0_waitrequest),
      .avm_local_bb25_ld__u109_inst0_readdata(avm_local_bb25_ld__u109_inst0_readdata),
      .avm_local_bb25_ld__u109_inst0_readdatavalid(avm_local_bb25_ld__u109_inst0_readdatavalid),
      .avm_local_bb25_ld__u109_inst0_writeack(avm_local_bb25_ld__u109_inst0_writeack),
      // AVM avm_local_bb25_ld__u110_inst0
      .avm_local_bb25_ld__u110_inst0_enable(avm_local_bb25_ld__u110_inst0_enable),
      .avm_local_bb25_ld__u110_inst0_read(avm_local_bb25_ld__u110_inst0_read),
      .avm_local_bb25_ld__u110_inst0_write(avm_local_bb25_ld__u110_inst0_write),
      .avm_local_bb25_ld__u110_inst0_burstcount(avm_local_bb25_ld__u110_inst0_burstcount),
      .avm_local_bb25_ld__u110_inst0_address(avm_local_bb25_ld__u110_inst0_address),
      .avm_local_bb25_ld__u110_inst0_writedata(avm_local_bb25_ld__u110_inst0_writedata),
      .avm_local_bb25_ld__u110_inst0_byteenable(avm_local_bb25_ld__u110_inst0_byteenable),
      .avm_local_bb25_ld__u110_inst0_waitrequest(avm_local_bb25_ld__u110_inst0_waitrequest),
      .avm_local_bb25_ld__u110_inst0_readdata(avm_local_bb25_ld__u110_inst0_readdata),
      .avm_local_bb25_ld__u110_inst0_readdatavalid(avm_local_bb25_ld__u110_inst0_readdatavalid),
      .avm_local_bb25_ld__u110_inst0_writeack(avm_local_bb25_ld__u110_inst0_writeack),
      // AVM avm_local_bb25_ld__u111_inst0
      .avm_local_bb25_ld__u111_inst0_enable(avm_local_bb25_ld__u111_inst0_enable),
      .avm_local_bb25_ld__u111_inst0_read(avm_local_bb25_ld__u111_inst0_read),
      .avm_local_bb25_ld__u111_inst0_write(avm_local_bb25_ld__u111_inst0_write),
      .avm_local_bb25_ld__u111_inst0_burstcount(avm_local_bb25_ld__u111_inst0_burstcount),
      .avm_local_bb25_ld__u111_inst0_address(avm_local_bb25_ld__u111_inst0_address),
      .avm_local_bb25_ld__u111_inst0_writedata(avm_local_bb25_ld__u111_inst0_writedata),
      .avm_local_bb25_ld__u111_inst0_byteenable(avm_local_bb25_ld__u111_inst0_byteenable),
      .avm_local_bb25_ld__u111_inst0_waitrequest(avm_local_bb25_ld__u111_inst0_waitrequest),
      .avm_local_bb25_ld__u111_inst0_readdata(avm_local_bb25_ld__u111_inst0_readdata),
      .avm_local_bb25_ld__u111_inst0_readdatavalid(avm_local_bb25_ld__u111_inst0_readdatavalid),
      .avm_local_bb25_ld__u111_inst0_writeack(avm_local_bb25_ld__u111_inst0_writeack),
      // AVM avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_enable(avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_enable),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_read(avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_read),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_write(avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_write),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_burstcount(avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_burstcount),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_address(avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_address),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_writedata(avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_writedata),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_byteenable(avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_byteenable),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_waitrequest(avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_waitrequest),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_readdata(avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_readdata),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_readdatavalid(avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_readdatavalid),
      .avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_writeack(avm_local_bb25_ld_memcoalesce_KerConst_load_020_inst0_writeack),
      // AVM avm_local_bb28_st__inst0
      .avm_local_bb28_st__inst0_enable(avm_local_bb28_st__inst0_enable),
      .avm_local_bb28_st__inst0_read(avm_local_bb28_st__inst0_read),
      .avm_local_bb28_st__inst0_write(avm_local_bb28_st__inst0_write),
      .avm_local_bb28_st__inst0_burstcount(avm_local_bb28_st__inst0_burstcount),
      .avm_local_bb28_st__inst0_address(avm_local_bb28_st__inst0_address),
      .avm_local_bb28_st__inst0_writedata(avm_local_bb28_st__inst0_writedata),
      .avm_local_bb28_st__inst0_byteenable(avm_local_bb28_st__inst0_byteenable),
      .avm_local_bb28_st__inst0_waitrequest(avm_local_bb28_st__inst0_waitrequest),
      .avm_local_bb28_st__inst0_readdata(avm_local_bb28_st__inst0_readdata),
      .avm_local_bb28_st__inst0_readdatavalid(avm_local_bb28_st__inst0_readdatavalid),
      .avm_local_bb28_st__inst0_writeack(avm_local_bb28_st__inst0_writeack),
      // AVM avm_local_bb28_st_add1001_i_hfp_inst0
      .avm_local_bb28_st_add1001_i_hfp_inst0_enable(avm_local_bb28_st_add1001_i_hfp_inst0_enable),
      .avm_local_bb28_st_add1001_i_hfp_inst0_read(avm_local_bb28_st_add1001_i_hfp_inst0_read),
      .avm_local_bb28_st_add1001_i_hfp_inst0_write(avm_local_bb28_st_add1001_i_hfp_inst0_write),
      .avm_local_bb28_st_add1001_i_hfp_inst0_burstcount(avm_local_bb28_st_add1001_i_hfp_inst0_burstcount),
      .avm_local_bb28_st_add1001_i_hfp_inst0_address(avm_local_bb28_st_add1001_i_hfp_inst0_address),
      .avm_local_bb28_st_add1001_i_hfp_inst0_writedata(avm_local_bb28_st_add1001_i_hfp_inst0_writedata),
      .avm_local_bb28_st_add1001_i_hfp_inst0_byteenable(avm_local_bb28_st_add1001_i_hfp_inst0_byteenable),
      .avm_local_bb28_st_add1001_i_hfp_inst0_waitrequest(avm_local_bb28_st_add1001_i_hfp_inst0_waitrequest),
      .avm_local_bb28_st_add1001_i_hfp_inst0_readdata(avm_local_bb28_st_add1001_i_hfp_inst0_readdata),
      .avm_local_bb28_st_add1001_i_hfp_inst0_readdatavalid(avm_local_bb28_st_add1001_i_hfp_inst0_readdatavalid),
      .avm_local_bb28_st_add1001_i_hfp_inst0_writeack(avm_local_bb28_st_add1001_i_hfp_inst0_writeack),
      // AVM avm_local_bb29_st__inst0
      .avm_local_bb29_st__inst0_enable(avm_local_bb29_st__inst0_enable),
      .avm_local_bb29_st__inst0_read(avm_local_bb29_st__inst0_read),
      .avm_local_bb29_st__inst0_write(avm_local_bb29_st__inst0_write),
      .avm_local_bb29_st__inst0_burstcount(avm_local_bb29_st__inst0_burstcount),
      .avm_local_bb29_st__inst0_address(avm_local_bb29_st__inst0_address),
      .avm_local_bb29_st__inst0_writedata(avm_local_bb29_st__inst0_writedata),
      .avm_local_bb29_st__inst0_byteenable(avm_local_bb29_st__inst0_byteenable),
      .avm_local_bb29_st__inst0_waitrequest(avm_local_bb29_st__inst0_waitrequest),
      .avm_local_bb29_st__inst0_readdata(avm_local_bb29_st__inst0_readdata),
      .avm_local_bb29_st__inst0_readdatavalid(avm_local_bb29_st__inst0_readdatavalid),
      .avm_local_bb29_st__inst0_writeack(avm_local_bb29_st__inst0_writeack),
      // AVM avm_local_bb3_ld__inst0
      .avm_local_bb3_ld__inst0_enable(avm_local_bb3_ld__inst0_enable),
      .avm_local_bb3_ld__inst0_read(avm_local_bb3_ld__inst0_read),
      .avm_local_bb3_ld__inst0_write(avm_local_bb3_ld__inst0_write),
      .avm_local_bb3_ld__inst0_burstcount(avm_local_bb3_ld__inst0_burstcount),
      .avm_local_bb3_ld__inst0_address(avm_local_bb3_ld__inst0_address),
      .avm_local_bb3_ld__inst0_writedata(avm_local_bb3_ld__inst0_writedata),
      .avm_local_bb3_ld__inst0_byteenable(avm_local_bb3_ld__inst0_byteenable),
      .avm_local_bb3_ld__inst0_waitrequest(avm_local_bb3_ld__inst0_waitrequest),
      .avm_local_bb3_ld__inst0_readdata(avm_local_bb3_ld__inst0_readdata),
      .avm_local_bb3_ld__inst0_readdatavalid(avm_local_bb3_ld__inst0_readdatavalid),
      .avm_local_bb3_ld__inst0_writeack(avm_local_bb3_ld__inst0_writeack),
      // AVM avm_local_bb6_st__inst0
      .avm_local_bb6_st__inst0_enable(avm_local_bb6_st__inst0_enable),
      .avm_local_bb6_st__inst0_read(avm_local_bb6_st__inst0_read),
      .avm_local_bb6_st__inst0_write(avm_local_bb6_st__inst0_write),
      .avm_local_bb6_st__inst0_burstcount(avm_local_bb6_st__inst0_burstcount),
      .avm_local_bb6_st__inst0_address(avm_local_bb6_st__inst0_address),
      .avm_local_bb6_st__inst0_writedata(avm_local_bb6_st__inst0_writedata),
      .avm_local_bb6_st__inst0_byteenable(avm_local_bb6_st__inst0_byteenable),
      .avm_local_bb6_st__inst0_waitrequest(avm_local_bb6_st__inst0_waitrequest),
      .avm_local_bb6_st__inst0_readdata(avm_local_bb6_st__inst0_readdata),
      .avm_local_bb6_st__inst0_readdatavalid(avm_local_bb6_st__inst0_readdatavalid),
      .avm_local_bb6_st__inst0_writeack(avm_local_bb6_st__inst0_writeack),
      // AVM avm_local_bb6_st_c0_exe1165_inst0
      .avm_local_bb6_st_c0_exe1165_inst0_enable(avm_local_bb6_st_c0_exe1165_inst0_enable),
      .avm_local_bb6_st_c0_exe1165_inst0_read(avm_local_bb6_st_c0_exe1165_inst0_read),
      .avm_local_bb6_st_c0_exe1165_inst0_write(avm_local_bb6_st_c0_exe1165_inst0_write),
      .avm_local_bb6_st_c0_exe1165_inst0_burstcount(avm_local_bb6_st_c0_exe1165_inst0_burstcount),
      .avm_local_bb6_st_c0_exe1165_inst0_address(avm_local_bb6_st_c0_exe1165_inst0_address),
      .avm_local_bb6_st_c0_exe1165_inst0_writedata(avm_local_bb6_st_c0_exe1165_inst0_writedata),
      .avm_local_bb6_st_c0_exe1165_inst0_byteenable(avm_local_bb6_st_c0_exe1165_inst0_byteenable),
      .avm_local_bb6_st_c0_exe1165_inst0_waitrequest(avm_local_bb6_st_c0_exe1165_inst0_waitrequest),
      .avm_local_bb6_st_c0_exe1165_inst0_readdata(avm_local_bb6_st_c0_exe1165_inst0_readdata),
      .avm_local_bb6_st_c0_exe1165_inst0_readdatavalid(avm_local_bb6_st_c0_exe1165_inst0_readdatavalid),
      .avm_local_bb6_st_c0_exe1165_inst0_writeack(avm_local_bb6_st_c0_exe1165_inst0_writeack),
      // AVM avm_local_bb7_ld__inst0
      .avm_local_bb7_ld__inst0_enable(avm_local_bb7_ld__inst0_enable),
      .avm_local_bb7_ld__inst0_read(avm_local_bb7_ld__inst0_read),
      .avm_local_bb7_ld__inst0_write(avm_local_bb7_ld__inst0_write),
      .avm_local_bb7_ld__inst0_burstcount(avm_local_bb7_ld__inst0_burstcount),
      .avm_local_bb7_ld__inst0_address(avm_local_bb7_ld__inst0_address),
      .avm_local_bb7_ld__inst0_writedata(avm_local_bb7_ld__inst0_writedata),
      .avm_local_bb7_ld__inst0_byteenable(avm_local_bb7_ld__inst0_byteenable),
      .avm_local_bb7_ld__inst0_waitrequest(avm_local_bb7_ld__inst0_waitrequest),
      .avm_local_bb7_ld__inst0_readdata(avm_local_bb7_ld__inst0_readdata),
      .avm_local_bb7_ld__inst0_readdatavalid(avm_local_bb7_ld__inst0_readdatavalid),
      .avm_local_bb7_ld__inst0_writeack(avm_local_bb7_ld__inst0_writeack),
      // AVM avm_local_bb7_st__inst0
      .avm_local_bb7_st__inst0_enable(avm_local_bb7_st__inst0_enable),
      .avm_local_bb7_st__inst0_read(avm_local_bb7_st__inst0_read),
      .avm_local_bb7_st__inst0_write(avm_local_bb7_st__inst0_write),
      .avm_local_bb7_st__inst0_burstcount(avm_local_bb7_st__inst0_burstcount),
      .avm_local_bb7_st__inst0_address(avm_local_bb7_st__inst0_address),
      .avm_local_bb7_st__inst0_writedata(avm_local_bb7_st__inst0_writedata),
      .avm_local_bb7_st__inst0_byteenable(avm_local_bb7_st__inst0_byteenable),
      .avm_local_bb7_st__inst0_waitrequest(avm_local_bb7_st__inst0_waitrequest),
      .avm_local_bb7_st__inst0_readdata(avm_local_bb7_st__inst0_readdata),
      .avm_local_bb7_st__inst0_readdatavalid(avm_local_bb7_st__inst0_readdatavalid),
      .avm_local_bb7_st__inst0_writeack(avm_local_bb7_st__inst0_writeack),
      // AVM avm_local_bb9_ld__u8_inst0
      .avm_local_bb9_ld__u8_inst0_enable(avm_local_bb9_ld__u8_inst0_enable),
      .avm_local_bb9_ld__u8_inst0_read(avm_local_bb9_ld__u8_inst0_read),
      .avm_local_bb9_ld__u8_inst0_write(avm_local_bb9_ld__u8_inst0_write),
      .avm_local_bb9_ld__u8_inst0_burstcount(avm_local_bb9_ld__u8_inst0_burstcount),
      .avm_local_bb9_ld__u8_inst0_address(avm_local_bb9_ld__u8_inst0_address),
      .avm_local_bb9_ld__u8_inst0_writedata(avm_local_bb9_ld__u8_inst0_writedata),
      .avm_local_bb9_ld__u8_inst0_byteenable(avm_local_bb9_ld__u8_inst0_byteenable),
      .avm_local_bb9_ld__u8_inst0_waitrequest(avm_local_bb9_ld__u8_inst0_waitrequest),
      .avm_local_bb9_ld__u8_inst0_readdata(avm_local_bb9_ld__u8_inst0_readdata),
      .avm_local_bb9_ld__u8_inst0_readdatavalid(avm_local_bb9_ld__u8_inst0_readdatavalid),
      .avm_local_bb9_ld__u8_inst0_writeack(avm_local_bb9_ld__u8_inst0_writeack),
      // AVM avm_local_bb9_st_c0_exe1180_inst0
      .avm_local_bb9_st_c0_exe1180_inst0_enable(avm_local_bb9_st_c0_exe1180_inst0_enable),
      .avm_local_bb9_st_c0_exe1180_inst0_read(avm_local_bb9_st_c0_exe1180_inst0_read),
      .avm_local_bb9_st_c0_exe1180_inst0_write(avm_local_bb9_st_c0_exe1180_inst0_write),
      .avm_local_bb9_st_c0_exe1180_inst0_burstcount(avm_local_bb9_st_c0_exe1180_inst0_burstcount),
      .avm_local_bb9_st_c0_exe1180_inst0_address(avm_local_bb9_st_c0_exe1180_inst0_address),
      .avm_local_bb9_st_c0_exe1180_inst0_writedata(avm_local_bb9_st_c0_exe1180_inst0_writedata),
      .avm_local_bb9_st_c0_exe1180_inst0_byteenable(avm_local_bb9_st_c0_exe1180_inst0_byteenable),
      .avm_local_bb9_st_c0_exe1180_inst0_waitrequest(avm_local_bb9_st_c0_exe1180_inst0_waitrequest),
      .avm_local_bb9_st_c0_exe1180_inst0_readdata(avm_local_bb9_st_c0_exe1180_inst0_readdata),
      .avm_local_bb9_st_c0_exe1180_inst0_readdatavalid(avm_local_bb9_st_c0_exe1180_inst0_readdatavalid),
      .avm_local_bb9_st_c0_exe1180_inst0_writeack(avm_local_bb9_st_c0_exe1180_inst0_writeack),
      // AVM avm_local_bb1_st__inst0
      .avm_local_bb1_st__inst0_enable(local_avm_aspace14_enable[0][0]),
      .avm_local_bb1_st__inst0_read(local_avm_aspace14_read[0][0]),
      .avm_local_bb1_st__inst0_write(local_avm_aspace14_write[0][0]),
      .avm_local_bb1_st__inst0_burstcount(local_avm_aspace14_burstcount[0][0]),
      .avm_local_bb1_st__inst0_address(local_avm_aspace14_address[0][0]),
      .avm_local_bb1_st__inst0_writedata(local_avm_aspace14_writedata[0][0]),
      .avm_local_bb1_st__inst0_byteenable(local_avm_aspace14_byteenable[0][0]),
      .avm_local_bb1_st__inst0_waitrequest(local_avm_aspace14_waitrequest[0][0]),
      .avm_local_bb1_st__inst0_readdata(local_avm_aspace14_readdata[0][0]),
      .avm_local_bb1_st__inst0_readdatavalid(local_avm_aspace14_readdatavalid[0][0]),
      .avm_local_bb1_st__inst0_writeack(local_avm_aspace14_writeack[0][0]),
      // AVM avm_local_bb2_ld__pre256_inst0
      .avm_local_bb2_ld__pre256_inst0_enable(local_avm_aspace14_enable[0][1]),
      .avm_local_bb2_ld__pre256_inst0_read(local_avm_aspace14_read[0][1]),
      .avm_local_bb2_ld__pre256_inst0_write(local_avm_aspace14_write[0][1]),
      .avm_local_bb2_ld__pre256_inst0_burstcount(local_avm_aspace14_burstcount[0][1]),
      .avm_local_bb2_ld__pre256_inst0_address(local_avm_aspace14_address[0][1]),
      .avm_local_bb2_ld__pre256_inst0_writedata(local_avm_aspace14_writedata[0][1]),
      .avm_local_bb2_ld__pre256_inst0_byteenable(local_avm_aspace14_byteenable[0][1]),
      .avm_local_bb2_ld__pre256_inst0_waitrequest(local_avm_aspace14_waitrequest[0][1]),
      .avm_local_bb2_ld__pre256_inst0_readdata(local_avm_aspace14_readdata[0][1]),
      .avm_local_bb2_ld__pre256_inst0_readdatavalid(local_avm_aspace14_readdatavalid[0][1]),
      .avm_local_bb2_ld__pre256_inst0_writeack(local_avm_aspace14_writeack[0][1]),
      // AVM avm_local_bb3_st__inst0
      .avm_local_bb3_st__inst0_enable(local_avm_aspace14_enable[0][2]),
      .avm_local_bb3_st__inst0_read(local_avm_aspace14_read[0][2]),
      .avm_local_bb3_st__inst0_write(local_avm_aspace14_write[0][2]),
      .avm_local_bb3_st__inst0_burstcount(local_avm_aspace14_burstcount[0][2]),
      .avm_local_bb3_st__inst0_address(local_avm_aspace14_address[0][2]),
      .avm_local_bb3_st__inst0_writedata(local_avm_aspace14_writedata[0][2]),
      .avm_local_bb3_st__inst0_byteenable(local_avm_aspace14_byteenable[0][2]),
      .avm_local_bb3_st__inst0_waitrequest(local_avm_aspace14_waitrequest[0][2]),
      .avm_local_bb3_st__inst0_readdata(local_avm_aspace14_readdata[0][2]),
      .avm_local_bb3_st__inst0_readdatavalid(local_avm_aspace14_readdatavalid[0][2]),
      .avm_local_bb3_st__inst0_writeack(local_avm_aspace14_writeack[0][2]),
      // AVM avm_local_bb4_ld__u0_inst0
      .avm_local_bb4_ld__u0_inst0_enable(local_avm_aspace14_enable[0][3]),
      .avm_local_bb4_ld__u0_inst0_read(local_avm_aspace14_read[0][3]),
      .avm_local_bb4_ld__u0_inst0_write(local_avm_aspace14_write[0][3]),
      .avm_local_bb4_ld__u0_inst0_burstcount(local_avm_aspace14_burstcount[0][3]),
      .avm_local_bb4_ld__u0_inst0_address(local_avm_aspace14_address[0][3]),
      .avm_local_bb4_ld__u0_inst0_writedata(local_avm_aspace14_writedata[0][3]),
      .avm_local_bb4_ld__u0_inst0_byteenable(local_avm_aspace14_byteenable[0][3]),
      .avm_local_bb4_ld__u0_inst0_waitrequest(local_avm_aspace14_waitrequest[0][3]),
      .avm_local_bb4_ld__u0_inst0_readdata(local_avm_aspace14_readdata[0][3]),
      .avm_local_bb4_ld__u0_inst0_readdatavalid(local_avm_aspace14_readdatavalid[0][3]),
      .avm_local_bb4_ld__u0_inst0_writeack(local_avm_aspace14_writeack[0][3]),
      // AVM avm_local_bb5_ld__inst0
      .avm_local_bb5_ld__inst0_enable(local_avm_aspace14_enable[0][4]),
      .avm_local_bb5_ld__inst0_read(local_avm_aspace14_read[0][4]),
      .avm_local_bb5_ld__inst0_write(local_avm_aspace14_write[0][4]),
      .avm_local_bb5_ld__inst0_burstcount(local_avm_aspace14_burstcount[0][4]),
      .avm_local_bb5_ld__inst0_address(local_avm_aspace14_address[0][4]),
      .avm_local_bb5_ld__inst0_writedata(local_avm_aspace14_writedata[0][4]),
      .avm_local_bb5_ld__inst0_byteenable(local_avm_aspace14_byteenable[0][4]),
      .avm_local_bb5_ld__inst0_waitrequest(local_avm_aspace14_waitrequest[0][4]),
      .avm_local_bb5_ld__inst0_readdata(local_avm_aspace14_readdata[0][4]),
      .avm_local_bb5_ld__inst0_readdatavalid(local_avm_aspace14_readdatavalid[0][4]),
      .avm_local_bb5_ld__inst0_writeack(local_avm_aspace14_writeack[0][4]),
      // AVM avm_local_bb1_st_c0_ene3_inst0
      .avm_local_bb1_st_c0_ene3_inst0_enable(local_avm_aspace15_enable[0][0]),
      .avm_local_bb1_st_c0_ene3_inst0_read(local_avm_aspace15_read[0][0]),
      .avm_local_bb1_st_c0_ene3_inst0_write(local_avm_aspace15_write[0][0]),
      .avm_local_bb1_st_c0_ene3_inst0_burstcount(local_avm_aspace15_burstcount[0][0]),
      .avm_local_bb1_st_c0_ene3_inst0_address(local_avm_aspace15_address[0][0]),
      .avm_local_bb1_st_c0_ene3_inst0_writedata(local_avm_aspace15_writedata[0][0]),
      .avm_local_bb1_st_c0_ene3_inst0_byteenable(local_avm_aspace15_byteenable[0][0]),
      .avm_local_bb1_st_c0_ene3_inst0_waitrequest(local_avm_aspace15_waitrequest[0][0]),
      .avm_local_bb1_st_c0_ene3_inst0_readdata(local_avm_aspace15_readdata[0][0]),
      .avm_local_bb1_st_c0_ene3_inst0_readdatavalid(local_avm_aspace15_readdatavalid[0][0]),
      .avm_local_bb1_st_c0_ene3_inst0_writeack(local_avm_aspace15_writeack[0][0]),
      // AVM avm_local_bb3_st_entity_counter_0_i237_inst0
      .avm_local_bb3_st_entity_counter_0_i237_inst0_enable(local_avm_aspace15_enable[0][1]),
      .avm_local_bb3_st_entity_counter_0_i237_inst0_read(local_avm_aspace15_read[0][1]),
      .avm_local_bb3_st_entity_counter_0_i237_inst0_write(local_avm_aspace15_write[0][1]),
      .avm_local_bb3_st_entity_counter_0_i237_inst0_burstcount(local_avm_aspace15_burstcount[0][1]),
      .avm_local_bb3_st_entity_counter_0_i237_inst0_address(local_avm_aspace15_address[0][1]),
      .avm_local_bb3_st_entity_counter_0_i237_inst0_writedata(local_avm_aspace15_writedata[0][1]),
      .avm_local_bb3_st_entity_counter_0_i237_inst0_byteenable(local_avm_aspace15_byteenable[0][1]),
      .avm_local_bb3_st_entity_counter_0_i237_inst0_waitrequest(local_avm_aspace15_waitrequest[0][1]),
      .avm_local_bb3_st_entity_counter_0_i237_inst0_readdata(local_avm_aspace15_readdata[0][1]),
      .avm_local_bb3_st_entity_counter_0_i237_inst0_readdatavalid(local_avm_aspace15_readdatavalid[0][1]),
      .avm_local_bb3_st_entity_counter_0_i237_inst0_writeack(local_avm_aspace15_writeack[0][1]),
      // AVM avm_local_bb4_ld__inst0
      .avm_local_bb4_ld__inst0_enable(local_avm_aspace15_enable[0][2]),
      .avm_local_bb4_ld__inst0_read(local_avm_aspace15_read[0][2]),
      .avm_local_bb4_ld__inst0_write(local_avm_aspace15_write[0][2]),
      .avm_local_bb4_ld__inst0_burstcount(local_avm_aspace15_burstcount[0][2]),
      .avm_local_bb4_ld__inst0_address(local_avm_aspace15_address[0][2]),
      .avm_local_bb4_ld__inst0_writedata(local_avm_aspace15_writedata[0][2]),
      .avm_local_bb4_ld__inst0_byteenable(local_avm_aspace15_byteenable[0][2]),
      .avm_local_bb4_ld__inst0_waitrequest(local_avm_aspace15_waitrequest[0][2]),
      .avm_local_bb4_ld__inst0_readdata(local_avm_aspace15_readdata[0][2]),
      .avm_local_bb4_ld__inst0_readdatavalid(local_avm_aspace15_readdatavalid[0][2]),
      .avm_local_bb4_ld__inst0_writeack(local_avm_aspace15_writeack[0][2]),
      // AVM avm_local_bb5_ld__u1_inst0
      .avm_local_bb5_ld__u1_inst0_enable(local_avm_aspace15_enable[0][3]),
      .avm_local_bb5_ld__u1_inst0_read(local_avm_aspace15_read[0][3]),
      .avm_local_bb5_ld__u1_inst0_write(local_avm_aspace15_write[0][3]),
      .avm_local_bb5_ld__u1_inst0_burstcount(local_avm_aspace15_burstcount[0][3]),
      .avm_local_bb5_ld__u1_inst0_address(local_avm_aspace15_address[0][3]),
      .avm_local_bb5_ld__u1_inst0_writedata(local_avm_aspace15_writedata[0][3]),
      .avm_local_bb5_ld__u1_inst0_byteenable(local_avm_aspace15_byteenable[0][3]),
      .avm_local_bb5_ld__u1_inst0_waitrequest(local_avm_aspace15_waitrequest[0][3]),
      .avm_local_bb5_ld__u1_inst0_readdata(local_avm_aspace15_readdata[0][3]),
      .avm_local_bb5_ld__u1_inst0_readdatavalid(local_avm_aspace15_readdatavalid[0][3]),
      .avm_local_bb5_ld__u1_inst0_writeack(local_avm_aspace15_writeack[0][3]),
      // AVM avm_local_bb4_st__inst0
      .avm_local_bb4_st__inst0_enable(local_avm_aspace16_enable[0][0]),
      .avm_local_bb4_st__inst0_read(local_avm_aspace16_read[0][0]),
      .avm_local_bb4_st__inst0_write(local_avm_aspace16_write[0][0]),
      .avm_local_bb4_st__inst0_burstcount(local_avm_aspace16_burstcount[0][0]),
      .avm_local_bb4_st__inst0_address(local_avm_aspace16_address[0][0]),
      .avm_local_bb4_st__inst0_writedata(local_avm_aspace16_writedata[0][0]),
      .avm_local_bb4_st__inst0_byteenable(local_avm_aspace16_byteenable[0][0]),
      .avm_local_bb4_st__inst0_waitrequest(local_avm_aspace16_waitrequest[0][0]),
      .avm_local_bb4_st__inst0_readdata(local_avm_aspace16_readdata[0][0]),
      .avm_local_bb4_st__inst0_readdatavalid(local_avm_aspace16_readdatavalid[0][0]),
      .avm_local_bb4_st__inst0_writeack(local_avm_aspace16_writeack[0][0]),
      // AVM avm_local_bb5_st__inst0
      .avm_local_bb5_st__inst0_enable(local_avm_aspace16_enable[0][1]),
      .avm_local_bb5_st__inst0_read(local_avm_aspace16_read[0][1]),
      .avm_local_bb5_st__inst0_write(local_avm_aspace16_write[0][1]),
      .avm_local_bb5_st__inst0_burstcount(local_avm_aspace16_burstcount[0][1]),
      .avm_local_bb5_st__inst0_address(local_avm_aspace16_address[0][1]),
      .avm_local_bb5_st__inst0_writedata(local_avm_aspace16_writedata[0][1]),
      .avm_local_bb5_st__inst0_byteenable(local_avm_aspace16_byteenable[0][1]),
      .avm_local_bb5_st__inst0_waitrequest(local_avm_aspace16_waitrequest[0][1]),
      .avm_local_bb5_st__inst0_readdata(local_avm_aspace16_readdata[0][1]),
      .avm_local_bb5_st__inst0_readdatavalid(local_avm_aspace16_readdatavalid[0][1]),
      .avm_local_bb5_st__inst0_writeack(local_avm_aspace16_writeack[0][1]),
      // AVM avm_local_bb6_ld__inst0
      .avm_local_bb6_ld__inst0_enable(local_avm_aspace16_enable[0][2]),
      .avm_local_bb6_ld__inst0_read(local_avm_aspace16_read[0][2]),
      .avm_local_bb6_ld__inst0_write(local_avm_aspace16_write[0][2]),
      .avm_local_bb6_ld__inst0_burstcount(local_avm_aspace16_burstcount[0][2]),
      .avm_local_bb6_ld__inst0_address(local_avm_aspace16_address[0][2]),
      .avm_local_bb6_ld__inst0_writedata(local_avm_aspace16_writedata[0][2]),
      .avm_local_bb6_ld__inst0_byteenable(local_avm_aspace16_byteenable[0][2]),
      .avm_local_bb6_ld__inst0_waitrequest(local_avm_aspace16_waitrequest[0][2]),
      .avm_local_bb6_ld__inst0_readdata(local_avm_aspace16_readdata[0][2]),
      .avm_local_bb6_ld__inst0_readdatavalid(local_avm_aspace16_readdatavalid[0][2]),
      .avm_local_bb6_ld__inst0_writeack(local_avm_aspace16_writeack[0][2]),
      // AVM avm_local_bb10_ld__inst0
      .avm_local_bb10_ld__inst0_enable(local_avm_aspace17_enable[0][0]),
      .avm_local_bb10_ld__inst0_read(local_avm_aspace17_read[0][0]),
      .avm_local_bb10_ld__inst0_write(local_avm_aspace17_write[0][0]),
      .avm_local_bb10_ld__inst0_burstcount(local_avm_aspace17_burstcount[0][0]),
      .avm_local_bb10_ld__inst0_address(local_avm_aspace17_address[0][0]),
      .avm_local_bb10_ld__inst0_writedata(local_avm_aspace17_writedata[0][0]),
      .avm_local_bb10_ld__inst0_byteenable(local_avm_aspace17_byteenable[0][0]),
      .avm_local_bb10_ld__inst0_waitrequest(local_avm_aspace17_waitrequest[0][0]),
      .avm_local_bb10_ld__inst0_readdata(local_avm_aspace17_readdata[0][0]),
      .avm_local_bb10_ld__inst0_readdatavalid(local_avm_aspace17_readdatavalid[0][0]),
      .avm_local_bb10_ld__inst0_writeack(local_avm_aspace17_writeack[0][0]),
      // AVM avm_local_bb8_st_c0_exe2181_inst0
      .avm_local_bb8_st_c0_exe2181_inst0_enable(local_avm_aspace17_enable[0][1]),
      .avm_local_bb8_st_c0_exe2181_inst0_read(local_avm_aspace17_read[0][1]),
      .avm_local_bb8_st_c0_exe2181_inst0_write(local_avm_aspace17_write[0][1]),
      .avm_local_bb8_st_c0_exe2181_inst0_burstcount(local_avm_aspace17_burstcount[0][1]),
      .avm_local_bb8_st_c0_exe2181_inst0_address(local_avm_aspace17_address[0][1]),
      .avm_local_bb8_st_c0_exe2181_inst0_writedata(local_avm_aspace17_writedata[0][1]),
      .avm_local_bb8_st_c0_exe2181_inst0_byteenable(local_avm_aspace17_byteenable[0][1]),
      .avm_local_bb8_st_c0_exe2181_inst0_waitrequest(local_avm_aspace17_waitrequest[0][1]),
      .avm_local_bb8_st_c0_exe2181_inst0_readdata(local_avm_aspace17_readdata[0][1]),
      .avm_local_bb8_st_c0_exe2181_inst0_readdatavalid(local_avm_aspace17_readdatavalid[0][1]),
      .avm_local_bb8_st_c0_exe2181_inst0_writeack(local_avm_aspace17_writeack[0][1]),
      // AVM avm_local_bb9_ld__u15_inst0
      .avm_local_bb9_ld__u15_inst0_enable(local_avm_aspace17_enable[0][2]),
      .avm_local_bb9_ld__u15_inst0_read(local_avm_aspace17_read[0][2]),
      .avm_local_bb9_ld__u15_inst0_write(local_avm_aspace17_write[0][2]),
      .avm_local_bb9_ld__u15_inst0_burstcount(local_avm_aspace17_burstcount[0][2]),
      .avm_local_bb9_ld__u15_inst0_address(local_avm_aspace17_address[0][2]),
      .avm_local_bb9_ld__u15_inst0_writedata(local_avm_aspace17_writedata[0][2]),
      .avm_local_bb9_ld__u15_inst0_byteenable(local_avm_aspace17_byteenable[0][2]),
      .avm_local_bb9_ld__u15_inst0_waitrequest(local_avm_aspace17_waitrequest[0][2]),
      .avm_local_bb9_ld__u15_inst0_readdata(local_avm_aspace17_readdata[0][2]),
      .avm_local_bb9_ld__u15_inst0_readdatavalid(local_avm_aspace17_readdatavalid[0][2]),
      .avm_local_bb9_ld__u15_inst0_writeack(local_avm_aspace17_writeack[0][2]),
      // AVM avm_local_bb9_ld__u7_inst0
      .avm_local_bb9_ld__u7_inst0_enable(local_avm_aspace17_enable[0][3]),
      .avm_local_bb9_ld__u7_inst0_read(local_avm_aspace17_read[0][3]),
      .avm_local_bb9_ld__u7_inst0_write(local_avm_aspace17_write[0][3]),
      .avm_local_bb9_ld__u7_inst0_burstcount(local_avm_aspace17_burstcount[0][3]),
      .avm_local_bb9_ld__u7_inst0_address(local_avm_aspace17_address[0][3]),
      .avm_local_bb9_ld__u7_inst0_writedata(local_avm_aspace17_writedata[0][3]),
      .avm_local_bb9_ld__u7_inst0_byteenable(local_avm_aspace17_byteenable[0][3]),
      .avm_local_bb9_ld__u7_inst0_waitrequest(local_avm_aspace17_waitrequest[0][3]),
      .avm_local_bb9_ld__u7_inst0_readdata(local_avm_aspace17_readdata[0][3]),
      .avm_local_bb9_ld__u7_inst0_readdatavalid(local_avm_aspace17_readdatavalid[0][3]),
      .avm_local_bb9_ld__u7_inst0_writeack(local_avm_aspace17_writeack[0][3]),
      // AVM avm_local_bb9_ld__u9_inst0
      .avm_local_bb9_ld__u9_inst0_enable(local_avm_aspace17_enable[0][4]),
      .avm_local_bb9_ld__u9_inst0_read(local_avm_aspace17_read[0][4]),
      .avm_local_bb9_ld__u9_inst0_write(local_avm_aspace17_write[0][4]),
      .avm_local_bb9_ld__u9_inst0_burstcount(local_avm_aspace17_burstcount[0][4]),
      .avm_local_bb9_ld__u9_inst0_address(local_avm_aspace17_address[0][4]),
      .avm_local_bb9_ld__u9_inst0_writedata(local_avm_aspace17_writedata[0][4]),
      .avm_local_bb9_ld__u9_inst0_byteenable(local_avm_aspace17_byteenable[0][4]),
      .avm_local_bb9_ld__u9_inst0_waitrequest(local_avm_aspace17_waitrequest[0][4]),
      .avm_local_bb9_ld__u9_inst0_readdata(local_avm_aspace17_readdata[0][4]),
      .avm_local_bb9_ld__u9_inst0_readdatavalid(local_avm_aspace17_readdatavalid[0][4]),
      .avm_local_bb9_ld__u9_inst0_writeack(local_avm_aspace17_writeack[0][4]),
      // AVM avm_local_bb10_ld__u24_inst0
      .avm_local_bb10_ld__u24_inst0_enable(local_avm_aspace18_enable[0][0]),
      .avm_local_bb10_ld__u24_inst0_read(local_avm_aspace18_read[0][0]),
      .avm_local_bb10_ld__u24_inst0_write(local_avm_aspace18_write[0][0]),
      .avm_local_bb10_ld__u24_inst0_burstcount(local_avm_aspace18_burstcount[0][0]),
      .avm_local_bb10_ld__u24_inst0_address(local_avm_aspace18_address[0][0]),
      .avm_local_bb10_ld__u24_inst0_writedata(local_avm_aspace18_writedata[0][0]),
      .avm_local_bb10_ld__u24_inst0_byteenable(local_avm_aspace18_byteenable[0][0]),
      .avm_local_bb10_ld__u24_inst0_waitrequest(local_avm_aspace18_waitrequest[0][0]),
      .avm_local_bb10_ld__u24_inst0_readdata(local_avm_aspace18_readdata[0][0]),
      .avm_local_bb10_ld__u24_inst0_readdatavalid(local_avm_aspace18_readdatavalid[0][0]),
      .avm_local_bb10_ld__u24_inst0_writeack(local_avm_aspace18_writeack[0][0]),
      // AVM avm_local_bb22_ld__u55_inst0
      .avm_local_bb22_ld__u55_inst0_enable(local_avm_aspace18_enable[0][1]),
      .avm_local_bb22_ld__u55_inst0_read(local_avm_aspace18_read[0][1]),
      .avm_local_bb22_ld__u55_inst0_write(local_avm_aspace18_write[0][1]),
      .avm_local_bb22_ld__u55_inst0_burstcount(local_avm_aspace18_burstcount[0][1]),
      .avm_local_bb22_ld__u55_inst0_address(local_avm_aspace18_address[0][1]),
      .avm_local_bb22_ld__u55_inst0_writedata(local_avm_aspace18_writedata[0][1]),
      .avm_local_bb22_ld__u55_inst0_byteenable(local_avm_aspace18_byteenable[0][1]),
      .avm_local_bb22_ld__u55_inst0_waitrequest(local_avm_aspace18_waitrequest[0][1]),
      .avm_local_bb22_ld__u55_inst0_readdata(local_avm_aspace18_readdata[0][1]),
      .avm_local_bb22_ld__u55_inst0_readdatavalid(local_avm_aspace18_readdatavalid[0][1]),
      .avm_local_bb22_ld__u55_inst0_writeack(local_avm_aspace18_writeack[0][1]),
      // AVM avm_local_bb9_ld__inst0
      .avm_local_bb9_ld__inst0_enable(local_avm_aspace18_enable[0][2]),
      .avm_local_bb9_ld__inst0_read(local_avm_aspace18_read[0][2]),
      .avm_local_bb9_ld__inst0_write(local_avm_aspace18_write[0][2]),
      .avm_local_bb9_ld__inst0_burstcount(local_avm_aspace18_burstcount[0][2]),
      .avm_local_bb9_ld__inst0_address(local_avm_aspace18_address[0][2]),
      .avm_local_bb9_ld__inst0_writedata(local_avm_aspace18_writedata[0][2]),
      .avm_local_bb9_ld__inst0_byteenable(local_avm_aspace18_byteenable[0][2]),
      .avm_local_bb9_ld__inst0_waitrequest(local_avm_aspace18_waitrequest[0][2]),
      .avm_local_bb9_ld__inst0_readdata(local_avm_aspace18_readdata[0][2]),
      .avm_local_bb9_ld__inst0_readdatavalid(local_avm_aspace18_readdatavalid[0][2]),
      .avm_local_bb9_ld__inst0_writeack(local_avm_aspace18_writeack[0][2]),
      // AVM avm_local_bb9_ld__u22_inst0
      .avm_local_bb9_ld__u22_inst0_enable(local_avm_aspace18_enable[0][3]),
      .avm_local_bb9_ld__u22_inst0_read(local_avm_aspace18_read[0][3]),
      .avm_local_bb9_ld__u22_inst0_write(local_avm_aspace18_write[0][3]),
      .avm_local_bb9_ld__u22_inst0_burstcount(local_avm_aspace18_burstcount[0][3]),
      .avm_local_bb9_ld__u22_inst0_address(local_avm_aspace18_address[0][3]),
      .avm_local_bb9_ld__u22_inst0_writedata(local_avm_aspace18_writedata[0][3]),
      .avm_local_bb9_ld__u22_inst0_byteenable(local_avm_aspace18_byteenable[0][3]),
      .avm_local_bb9_ld__u22_inst0_waitrequest(local_avm_aspace18_waitrequest[0][3]),
      .avm_local_bb9_ld__u22_inst0_readdata(local_avm_aspace18_readdata[0][3]),
      .avm_local_bb9_ld__u22_inst0_readdatavalid(local_avm_aspace18_readdatavalid[0][3]),
      .avm_local_bb9_ld__u22_inst0_writeack(local_avm_aspace18_writeack[0][3]),
      // AVM avm_local_bb9_st_c0_exe1187_inst0
      .avm_local_bb9_st_c0_exe1187_inst0_enable(local_avm_aspace18_enable[0][4]),
      .avm_local_bb9_st_c0_exe1187_inst0_read(local_avm_aspace18_read[0][4]),
      .avm_local_bb9_st_c0_exe1187_inst0_write(local_avm_aspace18_write[0][4]),
      .avm_local_bb9_st_c0_exe1187_inst0_burstcount(local_avm_aspace18_burstcount[0][4]),
      .avm_local_bb9_st_c0_exe1187_inst0_address(local_avm_aspace18_address[0][4]),
      .avm_local_bb9_st_c0_exe1187_inst0_writedata(local_avm_aspace18_writedata[0][4]),
      .avm_local_bb9_st_c0_exe1187_inst0_byteenable(local_avm_aspace18_byteenable[0][4]),
      .avm_local_bb9_st_c0_exe1187_inst0_waitrequest(local_avm_aspace18_waitrequest[0][4]),
      .avm_local_bb9_st_c0_exe1187_inst0_readdata(local_avm_aspace18_readdata[0][4]),
      .avm_local_bb9_st_c0_exe1187_inst0_readdatavalid(local_avm_aspace18_readdatavalid[0][4]),
      .avm_local_bb9_st_c0_exe1187_inst0_writeack(local_avm_aspace18_writeack[0][4]),
      // AVM avm_local_bb9_ld_memcoalesce_null_load_0_inst0
      .avm_local_bb9_ld_memcoalesce_null_load_0_inst0_enable(local_avm_aspace19_enable[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_0_inst0_read(local_avm_aspace19_read[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_0_inst0_write(local_avm_aspace19_write[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_0_inst0_burstcount(local_avm_aspace19_burstcount[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_0_inst0_address(local_avm_aspace19_address[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_0_inst0_writedata(local_avm_aspace19_writedata[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_0_inst0_byteenable(local_avm_aspace19_byteenable[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_0_inst0_waitrequest(local_avm_aspace19_waitrequest[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_0_inst0_readdata(local_avm_aspace19_readdata[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_0_inst0_readdatavalid(local_avm_aspace19_readdatavalid[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_0_inst0_writeack(local_avm_aspace19_writeack[0][0]),
      // AVM avm_local_bb9_st_conv23_inst0
      .avm_local_bb9_st_conv23_inst0_enable(local_avm_aspace19_enable[0][1]),
      .avm_local_bb9_st_conv23_inst0_read(local_avm_aspace19_read[0][1]),
      .avm_local_bb9_st_conv23_inst0_write(local_avm_aspace19_write[0][1]),
      .avm_local_bb9_st_conv23_inst0_burstcount(local_avm_aspace19_burstcount[0][1]),
      .avm_local_bb9_st_conv23_inst0_address(local_avm_aspace19_address[0][1]),
      .avm_local_bb9_st_conv23_inst0_writedata(local_avm_aspace19_writedata[0][1]),
      .avm_local_bb9_st_conv23_inst0_byteenable(local_avm_aspace19_byteenable[0][1]),
      .avm_local_bb9_st_conv23_inst0_waitrequest(local_avm_aspace19_waitrequest[0][1]),
      .avm_local_bb9_st_conv23_inst0_readdata(local_avm_aspace19_readdata[0][1]),
      .avm_local_bb9_st_conv23_inst0_readdatavalid(local_avm_aspace19_readdatavalid[0][1]),
      .avm_local_bb9_st_conv23_inst0_writeack(local_avm_aspace19_writeack[0][1]),
      // AVM avm_local_bb9_ld_memcoalesce_null_load_02_inst0
      .avm_local_bb9_ld_memcoalesce_null_load_02_inst0_enable(local_avm_aspace20_enable[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_02_inst0_read(local_avm_aspace20_read[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_02_inst0_write(local_avm_aspace20_write[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_02_inst0_burstcount(local_avm_aspace20_burstcount[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_02_inst0_address(local_avm_aspace20_address[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_02_inst0_writedata(local_avm_aspace20_writedata[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_02_inst0_byteenable(local_avm_aspace20_byteenable[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_02_inst0_waitrequest(local_avm_aspace20_waitrequest[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_02_inst0_readdata(local_avm_aspace20_readdata[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_02_inst0_readdatavalid(local_avm_aspace20_readdatavalid[0][0]),
      .avm_local_bb9_ld_memcoalesce_null_load_02_inst0_writeack(local_avm_aspace20_writeack[0][0]),
      // AVM avm_local_bb9_st__inst0
      .avm_local_bb9_st__inst0_enable(local_avm_aspace20_enable[0][1]),
      .avm_local_bb9_st__inst0_read(local_avm_aspace20_read[0][1]),
      .avm_local_bb9_st__inst0_write(local_avm_aspace20_write[0][1]),
      .avm_local_bb9_st__inst0_burstcount(local_avm_aspace20_burstcount[0][1]),
      .avm_local_bb9_st__inst0_address(local_avm_aspace20_address[0][1]),
      .avm_local_bb9_st__inst0_writedata(local_avm_aspace20_writedata[0][1]),
      .avm_local_bb9_st__inst0_byteenable(local_avm_aspace20_byteenable[0][1]),
      .avm_local_bb9_st__inst0_waitrequest(local_avm_aspace20_waitrequest[0][1]),
      .avm_local_bb9_st__inst0_readdata(local_avm_aspace20_readdata[0][1]),
      .avm_local_bb9_st__inst0_readdatavalid(local_avm_aspace20_readdatavalid[0][1]),
      .avm_local_bb9_st__inst0_writeack(local_avm_aspace20_writeack[0][1]),
      // AVM avm_local_bb10_ld_memcoalesce_null_load_06_inst0
      .avm_local_bb10_ld_memcoalesce_null_load_06_inst0_enable(local_avm_aspace21_enable[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_06_inst0_read(local_avm_aspace21_read[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_06_inst0_write(local_avm_aspace21_write[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_06_inst0_burstcount(local_avm_aspace21_burstcount[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_06_inst0_address(local_avm_aspace21_address[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_06_inst0_writedata(local_avm_aspace21_writedata[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_06_inst0_byteenable(local_avm_aspace21_byteenable[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_06_inst0_waitrequest(local_avm_aspace21_waitrequest[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_06_inst0_readdata(local_avm_aspace21_readdata[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_06_inst0_readdatavalid(local_avm_aspace21_readdatavalid[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_06_inst0_writeack(local_avm_aspace21_writeack[0][0]),
      // AVM avm_local_bb9_ld__u23_inst0
      .avm_local_bb9_ld__u23_inst0_enable(local_avm_aspace21_enable[0][1]),
      .avm_local_bb9_ld__u23_inst0_read(local_avm_aspace21_read[0][1]),
      .avm_local_bb9_ld__u23_inst0_write(local_avm_aspace21_write[0][1]),
      .avm_local_bb9_ld__u23_inst0_burstcount(local_avm_aspace21_burstcount[0][1]),
      .avm_local_bb9_ld__u23_inst0_address(local_avm_aspace21_address[0][1]),
      .avm_local_bb9_ld__u23_inst0_writedata(local_avm_aspace21_writedata[0][1]),
      .avm_local_bb9_ld__u23_inst0_byteenable(local_avm_aspace21_byteenable[0][1]),
      .avm_local_bb9_ld__u23_inst0_waitrequest(local_avm_aspace21_waitrequest[0][1]),
      .avm_local_bb9_ld__u23_inst0_readdata(local_avm_aspace21_readdata[0][1]),
      .avm_local_bb9_ld__u23_inst0_readdatavalid(local_avm_aspace21_readdatavalid[0][1]),
      .avm_local_bb9_ld__u23_inst0_writeack(local_avm_aspace21_writeack[0][1]),
      // AVM avm_local_bb9_st__319_inst0
      .avm_local_bb9_st__319_inst0_enable(local_avm_aspace21_enable[0][2]),
      .avm_local_bb9_st__319_inst0_read(local_avm_aspace21_read[0][2]),
      .avm_local_bb9_st__319_inst0_write(local_avm_aspace21_write[0][2]),
      .avm_local_bb9_st__319_inst0_burstcount(local_avm_aspace21_burstcount[0][2]),
      .avm_local_bb9_st__319_inst0_address(local_avm_aspace21_address[0][2]),
      .avm_local_bb9_st__319_inst0_writedata(local_avm_aspace21_writedata[0][2]),
      .avm_local_bb9_st__319_inst0_byteenable(local_avm_aspace21_byteenable[0][2]),
      .avm_local_bb9_st__319_inst0_waitrequest(local_avm_aspace21_waitrequest[0][2]),
      .avm_local_bb9_st__319_inst0_readdata(local_avm_aspace21_readdata[0][2]),
      .avm_local_bb9_st__319_inst0_readdatavalid(local_avm_aspace21_readdatavalid[0][2]),
      .avm_local_bb9_st__319_inst0_writeack(local_avm_aspace21_writeack[0][2]),
      // AVM avm_local_bb9_st_memcoalesce_null_extrValue_0_inst0
      .avm_local_bb9_st_memcoalesce_null_extrValue_0_inst0_enable(local_avm_aspace21_enable[0][3]),
      .avm_local_bb9_st_memcoalesce_null_extrValue_0_inst0_read(local_avm_aspace21_read[0][3]),
      .avm_local_bb9_st_memcoalesce_null_extrValue_0_inst0_write(local_avm_aspace21_write[0][3]),
      .avm_local_bb9_st_memcoalesce_null_extrValue_0_inst0_burstcount(local_avm_aspace21_burstcount[0][3]),
      .avm_local_bb9_st_memcoalesce_null_extrValue_0_inst0_address(local_avm_aspace21_address[0][3]),
      .avm_local_bb9_st_memcoalesce_null_extrValue_0_inst0_writedata(local_avm_aspace21_writedata[0][3]),
      .avm_local_bb9_st_memcoalesce_null_extrValue_0_inst0_byteenable(local_avm_aspace21_byteenable[0][3]),
      .avm_local_bb9_st_memcoalesce_null_extrValue_0_inst0_waitrequest(local_avm_aspace21_waitrequest[0][3]),
      .avm_local_bb9_st_memcoalesce_null_extrValue_0_inst0_readdata(local_avm_aspace21_readdata[0][3]),
      .avm_local_bb9_st_memcoalesce_null_extrValue_0_inst0_readdatavalid(local_avm_aspace21_readdatavalid[0][3]),
      .avm_local_bb9_st_memcoalesce_null_extrValue_0_inst0_writeack(local_avm_aspace21_writeack[0][3]),
      // AVM avm_local_bb10_ld_memcoalesce_null_load_010_inst0
      .avm_local_bb10_ld_memcoalesce_null_load_010_inst0_enable(local_avm_aspace22_enable[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_010_inst0_read(local_avm_aspace22_read[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_010_inst0_write(local_avm_aspace22_write[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_010_inst0_burstcount(local_avm_aspace22_burstcount[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_010_inst0_address(local_avm_aspace22_address[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_010_inst0_writedata(local_avm_aspace22_writedata[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_010_inst0_byteenable(local_avm_aspace22_byteenable[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_010_inst0_waitrequest(local_avm_aspace22_waitrequest[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_010_inst0_readdata(local_avm_aspace22_readdata[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_010_inst0_readdatavalid(local_avm_aspace22_readdatavalid[0][0]),
      .avm_local_bb10_ld_memcoalesce_null_load_010_inst0_writeack(local_avm_aspace22_writeack[0][0]),
      // AVM avm_local_bb10_ld_memcoalesce_null_load_015_inst0
      .avm_local_bb10_ld_memcoalesce_null_load_015_inst0_enable(local_avm_aspace22_enable[0][1]),
      .avm_local_bb10_ld_memcoalesce_null_load_015_inst0_read(local_avm_aspace22_read[0][1]),
      .avm_local_bb10_ld_memcoalesce_null_load_015_inst0_write(local_avm_aspace22_write[0][1]),
      .avm_local_bb10_ld_memcoalesce_null_load_015_inst0_burstcount(local_avm_aspace22_burstcount[0][1]),
      .avm_local_bb10_ld_memcoalesce_null_load_015_inst0_address(local_avm_aspace22_address[0][1]),
      .avm_local_bb10_ld_memcoalesce_null_load_015_inst0_writedata(local_avm_aspace22_writedata[0][1]),
      .avm_local_bb10_ld_memcoalesce_null_load_015_inst0_byteenable(local_avm_aspace22_byteenable[0][1]),
      .avm_local_bb10_ld_memcoalesce_null_load_015_inst0_waitrequest(local_avm_aspace22_waitrequest[0][1]),
      .avm_local_bb10_ld_memcoalesce_null_load_015_inst0_readdata(local_avm_aspace22_readdata[0][1]),
      .avm_local_bb10_ld_memcoalesce_null_load_015_inst0_readdatavalid(local_avm_aspace22_readdatavalid[0][1]),
      .avm_local_bb10_ld_memcoalesce_null_load_015_inst0_writeack(local_avm_aspace22_writeack[0][1]),
      // AVM avm_local_bb10_st_conv109_inst0
      .avm_local_bb10_st_conv109_inst0_enable(local_avm_aspace22_enable[0][2]),
      .avm_local_bb10_st_conv109_inst0_read(local_avm_aspace22_read[0][2]),
      .avm_local_bb10_st_conv109_inst0_write(local_avm_aspace22_write[0][2]),
      .avm_local_bb10_st_conv109_inst0_burstcount(local_avm_aspace22_burstcount[0][2]),
      .avm_local_bb10_st_conv109_inst0_address(local_avm_aspace22_address[0][2]),
      .avm_local_bb10_st_conv109_inst0_writedata(local_avm_aspace22_writedata[0][2]),
      .avm_local_bb10_st_conv109_inst0_byteenable(local_avm_aspace22_byteenable[0][2]),
      .avm_local_bb10_st_conv109_inst0_waitrequest(local_avm_aspace22_waitrequest[0][2]),
      .avm_local_bb10_st_conv109_inst0_readdata(local_avm_aspace22_readdata[0][2]),
      .avm_local_bb10_st_conv109_inst0_readdatavalid(local_avm_aspace22_readdatavalid[0][2]),
      .avm_local_bb10_st_conv109_inst0_writeack(local_avm_aspace22_writeack[0][2]),
      // AVM avm_local_bb10_st_memcoalesce_null_insertValue_0_inst0
      .avm_local_bb10_st_memcoalesce_null_insertValue_0_inst0_enable(local_avm_aspace22_enable[0][3]),
      .avm_local_bb10_st_memcoalesce_null_insertValue_0_inst0_read(local_avm_aspace22_read[0][3]),
      .avm_local_bb10_st_memcoalesce_null_insertValue_0_inst0_write(local_avm_aspace22_write[0][3]),
      .avm_local_bb10_st_memcoalesce_null_insertValue_0_inst0_burstcount(local_avm_aspace22_burstcount[0][3]),
      .avm_local_bb10_st_memcoalesce_null_insertValue_0_inst0_address(local_avm_aspace22_address[0][3]),
      .avm_local_bb10_st_memcoalesce_null_insertValue_0_inst0_writedata(local_avm_aspace22_writedata[0][3]),
      .avm_local_bb10_st_memcoalesce_null_insertValue_0_inst0_byteenable(local_avm_aspace22_byteenable[0][3]),
      .avm_local_bb10_st_memcoalesce_null_insertValue_0_inst0_waitrequest(local_avm_aspace22_waitrequest[0][3]),
      .avm_local_bb10_st_memcoalesce_null_insertValue_0_inst0_readdata(local_avm_aspace22_readdata[0][3]),
      .avm_local_bb10_st_memcoalesce_null_insertValue_0_inst0_readdatavalid(local_avm_aspace22_readdatavalid[0][3]),
      .avm_local_bb10_st_memcoalesce_null_insertValue_0_inst0_writeack(local_avm_aspace22_writeack[0][3]),
      // AVM avm_local_bb11_st__353_inst0
      .avm_local_bb11_st__353_inst0_enable(local_avm_aspace23_enable[0][0]),
      .avm_local_bb11_st__353_inst0_read(local_avm_aspace23_read[0][0]),
      .avm_local_bb11_st__353_inst0_write(local_avm_aspace23_write[0][0]),
      .avm_local_bb11_st__353_inst0_burstcount(local_avm_aspace23_burstcount[0][0]),
      .avm_local_bb11_st__353_inst0_address(local_avm_aspace23_address[0][0]),
      .avm_local_bb11_st__353_inst0_writedata(local_avm_aspace23_writedata[0][0]),
      .avm_local_bb11_st__353_inst0_byteenable(local_avm_aspace23_byteenable[0][0]),
      .avm_local_bb11_st__353_inst0_waitrequest(local_avm_aspace23_waitrequest[0][0]),
      .avm_local_bb11_st__353_inst0_readdata(local_avm_aspace23_readdata[0][0]),
      .avm_local_bb11_st__353_inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][0]),
      .avm_local_bb11_st__353_inst0_writeack(local_avm_aspace23_writeack[0][0]),
      // AVM avm_local_bb12_st__inst0
      .avm_local_bb12_st__inst0_enable(local_avm_aspace23_enable[0][1]),
      .avm_local_bb12_st__inst0_read(local_avm_aspace23_read[0][1]),
      .avm_local_bb12_st__inst0_write(local_avm_aspace23_write[0][1]),
      .avm_local_bb12_st__inst0_burstcount(local_avm_aspace23_burstcount[0][1]),
      .avm_local_bb12_st__inst0_address(local_avm_aspace23_address[0][1]),
      .avm_local_bb12_st__inst0_writedata(local_avm_aspace23_writedata[0][1]),
      .avm_local_bb12_st__inst0_byteenable(local_avm_aspace23_byteenable[0][1]),
      .avm_local_bb12_st__inst0_waitrequest(local_avm_aspace23_waitrequest[0][1]),
      .avm_local_bb12_st__inst0_readdata(local_avm_aspace23_readdata[0][1]),
      .avm_local_bb12_st__inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][1]),
      .avm_local_bb12_st__inst0_writeack(local_avm_aspace23_writeack[0][1]),
      // AVM avm_local_bb14_ld__inst0
      .avm_local_bb14_ld__inst0_enable(local_avm_aspace23_enable[0][2]),
      .avm_local_bb14_ld__inst0_read(local_avm_aspace23_read[0][2]),
      .avm_local_bb14_ld__inst0_write(local_avm_aspace23_write[0][2]),
      .avm_local_bb14_ld__inst0_burstcount(local_avm_aspace23_burstcount[0][2]),
      .avm_local_bb14_ld__inst0_address(local_avm_aspace23_address[0][2]),
      .avm_local_bb14_ld__inst0_writedata(local_avm_aspace23_writedata[0][2]),
      .avm_local_bb14_ld__inst0_byteenable(local_avm_aspace23_byteenable[0][2]),
      .avm_local_bb14_ld__inst0_waitrequest(local_avm_aspace23_waitrequest[0][2]),
      .avm_local_bb14_ld__inst0_readdata(local_avm_aspace23_readdata[0][2]),
      .avm_local_bb14_ld__inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][2]),
      .avm_local_bb14_ld__inst0_writeack(local_avm_aspace23_writeack[0][2]),
      // AVM avm_local_bb14_st_c1_exe2_inst0
      .avm_local_bb14_st_c1_exe2_inst0_enable(local_avm_aspace23_enable[0][3]),
      .avm_local_bb14_st_c1_exe2_inst0_read(local_avm_aspace23_read[0][3]),
      .avm_local_bb14_st_c1_exe2_inst0_write(local_avm_aspace23_write[0][3]),
      .avm_local_bb14_st_c1_exe2_inst0_burstcount(local_avm_aspace23_burstcount[0][3]),
      .avm_local_bb14_st_c1_exe2_inst0_address(local_avm_aspace23_address[0][3]),
      .avm_local_bb14_st_c1_exe2_inst0_writedata(local_avm_aspace23_writedata[0][3]),
      .avm_local_bb14_st_c1_exe2_inst0_byteenable(local_avm_aspace23_byteenable[0][3]),
      .avm_local_bb14_st_c1_exe2_inst0_waitrequest(local_avm_aspace23_waitrequest[0][3]),
      .avm_local_bb14_st_c1_exe2_inst0_readdata(local_avm_aspace23_readdata[0][3]),
      .avm_local_bb14_st_c1_exe2_inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][3]),
      .avm_local_bb14_st_c1_exe2_inst0_writeack(local_avm_aspace23_writeack[0][3]),
      // AVM avm_local_bb15_ld__inst0
      .avm_local_bb15_ld__inst0_enable(local_avm_aspace23_enable[0][4]),
      .avm_local_bb15_ld__inst0_read(local_avm_aspace23_read[0][4]),
      .avm_local_bb15_ld__inst0_write(local_avm_aspace23_write[0][4]),
      .avm_local_bb15_ld__inst0_burstcount(local_avm_aspace23_burstcount[0][4]),
      .avm_local_bb15_ld__inst0_address(local_avm_aspace23_address[0][4]),
      .avm_local_bb15_ld__inst0_writedata(local_avm_aspace23_writedata[0][4]),
      .avm_local_bb15_ld__inst0_byteenable(local_avm_aspace23_byteenable[0][4]),
      .avm_local_bb15_ld__inst0_waitrequest(local_avm_aspace23_waitrequest[0][4]),
      .avm_local_bb15_ld__inst0_readdata(local_avm_aspace23_readdata[0][4]),
      .avm_local_bb15_ld__inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][4]),
      .avm_local_bb15_ld__inst0_writeack(local_avm_aspace23_writeack[0][4]),
      // AVM avm_local_bb15_st__460_inst0
      .avm_local_bb15_st__460_inst0_enable(local_avm_aspace23_enable[0][5]),
      .avm_local_bb15_st__460_inst0_read(local_avm_aspace23_read[0][5]),
      .avm_local_bb15_st__460_inst0_write(local_avm_aspace23_write[0][5]),
      .avm_local_bb15_st__460_inst0_burstcount(local_avm_aspace23_burstcount[0][5]),
      .avm_local_bb15_st__460_inst0_address(local_avm_aspace23_address[0][5]),
      .avm_local_bb15_st__460_inst0_writedata(local_avm_aspace23_writedata[0][5]),
      .avm_local_bb15_st__460_inst0_byteenable(local_avm_aspace23_byteenable[0][5]),
      .avm_local_bb15_st__460_inst0_waitrequest(local_avm_aspace23_waitrequest[0][5]),
      .avm_local_bb15_st__460_inst0_readdata(local_avm_aspace23_readdata[0][5]),
      .avm_local_bb15_st__460_inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][5]),
      .avm_local_bb15_st__460_inst0_writeack(local_avm_aspace23_writeack[0][5]),
      // AVM avm_local_bb17_st_c3_exe13_inst0
      .avm_local_bb17_st_c3_exe13_inst0_enable(local_avm_aspace23_enable[0][6]),
      .avm_local_bb17_st_c3_exe13_inst0_read(local_avm_aspace23_read[0][6]),
      .avm_local_bb17_st_c3_exe13_inst0_write(local_avm_aspace23_write[0][6]),
      .avm_local_bb17_st_c3_exe13_inst0_burstcount(local_avm_aspace23_burstcount[0][6]),
      .avm_local_bb17_st_c3_exe13_inst0_address(local_avm_aspace23_address[0][6]),
      .avm_local_bb17_st_c3_exe13_inst0_writedata(local_avm_aspace23_writedata[0][6]),
      .avm_local_bb17_st_c3_exe13_inst0_byteenable(local_avm_aspace23_byteenable[0][6]),
      .avm_local_bb17_st_c3_exe13_inst0_waitrequest(local_avm_aspace23_waitrequest[0][6]),
      .avm_local_bb17_st_c3_exe13_inst0_readdata(local_avm_aspace23_readdata[0][6]),
      .avm_local_bb17_st_c3_exe13_inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][6]),
      .avm_local_bb17_st_c3_exe13_inst0_writeack(local_avm_aspace23_writeack[0][6]),
      // AVM avm_local_bb19_ld__inst0
      .avm_local_bb19_ld__inst0_enable(local_avm_aspace23_enable[0][7]),
      .avm_local_bb19_ld__inst0_read(local_avm_aspace23_read[0][7]),
      .avm_local_bb19_ld__inst0_write(local_avm_aspace23_write[0][7]),
      .avm_local_bb19_ld__inst0_burstcount(local_avm_aspace23_burstcount[0][7]),
      .avm_local_bb19_ld__inst0_address(local_avm_aspace23_address[0][7]),
      .avm_local_bb19_ld__inst0_writedata(local_avm_aspace23_writedata[0][7]),
      .avm_local_bb19_ld__inst0_byteenable(local_avm_aspace23_byteenable[0][7]),
      .avm_local_bb19_ld__inst0_waitrequest(local_avm_aspace23_waitrequest[0][7]),
      .avm_local_bb19_ld__inst0_readdata(local_avm_aspace23_readdata[0][7]),
      .avm_local_bb19_ld__inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][7]),
      .avm_local_bb19_ld__inst0_writeack(local_avm_aspace23_writeack[0][7]),
      // AVM avm_local_bb19_ld__u50_inst0
      .avm_local_bb19_ld__u50_inst0_enable(local_avm_aspace23_enable[0][8]),
      .avm_local_bb19_ld__u50_inst0_read(local_avm_aspace23_read[0][8]),
      .avm_local_bb19_ld__u50_inst0_write(local_avm_aspace23_write[0][8]),
      .avm_local_bb19_ld__u50_inst0_burstcount(local_avm_aspace23_burstcount[0][8]),
      .avm_local_bb19_ld__u50_inst0_address(local_avm_aspace23_address[0][8]),
      .avm_local_bb19_ld__u50_inst0_writedata(local_avm_aspace23_writedata[0][8]),
      .avm_local_bb19_ld__u50_inst0_byteenable(local_avm_aspace23_byteenable[0][8]),
      .avm_local_bb19_ld__u50_inst0_waitrequest(local_avm_aspace23_waitrequest[0][8]),
      .avm_local_bb19_ld__u50_inst0_readdata(local_avm_aspace23_readdata[0][8]),
      .avm_local_bb19_ld__u50_inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][8]),
      .avm_local_bb19_ld__u50_inst0_writeack(local_avm_aspace23_writeack[0][8]),
      // AVM avm_local_bb19_ld__u51_inst0
      .avm_local_bb19_ld__u51_inst0_enable(local_avm_aspace23_enable[0][9]),
      .avm_local_bb19_ld__u51_inst0_read(local_avm_aspace23_read[0][9]),
      .avm_local_bb19_ld__u51_inst0_write(local_avm_aspace23_write[0][9]),
      .avm_local_bb19_ld__u51_inst0_burstcount(local_avm_aspace23_burstcount[0][9]),
      .avm_local_bb19_ld__u51_inst0_address(local_avm_aspace23_address[0][9]),
      .avm_local_bb19_ld__u51_inst0_writedata(local_avm_aspace23_writedata[0][9]),
      .avm_local_bb19_ld__u51_inst0_byteenable(local_avm_aspace23_byteenable[0][9]),
      .avm_local_bb19_ld__u51_inst0_waitrequest(local_avm_aspace23_waitrequest[0][9]),
      .avm_local_bb19_ld__u51_inst0_readdata(local_avm_aspace23_readdata[0][9]),
      .avm_local_bb19_ld__u51_inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][9]),
      .avm_local_bb19_ld__u51_inst0_writeack(local_avm_aspace23_writeack[0][9]),
      // AVM avm_local_bb22_ld__375_inst0
      .avm_local_bb22_ld__375_inst0_enable(local_avm_aspace23_enable[0][10]),
      .avm_local_bb22_ld__375_inst0_read(local_avm_aspace23_read[0][10]),
      .avm_local_bb22_ld__375_inst0_write(local_avm_aspace23_write[0][10]),
      .avm_local_bb22_ld__375_inst0_burstcount(local_avm_aspace23_burstcount[0][10]),
      .avm_local_bb22_ld__375_inst0_address(local_avm_aspace23_address[0][10]),
      .avm_local_bb22_ld__375_inst0_writedata(local_avm_aspace23_writedata[0][10]),
      .avm_local_bb22_ld__375_inst0_byteenable(local_avm_aspace23_byteenable[0][10]),
      .avm_local_bb22_ld__375_inst0_waitrequest(local_avm_aspace23_waitrequest[0][10]),
      .avm_local_bb22_ld__375_inst0_readdata(local_avm_aspace23_readdata[0][10]),
      .avm_local_bb22_ld__375_inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][10]),
      .avm_local_bb22_ld__375_inst0_writeack(local_avm_aspace23_writeack[0][10]),
      // AVM avm_local_bb22_ld__u57_inst0
      .avm_local_bb22_ld__u57_inst0_enable(local_avm_aspace23_enable[0][11]),
      .avm_local_bb22_ld__u57_inst0_read(local_avm_aspace23_read[0][11]),
      .avm_local_bb22_ld__u57_inst0_write(local_avm_aspace23_write[0][11]),
      .avm_local_bb22_ld__u57_inst0_burstcount(local_avm_aspace23_burstcount[0][11]),
      .avm_local_bb22_ld__u57_inst0_address(local_avm_aspace23_address[0][11]),
      .avm_local_bb22_ld__u57_inst0_writedata(local_avm_aspace23_writedata[0][11]),
      .avm_local_bb22_ld__u57_inst0_byteenable(local_avm_aspace23_byteenable[0][11]),
      .avm_local_bb22_ld__u57_inst0_waitrequest(local_avm_aspace23_waitrequest[0][11]),
      .avm_local_bb22_ld__u57_inst0_readdata(local_avm_aspace23_readdata[0][11]),
      .avm_local_bb22_ld__u57_inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][11]),
      .avm_local_bb22_ld__u57_inst0_writeack(local_avm_aspace23_writeack[0][11]),
      // AVM avm_local_bb22_ld__u58_inst0
      .avm_local_bb22_ld__u58_inst0_enable(local_avm_aspace23_enable[0][12]),
      .avm_local_bb22_ld__u58_inst0_read(local_avm_aspace23_read[0][12]),
      .avm_local_bb22_ld__u58_inst0_write(local_avm_aspace23_write[0][12]),
      .avm_local_bb22_ld__u58_inst0_burstcount(local_avm_aspace23_burstcount[0][12]),
      .avm_local_bb22_ld__u58_inst0_address(local_avm_aspace23_address[0][12]),
      .avm_local_bb22_ld__u58_inst0_writedata(local_avm_aspace23_writedata[0][12]),
      .avm_local_bb22_ld__u58_inst0_byteenable(local_avm_aspace23_byteenable[0][12]),
      .avm_local_bb22_ld__u58_inst0_waitrequest(local_avm_aspace23_waitrequest[0][12]),
      .avm_local_bb22_ld__u58_inst0_readdata(local_avm_aspace23_readdata[0][12]),
      .avm_local_bb22_ld__u58_inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][12]),
      .avm_local_bb22_ld__u58_inst0_writeack(local_avm_aspace23_writeack[0][12]),
      // AVM avm_local_bb29_ld__inst0
      .avm_local_bb29_ld__inst0_enable(local_avm_aspace23_enable[0][13]),
      .avm_local_bb29_ld__inst0_read(local_avm_aspace23_read[0][13]),
      .avm_local_bb29_ld__inst0_write(local_avm_aspace23_write[0][13]),
      .avm_local_bb29_ld__inst0_burstcount(local_avm_aspace23_burstcount[0][13]),
      .avm_local_bb29_ld__inst0_address(local_avm_aspace23_address[0][13]),
      .avm_local_bb29_ld__inst0_writedata(local_avm_aspace23_writedata[0][13]),
      .avm_local_bb29_ld__inst0_byteenable(local_avm_aspace23_byteenable[0][13]),
      .avm_local_bb29_ld__inst0_waitrequest(local_avm_aspace23_waitrequest[0][13]),
      .avm_local_bb29_ld__inst0_readdata(local_avm_aspace23_readdata[0][13]),
      .avm_local_bb29_ld__inst0_readdatavalid(local_avm_aspace23_readdatavalid[0][13]),
      .avm_local_bb29_ld__inst0_writeack(local_avm_aspace23_writeack[0][13]),
      // AVM avm_local_bb19_st__inst0
      .avm_local_bb19_st__inst0_enable(local_avm_aspace24_enable[0][0]),
      .avm_local_bb19_st__inst0_read(local_avm_aspace24_read[0][0]),
      .avm_local_bb19_st__inst0_write(local_avm_aspace24_write[0][0]),
      .avm_local_bb19_st__inst0_burstcount(local_avm_aspace24_burstcount[0][0]),
      .avm_local_bb19_st__inst0_address(local_avm_aspace24_address[0][0]),
      .avm_local_bb19_st__inst0_writedata(local_avm_aspace24_writedata[0][0]),
      .avm_local_bb19_st__inst0_byteenable(local_avm_aspace24_byteenable[0][0]),
      .avm_local_bb19_st__inst0_waitrequest(local_avm_aspace24_waitrequest[0][0]),
      .avm_local_bb19_st__inst0_readdata(local_avm_aspace24_readdata[0][0]),
      .avm_local_bb19_st__inst0_readdatavalid(local_avm_aspace24_readdatavalid[0][0]),
      .avm_local_bb19_st__inst0_writeack(local_avm_aspace24_writeack[0][0]),
      // AVM avm_local_bb20_ld__inst0
      .avm_local_bb20_ld__inst0_enable(local_avm_aspace24_enable[0][1]),
      .avm_local_bb20_ld__inst0_read(local_avm_aspace24_read[0][1]),
      .avm_local_bb20_ld__inst0_write(local_avm_aspace24_write[0][1]),
      .avm_local_bb20_ld__inst0_burstcount(local_avm_aspace24_burstcount[0][1]),
      .avm_local_bb20_ld__inst0_address(local_avm_aspace24_address[0][1]),
      .avm_local_bb20_ld__inst0_writedata(local_avm_aspace24_writedata[0][1]),
      .avm_local_bb20_ld__inst0_byteenable(local_avm_aspace24_byteenable[0][1]),
      .avm_local_bb20_ld__inst0_waitrequest(local_avm_aspace24_waitrequest[0][1]),
      .avm_local_bb20_ld__inst0_readdata(local_avm_aspace24_readdata[0][1]),
      .avm_local_bb20_ld__inst0_readdatavalid(local_avm_aspace24_readdatavalid[0][1]),
      .avm_local_bb20_ld__inst0_writeack(local_avm_aspace24_writeack[0][1]),
      // AVM avm_local_bb23_st_c2_exe1377_inst0
      .avm_local_bb23_st_c2_exe1377_inst0_enable(local_avm_aspace24_enable[0][2]),
      .avm_local_bb23_st_c2_exe1377_inst0_read(local_avm_aspace24_read[0][2]),
      .avm_local_bb23_st_c2_exe1377_inst0_write(local_avm_aspace24_write[0][2]),
      .avm_local_bb23_st_c2_exe1377_inst0_burstcount(local_avm_aspace24_burstcount[0][2]),
      .avm_local_bb23_st_c2_exe1377_inst0_address(local_avm_aspace24_address[0][2]),
      .avm_local_bb23_st_c2_exe1377_inst0_writedata(local_avm_aspace24_writedata[0][2]),
      .avm_local_bb23_st_c2_exe1377_inst0_byteenable(local_avm_aspace24_byteenable[0][2]),
      .avm_local_bb23_st_c2_exe1377_inst0_waitrequest(local_avm_aspace24_waitrequest[0][2]),
      .avm_local_bb23_st_c2_exe1377_inst0_readdata(local_avm_aspace24_readdata[0][2]),
      .avm_local_bb23_st_c2_exe1377_inst0_readdatavalid(local_avm_aspace24_readdatavalid[0][2]),
      .avm_local_bb23_st_c2_exe1377_inst0_writeack(local_avm_aspace24_writeack[0][2]),
      // AVM avm_local_bb25_ld__u112_inst0
      .avm_local_bb25_ld__u112_inst0_enable(local_avm_aspace24_enable[0][3]),
      .avm_local_bb25_ld__u112_inst0_read(local_avm_aspace24_read[0][3]),
      .avm_local_bb25_ld__u112_inst0_write(local_avm_aspace24_write[0][3]),
      .avm_local_bb25_ld__u112_inst0_burstcount(local_avm_aspace24_burstcount[0][3]),
      .avm_local_bb25_ld__u112_inst0_address(local_avm_aspace24_address[0][3]),
      .avm_local_bb25_ld__u112_inst0_writedata(local_avm_aspace24_writedata[0][3]),
      .avm_local_bb25_ld__u112_inst0_byteenable(local_avm_aspace24_byteenable[0][3]),
      .avm_local_bb25_ld__u112_inst0_waitrequest(local_avm_aspace24_waitrequest[0][3]),
      .avm_local_bb25_ld__u112_inst0_readdata(local_avm_aspace24_readdata[0][3]),
      .avm_local_bb25_ld__u112_inst0_readdatavalid(local_avm_aspace24_readdatavalid[0][3]),
      .avm_local_bb25_ld__u112_inst0_writeack(local_avm_aspace24_writeack[0][3]),
      // AVM avm_local_bb25_st_c1_exe1425_inst0
      .avm_local_bb25_st_c1_exe1425_inst0_enable(local_avm_aspace24_enable[0][4]),
      .avm_local_bb25_st_c1_exe1425_inst0_read(local_avm_aspace24_read[0][4]),
      .avm_local_bb25_st_c1_exe1425_inst0_write(local_avm_aspace24_write[0][4]),
      .avm_local_bb25_st_c1_exe1425_inst0_burstcount(local_avm_aspace24_burstcount[0][4]),
      .avm_local_bb25_st_c1_exe1425_inst0_address(local_avm_aspace24_address[0][4]),
      .avm_local_bb25_st_c1_exe1425_inst0_writedata(local_avm_aspace24_writedata[0][4]),
      .avm_local_bb25_st_c1_exe1425_inst0_byteenable(local_avm_aspace24_byteenable[0][4]),
      .avm_local_bb25_st_c1_exe1425_inst0_waitrequest(local_avm_aspace24_waitrequest[0][4]),
      .avm_local_bb25_st_c1_exe1425_inst0_readdata(local_avm_aspace24_readdata[0][4]),
      .avm_local_bb25_st_c1_exe1425_inst0_readdatavalid(local_avm_aspace24_readdatavalid[0][4]),
      .avm_local_bb25_st_c1_exe1425_inst0_writeack(local_avm_aspace24_writeack[0][4]),
      // AVM avm_local_bb26_ld__inst0
      .avm_local_bb26_ld__inst0_enable(local_avm_aspace24_enable[0][5]),
      .avm_local_bb26_ld__inst0_read(local_avm_aspace24_read[0][5]),
      .avm_local_bb26_ld__inst0_write(local_avm_aspace24_write[0][5]),
      .avm_local_bb26_ld__inst0_burstcount(local_avm_aspace24_burstcount[0][5]),
      .avm_local_bb26_ld__inst0_address(local_avm_aspace24_address[0][5]),
      .avm_local_bb26_ld__inst0_writedata(local_avm_aspace24_writedata[0][5]),
      .avm_local_bb26_ld__inst0_byteenable(local_avm_aspace24_byteenable[0][5]),
      .avm_local_bb26_ld__inst0_waitrequest(local_avm_aspace24_waitrequest[0][5]),
      .avm_local_bb26_ld__inst0_readdata(local_avm_aspace24_readdata[0][5]),
      .avm_local_bb26_ld__inst0_readdatavalid(local_avm_aspace24_readdatavalid[0][5]),
      .avm_local_bb26_ld__inst0_writeack(local_avm_aspace24_writeack[0][5]),
      // AVM avm_local_bb27_ld__inst0
      .avm_local_bb27_ld__inst0_enable(local_avm_aspace24_enable[0][6]),
      .avm_local_bb27_ld__inst0_read(local_avm_aspace24_read[0][6]),
      .avm_local_bb27_ld__inst0_write(local_avm_aspace24_write[0][6]),
      .avm_local_bb27_ld__inst0_burstcount(local_avm_aspace24_burstcount[0][6]),
      .avm_local_bb27_ld__inst0_address(local_avm_aspace24_address[0][6]),
      .avm_local_bb27_ld__inst0_writedata(local_avm_aspace24_writedata[0][6]),
      .avm_local_bb27_ld__inst0_byteenable(local_avm_aspace24_byteenable[0][6]),
      .avm_local_bb27_ld__inst0_waitrequest(local_avm_aspace24_waitrequest[0][6]),
      .avm_local_bb27_ld__inst0_readdata(local_avm_aspace24_readdata[0][6]),
      .avm_local_bb27_ld__inst0_readdatavalid(local_avm_aspace24_readdatavalid[0][6]),
      .avm_local_bb27_ld__inst0_writeack(local_avm_aspace24_writeack[0][6]),
      // AVM avm_local_bb22_ld__u61_inst0
      .avm_local_bb22_ld__u61_inst0_enable(local_avm_aspace25_enable[0][0]),
      .avm_local_bb22_ld__u61_inst0_read(local_avm_aspace25_read[0][0]),
      .avm_local_bb22_ld__u61_inst0_write(local_avm_aspace25_write[0][0]),
      .avm_local_bb22_ld__u61_inst0_burstcount(local_avm_aspace25_burstcount[0][0]),
      .avm_local_bb22_ld__u61_inst0_address(local_avm_aspace25_address[0][0]),
      .avm_local_bb22_ld__u61_inst0_writedata(local_avm_aspace25_writedata[0][0]),
      .avm_local_bb22_ld__u61_inst0_byteenable(local_avm_aspace25_byteenable[0][0]),
      .avm_local_bb22_ld__u61_inst0_waitrequest(local_avm_aspace25_waitrequest[0][0]),
      .avm_local_bb22_ld__u61_inst0_readdata(local_avm_aspace25_readdata[0][0]),
      .avm_local_bb22_ld__u61_inst0_readdatavalid(local_avm_aspace25_readdatavalid[0][0]),
      .avm_local_bb22_ld__u61_inst0_writeack(local_avm_aspace25_writeack[0][0]),
      // AVM avm_local_bb22_st_add291_i_hfp_inst0
      .avm_local_bb22_st_add291_i_hfp_inst0_enable(local_avm_aspace25_enable[0][1]),
      .avm_local_bb22_st_add291_i_hfp_inst0_read(local_avm_aspace25_read[0][1]),
      .avm_local_bb22_st_add291_i_hfp_inst0_write(local_avm_aspace25_write[0][1]),
      .avm_local_bb22_st_add291_i_hfp_inst0_burstcount(local_avm_aspace25_burstcount[0][1]),
      .avm_local_bb22_st_add291_i_hfp_inst0_address(local_avm_aspace25_address[0][1]),
      .avm_local_bb22_st_add291_i_hfp_inst0_writedata(local_avm_aspace25_writedata[0][1]),
      .avm_local_bb22_st_add291_i_hfp_inst0_byteenable(local_avm_aspace25_byteenable[0][1]),
      .avm_local_bb22_st_add291_i_hfp_inst0_waitrequest(local_avm_aspace25_waitrequest[0][1]),
      .avm_local_bb22_st_add291_i_hfp_inst0_readdata(local_avm_aspace25_readdata[0][1]),
      .avm_local_bb22_st_add291_i_hfp_inst0_readdatavalid(local_avm_aspace25_readdatavalid[0][1]),
      .avm_local_bb22_st_add291_i_hfp_inst0_writeack(local_avm_aspace25_writeack[0][1]),
      // AVM avm_local_bb24_ld__inst0
      .avm_local_bb24_ld__inst0_enable(local_avm_aspace25_enable[0][2]),
      .avm_local_bb24_ld__inst0_read(local_avm_aspace25_read[0][2]),
      .avm_local_bb24_ld__inst0_write(local_avm_aspace25_write[0][2]),
      .avm_local_bb24_ld__inst0_burstcount(local_avm_aspace25_burstcount[0][2]),
      .avm_local_bb24_ld__inst0_address(local_avm_aspace25_address[0][2]),
      .avm_local_bb24_ld__inst0_writedata(local_avm_aspace25_writedata[0][2]),
      .avm_local_bb24_ld__inst0_byteenable(local_avm_aspace25_byteenable[0][2]),
      .avm_local_bb24_ld__inst0_waitrequest(local_avm_aspace25_waitrequest[0][2]),
      .avm_local_bb24_ld__inst0_readdata(local_avm_aspace25_readdata[0][2]),
      .avm_local_bb24_ld__inst0_readdatavalid(local_avm_aspace25_readdatavalid[0][2]),
      .avm_local_bb24_ld__inst0_writeack(local_avm_aspace25_writeack[0][2]),
      // AVM avm_local_bb25_ld__inst0
      .avm_local_bb25_ld__inst0_enable(local_avm_aspace25_enable[0][3]),
      .avm_local_bb25_ld__inst0_read(local_avm_aspace25_read[0][3]),
      .avm_local_bb25_ld__inst0_write(local_avm_aspace25_write[0][3]),
      .avm_local_bb25_ld__inst0_burstcount(local_avm_aspace25_burstcount[0][3]),
      .avm_local_bb25_ld__inst0_address(local_avm_aspace25_address[0][3]),
      .avm_local_bb25_ld__inst0_writedata(local_avm_aspace25_writedata[0][3]),
      .avm_local_bb25_ld__inst0_byteenable(local_avm_aspace25_byteenable[0][3]),
      .avm_local_bb25_ld__inst0_waitrequest(local_avm_aspace25_waitrequest[0][3]),
      .avm_local_bb25_ld__inst0_readdata(local_avm_aspace25_readdata[0][3]),
      .avm_local_bb25_ld__inst0_readdatavalid(local_avm_aspace25_readdatavalid[0][3]),
      .avm_local_bb25_ld__inst0_writeack(local_avm_aspace25_writeack[0][3]),
      // AVM avm_local_bb25_ld__u98_inst0
      .avm_local_bb25_ld__u98_inst0_enable(local_avm_aspace25_enable[0][4]),
      .avm_local_bb25_ld__u98_inst0_read(local_avm_aspace25_read[0][4]),
      .avm_local_bb25_ld__u98_inst0_write(local_avm_aspace25_write[0][4]),
      .avm_local_bb25_ld__u98_inst0_burstcount(local_avm_aspace25_burstcount[0][4]),
      .avm_local_bb25_ld__u98_inst0_address(local_avm_aspace25_address[0][4]),
      .avm_local_bb25_ld__u98_inst0_writedata(local_avm_aspace25_writedata[0][4]),
      .avm_local_bb25_ld__u98_inst0_byteenable(local_avm_aspace25_byteenable[0][4]),
      .avm_local_bb25_ld__u98_inst0_waitrequest(local_avm_aspace25_waitrequest[0][4]),
      .avm_local_bb25_ld__u98_inst0_readdata(local_avm_aspace25_readdata[0][4]),
      .avm_local_bb25_ld__u98_inst0_readdatavalid(local_avm_aspace25_readdatavalid[0][4]),
      .avm_local_bb25_ld__u98_inst0_writeack(local_avm_aspace25_writeack[0][4]),
      // AVM avm_local_bb22_ld__u60_inst0
      .avm_local_bb22_ld__u60_inst0_enable(local_avm_aspace26_enable[0][0]),
      .avm_local_bb22_ld__u60_inst0_read(local_avm_aspace26_read[0][0]),
      .avm_local_bb22_ld__u60_inst0_write(local_avm_aspace26_write[0][0]),
      .avm_local_bb22_ld__u60_inst0_burstcount(local_avm_aspace26_burstcount[0][0]),
      .avm_local_bb22_ld__u60_inst0_address(local_avm_aspace26_address[0][0]),
      .avm_local_bb22_ld__u60_inst0_writedata(local_avm_aspace26_writedata[0][0]),
      .avm_local_bb22_ld__u60_inst0_byteenable(local_avm_aspace26_byteenable[0][0]),
      .avm_local_bb22_ld__u60_inst0_waitrequest(local_avm_aspace26_waitrequest[0][0]),
      .avm_local_bb22_ld__u60_inst0_readdata(local_avm_aspace26_readdata[0][0]),
      .avm_local_bb22_ld__u60_inst0_readdatavalid(local_avm_aspace26_readdatavalid[0][0]),
      .avm_local_bb22_ld__u60_inst0_writeack(local_avm_aspace26_writeack[0][0]),
      // AVM avm_local_bb22_st_add296_i_hfp_inst0
      .avm_local_bb22_st_add296_i_hfp_inst0_enable(local_avm_aspace26_enable[0][1]),
      .avm_local_bb22_st_add296_i_hfp_inst0_read(local_avm_aspace26_read[0][1]),
      .avm_local_bb22_st_add296_i_hfp_inst0_write(local_avm_aspace26_write[0][1]),
      .avm_local_bb22_st_add296_i_hfp_inst0_burstcount(local_avm_aspace26_burstcount[0][1]),
      .avm_local_bb22_st_add296_i_hfp_inst0_address(local_avm_aspace26_address[0][1]),
      .avm_local_bb22_st_add296_i_hfp_inst0_writedata(local_avm_aspace26_writedata[0][1]),
      .avm_local_bb22_st_add296_i_hfp_inst0_byteenable(local_avm_aspace26_byteenable[0][1]),
      .avm_local_bb22_st_add296_i_hfp_inst0_waitrequest(local_avm_aspace26_waitrequest[0][1]),
      .avm_local_bb22_st_add296_i_hfp_inst0_readdata(local_avm_aspace26_readdata[0][1]),
      .avm_local_bb22_st_add296_i_hfp_inst0_readdatavalid(local_avm_aspace26_readdatavalid[0][1]),
      .avm_local_bb22_st_add296_i_hfp_inst0_writeack(local_avm_aspace26_writeack[0][1]),
      // AVM avm_local_bb24_ld__u67_inst0
      .avm_local_bb24_ld__u67_inst0_enable(local_avm_aspace26_enable[0][2]),
      .avm_local_bb24_ld__u67_inst0_read(local_avm_aspace26_read[0][2]),
      .avm_local_bb24_ld__u67_inst0_write(local_avm_aspace26_write[0][2]),
      .avm_local_bb24_ld__u67_inst0_burstcount(local_avm_aspace26_burstcount[0][2]),
      .avm_local_bb24_ld__u67_inst0_address(local_avm_aspace26_address[0][2]),
      .avm_local_bb24_ld__u67_inst0_writedata(local_avm_aspace26_writedata[0][2]),
      .avm_local_bb24_ld__u67_inst0_byteenable(local_avm_aspace26_byteenable[0][2]),
      .avm_local_bb24_ld__u67_inst0_waitrequest(local_avm_aspace26_waitrequest[0][2]),
      .avm_local_bb24_ld__u67_inst0_readdata(local_avm_aspace26_readdata[0][2]),
      .avm_local_bb24_ld__u67_inst0_readdatavalid(local_avm_aspace26_readdatavalid[0][2]),
      .avm_local_bb24_ld__u67_inst0_writeack(local_avm_aspace26_writeack[0][2]),
      // AVM avm_local_bb25_ld__u96_inst0
      .avm_local_bb25_ld__u96_inst0_enable(local_avm_aspace26_enable[0][3]),
      .avm_local_bb25_ld__u96_inst0_read(local_avm_aspace26_read[0][3]),
      .avm_local_bb25_ld__u96_inst0_write(local_avm_aspace26_write[0][3]),
      .avm_local_bb25_ld__u96_inst0_burstcount(local_avm_aspace26_burstcount[0][3]),
      .avm_local_bb25_ld__u96_inst0_address(local_avm_aspace26_address[0][3]),
      .avm_local_bb25_ld__u96_inst0_writedata(local_avm_aspace26_writedata[0][3]),
      .avm_local_bb25_ld__u96_inst0_byteenable(local_avm_aspace26_byteenable[0][3]),
      .avm_local_bb25_ld__u96_inst0_waitrequest(local_avm_aspace26_waitrequest[0][3]),
      .avm_local_bb25_ld__u96_inst0_readdata(local_avm_aspace26_readdata[0][3]),
      .avm_local_bb25_ld__u96_inst0_readdatavalid(local_avm_aspace26_readdatavalid[0][3]),
      .avm_local_bb25_ld__u96_inst0_writeack(local_avm_aspace26_writeack[0][3]),
      // AVM avm_local_bb25_ld__u99_inst0
      .avm_local_bb25_ld__u99_inst0_enable(local_avm_aspace26_enable[0][4]),
      .avm_local_bb25_ld__u99_inst0_read(local_avm_aspace26_read[0][4]),
      .avm_local_bb25_ld__u99_inst0_write(local_avm_aspace26_write[0][4]),
      .avm_local_bb25_ld__u99_inst0_burstcount(local_avm_aspace26_burstcount[0][4]),
      .avm_local_bb25_ld__u99_inst0_address(local_avm_aspace26_address[0][4]),
      .avm_local_bb25_ld__u99_inst0_writedata(local_avm_aspace26_writedata[0][4]),
      .avm_local_bb25_ld__u99_inst0_byteenable(local_avm_aspace26_byteenable[0][4]),
      .avm_local_bb25_ld__u99_inst0_waitrequest(local_avm_aspace26_waitrequest[0][4]),
      .avm_local_bb25_ld__u99_inst0_readdata(local_avm_aspace26_readdata[0][4]),
      .avm_local_bb25_ld__u99_inst0_readdatavalid(local_avm_aspace26_readdatavalid[0][4]),
      .avm_local_bb25_ld__u99_inst0_writeack(local_avm_aspace26_writeack[0][4]),
      // AVM avm_local_bb22_ld__u59_inst0
      .avm_local_bb22_ld__u59_inst0_enable(local_avm_aspace27_enable[0][0]),
      .avm_local_bb22_ld__u59_inst0_read(local_avm_aspace27_read[0][0]),
      .avm_local_bb22_ld__u59_inst0_write(local_avm_aspace27_write[0][0]),
      .avm_local_bb22_ld__u59_inst0_burstcount(local_avm_aspace27_burstcount[0][0]),
      .avm_local_bb22_ld__u59_inst0_address(local_avm_aspace27_address[0][0]),
      .avm_local_bb22_ld__u59_inst0_writedata(local_avm_aspace27_writedata[0][0]),
      .avm_local_bb22_ld__u59_inst0_byteenable(local_avm_aspace27_byteenable[0][0]),
      .avm_local_bb22_ld__u59_inst0_waitrequest(local_avm_aspace27_waitrequest[0][0]),
      .avm_local_bb22_ld__u59_inst0_readdata(local_avm_aspace27_readdata[0][0]),
      .avm_local_bb22_ld__u59_inst0_readdatavalid(local_avm_aspace27_readdatavalid[0][0]),
      .avm_local_bb22_ld__u59_inst0_writeack(local_avm_aspace27_writeack[0][0]),
      // AVM avm_local_bb22_st_add301_i_hfp_inst0
      .avm_local_bb22_st_add301_i_hfp_inst0_enable(local_avm_aspace27_enable[0][1]),
      .avm_local_bb22_st_add301_i_hfp_inst0_read(local_avm_aspace27_read[0][1]),
      .avm_local_bb22_st_add301_i_hfp_inst0_write(local_avm_aspace27_write[0][1]),
      .avm_local_bb22_st_add301_i_hfp_inst0_burstcount(local_avm_aspace27_burstcount[0][1]),
      .avm_local_bb22_st_add301_i_hfp_inst0_address(local_avm_aspace27_address[0][1]),
      .avm_local_bb22_st_add301_i_hfp_inst0_writedata(local_avm_aspace27_writedata[0][1]),
      .avm_local_bb22_st_add301_i_hfp_inst0_byteenable(local_avm_aspace27_byteenable[0][1]),
      .avm_local_bb22_st_add301_i_hfp_inst0_waitrequest(local_avm_aspace27_waitrequest[0][1]),
      .avm_local_bb22_st_add301_i_hfp_inst0_readdata(local_avm_aspace27_readdata[0][1]),
      .avm_local_bb22_st_add301_i_hfp_inst0_readdatavalid(local_avm_aspace27_readdatavalid[0][1]),
      .avm_local_bb22_st_add301_i_hfp_inst0_writeack(local_avm_aspace27_writeack[0][1]),
      // AVM avm_local_bb24_ld__u68_inst0
      .avm_local_bb24_ld__u68_inst0_enable(local_avm_aspace27_enable[0][2]),
      .avm_local_bb24_ld__u68_inst0_read(local_avm_aspace27_read[0][2]),
      .avm_local_bb24_ld__u68_inst0_write(local_avm_aspace27_write[0][2]),
      .avm_local_bb24_ld__u68_inst0_burstcount(local_avm_aspace27_burstcount[0][2]),
      .avm_local_bb24_ld__u68_inst0_address(local_avm_aspace27_address[0][2]),
      .avm_local_bb24_ld__u68_inst0_writedata(local_avm_aspace27_writedata[0][2]),
      .avm_local_bb24_ld__u68_inst0_byteenable(local_avm_aspace27_byteenable[0][2]),
      .avm_local_bb24_ld__u68_inst0_waitrequest(local_avm_aspace27_waitrequest[0][2]),
      .avm_local_bb24_ld__u68_inst0_readdata(local_avm_aspace27_readdata[0][2]),
      .avm_local_bb24_ld__u68_inst0_readdatavalid(local_avm_aspace27_readdatavalid[0][2]),
      .avm_local_bb24_ld__u68_inst0_writeack(local_avm_aspace27_writeack[0][2]),
      // AVM avm_local_bb25_ld__u100_inst0
      .avm_local_bb25_ld__u100_inst0_enable(local_avm_aspace27_enable[0][3]),
      .avm_local_bb25_ld__u100_inst0_read(local_avm_aspace27_read[0][3]),
      .avm_local_bb25_ld__u100_inst0_write(local_avm_aspace27_write[0][3]),
      .avm_local_bb25_ld__u100_inst0_burstcount(local_avm_aspace27_burstcount[0][3]),
      .avm_local_bb25_ld__u100_inst0_address(local_avm_aspace27_address[0][3]),
      .avm_local_bb25_ld__u100_inst0_writedata(local_avm_aspace27_writedata[0][3]),
      .avm_local_bb25_ld__u100_inst0_byteenable(local_avm_aspace27_byteenable[0][3]),
      .avm_local_bb25_ld__u100_inst0_waitrequest(local_avm_aspace27_waitrequest[0][3]),
      .avm_local_bb25_ld__u100_inst0_readdata(local_avm_aspace27_readdata[0][3]),
      .avm_local_bb25_ld__u100_inst0_readdatavalid(local_avm_aspace27_readdatavalid[0][3]),
      .avm_local_bb25_ld__u100_inst0_writeack(local_avm_aspace27_writeack[0][3]),
      // AVM avm_local_bb25_ld__u97_inst0
      .avm_local_bb25_ld__u97_inst0_enable(local_avm_aspace27_enable[0][4]),
      .avm_local_bb25_ld__u97_inst0_read(local_avm_aspace27_read[0][4]),
      .avm_local_bb25_ld__u97_inst0_write(local_avm_aspace27_write[0][4]),
      .avm_local_bb25_ld__u97_inst0_burstcount(local_avm_aspace27_burstcount[0][4]),
      .avm_local_bb25_ld__u97_inst0_address(local_avm_aspace27_address[0][4]),
      .avm_local_bb25_ld__u97_inst0_writedata(local_avm_aspace27_writedata[0][4]),
      .avm_local_bb25_ld__u97_inst0_byteenable(local_avm_aspace27_byteenable[0][4]),
      .avm_local_bb25_ld__u97_inst0_waitrequest(local_avm_aspace27_waitrequest[0][4]),
      .avm_local_bb25_ld__u97_inst0_readdata(local_avm_aspace27_readdata[0][4]),
      .avm_local_bb25_ld__u97_inst0_readdatavalid(local_avm_aspace27_readdatavalid[0][4]),
      .avm_local_bb25_ld__u97_inst0_writeack(local_avm_aspace27_writeack[0][4])
   );

   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace14
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic [5:0] local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];
      logic invalid_access_grps;

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         logic [2:0] invalid_access_terms;

         for( __j = 0; __j < 5; __j = __j + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace14_enable[__i][__j]),
               .avm_read(local_avm_aspace14_read[__i][__j]),
               .avm_write(local_avm_aspace14_write[__i][__j]),
               .avm_burstcount(local_avm_aspace14_burstcount[__i][__j]),
               .avm_address(local_avm_aspace14_address[__i][__j]),
               .avm_writedata(local_avm_aspace14_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace14_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace14_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace14_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace14_readdatavalid[__i][__j]),
               .avm_writeack(local_avm_aspace14_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 4; __j = __j + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [3:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(16),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __j = 0; __j < 5; __j = __j + 1 )
         begin:router
            logic b_arb_request [4];
            logic b_arb_enable [4];
            logic b_arb_read [4];
            logic b_arb_write [4];
            logic b_arb_burstcount [4];
            logic [3:0] b_arb_address [4];
            logic [31:0] b_arb_writedata [4];
            logic [3:0] b_arb_byteenable [4];
            logic b_arb_stall [4];
            logic b_wrp_ack [4];
            logic b_rrp_datavalid [4];
            logic [31:0] b_rrp_data [4];
            logic [3:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(6),
               .BYTEENA_W(4),
               .NUM_BANKS(4)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__i][__j][5:4] == 2'b00);
            assign bank_select[1] = (local_icm_arb_address[__i][__j][5:4] == 2'b01);
            assign bank_select[2] = (local_icm_arb_address[__i][__j][5:4] == 2'b10);
            assign bank_select[3] = (local_icm_arb_address[__i][__j][5:4] == 2'b11);
         end

         assign invalid_access_grps = |invalid_access_terms;
         // INST acl_ic_local_mem_router_terminator_m3b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m3b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[3].b_arb_request[1]),
            .b_arb_read(router[3].b_arb_read[1]),
            .b_arb_write(router[3].b_arb_write[1]),
            .b_arb_stall(router[3].b_arb_stall[1]),
            .b_wrp_ack(router[3].b_wrp_ack[1]),
            .b_rrp_datavalid(router[3].b_rrp_datavalid[1]),
            .b_rrp_data(router[3].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[0])
         );

         // INST acl_ic_local_mem_router_terminator_m3b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m3b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[3].b_arb_request[2]),
            .b_arb_read(router[3].b_arb_read[2]),
            .b_arb_write(router[3].b_arb_write[2]),
            .b_arb_stall(router[3].b_arb_stall[2]),
            .b_wrp_ack(router[3].b_wrp_ack[2]),
            .b_rrp_datavalid(router[3].b_rrp_datavalid[2]),
            .b_rrp_data(router[3].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[1])
         );

         // INST acl_ic_local_mem_router_terminator_m3b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m3b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[3].b_arb_request[3]),
            .b_arb_read(router[3].b_arb_read[3]),
            .b_arb_write(router[3].b_arb_write[3]),
            .b_arb_stall(router[3].b_arb_stall[3]),
            .b_wrp_ack(router[3].b_wrp_ack[3]),
            .b_rrp_datavalid(router[3].b_rrp_datavalid[3]),
            .b_rrp_data(router[3].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[2])
         );

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [3:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[4].b_arb_read[0];
            assign icm_in_arb_write[1] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_12
            calc_initpop_system_interconnect_12 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_13
            calc_initpop_system_interconnect_13 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[0].b_arb_read[2];
            assign icm_in_arb_write[0] = router[0].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[0].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[2];
            assign router[0].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_13
            calc_initpop_system_interconnect_13 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[0].b_arb_read[3];
            assign icm_in_arb_write[0] = router[0].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[0].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[3];
            assign router[0].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_13
            calc_initpop_system_interconnect_13 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_14
            calc_initpop_system_interconnect_14 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_14
            calc_initpop_system_interconnect_14 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[1].b_arb_read[2];
            assign icm_in_arb_write[0] = router[1].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[1].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[2];
            assign router[1].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_14
            calc_initpop_system_interconnect_14 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[1].b_arb_read[3];
            assign icm_in_arb_write[0] = router[1].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[1].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[3];
            assign router[1].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_14
            calc_initpop_system_interconnect_14 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_15
            calc_initpop_system_interconnect_15 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_15
            calc_initpop_system_interconnect_15 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[2].b_arb_read[2];
            assign icm_in_arb_write[0] = router[2].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[2].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[2];
            assign router[2].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_15
            calc_initpop_system_interconnect_15 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[3] = icm_out_arb_enable;
            assign bank[2].port_read[3] = icm_out_arb_read;
            assign bank[2].port_write[3] = icm_out_arb_write;
            assign bank[2].port_address[3] = icm_out_arb_address;
            assign bank[2].port_writedata[3] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[3];
            assign icm_out_rrp_data = bank[2].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[2].b_arb_read[3];
            assign icm_in_arb_write[0] = router[2].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[2].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[3];
            assign router[2].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_15
            calc_initpop_system_interconnect_15 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[3] = icm_out_arb_enable;
            assign bank[3].port_read[3] = icm_out_arb_read;
            assign bank[3].port_write[3] = icm_out_arb_write;
            assign bank[3].port_address[3] = icm_out_arb_address;
            assign bank[3].port_writedata[3] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[3];
            assign icm_out_rrp_data = bank[3].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_14
            calc_initpop_system_interconnect_14 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[4].b_arb_read[1];
            assign icm_in_arb_write[0] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_16
            calc_initpop_system_interconnect_16 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[4].b_arb_read[2];
            assign icm_in_arb_write[0] = router[4].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[4].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[2];
            assign router[4].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_16
            calc_initpop_system_interconnect_16 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[4] = icm_out_arb_enable;
            assign bank[2].port_read[4] = icm_out_arb_read;
            assign bank[2].port_write[4] = icm_out_arb_write;
            assign bank[2].port_address[4] = icm_out_arb_address;
            assign bank[2].port_writedata[4] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[4];
            assign icm_out_rrp_data = bank[2].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [3:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[4].b_arb_read[3];
            assign icm_in_arb_write[0] = router[4].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[4].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[3];
            assign router[4].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_16
            calc_initpop_system_interconnect_16 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[4] = icm_out_arb_enable;
            assign bank[3].port_read[4] = icm_out_arb_read;
            assign bank[3].port_write[4] = icm_out_arb_write;
            assign bank[3].port_address[4] = icm_out_arb_address;
            assign bank[3].port_writedata[4] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[4];
            assign icm_out_rrp_data = bank[3].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[0] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace15
      logic local_icm_arb_request [1][4];
      logic local_icm_arb_enable [1][4];
      logic local_icm_arb_read [1][4];
      logic local_icm_arb_write [1][4];
      logic local_icm_arb_burstcount [1][4];
      logic [5:0] local_icm_arb_address [1][4];
      logic [31:0] local_icm_arb_writedata [1][4];
      logic [3:0] local_icm_arb_byteenable [1][4];
      logic local_icm_arb_stall [1][4];
      logic local_icm_wrp_ack [1][4];
      logic local_icm_rrp_datavalid [1][4];
      logic [31:0] local_icm_rrp_data [1][4];

      for( __j = 0; __j < 1; __j = __j + 1 )
      begin:local_mem_group
         for( __k = 0; __k < 4; __k = __k + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace15_enable[__j][__k]),
               .avm_read(local_avm_aspace15_read[__j][__k]),
               .avm_write(local_avm_aspace15_write[__j][__k]),
               .avm_burstcount(local_avm_aspace15_burstcount[__j][__k]),
               .avm_address(local_avm_aspace15_address[__j][__k]),
               .avm_writedata(local_avm_aspace15_writedata[__j][__k]),
               .avm_byteenable(local_avm_aspace15_byteenable[__j][__k]),
               .avm_waitrequest(local_avm_aspace15_waitrequest[__j][__k]),
               .avm_readdata(local_avm_aspace15_readdata[__j][__k]),
               .avm_readdatavalid(local_avm_aspace15_readdatavalid[__j][__k]),
               .avm_writeack(local_avm_aspace15_writeack[__j][__k]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__j][__k]),
               .ic_arb_enable(local_icm_arb_enable[__j][__k]),
               .ic_arb_read(local_icm_arb_read[__j][__k]),
               .ic_arb_write(local_icm_arb_write[__j][__k]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .ic_arb_address(local_icm_arb_address[__j][__k]),
               .ic_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .ic_arb_stall(local_icm_arb_stall[__j][__k]),
               .ic_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .ic_rrp_data(local_icm_rrp_data[__j][__k])
            );

         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [5:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(64),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __k = 0; __k < 4; __k = __k + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [5:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(6),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__j][__k]),
               .m_arb_enable(local_icm_arb_enable[__j][__k]),
               .m_arb_read(local_icm_arb_read[__j][__k]),
               .m_arb_write(local_icm_arb_write[__j][__k]),
               .m_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .m_arb_address(local_icm_arb_address[__j][__k]),
               .m_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .m_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .m_arb_stall(local_icm_arb_stall[__j][__k]),
               .m_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .m_rrp_data(local_icm_rrp_data[__j][__k]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_17
            calc_initpop_system_interconnect_17 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_17
            calc_initpop_system_interconnect_17 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_18
            calc_initpop_system_interconnect_18 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_18
            calc_initpop_system_interconnect_18 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace16
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic local_icm_arb_address [1][3];
      logic [31:0] local_icm_arb_writedata [1][3];
      logic [3:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [31:0] local_icm_rrp_data [1][3];

      for( __k = 0; __k < 1; __k = __k + 1 )
      begin:local_mem_group
         for( __l = 0; __l < 3; __l = __l + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace16_enable[__k][__l]),
               .avm_read(local_avm_aspace16_read[__k][__l]),
               .avm_write(local_avm_aspace16_write[__k][__l]),
               .avm_burstcount(local_avm_aspace16_burstcount[__k][__l]),
               .avm_address(local_avm_aspace16_address[__k][__l]),
               .avm_writedata(local_avm_aspace16_writedata[__k][__l]),
               .avm_byteenable(local_avm_aspace16_byteenable[__k][__l]),
               .avm_waitrequest(local_avm_aspace16_waitrequest[__k][__l]),
               .avm_readdata(local_avm_aspace16_readdata[__k][__l]),
               .avm_readdatavalid(local_avm_aspace16_readdatavalid[__k][__l]),
               .avm_writeack(local_avm_aspace16_writeack[__k][__l]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__k][__l]),
               .ic_arb_enable(local_icm_arb_enable[__k][__l]),
               .ic_arb_read(local_icm_arb_read[__k][__l]),
               .ic_arb_write(local_icm_arb_write[__k][__l]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .ic_arb_address(local_icm_arb_address[__k][__l]),
               .ic_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .ic_arb_stall(local_icm_arb_stall[__k][__l]),
               .ic_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .ic_rrp_data(local_icm_rrp_data[__k][__l])
            );

         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __l = 0; __l < 3; __l = __l + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__k][__l]),
               .m_arb_enable(local_icm_arb_enable[__k][__l]),
               .m_arb_read(local_icm_arb_read[__k][__l]),
               .m_arb_write(local_icm_arb_write[__k][__l]),
               .m_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .m_arb_address(local_icm_arb_address[__k][__l]),
               .m_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .m_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .m_arb_stall(local_icm_arb_stall[__k][__l]),
               .m_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .m_rrp_data(local_icm_rrp_data[__k][__l]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_19
            calc_initpop_system_interconnect_19 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_19
            calc_initpop_system_interconnect_19 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_20
            calc_initpop_system_interconnect_20 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank0
            assign bank[0].port_enable[4] = '0;
            assign bank[0].port_read[4] = '0;
            assign bank[0].port_write[4] = '0;
            assign bank[0].port_address[4] = '0;
            assign bank[0].port_writedata[4] = '0;
            assign bank[0].port_byteenable[4] = '0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace17
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic [4:0] local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];
      logic invalid_access_grps;

      for( __l = 0; __l < 1; __l = __l + 1 )
      begin:local_mem_group
         logic [2:0] invalid_access_terms;

         for( __m = 0; __m < 5; __m = __m + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace17_enable[__l][__m]),
               .avm_read(local_avm_aspace17_read[__l][__m]),
               .avm_write(local_avm_aspace17_write[__l][__m]),
               .avm_burstcount(local_avm_aspace17_burstcount[__l][__m]),
               .avm_address(local_avm_aspace17_address[__l][__m]),
               .avm_writedata(local_avm_aspace17_writedata[__l][__m]),
               .avm_byteenable(local_avm_aspace17_byteenable[__l][__m]),
               .avm_waitrequest(local_avm_aspace17_waitrequest[__l][__m]),
               .avm_readdata(local_avm_aspace17_readdata[__l][__m]),
               .avm_readdatavalid(local_avm_aspace17_readdatavalid[__l][__m]),
               .avm_writeack(local_avm_aspace17_writeack[__l][__m]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__l][__m]),
               .ic_arb_enable(local_icm_arb_enable[__l][__m]),
               .ic_arb_read(local_icm_arb_read[__l][__m]),
               .ic_arb_write(local_icm_arb_write[__l][__m]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .ic_arb_address(local_icm_arb_address[__l][__m]),
               .ic_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .ic_arb_stall(local_icm_arb_stall[__l][__m]),
               .ic_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .ic_rrp_data(local_icm_rrp_data[__l][__m])
            );

         end

         for( __m = 0; __m < 4; __m = __m + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [2:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(8),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __m = 0; __m < 5; __m = __m + 1 )
         begin:router
            logic b_arb_request [4];
            logic b_arb_enable [4];
            logic b_arb_read [4];
            logic b_arb_write [4];
            logic b_arb_burstcount [4];
            logic [2:0] b_arb_address [4];
            logic [31:0] b_arb_writedata [4];
            logic [3:0] b_arb_byteenable [4];
            logic b_arb_stall [4];
            logic b_wrp_ack [4];
            logic b_rrp_datavalid [4];
            logic [31:0] b_rrp_data [4];
            logic [3:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(5),
               .BYTEENA_W(4),
               .NUM_BANKS(4)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__l][__m]),
               .m_arb_enable(local_icm_arb_enable[__l][__m]),
               .m_arb_read(local_icm_arb_read[__l][__m]),
               .m_arb_write(local_icm_arb_write[__l][__m]),
               .m_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .m_arb_address(local_icm_arb_address[__l][__m]),
               .m_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .m_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .m_arb_stall(local_icm_arb_stall[__l][__m]),
               .m_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .m_rrp_data(local_icm_rrp_data[__l][__m]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__l][__m][4:3] == 2'b00);
            assign bank_select[1] = (local_icm_arb_address[__l][__m][4:3] == 2'b01);
            assign bank_select[2] = (local_icm_arb_address[__l][__m][4:3] == 2'b10);
            assign bank_select[3] = (local_icm_arb_address[__l][__m][4:3] == 2'b11);
         end

         assign invalid_access_grps = |invalid_access_terms;
         // INST acl_ic_local_mem_router_terminator_m2b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m2b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[2].b_arb_request[0]),
            .b_arb_read(router[2].b_arb_read[0]),
            .b_arb_write(router[2].b_arb_write[0]),
            .b_arb_stall(router[2].b_arb_stall[0]),
            .b_wrp_ack(router[2].b_wrp_ack[0]),
            .b_rrp_datavalid(router[2].b_rrp_datavalid[0]),
            .b_rrp_data(router[2].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[0])
         );

         // INST acl_ic_local_mem_router_terminator_m2b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m2b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[2].b_arb_request[1]),
            .b_arb_read(router[2].b_arb_read[1]),
            .b_arb_write(router[2].b_arb_write[1]),
            .b_arb_stall(router[2].b_arb_stall[1]),
            .b_wrp_ack(router[2].b_wrp_ack[1]),
            .b_rrp_datavalid(router[2].b_rrp_datavalid[1]),
            .b_rrp_data(router[2].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[1])
         );

         // INST acl_ic_local_mem_router_terminator_m2b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m2b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[2].b_arb_request[3]),
            .b_arb_read(router[2].b_arb_read[3]),
            .b_arb_write(router[2].b_arb_write[3]),
            .b_arb_stall(router[2].b_arb_stall[3]),
            .b_wrp_ack(router[2].b_wrp_ack[3]),
            .b_rrp_datavalid(router[2].b_rrp_datavalid[3]),
            .b_rrp_data(router[2].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[2])
         );

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_21
            calc_initpop_system_interconnect_21 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_21
            calc_initpop_system_interconnect_21 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [2:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[0].b_arb_read[2];
            assign icm_in_arb_write[0] = router[0].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[0].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[2];
            assign router[0].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[1].b_arb_read[2];
            assign icm_in_arb_write[1] = router[1].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[1].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[2];
            assign router[1].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_22
            calc_initpop_system_interconnect_22 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[1].b_arb_read[3];
            assign icm_in_arb_write[0] = router[1].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[1].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[3];
            assign router[1].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_21
            calc_initpop_system_interconnect_21 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_23
            calc_initpop_system_interconnect_23 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[3].b_arb_read[1];
            assign icm_in_arb_write[0] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_23
            calc_initpop_system_interconnect_23 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[3].b_arb_read[2];
            assign icm_in_arb_write[0] = router[3].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[3].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[2];
            assign router[3].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_23
            calc_initpop_system_interconnect_23 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[3].b_arb_read[3];
            assign icm_in_arb_write[0] = router[3].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[3].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[3];
            assign router[3].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_23
            calc_initpop_system_interconnect_23 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_23
            calc_initpop_system_interconnect_23 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[4].b_arb_read[1];
            assign icm_in_arb_write[0] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_23
            calc_initpop_system_interconnect_23 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port3bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[4].b_arb_read[2];
            assign icm_in_arb_write[0] = router[4].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[4].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[2];
            assign router[4].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_23
            calc_initpop_system_interconnect_23 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[3] = icm_out_arb_enable;
            assign bank[2].port_read[3] = icm_out_arb_read;
            assign bank[2].port_write[3] = icm_out_arb_write;
            assign bank[2].port_address[3] = icm_out_arb_address;
            assign bank[2].port_writedata[3] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[3];
            assign icm_out_rrp_data = bank[2].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port3bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[4].b_arb_read[3];
            assign icm_in_arb_write[0] = router[4].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[4].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[3];
            assign router[4].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_23
            calc_initpop_system_interconnect_23 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[3] = icm_out_arb_enable;
            assign bank[3].port_read[3] = icm_out_arb_read;
            assign bank[3].port_write[3] = icm_out_arb_write;
            assign bank[3].port_address[3] = icm_out_arb_address;
            assign bank[3].port_writedata[3] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[3];
            assign icm_out_rrp_data = bank[3].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_24
            calc_initpop_system_interconnect_24 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_24
            calc_initpop_system_interconnect_24 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port4bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[2].b_arb_read[2];
            assign icm_in_arb_write[0] = router[2].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[2].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[2];
            assign router[2].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_23
            calc_initpop_system_interconnect_23 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[4] = icm_out_arb_enable;
            assign bank[2].port_read[4] = icm_out_arb_read;
            assign bank[2].port_write[4] = icm_out_arb_write;
            assign bank[2].port_address[4] = icm_out_arb_address;
            assign bank[2].port_writedata[4] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[4];
            assign icm_out_rrp_data = bank[2].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port4bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [2:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [2:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[0].b_arb_read[3];
            assign icm_in_arb_write[0] = router[0].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[0].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[3];
            assign router[0].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_24
            calc_initpop_system_interconnect_24 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[4] = icm_out_arb_enable;
            assign bank[3].port_read[4] = icm_out_arb_read;
            assign bank[3].port_write[4] = icm_out_arb_write;
            assign bank[3].port_address[4] = icm_out_arb_address;
            assign bank[3].port_writedata[4] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[4];
            assign icm_out_rrp_data = bank[3].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[3] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace18
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];

      for( __m = 0; __m < 1; __m = __m + 1 )
      begin:local_mem_group
         for( __n = 0; __n < 5; __n = __n + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace18_enable[__m][__n]),
               .avm_read(local_avm_aspace18_read[__m][__n]),
               .avm_write(local_avm_aspace18_write[__m][__n]),
               .avm_burstcount(local_avm_aspace18_burstcount[__m][__n]),
               .avm_address(local_avm_aspace18_address[__m][__n]),
               .avm_writedata(local_avm_aspace18_writedata[__m][__n]),
               .avm_byteenable(local_avm_aspace18_byteenable[__m][__n]),
               .avm_waitrequest(local_avm_aspace18_waitrequest[__m][__n]),
               .avm_readdata(local_avm_aspace18_readdata[__m][__n]),
               .avm_readdatavalid(local_avm_aspace18_readdatavalid[__m][__n]),
               .avm_writeack(local_avm_aspace18_writeack[__m][__n]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__m][__n]),
               .ic_arb_enable(local_icm_arb_enable[__m][__n]),
               .ic_arb_read(local_icm_arb_read[__m][__n]),
               .ic_arb_write(local_icm_arb_write[__m][__n]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__m][__n]),
               .ic_arb_address(local_icm_arb_address[__m][__n]),
               .ic_arb_writedata(local_icm_arb_writedata[__m][__n]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__m][__n]),
               .ic_arb_stall(local_icm_arb_stall[__m][__n]),
               .ic_wrp_ack(local_icm_wrp_ack[__m][__n]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__m][__n]),
               .ic_rrp_data(local_icm_rrp_data[__m][__n])
            );

         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __n = 0; __n < 5; __n = __n + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__m][__n]),
               .m_arb_enable(local_icm_arb_enable[__m][__n]),
               .m_arb_read(local_icm_arb_read[__m][__n]),
               .m_arb_write(local_icm_arb_write[__m][__n]),
               .m_arb_burstcount(local_icm_arb_burstcount[__m][__n]),
               .m_arb_address(local_icm_arb_address[__m][__n]),
               .m_arb_writedata(local_icm_arb_writedata[__m][__n]),
               .m_arb_byteenable(local_icm_arb_byteenable[__m][__n]),
               .m_arb_stall(local_icm_arb_stall[__m][__n]),
               .m_wrp_ack(local_icm_wrp_ack[__m][__n]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__m][__n]),
               .m_rrp_data(local_icm_rrp_data[__m][__n]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[4].b_arb_read[0];
            assign icm_in_arb_write[2] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_25
            calc_initpop_system_interconnect_25 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_26
            calc_initpop_system_interconnect_26 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace19
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [1:0] local_icm_arb_address [1][2];
      logic [63:0] local_icm_arb_writedata [1][2];
      logic [7:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [63:0] local_icm_rrp_data [1][2];

      for( __n = 0; __n < 1; __n = __n + 1 )
      begin:local_mem_group
         for( __o = 0; __o < 2; __o = __o + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(64),
               .WRITEDATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(8)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace19_enable[__n][__o]),
               .avm_read(local_avm_aspace19_read[__n][__o]),
               .avm_write(local_avm_aspace19_write[__n][__o]),
               .avm_burstcount(local_avm_aspace19_burstcount[__n][__o]),
               .avm_address(local_avm_aspace19_address[__n][__o]),
               .avm_writedata(local_avm_aspace19_writedata[__n][__o]),
               .avm_byteenable(local_avm_aspace19_byteenable[__n][__o]),
               .avm_waitrequest(local_avm_aspace19_waitrequest[__n][__o]),
               .avm_readdata(local_avm_aspace19_readdata[__n][__o]),
               .avm_readdatavalid(local_avm_aspace19_readdatavalid[__n][__o]),
               .avm_writeack(local_avm_aspace19_writeack[__n][__o]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__n][__o]),
               .ic_arb_enable(local_icm_arb_enable[__n][__o]),
               .ic_arb_read(local_icm_arb_read[__n][__o]),
               .ic_arb_write(local_icm_arb_write[__n][__o]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__n][__o]),
               .ic_arb_address(local_icm_arb_address[__n][__o]),
               .ic_arb_writedata(local_icm_arb_writedata[__n][__o]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__n][__o]),
               .ic_arb_stall(local_icm_arb_stall[__n][__o]),
               .ic_wrp_ack(local_icm_wrp_ack[__n][__o]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__n][__o]),
               .ic_rrp_data(local_icm_rrp_data[__n][__o])
            );

         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [1:0] port_address [1:2];
            logic [63:0] port_writedata [1:2];
            logic [7:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [63:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(4),
               .WIDTH(64),
               .MEM_LATENCY(3),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .PREFERRED_WIDTH(320),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __o = 0; __o < 2; __o = __o + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [1:0] b_arb_address [1];
            logic [63:0] b_arb_writedata [1];
            logic [7:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [63:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(2),
               .BYTEENA_W(8),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__n][__o]),
               .m_arb_enable(local_icm_arb_enable[__n][__o]),
               .m_arb_read(local_icm_arb_read[__n][__o]),
               .m_arb_write(local_icm_arb_write[__n][__o]),
               .m_arb_burstcount(local_icm_arb_burstcount[__n][__o]),
               .m_arb_address(local_icm_arb_address[__n][__o]),
               .m_arb_writedata(local_icm_arb_writedata[__n][__o]),
               .m_arb_byteenable(local_icm_arb_byteenable[__n][__o]),
               .m_arb_stall(local_icm_arb_stall[__n][__o]),
               .m_wrp_ack(local_icm_wrp_ack[__n][__o]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__n][__o]),
               .m_rrp_data(local_icm_rrp_data[__n][__o]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [1:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [1:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_27
            calc_initpop_system_interconnect_27 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [1:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [1:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_28
            calc_initpop_system_interconnect_28 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace20
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [1:0] local_icm_arb_address [1][2];
      logic [63:0] local_icm_arb_writedata [1][2];
      logic [7:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [63:0] local_icm_rrp_data [1][2];

      for( __o = 0; __o < 1; __o = __o + 1 )
      begin:local_mem_group
         for( __p = 0; __p < 2; __p = __p + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(64),
               .WRITEDATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(8)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace20_enable[__o][__p]),
               .avm_read(local_avm_aspace20_read[__o][__p]),
               .avm_write(local_avm_aspace20_write[__o][__p]),
               .avm_burstcount(local_avm_aspace20_burstcount[__o][__p]),
               .avm_address(local_avm_aspace20_address[__o][__p]),
               .avm_writedata(local_avm_aspace20_writedata[__o][__p]),
               .avm_byteenable(local_avm_aspace20_byteenable[__o][__p]),
               .avm_waitrequest(local_avm_aspace20_waitrequest[__o][__p]),
               .avm_readdata(local_avm_aspace20_readdata[__o][__p]),
               .avm_readdatavalid(local_avm_aspace20_readdatavalid[__o][__p]),
               .avm_writeack(local_avm_aspace20_writeack[__o][__p]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__o][__p]),
               .ic_arb_enable(local_icm_arb_enable[__o][__p]),
               .ic_arb_read(local_icm_arb_read[__o][__p]),
               .ic_arb_write(local_icm_arb_write[__o][__p]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__o][__p]),
               .ic_arb_address(local_icm_arb_address[__o][__p]),
               .ic_arb_writedata(local_icm_arb_writedata[__o][__p]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__o][__p]),
               .ic_arb_stall(local_icm_arb_stall[__o][__p]),
               .ic_wrp_ack(local_icm_wrp_ack[__o][__p]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__o][__p]),
               .ic_rrp_data(local_icm_rrp_data[__o][__p])
            );

         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [1:0] port_address [1:2];
            logic [63:0] port_writedata [1:2];
            logic [7:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [63:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(4),
               .WIDTH(64),
               .MEM_LATENCY(3),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .PREFERRED_WIDTH(320),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __p = 0; __p < 2; __p = __p + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [1:0] b_arb_address [1];
            logic [63:0] b_arb_writedata [1];
            logic [7:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [63:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(2),
               .BYTEENA_W(8),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__o][__p]),
               .m_arb_enable(local_icm_arb_enable[__o][__p]),
               .m_arb_read(local_icm_arb_read[__o][__p]),
               .m_arb_write(local_icm_arb_write[__o][__p]),
               .m_arb_burstcount(local_icm_arb_burstcount[__o][__p]),
               .m_arb_address(local_icm_arb_address[__o][__p]),
               .m_arb_writedata(local_icm_arb_writedata[__o][__p]),
               .m_arb_byteenable(local_icm_arb_byteenable[__o][__p]),
               .m_arb_stall(local_icm_arb_stall[__o][__p]),
               .m_wrp_ack(local_icm_wrp_ack[__o][__p]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__o][__p]),
               .m_rrp_data(local_icm_rrp_data[__o][__p]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [1:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [1:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_27
            calc_initpop_system_interconnect_27 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [1:0] icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [1:0] icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_28
            calc_initpop_system_interconnect_28 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace21
      logic local_icm_arb_request [1][4];
      logic local_icm_arb_enable [1][4];
      logic local_icm_arb_read [1][4];
      logic local_icm_arb_write [1][4];
      logic local_icm_arb_burstcount [1][4];
      logic local_icm_arb_address [1][4];
      logic [63:0] local_icm_arb_writedata [1][4];
      logic [7:0] local_icm_arb_byteenable [1][4];
      logic local_icm_arb_stall [1][4];
      logic local_icm_wrp_ack [1][4];
      logic local_icm_rrp_datavalid [1][4];
      logic [63:0] local_icm_rrp_data [1][4];

      for( __p = 0; __p < 1; __p = __p + 1 )
      begin:local_mem_group
         for( __q = 0; __q < 4; __q = __q + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(64),
               .WRITEDATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(8)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace21_enable[__p][__q]),
               .avm_read(local_avm_aspace21_read[__p][__q]),
               .avm_write(local_avm_aspace21_write[__p][__q]),
               .avm_burstcount(local_avm_aspace21_burstcount[__p][__q]),
               .avm_address(local_avm_aspace21_address[__p][__q]),
               .avm_writedata(local_avm_aspace21_writedata[__p][__q]),
               .avm_byteenable(local_avm_aspace21_byteenable[__p][__q]),
               .avm_waitrequest(local_avm_aspace21_waitrequest[__p][__q]),
               .avm_readdata(local_avm_aspace21_readdata[__p][__q]),
               .avm_readdatavalid(local_avm_aspace21_readdatavalid[__p][__q]),
               .avm_writeack(local_avm_aspace21_writeack[__p][__q]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__p][__q]),
               .ic_arb_enable(local_icm_arb_enable[__p][__q]),
               .ic_arb_read(local_icm_arb_read[__p][__q]),
               .ic_arb_write(local_icm_arb_write[__p][__q]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__p][__q]),
               .ic_arb_address(local_icm_arb_address[__p][__q]),
               .ic_arb_writedata(local_icm_arb_writedata[__p][__q]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__p][__q]),
               .ic_arb_stall(local_icm_arb_stall[__p][__q]),
               .ic_wrp_ack(local_icm_wrp_ack[__p][__q]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__p][__q]),
               .ic_rrp_data(local_icm_rrp_data[__p][__q])
            );

         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic port_address [1:4];
            logic [63:0] port_writedata [1:4];
            logic [7:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [63:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(64),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __q = 0; __q < 4; __q = __q + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [63:0] b_arb_writedata [1];
            logic [7:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [63:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(8),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__p][__q]),
               .m_arb_enable(local_icm_arb_enable[__p][__q]),
               .m_arb_read(local_icm_arb_read[__p][__q]),
               .m_arb_write(local_icm_arb_write[__p][__q]),
               .m_arb_burstcount(local_icm_arb_burstcount[__p][__q]),
               .m_arb_address(local_icm_arb_address[__p][__q]),
               .m_arb_writedata(local_icm_arb_writedata[__p][__q]),
               .m_arb_byteenable(local_icm_arb_byteenable[__p][__q]),
               .m_arb_stall(local_icm_arb_stall[__p][__q]),
               .m_wrp_ack(local_icm_wrp_ack[__p][__q]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__p][__q]),
               .m_rrp_data(local_icm_rrp_data[__p][__q]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_29
            calc_initpop_system_interconnect_29 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_29
            calc_initpop_system_interconnect_29 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_30
            calc_initpop_system_interconnect_30 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_30
            calc_initpop_system_interconnect_30 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace22
      logic local_icm_arb_request [1][4];
      logic local_icm_arb_enable [1][4];
      logic local_icm_arb_read [1][4];
      logic local_icm_arb_write [1][4];
      logic local_icm_arb_burstcount [1][4];
      logic local_icm_arb_address [1][4];
      logic [63:0] local_icm_arb_writedata [1][4];
      logic [7:0] local_icm_arb_byteenable [1][4];
      logic local_icm_arb_stall [1][4];
      logic local_icm_wrp_ack [1][4];
      logic local_icm_rrp_datavalid [1][4];
      logic [63:0] local_icm_rrp_data [1][4];

      for( __q = 0; __q < 1; __q = __q + 1 )
      begin:local_mem_group
         for( __r = 0; __r < 4; __r = __r + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(64),
               .WRITEDATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(8)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace22_enable[__q][__r]),
               .avm_read(local_avm_aspace22_read[__q][__r]),
               .avm_write(local_avm_aspace22_write[__q][__r]),
               .avm_burstcount(local_avm_aspace22_burstcount[__q][__r]),
               .avm_address(local_avm_aspace22_address[__q][__r]),
               .avm_writedata(local_avm_aspace22_writedata[__q][__r]),
               .avm_byteenable(local_avm_aspace22_byteenable[__q][__r]),
               .avm_waitrequest(local_avm_aspace22_waitrequest[__q][__r]),
               .avm_readdata(local_avm_aspace22_readdata[__q][__r]),
               .avm_readdatavalid(local_avm_aspace22_readdatavalid[__q][__r]),
               .avm_writeack(local_avm_aspace22_writeack[__q][__r]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__q][__r]),
               .ic_arb_enable(local_icm_arb_enable[__q][__r]),
               .ic_arb_read(local_icm_arb_read[__q][__r]),
               .ic_arb_write(local_icm_arb_write[__q][__r]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__q][__r]),
               .ic_arb_address(local_icm_arb_address[__q][__r]),
               .ic_arb_writedata(local_icm_arb_writedata[__q][__r]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__q][__r]),
               .ic_arb_stall(local_icm_arb_stall[__q][__r]),
               .ic_wrp_ack(local_icm_wrp_ack[__q][__r]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__q][__r]),
               .ic_rrp_data(local_icm_rrp_data[__q][__r])
            );

         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic port_address [1:4];
            logic [63:0] port_writedata [1:4];
            logic [7:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [63:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(64),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __r = 0; __r < 4; __r = __r + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [63:0] b_arb_writedata [1];
            logic [7:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [63:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(64),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(8),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__q][__r]),
               .m_arb_enable(local_icm_arb_enable[__q][__r]),
               .m_arb_read(local_icm_arb_read[__q][__r]),
               .m_arb_write(local_icm_arb_write[__q][__r]),
               .m_arb_burstcount(local_icm_arb_burstcount[__q][__r]),
               .m_arb_address(local_icm_arb_address[__q][__r]),
               .m_arb_writedata(local_icm_arb_writedata[__q][__r]),
               .m_arb_byteenable(local_icm_arb_byteenable[__q][__r]),
               .m_arb_stall(local_icm_arb_stall[__q][__r]),
               .m_wrp_ack(local_icm_wrp_ack[__q][__r]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__q][__r]),
               .m_rrp_data(local_icm_rrp_data[__q][__r]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_29
            calc_initpop_system_interconnect_29 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_30
            calc_initpop_system_interconnect_30 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_29
            calc_initpop_system_interconnect_29 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [63:0] icm_in_arb_writedata [1];
            logic [7:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [63:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [63:0] icm_out_arb_writedata;
            logic [7:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [63:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_30
            calc_initpop_system_interconnect_30 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace23
      logic local_icm_arb_request [1][14];
      logic local_icm_arb_enable [1][14];
      logic local_icm_arb_read [1][14];
      logic local_icm_arb_write [1][14];
      logic local_icm_arb_burstcount [1][14];
      logic [6:0] local_icm_arb_address [1][14];
      logic [31:0] local_icm_arb_writedata [1][14];
      logic [3:0] local_icm_arb_byteenable [1][14];
      logic local_icm_arb_stall [1][14];
      logic local_icm_wrp_ack [1][14];
      logic local_icm_rrp_datavalid [1][14];
      logic [31:0] local_icm_rrp_data [1][14];
      logic invalid_access_grps;

      for( __r = 0; __r < 1; __r = __r + 1 )
      begin:local_mem_group
         logic [14:0] invalid_access_terms;

         for( __s = 0; __s < 14; __s = __s + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace23_enable[__r][__s]),
               .avm_read(local_avm_aspace23_read[__r][__s]),
               .avm_write(local_avm_aspace23_write[__r][__s]),
               .avm_burstcount(local_avm_aspace23_burstcount[__r][__s]),
               .avm_address(local_avm_aspace23_address[__r][__s]),
               .avm_writedata(local_avm_aspace23_writedata[__r][__s]),
               .avm_byteenable(local_avm_aspace23_byteenable[__r][__s]),
               .avm_waitrequest(local_avm_aspace23_waitrequest[__r][__s]),
               .avm_readdata(local_avm_aspace23_readdata[__r][__s]),
               .avm_readdatavalid(local_avm_aspace23_readdatavalid[__r][__s]),
               .avm_writeack(local_avm_aspace23_writeack[__r][__s]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__r][__s]),
               .ic_arb_enable(local_icm_arb_enable[__r][__s]),
               .ic_arb_read(local_icm_arb_read[__r][__s]),
               .ic_arb_write(local_icm_arb_write[__r][__s]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__r][__s]),
               .ic_arb_address(local_icm_arb_address[__r][__s]),
               .ic_arb_writedata(local_icm_arb_writedata[__r][__s]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__r][__s]),
               .ic_arb_stall(local_icm_arb_stall[__r][__s]),
               .ic_wrp_ack(local_icm_wrp_ack[__r][__s]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__r][__s]),
               .ic_rrp_data(local_icm_rrp_data[__r][__s])
            );

         end

         for( __s = 0; __s < 4; __s = __s + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [4:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(32),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __s = 0; __s < 14; __s = __s + 1 )
         begin:router
            logic b_arb_request [4];
            logic b_arb_enable [4];
            logic b_arb_read [4];
            logic b_arb_write [4];
            logic b_arb_burstcount [4];
            logic [4:0] b_arb_address [4];
            logic [31:0] b_arb_writedata [4];
            logic [3:0] b_arb_byteenable [4];
            logic b_arb_stall [4];
            logic b_wrp_ack [4];
            logic b_rrp_datavalid [4];
            logic [31:0] b_rrp_data [4];
            logic [3:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(4),
               .NUM_BANKS(4)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__r][__s]),
               .m_arb_enable(local_icm_arb_enable[__r][__s]),
               .m_arb_read(local_icm_arb_read[__r][__s]),
               .m_arb_write(local_icm_arb_write[__r][__s]),
               .m_arb_burstcount(local_icm_arb_burstcount[__r][__s]),
               .m_arb_address(local_icm_arb_address[__r][__s]),
               .m_arb_writedata(local_icm_arb_writedata[__r][__s]),
               .m_arb_byteenable(local_icm_arb_byteenable[__r][__s]),
               .m_arb_stall(local_icm_arb_stall[__r][__s]),
               .m_wrp_ack(local_icm_wrp_ack[__r][__s]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__r][__s]),
               .m_rrp_data(local_icm_rrp_data[__r][__s]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__r][__s][6:5] == 2'b00);
            assign bank_select[1] = (local_icm_arb_address[__r][__s][6:5] == 2'b01);
            assign bank_select[2] = (local_icm_arb_address[__r][__s][6:5] == 2'b10);
            assign bank_select[3] = (local_icm_arb_address[__r][__s][6:5] == 2'b11);
         end

         assign invalid_access_grps = |invalid_access_terms;
         // INST acl_ic_local_mem_router_terminator_m7b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m7b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[7].b_arb_request[0]),
            .b_arb_read(router[7].b_arb_read[0]),
            .b_arb_write(router[7].b_arb_write[0]),
            .b_arb_stall(router[7].b_arb_stall[0]),
            .b_wrp_ack(router[7].b_wrp_ack[0]),
            .b_rrp_datavalid(router[7].b_rrp_datavalid[0]),
            .b_rrp_data(router[7].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[0])
         );

         // INST acl_ic_local_mem_router_terminator_m7b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m7b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[7].b_arb_request[2]),
            .b_arb_read(router[7].b_arb_read[2]),
            .b_arb_write(router[7].b_arb_write[2]),
            .b_arb_stall(router[7].b_arb_stall[2]),
            .b_wrp_ack(router[7].b_wrp_ack[2]),
            .b_rrp_datavalid(router[7].b_rrp_datavalid[2]),
            .b_rrp_data(router[7].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[1])
         );

         // INST acl_ic_local_mem_router_terminator_m7b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m7b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[7].b_arb_request[3]),
            .b_arb_read(router[7].b_arb_read[3]),
            .b_arb_write(router[7].b_arb_write[3]),
            .b_arb_stall(router[7].b_arb_stall[3]),
            .b_wrp_ack(router[7].b_wrp_ack[3]),
            .b_rrp_datavalid(router[7].b_rrp_datavalid[3]),
            .b_rrp_data(router[7].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[2])
         );

         // INST acl_ic_local_mem_router_terminator_m8b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m8b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[8].b_arb_request[0]),
            .b_arb_read(router[8].b_arb_read[0]),
            .b_arb_write(router[8].b_arb_write[0]),
            .b_arb_stall(router[8].b_arb_stall[0]),
            .b_wrp_ack(router[8].b_wrp_ack[0]),
            .b_rrp_datavalid(router[8].b_rrp_datavalid[0]),
            .b_rrp_data(router[8].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[3])
         );

         // INST acl_ic_local_mem_router_terminator_m8b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m8b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[8].b_arb_request[1]),
            .b_arb_read(router[8].b_arb_read[1]),
            .b_arb_write(router[8].b_arb_write[1]),
            .b_arb_stall(router[8].b_arb_stall[1]),
            .b_wrp_ack(router[8].b_wrp_ack[1]),
            .b_rrp_datavalid(router[8].b_rrp_datavalid[1]),
            .b_rrp_data(router[8].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[4])
         );

         // INST acl_ic_local_mem_router_terminator_m8b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m8b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[8].b_arb_request[2]),
            .b_arb_read(router[8].b_arb_read[2]),
            .b_arb_write(router[8].b_arb_write[2]),
            .b_arb_stall(router[8].b_arb_stall[2]),
            .b_wrp_ack(router[8].b_wrp_ack[2]),
            .b_rrp_datavalid(router[8].b_rrp_datavalid[2]),
            .b_rrp_data(router[8].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[5])
         );

         // INST acl_ic_local_mem_router_terminator_m9b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m9b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[9].b_arb_request[1]),
            .b_arb_read(router[9].b_arb_read[1]),
            .b_arb_write(router[9].b_arb_write[1]),
            .b_arb_stall(router[9].b_arb_stall[1]),
            .b_wrp_ack(router[9].b_wrp_ack[1]),
            .b_rrp_datavalid(router[9].b_rrp_datavalid[1]),
            .b_rrp_data(router[9].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[6])
         );

         // INST acl_ic_local_mem_router_terminator_m9b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m9b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[9].b_arb_request[2]),
            .b_arb_read(router[9].b_arb_read[2]),
            .b_arb_write(router[9].b_arb_write[2]),
            .b_arb_stall(router[9].b_arb_stall[2]),
            .b_wrp_ack(router[9].b_wrp_ack[2]),
            .b_rrp_datavalid(router[9].b_rrp_datavalid[2]),
            .b_rrp_data(router[9].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[7])
         );

         // INST acl_ic_local_mem_router_terminator_m9b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m9b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[9].b_arb_request[3]),
            .b_arb_read(router[9].b_arb_read[3]),
            .b_arb_write(router[9].b_arb_write[3]),
            .b_arb_stall(router[9].b_arb_stall[3]),
            .b_wrp_ack(router[9].b_wrp_ack[3]),
            .b_rrp_datavalid(router[9].b_rrp_datavalid[3]),
            .b_rrp_data(router[9].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[8])
         );

         // INST acl_ic_local_mem_router_terminator_m11b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m11b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[11].b_arb_request[1]),
            .b_arb_read(router[11].b_arb_read[1]),
            .b_arb_write(router[11].b_arb_write[1]),
            .b_arb_stall(router[11].b_arb_stall[1]),
            .b_wrp_ack(router[11].b_wrp_ack[1]),
            .b_rrp_datavalid(router[11].b_rrp_datavalid[1]),
            .b_rrp_data(router[11].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[9])
         );

         // INST acl_ic_local_mem_router_terminator_m11b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m11b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[11].b_arb_request[2]),
            .b_arb_read(router[11].b_arb_read[2]),
            .b_arb_write(router[11].b_arb_write[2]),
            .b_arb_stall(router[11].b_arb_stall[2]),
            .b_wrp_ack(router[11].b_wrp_ack[2]),
            .b_rrp_datavalid(router[11].b_rrp_datavalid[2]),
            .b_rrp_data(router[11].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[10])
         );

         // INST acl_ic_local_mem_router_terminator_m11b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m11b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[11].b_arb_request[3]),
            .b_arb_read(router[11].b_arb_read[3]),
            .b_arb_write(router[11].b_arb_write[3]),
            .b_arb_stall(router[11].b_arb_stall[3]),
            .b_wrp_ack(router[11].b_wrp_ack[3]),
            .b_rrp_datavalid(router[11].b_rrp_datavalid[3]),
            .b_rrp_data(router[11].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[11])
         );

         // INST acl_ic_local_mem_router_terminator_m12b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m12b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[12].b_arb_request[0]),
            .b_arb_read(router[12].b_arb_read[0]),
            .b_arb_write(router[12].b_arb_write[0]),
            .b_arb_stall(router[12].b_arb_stall[0]),
            .b_wrp_ack(router[12].b_wrp_ack[0]),
            .b_rrp_datavalid(router[12].b_rrp_datavalid[0]),
            .b_rrp_data(router[12].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[12])
         );

         // INST acl_ic_local_mem_router_terminator_m12b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m12b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[12].b_arb_request[1]),
            .b_arb_read(router[12].b_arb_read[1]),
            .b_arb_write(router[12].b_arb_write[1]),
            .b_arb_stall(router[12].b_arb_stall[1]),
            .b_wrp_ack(router[12].b_wrp_ack[1]),
            .b_rrp_datavalid(router[12].b_rrp_datavalid[1]),
            .b_rrp_data(router[12].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[13])
         );

         // INST acl_ic_local_mem_router_terminator_m12b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m12b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[12].b_arb_request[3]),
            .b_arb_read(router[12].b_arb_read[3]),
            .b_arb_write(router[12].b_arb_write[3]),
            .b_arb_stall(router[12].b_arb_stall[3]),
            .b_wrp_ack(router[12].b_wrp_ack[3]),
            .b_rrp_datavalid(router[12].b_rrp_datavalid[3]),
            .b_rrp_data(router[12].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[14])
         );

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[4].b_arb_read[0];
            assign icm_in_arb_write[1] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[11].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[11].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[11].b_arb_read[0];
            assign icm_in_arb_write[2] = router[11].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[11].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[11].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[11].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[11].b_arb_byteenable[0];
            assign router[11].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[11].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[11].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[11].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_31
            calc_initpop_system_interconnect_31 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port1bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[4].b_arb_read[1];
            assign icm_in_arb_write[1] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[10].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[10].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[10].b_arb_read[1];
            assign icm_in_arb_write[2] = router[10].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[10].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[10].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[10].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[10].b_arb_byteenable[1];
            assign router[10].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[10].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[10].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[10].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_31
            calc_initpop_system_interconnect_31 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port1bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[0].b_arb_read[2];
            assign icm_in_arb_write[0] = router[0].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[0].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[2];
            assign router[0].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[4].b_arb_read[2];
            assign icm_in_arb_write[1] = router[4].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[4].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[2];
            assign router[4].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[10].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[10].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[10].b_arb_read[2];
            assign icm_in_arb_write[2] = router[10].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[10].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[10].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[10].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[10].b_arb_byteenable[2];
            assign router[10].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[10].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[10].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[10].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_31
            calc_initpop_system_interconnect_31 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port1bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[0].b_arb_read[3];
            assign icm_in_arb_write[0] = router[0].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[0].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[3];
            assign router[0].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[4].b_arb_read[3];
            assign icm_in_arb_write[1] = router[4].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[4].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[3];
            assign router[4].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[10].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[10].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[10].b_arb_read[3];
            assign icm_in_arb_write[2] = router[10].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[10].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[10].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[10].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[10].b_arb_byteenable[3];
            assign router[10].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[10].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[10].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[10].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_31
            calc_initpop_system_interconnect_31 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port2bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[5].b_arb_read[0];
            assign icm_in_arb_write[1] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[10].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[10].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[10].b_arb_read[0];
            assign icm_in_arb_write[2] = router[10].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[10].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[10].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[10].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[10].b_arb_byteenable[0];
            assign router[10].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[10].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[10].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[10].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_32
            calc_initpop_system_interconnect_32 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port2bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[5].b_arb_read[1];
            assign icm_in_arb_write[1] = router[5].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[5].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[1];
            assign router[5].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[13].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[13].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[13].b_arb_read[1];
            assign icm_in_arb_write[2] = router[13].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[13].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[13].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[13].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[13].b_arb_byteenable[1];
            assign router[13].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[13].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[13].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[13].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_32
            calc_initpop_system_interconnect_32 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port2bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[1].b_arb_read[2];
            assign icm_in_arb_write[0] = router[1].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[1].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[2];
            assign router[1].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[5].b_arb_read[2];
            assign icm_in_arb_write[1] = router[5].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[5].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[2];
            assign router[5].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[13].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[13].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[13].b_arb_read[2];
            assign icm_in_arb_write[2] = router[13].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[13].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[13].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[13].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[13].b_arb_byteenable[2];
            assign router[13].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[13].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[13].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[13].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_32
            calc_initpop_system_interconnect_32 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port2bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[1].b_arb_read[3];
            assign icm_in_arb_write[0] = router[1].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[1].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[3];
            assign router[1].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[5].b_arb_read[3];
            assign icm_in_arb_write[1] = router[5].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[5].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[3];
            assign router[5].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[13].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[13].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[13].b_arb_read[3];
            assign icm_in_arb_write[2] = router[13].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[13].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[13].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[13].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[13].b_arb_byteenable[3];
            assign router[13].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[13].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[13].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[13].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_32
            calc_initpop_system_interconnect_32 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port3bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[6].b_arb_read[0];
            assign icm_in_arb_write[1] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[13].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[13].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[13].b_arb_read[0];
            assign icm_in_arb_write[2] = router[13].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[13].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[13].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[13].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[13].b_arb_byteenable[0];
            assign router[13].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[13].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[13].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[13].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_33
            calc_initpop_system_interconnect_33 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port3bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[6].b_arb_read[1];
            assign icm_in_arb_write[1] = router[6].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[6].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[1];
            assign router[6].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_6
            calc_initpop_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port3bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[2].b_arb_read[2];
            assign icm_in_arb_write[0] = router[2].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[2].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[2];
            assign router[2].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[6].b_arb_read[2];
            assign icm_in_arb_write[1] = router[6].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[6].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[2];
            assign router[6].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_6
            calc_initpop_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[3] = icm_out_arb_enable;
            assign bank[2].port_read[3] = icm_out_arb_read;
            assign bank[2].port_write[3] = icm_out_arb_write;
            assign bank[2].port_address[3] = icm_out_arb_address;
            assign bank[2].port_writedata[3] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[3];
            assign icm_out_rrp_data = bank[2].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port3bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[2].b_arb_read[3];
            assign icm_in_arb_write[0] = router[2].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[2].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[3];
            assign router[2].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[6].b_arb_read[3];
            assign icm_in_arb_write[1] = router[6].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[6].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[3];
            assign router[6].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_6
            calc_initpop_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[3] = icm_out_arb_enable;
            assign bank[3].port_read[3] = icm_out_arb_read;
            assign bank[3].port_write[3] = icm_out_arb_write;
            assign bank[3].port_address[3] = icm_out_arb_address;
            assign bank[3].port_writedata[3] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[3];
            assign icm_out_rrp_data = bank[3].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port4bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[9].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[9].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[9].b_arb_read[0];
            assign icm_in_arb_write[1] = router[9].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[9].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[9].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[9].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[9].b_arb_byteenable[0];
            assign router[9].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[9].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[9].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[9].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_34
            calc_initpop_system_interconnect_34 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port4bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[3].b_arb_read[1];
            assign icm_in_arb_write[0] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[7].b_arb_read[1];
            assign icm_in_arb_write[1] = router[7].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[7].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[1];
            assign router[7].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_34
            calc_initpop_system_interconnect_34 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port4bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[3].b_arb_read[2];
            assign icm_in_arb_write[0] = router[3].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[3].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[2];
            assign router[3].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[12].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[12].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[12].b_arb_read[2];
            assign icm_in_arb_write[1] = router[12].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[12].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[12].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[12].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[12].b_arb_byteenable[2];
            assign router[12].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[12].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[12].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[12].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_34
            calc_initpop_system_interconnect_34 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[4] = icm_out_arb_enable;
            assign bank[2].port_read[4] = icm_out_arb_read;
            assign bank[2].port_write[4] = icm_out_arb_write;
            assign bank[2].port_address[4] = icm_out_arb_address;
            assign bank[2].port_writedata[4] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[4];
            assign icm_out_rrp_data = bank[2].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port4bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[3].b_arb_read[3];
            assign icm_in_arb_write[0] = router[3].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[3].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[3];
            assign router[3].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[8].b_arb_read[3];
            assign icm_in_arb_write[1] = router[8].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[8].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[3];
            assign router[8].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_34
            calc_initpop_system_interconnect_34 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[4] = icm_out_arb_enable;
            assign bank[3].port_read[4] = icm_out_arb_read;
            assign bank[3].port_write[4] = icm_out_arb_write;
            assign bank[3].port_address[4] = icm_out_arb_address;
            assign bank[3].port_writedata[4] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[4];
            assign icm_out_rrp_data = bank[3].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[9] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace24
      logic local_icm_arb_request [1][7];
      logic local_icm_arb_enable [1][7];
      logic local_icm_arb_read [1][7];
      logic local_icm_arb_write [1][7];
      logic local_icm_arb_burstcount [1][7];
      logic [5:0] local_icm_arb_address [1][7];
      logic [31:0] local_icm_arb_writedata [1][7];
      logic [3:0] local_icm_arb_byteenable [1][7];
      logic local_icm_arb_stall [1][7];
      logic local_icm_wrp_ack [1][7];
      logic local_icm_rrp_datavalid [1][7];
      logic [31:0] local_icm_rrp_data [1][7];
      logic invalid_access_grps;

      for( __s = 0; __s < 1; __s = __s + 1 )
      begin:local_mem_group
         logic invalid_access_terms;

         for( __t = 0; __t < 7; __t = __t + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace24_enable[__s][__t]),
               .avm_read(local_avm_aspace24_read[__s][__t]),
               .avm_write(local_avm_aspace24_write[__s][__t]),
               .avm_burstcount(local_avm_aspace24_burstcount[__s][__t]),
               .avm_address(local_avm_aspace24_address[__s][__t]),
               .avm_writedata(local_avm_aspace24_writedata[__s][__t]),
               .avm_byteenable(local_avm_aspace24_byteenable[__s][__t]),
               .avm_waitrequest(local_avm_aspace24_waitrequest[__s][__t]),
               .avm_readdata(local_avm_aspace24_readdata[__s][__t]),
               .avm_readdatavalid(local_avm_aspace24_readdatavalid[__s][__t]),
               .avm_writeack(local_avm_aspace24_writeack[__s][__t]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__s][__t]),
               .ic_arb_enable(local_icm_arb_enable[__s][__t]),
               .ic_arb_read(local_icm_arb_read[__s][__t]),
               .ic_arb_write(local_icm_arb_write[__s][__t]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__s][__t]),
               .ic_arb_address(local_icm_arb_address[__s][__t]),
               .ic_arb_writedata(local_icm_arb_writedata[__s][__t]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__s][__t]),
               .ic_arb_stall(local_icm_arb_stall[__s][__t]),
               .ic_wrp_ack(local_icm_wrp_ack[__s][__t]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__s][__t]),
               .ic_rrp_data(local_icm_rrp_data[__s][__t])
            );

         end

         for( __t = 0; __t < 2; __t = __t + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [4:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(32),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __t = 0; __t < 7; __t = __t + 1 )
         begin:router
            logic b_arb_request [2];
            logic b_arb_enable [2];
            logic b_arb_read [2];
            logic b_arb_write [2];
            logic b_arb_burstcount [2];
            logic [4:0] b_arb_address [2];
            logic [31:0] b_arb_writedata [2];
            logic [3:0] b_arb_byteenable [2];
            logic b_arb_stall [2];
            logic b_wrp_ack [2];
            logic b_rrp_datavalid [2];
            logic [31:0] b_rrp_data [2];
            logic [1:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(6),
               .BYTEENA_W(4),
               .NUM_BANKS(2)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__s][__t]),
               .m_arb_enable(local_icm_arb_enable[__s][__t]),
               .m_arb_read(local_icm_arb_read[__s][__t]),
               .m_arb_write(local_icm_arb_write[__s][__t]),
               .m_arb_burstcount(local_icm_arb_burstcount[__s][__t]),
               .m_arb_address(local_icm_arb_address[__s][__t]),
               .m_arb_writedata(local_icm_arb_writedata[__s][__t]),
               .m_arb_byteenable(local_icm_arb_byteenable[__s][__t]),
               .m_arb_stall(local_icm_arb_stall[__s][__t]),
               .m_wrp_ack(local_icm_wrp_ack[__s][__t]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__s][__t]),
               .m_rrp_data(local_icm_rrp_data[__s][__t]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__s][__t][5] == 1'b0);
            assign bank_select[1] = (local_icm_arb_address[__s][__t][5] == 1'b1);
         end

         assign invalid_access_grps = |invalid_access_terms;
         // INST acl_ic_local_mem_router_terminator_m5b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m5b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[5].b_arb_request[1]),
            .b_arb_read(router[5].b_arb_read[1]),
            .b_arb_write(router[5].b_arb_write[1]),
            .b_arb_stall(router[5].b_arb_stall[1]),
            .b_wrp_ack(router[5].b_wrp_ack[1]),
            .b_rrp_datavalid(router[5].b_rrp_datavalid[1]),
            .b_rrp_data(router[5].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms)
         );

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[4].b_arb_read[0];
            assign icm_in_arb_write[1] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_4
            calc_initpop_system_interconnect_4 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port1bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[4].b_arb_read[1];
            assign icm_in_arb_write[1] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_4
            calc_initpop_system_interconnect_4 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[5].b_arb_read[0];
            assign icm_in_arb_write[1] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port2bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[6].b_arb_read[1];
            assign icm_in_arb_write[1] = router[6].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[6].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[1];
            assign router[6].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port3bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[6].b_arb_read[0];
            assign icm_in_arb_write[1] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_34
            calc_initpop_system_interconnect_34 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_7
            calc_initpop_system_interconnect_7 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_8
            calc_initpop_system_interconnect_8 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[3].b_arb_read[1];
            assign icm_in_arb_write[0] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_8
            calc_initpop_system_interconnect_8 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[10] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace25
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic [7:0] local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];
      logic invalid_access_grps;

      for( __t = 0; __t < 1; __t = __t + 1 )
      begin:local_mem_group
         for( __u = 0; __u < 5; __u = __u + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace25_enable[__t][__u]),
               .avm_read(local_avm_aspace25_read[__t][__u]),
               .avm_write(local_avm_aspace25_write[__t][__u]),
               .avm_burstcount(local_avm_aspace25_burstcount[__t][__u]),
               .avm_address(local_avm_aspace25_address[__t][__u]),
               .avm_writedata(local_avm_aspace25_writedata[__t][__u]),
               .avm_byteenable(local_avm_aspace25_byteenable[__t][__u]),
               .avm_waitrequest(local_avm_aspace25_waitrequest[__t][__u]),
               .avm_readdata(local_avm_aspace25_readdata[__t][__u]),
               .avm_readdatavalid(local_avm_aspace25_readdatavalid[__t][__u]),
               .avm_writeack(local_avm_aspace25_writeack[__t][__u]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__t][__u]),
               .ic_arb_enable(local_icm_arb_enable[__t][__u]),
               .ic_arb_read(local_icm_arb_read[__t][__u]),
               .ic_arb_write(local_icm_arb_write[__t][__u]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__t][__u]),
               .ic_arb_address(local_icm_arb_address[__t][__u]),
               .ic_arb_writedata(local_icm_arb_writedata[__t][__u]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__t][__u]),
               .ic_arb_stall(local_icm_arb_stall[__t][__u]),
               .ic_wrp_ack(local_icm_wrp_ack[__t][__u]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__t][__u]),
               .ic_rrp_data(local_icm_rrp_data[__t][__u])
            );

         end

         for( __u = 0; __u < 2; __u = __u + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [6:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __u = 0; __u < 5; __u = __u + 1 )
         begin:router
            logic b_arb_request [2];
            logic b_arb_enable [2];
            logic b_arb_read [2];
            logic b_arb_write [2];
            logic b_arb_burstcount [2];
            logic [6:0] b_arb_address [2];
            logic [31:0] b_arb_writedata [2];
            logic [3:0] b_arb_byteenable [2];
            logic b_arb_stall [2];
            logic b_wrp_ack [2];
            logic b_rrp_datavalid [2];
            logic [31:0] b_rrp_data [2];
            logic [1:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(8),
               .BYTEENA_W(4),
               .NUM_BANKS(2)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__t][__u]),
               .m_arb_enable(local_icm_arb_enable[__t][__u]),
               .m_arb_read(local_icm_arb_read[__t][__u]),
               .m_arb_write(local_icm_arb_write[__t][__u]),
               .m_arb_burstcount(local_icm_arb_burstcount[__t][__u]),
               .m_arb_address(local_icm_arb_address[__t][__u]),
               .m_arb_writedata(local_icm_arb_writedata[__t][__u]),
               .m_arb_byteenable(local_icm_arb_byteenable[__t][__u]),
               .m_arb_stall(local_icm_arb_stall[__t][__u]),
               .m_wrp_ack(local_icm_wrp_ack[__t][__u]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__t][__u]),
               .m_rrp_data(local_icm_rrp_data[__t][__u]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__t][__u][7] == 1'b0);
            assign bank_select[1] = (local_icm_arb_address[__t][__u][7] == 1'b1);
         end

         assign invalid_access_grps = 'b0;
         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_9
            calc_initpop_system_interconnect_9 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port1bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[3].b_arb_read[1];
            assign icm_in_arb_write[1] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_9
            calc_initpop_system_interconnect_9 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_10
            calc_initpop_system_interconnect_10 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_10
            calc_initpop_system_interconnect_10 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[4].b_arb_read[1];
            assign icm_in_arb_write[0] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[11] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace26
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic [7:0] local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];
      logic invalid_access_grps;

      for( __u = 0; __u < 1; __u = __u + 1 )
      begin:local_mem_group
         for( __v = 0; __v < 5; __v = __v + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace26_enable[__u][__v]),
               .avm_read(local_avm_aspace26_read[__u][__v]),
               .avm_write(local_avm_aspace26_write[__u][__v]),
               .avm_burstcount(local_avm_aspace26_burstcount[__u][__v]),
               .avm_address(local_avm_aspace26_address[__u][__v]),
               .avm_writedata(local_avm_aspace26_writedata[__u][__v]),
               .avm_byteenable(local_avm_aspace26_byteenable[__u][__v]),
               .avm_waitrequest(local_avm_aspace26_waitrequest[__u][__v]),
               .avm_readdata(local_avm_aspace26_readdata[__u][__v]),
               .avm_readdatavalid(local_avm_aspace26_readdatavalid[__u][__v]),
               .avm_writeack(local_avm_aspace26_writeack[__u][__v]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__u][__v]),
               .ic_arb_enable(local_icm_arb_enable[__u][__v]),
               .ic_arb_read(local_icm_arb_read[__u][__v]),
               .ic_arb_write(local_icm_arb_write[__u][__v]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__u][__v]),
               .ic_arb_address(local_icm_arb_address[__u][__v]),
               .ic_arb_writedata(local_icm_arb_writedata[__u][__v]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__u][__v]),
               .ic_arb_stall(local_icm_arb_stall[__u][__v]),
               .ic_wrp_ack(local_icm_wrp_ack[__u][__v]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__u][__v]),
               .ic_rrp_data(local_icm_rrp_data[__u][__v])
            );

         end

         for( __v = 0; __v < 2; __v = __v + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [6:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __v = 0; __v < 5; __v = __v + 1 )
         begin:router
            logic b_arb_request [2];
            logic b_arb_enable [2];
            logic b_arb_read [2];
            logic b_arb_write [2];
            logic b_arb_burstcount [2];
            logic [6:0] b_arb_address [2];
            logic [31:0] b_arb_writedata [2];
            logic [3:0] b_arb_byteenable [2];
            logic b_arb_stall [2];
            logic b_wrp_ack [2];
            logic b_rrp_datavalid [2];
            logic [31:0] b_rrp_data [2];
            logic [1:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(8),
               .BYTEENA_W(4),
               .NUM_BANKS(2)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__u][__v]),
               .m_arb_enable(local_icm_arb_enable[__u][__v]),
               .m_arb_read(local_icm_arb_read[__u][__v]),
               .m_arb_write(local_icm_arb_write[__u][__v]),
               .m_arb_burstcount(local_icm_arb_burstcount[__u][__v]),
               .m_arb_address(local_icm_arb_address[__u][__v]),
               .m_arb_writedata(local_icm_arb_writedata[__u][__v]),
               .m_arb_byteenable(local_icm_arb_byteenable[__u][__v]),
               .m_arb_stall(local_icm_arb_stall[__u][__v]),
               .m_wrp_ack(local_icm_wrp_ack[__u][__v]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__u][__v]),
               .m_rrp_data(local_icm_rrp_data[__u][__v]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__u][__v][7] == 1'b0);
            assign bank_select[1] = (local_icm_arb_address[__u][__v][7] == 1'b1);
         end

         assign invalid_access_grps = 'b0;
         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_9
            calc_initpop_system_interconnect_9 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port1bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[3].b_arb_read[1];
            assign icm_in_arb_write[1] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_9
            calc_initpop_system_interconnect_9 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_10
            calc_initpop_system_interconnect_10 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_10
            calc_initpop_system_interconnect_10 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[4].b_arb_read[1];
            assign icm_in_arb_write[0] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[12] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace27
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic [7:0] local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];
      logic invalid_access_grps;

      for( __v = 0; __v < 1; __v = __v + 1 )
      begin:local_mem_group
         for( __w = 0; __w < 5; __w = __w + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace27_enable[__v][__w]),
               .avm_read(local_avm_aspace27_read[__v][__w]),
               .avm_write(local_avm_aspace27_write[__v][__w]),
               .avm_burstcount(local_avm_aspace27_burstcount[__v][__w]),
               .avm_address(local_avm_aspace27_address[__v][__w]),
               .avm_writedata(local_avm_aspace27_writedata[__v][__w]),
               .avm_byteenable(local_avm_aspace27_byteenable[__v][__w]),
               .avm_waitrequest(local_avm_aspace27_waitrequest[__v][__w]),
               .avm_readdata(local_avm_aspace27_readdata[__v][__w]),
               .avm_readdatavalid(local_avm_aspace27_readdatavalid[__v][__w]),
               .avm_writeack(local_avm_aspace27_writeack[__v][__w]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__v][__w]),
               .ic_arb_enable(local_icm_arb_enable[__v][__w]),
               .ic_arb_read(local_icm_arb_read[__v][__w]),
               .ic_arb_write(local_icm_arb_write[__v][__w]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__v][__w]),
               .ic_arb_address(local_icm_arb_address[__v][__w]),
               .ic_arb_writedata(local_icm_arb_writedata[__v][__w]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__v][__w]),
               .ic_arb_stall(local_icm_arb_stall[__v][__w]),
               .ic_wrp_ack(local_icm_wrp_ack[__v][__w]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__v][__w]),
               .ic_rrp_data(local_icm_rrp_data[__v][__w])
            );

         end

         for( __w = 0; __w < 2; __w = __w + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [6:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(128),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __w = 0; __w < 5; __w = __w + 1 )
         begin:router
            logic b_arb_request [2];
            logic b_arb_enable [2];
            logic b_arb_read [2];
            logic b_arb_write [2];
            logic b_arb_burstcount [2];
            logic [6:0] b_arb_address [2];
            logic [31:0] b_arb_writedata [2];
            logic [3:0] b_arb_byteenable [2];
            logic b_arb_stall [2];
            logic b_wrp_ack [2];
            logic b_rrp_datavalid [2];
            logic [31:0] b_rrp_data [2];
            logic [1:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(8),
               .BYTEENA_W(4),
               .NUM_BANKS(2)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__v][__w]),
               .m_arb_enable(local_icm_arb_enable[__v][__w]),
               .m_arb_read(local_icm_arb_read[__v][__w]),
               .m_arb_write(local_icm_arb_write[__v][__w]),
               .m_arb_burstcount(local_icm_arb_burstcount[__v][__w]),
               .m_arb_address(local_icm_arb_address[__v][__w]),
               .m_arb_writedata(local_icm_arb_writedata[__v][__w]),
               .m_arb_byteenable(local_icm_arb_byteenable[__v][__w]),
               .m_arb_stall(local_icm_arb_stall[__v][__w]),
               .m_wrp_ack(local_icm_wrp_ack[__v][__w]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__v][__w]),
               .m_rrp_data(local_icm_rrp_data[__v][__w]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__v][__w][7] == 1'b0);
            assign bank_select[1] = (local_icm_arb_address[__v][__w][7] == 1'b1);
         end

         assign invalid_access_grps = 'b0;
         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[4].b_arb_read[0];
            assign icm_in_arb_write[1] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_9
            calc_initpop_system_interconnect_9 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port1bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [6:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[4].b_arb_read[1];
            assign icm_in_arb_write[1] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_9
            calc_initpop_system_interconnect_9 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_10
            calc_initpop_system_interconnect_10 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_10
            calc_initpop_system_interconnect_10 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [6:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [6:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[3].b_arb_read[1];
            assign icm_in_arb_write[0] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_11
            calc_initpop_system_interconnect_11 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[13] = |invalid_access_grps;
   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE perform_ls_top_wrapper_0
/////////////////////////////////////////////////////////////////
module perform_ls_top_wrapper_0
(
   input logic start,
   input logic [903:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_local_bb11_ld__1284_inst0
   output logic avm_local_bb11_ld__1284_inst0_enable,
   output logic avm_local_bb11_ld__1284_inst0_read,
   output logic avm_local_bb11_ld__1284_inst0_write,
   output logic [4:0] avm_local_bb11_ld__1284_inst0_burstcount,
   output logic [30:0] avm_local_bb11_ld__1284_inst0_address,
   output logic [511:0] avm_local_bb11_ld__1284_inst0_writedata,
   output logic [63:0] avm_local_bb11_ld__1284_inst0_byteenable,
   input logic avm_local_bb11_ld__1284_inst0_waitrequest,
   input logic [511:0] avm_local_bb11_ld__1284_inst0_readdata,
   input logic avm_local_bb11_ld__1284_inst0_readdatavalid,
   input logic avm_local_bb11_ld__1284_inst0_writeack,
   // AVM avm_local_bb11_ld__1286_inst0
   output logic avm_local_bb11_ld__1286_inst0_enable,
   output logic avm_local_bb11_ld__1286_inst0_read,
   output logic avm_local_bb11_ld__1286_inst0_write,
   output logic [4:0] avm_local_bb11_ld__1286_inst0_burstcount,
   output logic [30:0] avm_local_bb11_ld__1286_inst0_address,
   output logic [511:0] avm_local_bb11_ld__1286_inst0_writedata,
   output logic [63:0] avm_local_bb11_ld__1286_inst0_byteenable,
   input logic avm_local_bb11_ld__1286_inst0_waitrequest,
   input logic [511:0] avm_local_bb11_ld__1286_inst0_readdata,
   input logic avm_local_bb11_ld__1286_inst0_readdatavalid,
   input logic avm_local_bb11_ld__1286_inst0_writeack,
   // AVM avm_local_bb11_ld__1288_inst0
   output logic avm_local_bb11_ld__1288_inst0_enable,
   output logic avm_local_bb11_ld__1288_inst0_read,
   output logic avm_local_bb11_ld__1288_inst0_write,
   output logic [4:0] avm_local_bb11_ld__1288_inst0_burstcount,
   output logic [30:0] avm_local_bb11_ld__1288_inst0_address,
   output logic [511:0] avm_local_bb11_ld__1288_inst0_writedata,
   output logic [63:0] avm_local_bb11_ld__1288_inst0_byteenable,
   input logic avm_local_bb11_ld__1288_inst0_waitrequest,
   input logic [511:0] avm_local_bb11_ld__1288_inst0_readdata,
   input logic avm_local_bb11_ld__1288_inst0_readdatavalid,
   input logic avm_local_bb11_ld__1288_inst0_writeack,
   // AVM avm_local_bb11_ld__1290_inst0
   output logic avm_local_bb11_ld__1290_inst0_enable,
   output logic avm_local_bb11_ld__1290_inst0_read,
   output logic avm_local_bb11_ld__1290_inst0_write,
   output logic [4:0] avm_local_bb11_ld__1290_inst0_burstcount,
   output logic [30:0] avm_local_bb11_ld__1290_inst0_address,
   output logic [511:0] avm_local_bb11_ld__1290_inst0_writedata,
   output logic [63:0] avm_local_bb11_ld__1290_inst0_byteenable,
   input logic avm_local_bb11_ld__1290_inst0_waitrequest,
   input logic [511:0] avm_local_bb11_ld__1290_inst0_readdata,
   input logic avm_local_bb11_ld__1290_inst0_readdatavalid,
   input logic avm_local_bb11_ld__1290_inst0_writeack,
   // AVM avm_local_bb11_ld__inst0
   output logic avm_local_bb11_ld__inst0_enable,
   output logic avm_local_bb11_ld__inst0_read,
   output logic avm_local_bb11_ld__inst0_write,
   output logic [4:0] avm_local_bb11_ld__inst0_burstcount,
   output logic [30:0] avm_local_bb11_ld__inst0_address,
   output logic [511:0] avm_local_bb11_ld__inst0_writedata,
   output logic [63:0] avm_local_bb11_ld__inst0_byteenable,
   input logic avm_local_bb11_ld__inst0_waitrequest,
   input logic [511:0] avm_local_bb11_ld__inst0_readdata,
   input logic avm_local_bb11_ld__inst0_readdatavalid,
   input logic avm_local_bb11_ld__inst0_writeack,
   // AVM avm_local_bb11_ld__u46_inst0
   output logic avm_local_bb11_ld__u46_inst0_enable,
   output logic avm_local_bb11_ld__u46_inst0_read,
   output logic avm_local_bb11_ld__u46_inst0_write,
   output logic [4:0] avm_local_bb11_ld__u46_inst0_burstcount,
   output logic [30:0] avm_local_bb11_ld__u46_inst0_address,
   output logic [511:0] avm_local_bb11_ld__u46_inst0_writedata,
   output logic [63:0] avm_local_bb11_ld__u46_inst0_byteenable,
   input logic avm_local_bb11_ld__u46_inst0_waitrequest,
   input logic [511:0] avm_local_bb11_ld__u46_inst0_readdata,
   input logic avm_local_bb11_ld__u46_inst0_readdatavalid,
   input logic avm_local_bb11_ld__u46_inst0_writeack,
   // AVM avm_local_bb11_ld__u47_inst0
   output logic avm_local_bb11_ld__u47_inst0_enable,
   output logic avm_local_bb11_ld__u47_inst0_read,
   output logic avm_local_bb11_ld__u47_inst0_write,
   output logic [4:0] avm_local_bb11_ld__u47_inst0_burstcount,
   output logic [30:0] avm_local_bb11_ld__u47_inst0_address,
   output logic [511:0] avm_local_bb11_ld__u47_inst0_writedata,
   output logic [63:0] avm_local_bb11_ld__u47_inst0_byteenable,
   input logic avm_local_bb11_ld__u47_inst0_waitrequest,
   input logic [511:0] avm_local_bb11_ld__u47_inst0_readdata,
   input logic avm_local_bb11_ld__u47_inst0_readdatavalid,
   input logic avm_local_bb11_ld__u47_inst0_writeack,
   // AVM avm_local_bb11_ld__u48_inst0
   output logic avm_local_bb11_ld__u48_inst0_enable,
   output logic avm_local_bb11_ld__u48_inst0_read,
   output logic avm_local_bb11_ld__u48_inst0_write,
   output logic [4:0] avm_local_bb11_ld__u48_inst0_burstcount,
   output logic [30:0] avm_local_bb11_ld__u48_inst0_address,
   output logic [511:0] avm_local_bb11_ld__u48_inst0_writedata,
   output logic [63:0] avm_local_bb11_ld__u48_inst0_byteenable,
   input logic avm_local_bb11_ld__u48_inst0_waitrequest,
   input logic [511:0] avm_local_bb11_ld__u48_inst0_readdata,
   input logic avm_local_bb11_ld__u48_inst0_readdatavalid,
   input logic avm_local_bb11_ld__u48_inst0_writeack,
   // AVM avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0
   output logic avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_enable,
   output logic avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_read,
   output logic avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_write,
   output logic [4:0] avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_burstcount,
   output logic [30:0] avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_address,
   output logic [511:0] avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_writedata,
   output logic [63:0] avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_byteenable,
   input logic avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_waitrequest,
   input logic [511:0] avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_readdata,
   input logic avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_readdatavalid,
   input logic avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_writeack,
   // AVM avm_local_bb13_ld__u53_inst0
   output logic avm_local_bb13_ld__u53_inst0_enable,
   output logic avm_local_bb13_ld__u53_inst0_read,
   output logic avm_local_bb13_ld__u53_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u53_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u53_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u53_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u53_inst0_byteenable,
   input logic avm_local_bb13_ld__u53_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u53_inst0_readdata,
   input logic avm_local_bb13_ld__u53_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u53_inst0_writeack,
   // AVM avm_local_bb13_ld__u54_inst0
   output logic avm_local_bb13_ld__u54_inst0_enable,
   output logic avm_local_bb13_ld__u54_inst0_read,
   output logic avm_local_bb13_ld__u54_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u54_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u54_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u54_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u54_inst0_byteenable,
   input logic avm_local_bb13_ld__u54_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u54_inst0_readdata,
   input logic avm_local_bb13_ld__u54_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u54_inst0_writeack,
   // AVM avm_local_bb13_ld__u55_inst0
   output logic avm_local_bb13_ld__u55_inst0_enable,
   output logic avm_local_bb13_ld__u55_inst0_read,
   output logic avm_local_bb13_ld__u55_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u55_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u55_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u55_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u55_inst0_byteenable,
   input logic avm_local_bb13_ld__u55_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u55_inst0_readdata,
   input logic avm_local_bb13_ld__u55_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u55_inst0_writeack,
   // AVM avm_local_bb13_ld__u56_inst0
   output logic avm_local_bb13_ld__u56_inst0_enable,
   output logic avm_local_bb13_ld__u56_inst0_read,
   output logic avm_local_bb13_ld__u56_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u56_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u56_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u56_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u56_inst0_byteenable,
   input logic avm_local_bb13_ld__u56_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u56_inst0_readdata,
   input logic avm_local_bb13_ld__u56_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u56_inst0_writeack,
   // AVM avm_local_bb13_ld__u57_inst0
   output logic avm_local_bb13_ld__u57_inst0_enable,
   output logic avm_local_bb13_ld__u57_inst0_read,
   output logic avm_local_bb13_ld__u57_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u57_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u57_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u57_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u57_inst0_byteenable,
   input logic avm_local_bb13_ld__u57_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u57_inst0_readdata,
   input logic avm_local_bb13_ld__u57_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u57_inst0_writeack,
   // AVM avm_local_bb13_ld__u58_inst0
   output logic avm_local_bb13_ld__u58_inst0_enable,
   output logic avm_local_bb13_ld__u58_inst0_read,
   output logic avm_local_bb13_ld__u58_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u58_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u58_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u58_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u58_inst0_byteenable,
   input logic avm_local_bb13_ld__u58_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u58_inst0_readdata,
   input logic avm_local_bb13_ld__u58_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u58_inst0_writeack,
   // AVM avm_local_bb13_ld__u59_inst0
   output logic avm_local_bb13_ld__u59_inst0_enable,
   output logic avm_local_bb13_ld__u59_inst0_read,
   output logic avm_local_bb13_ld__u59_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u59_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u59_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u59_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u59_inst0_byteenable,
   input logic avm_local_bb13_ld__u59_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u59_inst0_readdata,
   input logic avm_local_bb13_ld__u59_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u59_inst0_writeack,
   // AVM avm_local_bb13_ld__u60_inst0
   output logic avm_local_bb13_ld__u60_inst0_enable,
   output logic avm_local_bb13_ld__u60_inst0_read,
   output logic avm_local_bb13_ld__u60_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u60_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u60_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u60_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u60_inst0_byteenable,
   input logic avm_local_bb13_ld__u60_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u60_inst0_readdata,
   input logic avm_local_bb13_ld__u60_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u60_inst0_writeack,
   // AVM avm_local_bb13_ld__u61_inst0
   output logic avm_local_bb13_ld__u61_inst0_enable,
   output logic avm_local_bb13_ld__u61_inst0_read,
   output logic avm_local_bb13_ld__u61_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u61_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u61_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u61_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u61_inst0_byteenable,
   input logic avm_local_bb13_ld__u61_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u61_inst0_readdata,
   input logic avm_local_bb13_ld__u61_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u61_inst0_writeack,
   // AVM avm_local_bb13_ld__u62_inst0
   output logic avm_local_bb13_ld__u62_inst0_enable,
   output logic avm_local_bb13_ld__u62_inst0_read,
   output logic avm_local_bb13_ld__u62_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u62_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u62_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u62_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u62_inst0_byteenable,
   input logic avm_local_bb13_ld__u62_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u62_inst0_readdata,
   input logic avm_local_bb13_ld__u62_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u62_inst0_writeack,
   // AVM avm_local_bb13_ld__u63_inst0
   output logic avm_local_bb13_ld__u63_inst0_enable,
   output logic avm_local_bb13_ld__u63_inst0_read,
   output logic avm_local_bb13_ld__u63_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u63_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u63_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u63_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u63_inst0_byteenable,
   input logic avm_local_bb13_ld__u63_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u63_inst0_readdata,
   input logic avm_local_bb13_ld__u63_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u63_inst0_writeack,
   // AVM avm_local_bb13_ld__u64_inst0
   output logic avm_local_bb13_ld__u64_inst0_enable,
   output logic avm_local_bb13_ld__u64_inst0_read,
   output logic avm_local_bb13_ld__u64_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u64_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u64_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u64_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u64_inst0_byteenable,
   input logic avm_local_bb13_ld__u64_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u64_inst0_readdata,
   input logic avm_local_bb13_ld__u64_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u64_inst0_writeack,
   // AVM avm_local_bb13_ld__u65_inst0
   output logic avm_local_bb13_ld__u65_inst0_enable,
   output logic avm_local_bb13_ld__u65_inst0_read,
   output logic avm_local_bb13_ld__u65_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u65_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u65_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u65_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u65_inst0_byteenable,
   input logic avm_local_bb13_ld__u65_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u65_inst0_readdata,
   input logic avm_local_bb13_ld__u65_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u65_inst0_writeack,
   // AVM avm_local_bb13_ld__u66_inst0
   output logic avm_local_bb13_ld__u66_inst0_enable,
   output logic avm_local_bb13_ld__u66_inst0_read,
   output logic avm_local_bb13_ld__u66_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u66_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u66_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u66_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u66_inst0_byteenable,
   input logic avm_local_bb13_ld__u66_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u66_inst0_readdata,
   input logic avm_local_bb13_ld__u66_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u66_inst0_writeack,
   // AVM avm_local_bb13_ld__u67_inst0
   output logic avm_local_bb13_ld__u67_inst0_enable,
   output logic avm_local_bb13_ld__u67_inst0_read,
   output logic avm_local_bb13_ld__u67_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u67_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u67_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u67_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u67_inst0_byteenable,
   input logic avm_local_bb13_ld__u67_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u67_inst0_readdata,
   input logic avm_local_bb13_ld__u67_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u67_inst0_writeack,
   // AVM avm_local_bb13_ld__u68_inst0
   output logic avm_local_bb13_ld__u68_inst0_enable,
   output logic avm_local_bb13_ld__u68_inst0_read,
   output logic avm_local_bb13_ld__u68_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u68_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u68_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u68_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u68_inst0_byteenable,
   input logic avm_local_bb13_ld__u68_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u68_inst0_readdata,
   input logic avm_local_bb13_ld__u68_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u68_inst0_writeack,
   // AVM avm_local_bb13_ld__u69_inst0
   output logic avm_local_bb13_ld__u69_inst0_enable,
   output logic avm_local_bb13_ld__u69_inst0_read,
   output logic avm_local_bb13_ld__u69_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u69_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u69_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u69_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u69_inst0_byteenable,
   input logic avm_local_bb13_ld__u69_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u69_inst0_readdata,
   input logic avm_local_bb13_ld__u69_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u69_inst0_writeack,
   // AVM avm_local_bb13_ld__u70_inst0
   output logic avm_local_bb13_ld__u70_inst0_enable,
   output logic avm_local_bb13_ld__u70_inst0_read,
   output logic avm_local_bb13_ld__u70_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u70_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u70_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u70_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u70_inst0_byteenable,
   input logic avm_local_bb13_ld__u70_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u70_inst0_readdata,
   input logic avm_local_bb13_ld__u70_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u70_inst0_writeack,
   // AVM avm_local_bb13_ld__u71_inst0
   output logic avm_local_bb13_ld__u71_inst0_enable,
   output logic avm_local_bb13_ld__u71_inst0_read,
   output logic avm_local_bb13_ld__u71_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u71_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u71_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u71_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u71_inst0_byteenable,
   input logic avm_local_bb13_ld__u71_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u71_inst0_readdata,
   input logic avm_local_bb13_ld__u71_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u71_inst0_writeack,
   // AVM avm_local_bb13_ld__u72_inst0
   output logic avm_local_bb13_ld__u72_inst0_enable,
   output logic avm_local_bb13_ld__u72_inst0_read,
   output logic avm_local_bb13_ld__u72_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u72_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u72_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u72_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u72_inst0_byteenable,
   input logic avm_local_bb13_ld__u72_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u72_inst0_readdata,
   input logic avm_local_bb13_ld__u72_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u72_inst0_writeack,
   // AVM avm_local_bb13_ld__u73_inst0
   output logic avm_local_bb13_ld__u73_inst0_enable,
   output logic avm_local_bb13_ld__u73_inst0_read,
   output logic avm_local_bb13_ld__u73_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u73_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u73_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u73_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u73_inst0_byteenable,
   input logic avm_local_bb13_ld__u73_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u73_inst0_readdata,
   input logic avm_local_bb13_ld__u73_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u73_inst0_writeack,
   // AVM avm_local_bb13_ld__u74_inst0
   output logic avm_local_bb13_ld__u74_inst0_enable,
   output logic avm_local_bb13_ld__u74_inst0_read,
   output logic avm_local_bb13_ld__u74_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u74_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u74_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u74_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u74_inst0_byteenable,
   input logic avm_local_bb13_ld__u74_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u74_inst0_readdata,
   input logic avm_local_bb13_ld__u74_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u74_inst0_writeack,
   // AVM avm_local_bb13_ld__u75_inst0
   output logic avm_local_bb13_ld__u75_inst0_enable,
   output logic avm_local_bb13_ld__u75_inst0_read,
   output logic avm_local_bb13_ld__u75_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u75_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u75_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u75_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u75_inst0_byteenable,
   input logic avm_local_bb13_ld__u75_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u75_inst0_readdata,
   input logic avm_local_bb13_ld__u75_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u75_inst0_writeack,
   // AVM avm_local_bb13_ld__u76_inst0
   output logic avm_local_bb13_ld__u76_inst0_enable,
   output logic avm_local_bb13_ld__u76_inst0_read,
   output logic avm_local_bb13_ld__u76_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u76_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u76_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u76_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u76_inst0_byteenable,
   input logic avm_local_bb13_ld__u76_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u76_inst0_readdata,
   input logic avm_local_bb13_ld__u76_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u76_inst0_writeack,
   // AVM avm_local_bb13_ld__u77_inst0
   output logic avm_local_bb13_ld__u77_inst0_enable,
   output logic avm_local_bb13_ld__u77_inst0_read,
   output logic avm_local_bb13_ld__u77_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u77_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u77_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u77_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u77_inst0_byteenable,
   input logic avm_local_bb13_ld__u77_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u77_inst0_readdata,
   input logic avm_local_bb13_ld__u77_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u77_inst0_writeack,
   // AVM avm_local_bb13_ld__u78_inst0
   output logic avm_local_bb13_ld__u78_inst0_enable,
   output logic avm_local_bb13_ld__u78_inst0_read,
   output logic avm_local_bb13_ld__u78_inst0_write,
   output logic [4:0] avm_local_bb13_ld__u78_inst0_burstcount,
   output logic [30:0] avm_local_bb13_ld__u78_inst0_address,
   output logic [511:0] avm_local_bb13_ld__u78_inst0_writedata,
   output logic [63:0] avm_local_bb13_ld__u78_inst0_byteenable,
   input logic avm_local_bb13_ld__u78_inst0_waitrequest,
   input logic [511:0] avm_local_bb13_ld__u78_inst0_readdata,
   input logic avm_local_bb13_ld__u78_inst0_readdatavalid,
   input logic avm_local_bb13_ld__u78_inst0_writeack,
   // AVM avm_local_bb15_ld__u85_inst0
   output logic avm_local_bb15_ld__u85_inst0_enable,
   output logic avm_local_bb15_ld__u85_inst0_read,
   output logic avm_local_bb15_ld__u85_inst0_write,
   output logic [4:0] avm_local_bb15_ld__u85_inst0_burstcount,
   output logic [30:0] avm_local_bb15_ld__u85_inst0_address,
   output logic [511:0] avm_local_bb15_ld__u85_inst0_writedata,
   output logic [63:0] avm_local_bb15_ld__u85_inst0_byteenable,
   input logic avm_local_bb15_ld__u85_inst0_waitrequest,
   input logic [511:0] avm_local_bb15_ld__u85_inst0_readdata,
   input logic avm_local_bb15_ld__u85_inst0_readdatavalid,
   input logic avm_local_bb15_ld__u85_inst0_writeack,
   // AVM avm_local_bb15_ld__u86_inst0
   output logic avm_local_bb15_ld__u86_inst0_enable,
   output logic avm_local_bb15_ld__u86_inst0_read,
   output logic avm_local_bb15_ld__u86_inst0_write,
   output logic [4:0] avm_local_bb15_ld__u86_inst0_burstcount,
   output logic [30:0] avm_local_bb15_ld__u86_inst0_address,
   output logic [511:0] avm_local_bb15_ld__u86_inst0_writedata,
   output logic [63:0] avm_local_bb15_ld__u86_inst0_byteenable,
   input logic avm_local_bb15_ld__u86_inst0_waitrequest,
   input logic [511:0] avm_local_bb15_ld__u86_inst0_readdata,
   input logic avm_local_bb15_ld__u86_inst0_readdatavalid,
   input logic avm_local_bb15_ld__u86_inst0_writeack,
   // AVM avm_local_bb15_ld__u87_inst0
   output logic avm_local_bb15_ld__u87_inst0_enable,
   output logic avm_local_bb15_ld__u87_inst0_read,
   output logic avm_local_bb15_ld__u87_inst0_write,
   output logic [4:0] avm_local_bb15_ld__u87_inst0_burstcount,
   output logic [30:0] avm_local_bb15_ld__u87_inst0_address,
   output logic [511:0] avm_local_bb15_ld__u87_inst0_writedata,
   output logic [63:0] avm_local_bb15_ld__u87_inst0_byteenable,
   input logic avm_local_bb15_ld__u87_inst0_waitrequest,
   input logic [511:0] avm_local_bb15_ld__u87_inst0_readdata,
   input logic avm_local_bb15_ld__u87_inst0_readdatavalid,
   input logic avm_local_bb15_ld__u87_inst0_writeack,
   // AVM avm_local_bb15_ld__u88_inst0
   output logic avm_local_bb15_ld__u88_inst0_enable,
   output logic avm_local_bb15_ld__u88_inst0_read,
   output logic avm_local_bb15_ld__u88_inst0_write,
   output logic [4:0] avm_local_bb15_ld__u88_inst0_burstcount,
   output logic [30:0] avm_local_bb15_ld__u88_inst0_address,
   output logic [511:0] avm_local_bb15_ld__u88_inst0_writedata,
   output logic [63:0] avm_local_bb15_ld__u88_inst0_byteenable,
   input logic avm_local_bb15_ld__u88_inst0_waitrequest,
   input logic [511:0] avm_local_bb15_ld__u88_inst0_readdata,
   input logic avm_local_bb15_ld__u88_inst0_readdatavalid,
   input logic avm_local_bb15_ld__u88_inst0_writeack,
   // AVM avm_local_bb15_ld__u89_inst0
   output logic avm_local_bb15_ld__u89_inst0_enable,
   output logic avm_local_bb15_ld__u89_inst0_read,
   output logic avm_local_bb15_ld__u89_inst0_write,
   output logic [4:0] avm_local_bb15_ld__u89_inst0_burstcount,
   output logic [30:0] avm_local_bb15_ld__u89_inst0_address,
   output logic [511:0] avm_local_bb15_ld__u89_inst0_writedata,
   output logic [63:0] avm_local_bb15_ld__u89_inst0_byteenable,
   input logic avm_local_bb15_ld__u89_inst0_waitrequest,
   input logic [511:0] avm_local_bb15_ld__u89_inst0_readdata,
   input logic avm_local_bb15_ld__u89_inst0_readdatavalid,
   input logic avm_local_bb15_ld__u89_inst0_writeack,
   // AVM avm_local_bb15_ld__u91_inst0
   output logic avm_local_bb15_ld__u91_inst0_enable,
   output logic avm_local_bb15_ld__u91_inst0_read,
   output logic avm_local_bb15_ld__u91_inst0_write,
   output logic [4:0] avm_local_bb15_ld__u91_inst0_burstcount,
   output logic [30:0] avm_local_bb15_ld__u91_inst0_address,
   output logic [511:0] avm_local_bb15_ld__u91_inst0_writedata,
   output logic [63:0] avm_local_bb15_ld__u91_inst0_byteenable,
   input logic avm_local_bb15_ld__u91_inst0_waitrequest,
   input logic [511:0] avm_local_bb15_ld__u91_inst0_readdata,
   input logic avm_local_bb15_ld__u91_inst0_readdatavalid,
   input logic avm_local_bb15_ld__u91_inst0_writeack,
   // AVM avm_local_bb15_ld__u92_inst0
   output logic avm_local_bb15_ld__u92_inst0_enable,
   output logic avm_local_bb15_ld__u92_inst0_read,
   output logic avm_local_bb15_ld__u92_inst0_write,
   output logic [4:0] avm_local_bb15_ld__u92_inst0_burstcount,
   output logic [30:0] avm_local_bb15_ld__u92_inst0_address,
   output logic [511:0] avm_local_bb15_ld__u92_inst0_writedata,
   output logic [63:0] avm_local_bb15_ld__u92_inst0_byteenable,
   input logic avm_local_bb15_ld__u92_inst0_waitrequest,
   input logic [511:0] avm_local_bb15_ld__u92_inst0_readdata,
   input logic avm_local_bb15_ld__u92_inst0_readdatavalid,
   input logic avm_local_bb15_ld__u92_inst0_writeack,
   // AVM avm_local_bb15_ld__u93_inst0
   output logic avm_local_bb15_ld__u93_inst0_enable,
   output logic avm_local_bb15_ld__u93_inst0_read,
   output logic avm_local_bb15_ld__u93_inst0_write,
   output logic [4:0] avm_local_bb15_ld__u93_inst0_burstcount,
   output logic [30:0] avm_local_bb15_ld__u93_inst0_address,
   output logic [511:0] avm_local_bb15_ld__u93_inst0_writedata,
   output logic [63:0] avm_local_bb15_ld__u93_inst0_byteenable,
   input logic avm_local_bb15_ld__u93_inst0_waitrequest,
   input logic [511:0] avm_local_bb15_ld__u93_inst0_readdata,
   input logic avm_local_bb15_ld__u93_inst0_readdatavalid,
   input logic avm_local_bb15_ld__u93_inst0_writeack,
   // AVM avm_local_bb15_ld__u94_inst0
   output logic avm_local_bb15_ld__u94_inst0_enable,
   output logic avm_local_bb15_ld__u94_inst0_read,
   output logic avm_local_bb15_ld__u94_inst0_write,
   output logic [4:0] avm_local_bb15_ld__u94_inst0_burstcount,
   output logic [30:0] avm_local_bb15_ld__u94_inst0_address,
   output logic [511:0] avm_local_bb15_ld__u94_inst0_writedata,
   output logic [63:0] avm_local_bb15_ld__u94_inst0_byteenable,
   input logic avm_local_bb15_ld__u94_inst0_waitrequest,
   input logic [511:0] avm_local_bb15_ld__u94_inst0_readdata,
   input logic avm_local_bb15_ld__u94_inst0_readdatavalid,
   input logic avm_local_bb15_ld__u94_inst0_writeack,
   // AVM avm_local_bb15_ld__u95_inst0
   output logic avm_local_bb15_ld__u95_inst0_enable,
   output logic avm_local_bb15_ld__u95_inst0_read,
   output logic avm_local_bb15_ld__u95_inst0_write,
   output logic [4:0] avm_local_bb15_ld__u95_inst0_burstcount,
   output logic [30:0] avm_local_bb15_ld__u95_inst0_address,
   output logic [511:0] avm_local_bb15_ld__u95_inst0_writedata,
   output logic [63:0] avm_local_bb15_ld__u95_inst0_byteenable,
   input logic avm_local_bb15_ld__u95_inst0_waitrequest,
   input logic [511:0] avm_local_bb15_ld__u95_inst0_readdata,
   input logic avm_local_bb15_ld__u95_inst0_readdatavalid,
   input logic avm_local_bb15_ld__u95_inst0_writeack,
   // AVM avm_local_bb15_ld__u96_inst0
   output logic avm_local_bb15_ld__u96_inst0_enable,
   output logic avm_local_bb15_ld__u96_inst0_read,
   output logic avm_local_bb15_ld__u96_inst0_write,
   output logic [4:0] avm_local_bb15_ld__u96_inst0_burstcount,
   output logic [30:0] avm_local_bb15_ld__u96_inst0_address,
   output logic [511:0] avm_local_bb15_ld__u96_inst0_writedata,
   output logic [63:0] avm_local_bb15_ld__u96_inst0_byteenable,
   input logic avm_local_bb15_ld__u96_inst0_waitrequest,
   input logic [511:0] avm_local_bb15_ld__u96_inst0_readdata,
   input logic avm_local_bb15_ld__u96_inst0_readdatavalid,
   input logic avm_local_bb15_ld__u96_inst0_writeack,
   // AVM avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0
   output logic avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_enable,
   output logic avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_read,
   output logic avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_write,
   output logic [4:0] avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_burstcount,
   output logic [30:0] avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_address,
   output logic [511:0] avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_writedata,
   output logic [63:0] avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_byteenable,
   input logic avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_waitrequest,
   input logic [511:0] avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_readdata,
   input logic avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_readdatavalid,
   input logic avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_writeack,
   // AVM avm_local_bb1_ld__inst0
   output logic avm_local_bb1_ld__inst0_enable,
   output logic avm_local_bb1_ld__inst0_read,
   output logic avm_local_bb1_ld__inst0_write,
   output logic [4:0] avm_local_bb1_ld__inst0_burstcount,
   output logic [30:0] avm_local_bb1_ld__inst0_address,
   output logic [511:0] avm_local_bb1_ld__inst0_writedata,
   output logic [63:0] avm_local_bb1_ld__inst0_byteenable,
   input logic avm_local_bb1_ld__inst0_waitrequest,
   input logic [511:0] avm_local_bb1_ld__inst0_readdata,
   input logic avm_local_bb1_ld__inst0_readdatavalid,
   input logic avm_local_bb1_ld__inst0_writeack,
   // AVM avm_local_bb1_ld__u12_inst0
   output logic avm_local_bb1_ld__u12_inst0_enable,
   output logic avm_local_bb1_ld__u12_inst0_read,
   output logic avm_local_bb1_ld__u12_inst0_write,
   output logic [4:0] avm_local_bb1_ld__u12_inst0_burstcount,
   output logic [30:0] avm_local_bb1_ld__u12_inst0_address,
   output logic [511:0] avm_local_bb1_ld__u12_inst0_writedata,
   output logic [63:0] avm_local_bb1_ld__u12_inst0_byteenable,
   input logic avm_local_bb1_ld__u12_inst0_waitrequest,
   input logic [511:0] avm_local_bb1_ld__u12_inst0_readdata,
   input logic avm_local_bb1_ld__u12_inst0_readdatavalid,
   input logic avm_local_bb1_ld__u12_inst0_writeack,
   // AVM avm_local_bb1_st_c0_exe4_inst0
   output logic avm_local_bb1_st_c0_exe4_inst0_enable,
   output logic avm_local_bb1_st_c0_exe4_inst0_read,
   output logic avm_local_bb1_st_c0_exe4_inst0_write,
   output logic [4:0] avm_local_bb1_st_c0_exe4_inst0_burstcount,
   output logic [30:0] avm_local_bb1_st_c0_exe4_inst0_address,
   output logic [511:0] avm_local_bb1_st_c0_exe4_inst0_writedata,
   output logic [63:0] avm_local_bb1_st_c0_exe4_inst0_byteenable,
   input logic avm_local_bb1_st_c0_exe4_inst0_waitrequest,
   input logic [511:0] avm_local_bb1_st_c0_exe4_inst0_readdata,
   input logic avm_local_bb1_st_c0_exe4_inst0_readdatavalid,
   input logic avm_local_bb1_st_c0_exe4_inst0_writeack,
   // AVM avm_local_bb22_ld__1368_inst0
   output logic avm_local_bb22_ld__1368_inst0_enable,
   output logic avm_local_bb22_ld__1368_inst0_read,
   output logic avm_local_bb22_ld__1368_inst0_write,
   output logic [4:0] avm_local_bb22_ld__1368_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__1368_inst0_address,
   output logic [511:0] avm_local_bb22_ld__1368_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__1368_inst0_byteenable,
   input logic avm_local_bb22_ld__1368_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__1368_inst0_readdata,
   input logic avm_local_bb22_ld__1368_inst0_readdatavalid,
   input logic avm_local_bb22_ld__1368_inst0_writeack,
   // AVM avm_local_bb22_ld__1370_inst0
   output logic avm_local_bb22_ld__1370_inst0_enable,
   output logic avm_local_bb22_ld__1370_inst0_read,
   output logic avm_local_bb22_ld__1370_inst0_write,
   output logic [4:0] avm_local_bb22_ld__1370_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__1370_inst0_address,
   output logic [511:0] avm_local_bb22_ld__1370_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__1370_inst0_byteenable,
   input logic avm_local_bb22_ld__1370_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__1370_inst0_readdata,
   input logic avm_local_bb22_ld__1370_inst0_readdatavalid,
   input logic avm_local_bb22_ld__1370_inst0_writeack,
   // AVM avm_local_bb22_ld__1372_inst0
   output logic avm_local_bb22_ld__1372_inst0_enable,
   output logic avm_local_bb22_ld__1372_inst0_read,
   output logic avm_local_bb22_ld__1372_inst0_write,
   output logic [4:0] avm_local_bb22_ld__1372_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__1372_inst0_address,
   output logic [511:0] avm_local_bb22_ld__1372_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__1372_inst0_byteenable,
   input logic avm_local_bb22_ld__1372_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__1372_inst0_readdata,
   input logic avm_local_bb22_ld__1372_inst0_readdatavalid,
   input logic avm_local_bb22_ld__1372_inst0_writeack,
   // AVM avm_local_bb22_ld__1374_inst0
   output logic avm_local_bb22_ld__1374_inst0_enable,
   output logic avm_local_bb22_ld__1374_inst0_read,
   output logic avm_local_bb22_ld__1374_inst0_write,
   output logic [4:0] avm_local_bb22_ld__1374_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__1374_inst0_address,
   output logic [511:0] avm_local_bb22_ld__1374_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__1374_inst0_byteenable,
   input logic avm_local_bb22_ld__1374_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__1374_inst0_readdata,
   input logic avm_local_bb22_ld__1374_inst0_readdatavalid,
   input logic avm_local_bb22_ld__1374_inst0_writeack,
   // AVM avm_local_bb22_ld__inst0
   output logic avm_local_bb22_ld__inst0_enable,
   output logic avm_local_bb22_ld__inst0_read,
   output logic avm_local_bb22_ld__inst0_write,
   output logic [4:0] avm_local_bb22_ld__inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__inst0_address,
   output logic [511:0] avm_local_bb22_ld__inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__inst0_byteenable,
   input logic avm_local_bb22_ld__inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__inst0_readdata,
   input logic avm_local_bb22_ld__inst0_readdatavalid,
   input logic avm_local_bb22_ld__inst0_writeack,
   // AVM avm_local_bb22_ld__u115_inst0
   output logic avm_local_bb22_ld__u115_inst0_enable,
   output logic avm_local_bb22_ld__u115_inst0_read,
   output logic avm_local_bb22_ld__u115_inst0_write,
   output logic [4:0] avm_local_bb22_ld__u115_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__u115_inst0_address,
   output logic [511:0] avm_local_bb22_ld__u115_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__u115_inst0_byteenable,
   input logic avm_local_bb22_ld__u115_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__u115_inst0_readdata,
   input logic avm_local_bb22_ld__u115_inst0_readdatavalid,
   input logic avm_local_bb22_ld__u115_inst0_writeack,
   // AVM avm_local_bb22_ld__u116_inst0
   output logic avm_local_bb22_ld__u116_inst0_enable,
   output logic avm_local_bb22_ld__u116_inst0_read,
   output logic avm_local_bb22_ld__u116_inst0_write,
   output logic [4:0] avm_local_bb22_ld__u116_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__u116_inst0_address,
   output logic [511:0] avm_local_bb22_ld__u116_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__u116_inst0_byteenable,
   input logic avm_local_bb22_ld__u116_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__u116_inst0_readdata,
   input logic avm_local_bb22_ld__u116_inst0_readdatavalid,
   input logic avm_local_bb22_ld__u116_inst0_writeack,
   // AVM avm_local_bb22_ld__u117_inst0
   output logic avm_local_bb22_ld__u117_inst0_enable,
   output logic avm_local_bb22_ld__u117_inst0_read,
   output logic avm_local_bb22_ld__u117_inst0_write,
   output logic [4:0] avm_local_bb22_ld__u117_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld__u117_inst0_address,
   output logic [511:0] avm_local_bb22_ld__u117_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld__u117_inst0_byteenable,
   input logic avm_local_bb22_ld__u117_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld__u117_inst0_readdata,
   input logic avm_local_bb22_ld__u117_inst0_readdatavalid,
   input logic avm_local_bb22_ld__u117_inst0_writeack,
   // AVM avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0
   output logic avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_enable,
   output logic avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_read,
   output logic avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_write,
   output logic [4:0] avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_burstcount,
   output logic [30:0] avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_address,
   output logic [511:0] avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_writedata,
   output logic [63:0] avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_byteenable,
   input logic avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_waitrequest,
   input logic [511:0] avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_readdata,
   input logic avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_readdatavalid,
   input logic avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_writeack,
   // AVM avm_local_bb24_ld__u122_inst0
   output logic avm_local_bb24_ld__u122_inst0_enable,
   output logic avm_local_bb24_ld__u122_inst0_read,
   output logic avm_local_bb24_ld__u122_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u122_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u122_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u122_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u122_inst0_byteenable,
   input logic avm_local_bb24_ld__u122_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u122_inst0_readdata,
   input logic avm_local_bb24_ld__u122_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u122_inst0_writeack,
   // AVM avm_local_bb24_ld__u123_inst0
   output logic avm_local_bb24_ld__u123_inst0_enable,
   output logic avm_local_bb24_ld__u123_inst0_read,
   output logic avm_local_bb24_ld__u123_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u123_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u123_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u123_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u123_inst0_byteenable,
   input logic avm_local_bb24_ld__u123_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u123_inst0_readdata,
   input logic avm_local_bb24_ld__u123_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u123_inst0_writeack,
   // AVM avm_local_bb24_ld__u124_inst0
   output logic avm_local_bb24_ld__u124_inst0_enable,
   output logic avm_local_bb24_ld__u124_inst0_read,
   output logic avm_local_bb24_ld__u124_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u124_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u124_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u124_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u124_inst0_byteenable,
   input logic avm_local_bb24_ld__u124_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u124_inst0_readdata,
   input logic avm_local_bb24_ld__u124_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u124_inst0_writeack,
   // AVM avm_local_bb24_ld__u125_inst0
   output logic avm_local_bb24_ld__u125_inst0_enable,
   output logic avm_local_bb24_ld__u125_inst0_read,
   output logic avm_local_bb24_ld__u125_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u125_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u125_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u125_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u125_inst0_byteenable,
   input logic avm_local_bb24_ld__u125_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u125_inst0_readdata,
   input logic avm_local_bb24_ld__u125_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u125_inst0_writeack,
   // AVM avm_local_bb24_ld__u126_inst0
   output logic avm_local_bb24_ld__u126_inst0_enable,
   output logic avm_local_bb24_ld__u126_inst0_read,
   output logic avm_local_bb24_ld__u126_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u126_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u126_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u126_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u126_inst0_byteenable,
   input logic avm_local_bb24_ld__u126_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u126_inst0_readdata,
   input logic avm_local_bb24_ld__u126_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u126_inst0_writeack,
   // AVM avm_local_bb24_ld__u127_inst0
   output logic avm_local_bb24_ld__u127_inst0_enable,
   output logic avm_local_bb24_ld__u127_inst0_read,
   output logic avm_local_bb24_ld__u127_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u127_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u127_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u127_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u127_inst0_byteenable,
   input logic avm_local_bb24_ld__u127_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u127_inst0_readdata,
   input logic avm_local_bb24_ld__u127_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u127_inst0_writeack,
   // AVM avm_local_bb24_ld__u128_inst0
   output logic avm_local_bb24_ld__u128_inst0_enable,
   output logic avm_local_bb24_ld__u128_inst0_read,
   output logic avm_local_bb24_ld__u128_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u128_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u128_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u128_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u128_inst0_byteenable,
   input logic avm_local_bb24_ld__u128_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u128_inst0_readdata,
   input logic avm_local_bb24_ld__u128_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u128_inst0_writeack,
   // AVM avm_local_bb24_ld__u129_inst0
   output logic avm_local_bb24_ld__u129_inst0_enable,
   output logic avm_local_bb24_ld__u129_inst0_read,
   output logic avm_local_bb24_ld__u129_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u129_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u129_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u129_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u129_inst0_byteenable,
   input logic avm_local_bb24_ld__u129_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u129_inst0_readdata,
   input logic avm_local_bb24_ld__u129_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u129_inst0_writeack,
   // AVM avm_local_bb24_ld__u130_inst0
   output logic avm_local_bb24_ld__u130_inst0_enable,
   output logic avm_local_bb24_ld__u130_inst0_read,
   output logic avm_local_bb24_ld__u130_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u130_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u130_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u130_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u130_inst0_byteenable,
   input logic avm_local_bb24_ld__u130_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u130_inst0_readdata,
   input logic avm_local_bb24_ld__u130_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u130_inst0_writeack,
   // AVM avm_local_bb24_ld__u131_inst0
   output logic avm_local_bb24_ld__u131_inst0_enable,
   output logic avm_local_bb24_ld__u131_inst0_read,
   output logic avm_local_bb24_ld__u131_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u131_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u131_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u131_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u131_inst0_byteenable,
   input logic avm_local_bb24_ld__u131_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u131_inst0_readdata,
   input logic avm_local_bb24_ld__u131_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u131_inst0_writeack,
   // AVM avm_local_bb24_ld__u132_inst0
   output logic avm_local_bb24_ld__u132_inst0_enable,
   output logic avm_local_bb24_ld__u132_inst0_read,
   output logic avm_local_bb24_ld__u132_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u132_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u132_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u132_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u132_inst0_byteenable,
   input logic avm_local_bb24_ld__u132_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u132_inst0_readdata,
   input logic avm_local_bb24_ld__u132_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u132_inst0_writeack,
   // AVM avm_local_bb24_ld__u133_inst0
   output logic avm_local_bb24_ld__u133_inst0_enable,
   output logic avm_local_bb24_ld__u133_inst0_read,
   output logic avm_local_bb24_ld__u133_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u133_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u133_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u133_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u133_inst0_byteenable,
   input logic avm_local_bb24_ld__u133_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u133_inst0_readdata,
   input logic avm_local_bb24_ld__u133_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u133_inst0_writeack,
   // AVM avm_local_bb24_ld__u134_inst0
   output logic avm_local_bb24_ld__u134_inst0_enable,
   output logic avm_local_bb24_ld__u134_inst0_read,
   output logic avm_local_bb24_ld__u134_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u134_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u134_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u134_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u134_inst0_byteenable,
   input logic avm_local_bb24_ld__u134_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u134_inst0_readdata,
   input logic avm_local_bb24_ld__u134_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u134_inst0_writeack,
   // AVM avm_local_bb24_ld__u135_inst0
   output logic avm_local_bb24_ld__u135_inst0_enable,
   output logic avm_local_bb24_ld__u135_inst0_read,
   output logic avm_local_bb24_ld__u135_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u135_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u135_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u135_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u135_inst0_byteenable,
   input logic avm_local_bb24_ld__u135_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u135_inst0_readdata,
   input logic avm_local_bb24_ld__u135_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u135_inst0_writeack,
   // AVM avm_local_bb24_ld__u136_inst0
   output logic avm_local_bb24_ld__u136_inst0_enable,
   output logic avm_local_bb24_ld__u136_inst0_read,
   output logic avm_local_bb24_ld__u136_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u136_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u136_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u136_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u136_inst0_byteenable,
   input logic avm_local_bb24_ld__u136_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u136_inst0_readdata,
   input logic avm_local_bb24_ld__u136_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u136_inst0_writeack,
   // AVM avm_local_bb24_ld__u137_inst0
   output logic avm_local_bb24_ld__u137_inst0_enable,
   output logic avm_local_bb24_ld__u137_inst0_read,
   output logic avm_local_bb24_ld__u137_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u137_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u137_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u137_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u137_inst0_byteenable,
   input logic avm_local_bb24_ld__u137_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u137_inst0_readdata,
   input logic avm_local_bb24_ld__u137_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u137_inst0_writeack,
   // AVM avm_local_bb24_ld__u138_inst0
   output logic avm_local_bb24_ld__u138_inst0_enable,
   output logic avm_local_bb24_ld__u138_inst0_read,
   output logic avm_local_bb24_ld__u138_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u138_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u138_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u138_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u138_inst0_byteenable,
   input logic avm_local_bb24_ld__u138_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u138_inst0_readdata,
   input logic avm_local_bb24_ld__u138_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u138_inst0_writeack,
   // AVM avm_local_bb24_ld__u139_inst0
   output logic avm_local_bb24_ld__u139_inst0_enable,
   output logic avm_local_bb24_ld__u139_inst0_read,
   output logic avm_local_bb24_ld__u139_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u139_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u139_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u139_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u139_inst0_byteenable,
   input logic avm_local_bb24_ld__u139_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u139_inst0_readdata,
   input logic avm_local_bb24_ld__u139_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u139_inst0_writeack,
   // AVM avm_local_bb24_ld__u140_inst0
   output logic avm_local_bb24_ld__u140_inst0_enable,
   output logic avm_local_bb24_ld__u140_inst0_read,
   output logic avm_local_bb24_ld__u140_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u140_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u140_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u140_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u140_inst0_byteenable,
   input logic avm_local_bb24_ld__u140_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u140_inst0_readdata,
   input logic avm_local_bb24_ld__u140_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u140_inst0_writeack,
   // AVM avm_local_bb24_ld__u141_inst0
   output logic avm_local_bb24_ld__u141_inst0_enable,
   output logic avm_local_bb24_ld__u141_inst0_read,
   output logic avm_local_bb24_ld__u141_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u141_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u141_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u141_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u141_inst0_byteenable,
   input logic avm_local_bb24_ld__u141_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u141_inst0_readdata,
   input logic avm_local_bb24_ld__u141_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u141_inst0_writeack,
   // AVM avm_local_bb24_ld__u142_inst0
   output logic avm_local_bb24_ld__u142_inst0_enable,
   output logic avm_local_bb24_ld__u142_inst0_read,
   output logic avm_local_bb24_ld__u142_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u142_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u142_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u142_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u142_inst0_byteenable,
   input logic avm_local_bb24_ld__u142_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u142_inst0_readdata,
   input logic avm_local_bb24_ld__u142_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u142_inst0_writeack,
   // AVM avm_local_bb24_ld__u143_inst0
   output logic avm_local_bb24_ld__u143_inst0_enable,
   output logic avm_local_bb24_ld__u143_inst0_read,
   output logic avm_local_bb24_ld__u143_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u143_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u143_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u143_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u143_inst0_byteenable,
   input logic avm_local_bb24_ld__u143_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u143_inst0_readdata,
   input logic avm_local_bb24_ld__u143_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u143_inst0_writeack,
   // AVM avm_local_bb24_ld__u144_inst0
   output logic avm_local_bb24_ld__u144_inst0_enable,
   output logic avm_local_bb24_ld__u144_inst0_read,
   output logic avm_local_bb24_ld__u144_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u144_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u144_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u144_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u144_inst0_byteenable,
   input logic avm_local_bb24_ld__u144_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u144_inst0_readdata,
   input logic avm_local_bb24_ld__u144_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u144_inst0_writeack,
   // AVM avm_local_bb24_ld__u145_inst0
   output logic avm_local_bb24_ld__u145_inst0_enable,
   output logic avm_local_bb24_ld__u145_inst0_read,
   output logic avm_local_bb24_ld__u145_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u145_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u145_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u145_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u145_inst0_byteenable,
   input logic avm_local_bb24_ld__u145_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u145_inst0_readdata,
   input logic avm_local_bb24_ld__u145_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u145_inst0_writeack,
   // AVM avm_local_bb24_ld__u146_inst0
   output logic avm_local_bb24_ld__u146_inst0_enable,
   output logic avm_local_bb24_ld__u146_inst0_read,
   output logic avm_local_bb24_ld__u146_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u146_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u146_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u146_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u146_inst0_byteenable,
   input logic avm_local_bb24_ld__u146_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u146_inst0_readdata,
   input logic avm_local_bb24_ld__u146_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u146_inst0_writeack,
   // AVM avm_local_bb24_ld__u147_inst0
   output logic avm_local_bb24_ld__u147_inst0_enable,
   output logic avm_local_bb24_ld__u147_inst0_read,
   output logic avm_local_bb24_ld__u147_inst0_write,
   output logic [4:0] avm_local_bb24_ld__u147_inst0_burstcount,
   output logic [30:0] avm_local_bb24_ld__u147_inst0_address,
   output logic [511:0] avm_local_bb24_ld__u147_inst0_writedata,
   output logic [63:0] avm_local_bb24_ld__u147_inst0_byteenable,
   input logic avm_local_bb24_ld__u147_inst0_waitrequest,
   input logic [511:0] avm_local_bb24_ld__u147_inst0_readdata,
   input logic avm_local_bb24_ld__u147_inst0_readdatavalid,
   input logic avm_local_bb24_ld__u147_inst0_writeack,
   // AVM avm_local_bb26_ld__u154_inst0
   output logic avm_local_bb26_ld__u154_inst0_enable,
   output logic avm_local_bb26_ld__u154_inst0_read,
   output logic avm_local_bb26_ld__u154_inst0_write,
   output logic [4:0] avm_local_bb26_ld__u154_inst0_burstcount,
   output logic [30:0] avm_local_bb26_ld__u154_inst0_address,
   output logic [511:0] avm_local_bb26_ld__u154_inst0_writedata,
   output logic [63:0] avm_local_bb26_ld__u154_inst0_byteenable,
   input logic avm_local_bb26_ld__u154_inst0_waitrequest,
   input logic [511:0] avm_local_bb26_ld__u154_inst0_readdata,
   input logic avm_local_bb26_ld__u154_inst0_readdatavalid,
   input logic avm_local_bb26_ld__u154_inst0_writeack,
   // AVM avm_local_bb26_ld__u155_inst0
   output logic avm_local_bb26_ld__u155_inst0_enable,
   output logic avm_local_bb26_ld__u155_inst0_read,
   output logic avm_local_bb26_ld__u155_inst0_write,
   output logic [4:0] avm_local_bb26_ld__u155_inst0_burstcount,
   output logic [30:0] avm_local_bb26_ld__u155_inst0_address,
   output logic [511:0] avm_local_bb26_ld__u155_inst0_writedata,
   output logic [63:0] avm_local_bb26_ld__u155_inst0_byteenable,
   input logic avm_local_bb26_ld__u155_inst0_waitrequest,
   input logic [511:0] avm_local_bb26_ld__u155_inst0_readdata,
   input logic avm_local_bb26_ld__u155_inst0_readdatavalid,
   input logic avm_local_bb26_ld__u155_inst0_writeack,
   // AVM avm_local_bb26_ld__u156_inst0
   output logic avm_local_bb26_ld__u156_inst0_enable,
   output logic avm_local_bb26_ld__u156_inst0_read,
   output logic avm_local_bb26_ld__u156_inst0_write,
   output logic [4:0] avm_local_bb26_ld__u156_inst0_burstcount,
   output logic [30:0] avm_local_bb26_ld__u156_inst0_address,
   output logic [511:0] avm_local_bb26_ld__u156_inst0_writedata,
   output logic [63:0] avm_local_bb26_ld__u156_inst0_byteenable,
   input logic avm_local_bb26_ld__u156_inst0_waitrequest,
   input logic [511:0] avm_local_bb26_ld__u156_inst0_readdata,
   input logic avm_local_bb26_ld__u156_inst0_readdatavalid,
   input logic avm_local_bb26_ld__u156_inst0_writeack,
   // AVM avm_local_bb26_ld__u157_inst0
   output logic avm_local_bb26_ld__u157_inst0_enable,
   output logic avm_local_bb26_ld__u157_inst0_read,
   output logic avm_local_bb26_ld__u157_inst0_write,
   output logic [4:0] avm_local_bb26_ld__u157_inst0_burstcount,
   output logic [30:0] avm_local_bb26_ld__u157_inst0_address,
   output logic [511:0] avm_local_bb26_ld__u157_inst0_writedata,
   output logic [63:0] avm_local_bb26_ld__u157_inst0_byteenable,
   input logic avm_local_bb26_ld__u157_inst0_waitrequest,
   input logic [511:0] avm_local_bb26_ld__u157_inst0_readdata,
   input logic avm_local_bb26_ld__u157_inst0_readdatavalid,
   input logic avm_local_bb26_ld__u157_inst0_writeack,
   // AVM avm_local_bb26_ld__u158_inst0
   output logic avm_local_bb26_ld__u158_inst0_enable,
   output logic avm_local_bb26_ld__u158_inst0_read,
   output logic avm_local_bb26_ld__u158_inst0_write,
   output logic [4:0] avm_local_bb26_ld__u158_inst0_burstcount,
   output logic [30:0] avm_local_bb26_ld__u158_inst0_address,
   output logic [511:0] avm_local_bb26_ld__u158_inst0_writedata,
   output logic [63:0] avm_local_bb26_ld__u158_inst0_byteenable,
   input logic avm_local_bb26_ld__u158_inst0_waitrequest,
   input logic [511:0] avm_local_bb26_ld__u158_inst0_readdata,
   input logic avm_local_bb26_ld__u158_inst0_readdatavalid,
   input logic avm_local_bb26_ld__u158_inst0_writeack,
   // AVM avm_local_bb26_ld__u160_inst0
   output logic avm_local_bb26_ld__u160_inst0_enable,
   output logic avm_local_bb26_ld__u160_inst0_read,
   output logic avm_local_bb26_ld__u160_inst0_write,
   output logic [4:0] avm_local_bb26_ld__u160_inst0_burstcount,
   output logic [30:0] avm_local_bb26_ld__u160_inst0_address,
   output logic [511:0] avm_local_bb26_ld__u160_inst0_writedata,
   output logic [63:0] avm_local_bb26_ld__u160_inst0_byteenable,
   input logic avm_local_bb26_ld__u160_inst0_waitrequest,
   input logic [511:0] avm_local_bb26_ld__u160_inst0_readdata,
   input logic avm_local_bb26_ld__u160_inst0_readdatavalid,
   input logic avm_local_bb26_ld__u160_inst0_writeack,
   // AVM avm_local_bb26_ld__u161_inst0
   output logic avm_local_bb26_ld__u161_inst0_enable,
   output logic avm_local_bb26_ld__u161_inst0_read,
   output logic avm_local_bb26_ld__u161_inst0_write,
   output logic [4:0] avm_local_bb26_ld__u161_inst0_burstcount,
   output logic [30:0] avm_local_bb26_ld__u161_inst0_address,
   output logic [511:0] avm_local_bb26_ld__u161_inst0_writedata,
   output logic [63:0] avm_local_bb26_ld__u161_inst0_byteenable,
   input logic avm_local_bb26_ld__u161_inst0_waitrequest,
   input logic [511:0] avm_local_bb26_ld__u161_inst0_readdata,
   input logic avm_local_bb26_ld__u161_inst0_readdatavalid,
   input logic avm_local_bb26_ld__u161_inst0_writeack,
   // AVM avm_local_bb26_ld__u162_inst0
   output logic avm_local_bb26_ld__u162_inst0_enable,
   output logic avm_local_bb26_ld__u162_inst0_read,
   output logic avm_local_bb26_ld__u162_inst0_write,
   output logic [4:0] avm_local_bb26_ld__u162_inst0_burstcount,
   output logic [30:0] avm_local_bb26_ld__u162_inst0_address,
   output logic [511:0] avm_local_bb26_ld__u162_inst0_writedata,
   output logic [63:0] avm_local_bb26_ld__u162_inst0_byteenable,
   input logic avm_local_bb26_ld__u162_inst0_waitrequest,
   input logic [511:0] avm_local_bb26_ld__u162_inst0_readdata,
   input logic avm_local_bb26_ld__u162_inst0_readdatavalid,
   input logic avm_local_bb26_ld__u162_inst0_writeack,
   // AVM avm_local_bb26_ld__u163_inst0
   output logic avm_local_bb26_ld__u163_inst0_enable,
   output logic avm_local_bb26_ld__u163_inst0_read,
   output logic avm_local_bb26_ld__u163_inst0_write,
   output logic [4:0] avm_local_bb26_ld__u163_inst0_burstcount,
   output logic [30:0] avm_local_bb26_ld__u163_inst0_address,
   output logic [511:0] avm_local_bb26_ld__u163_inst0_writedata,
   output logic [63:0] avm_local_bb26_ld__u163_inst0_byteenable,
   input logic avm_local_bb26_ld__u163_inst0_waitrequest,
   input logic [511:0] avm_local_bb26_ld__u163_inst0_readdata,
   input logic avm_local_bb26_ld__u163_inst0_readdatavalid,
   input logic avm_local_bb26_ld__u163_inst0_writeack,
   // AVM avm_local_bb26_ld__u164_inst0
   output logic avm_local_bb26_ld__u164_inst0_enable,
   output logic avm_local_bb26_ld__u164_inst0_read,
   output logic avm_local_bb26_ld__u164_inst0_write,
   output logic [4:0] avm_local_bb26_ld__u164_inst0_burstcount,
   output logic [30:0] avm_local_bb26_ld__u164_inst0_address,
   output logic [511:0] avm_local_bb26_ld__u164_inst0_writedata,
   output logic [63:0] avm_local_bb26_ld__u164_inst0_byteenable,
   input logic avm_local_bb26_ld__u164_inst0_waitrequest,
   input logic [511:0] avm_local_bb26_ld__u164_inst0_readdata,
   input logic avm_local_bb26_ld__u164_inst0_readdatavalid,
   input logic avm_local_bb26_ld__u164_inst0_writeack,
   // AVM avm_local_bb26_ld__u165_inst0
   output logic avm_local_bb26_ld__u165_inst0_enable,
   output logic avm_local_bb26_ld__u165_inst0_read,
   output logic avm_local_bb26_ld__u165_inst0_write,
   output logic [4:0] avm_local_bb26_ld__u165_inst0_burstcount,
   output logic [30:0] avm_local_bb26_ld__u165_inst0_address,
   output logic [511:0] avm_local_bb26_ld__u165_inst0_writedata,
   output logic [63:0] avm_local_bb26_ld__u165_inst0_byteenable,
   input logic avm_local_bb26_ld__u165_inst0_waitrequest,
   input logic [511:0] avm_local_bb26_ld__u165_inst0_readdata,
   input logic avm_local_bb26_ld__u165_inst0_readdatavalid,
   input logic avm_local_bb26_ld__u165_inst0_writeack,
   // AVM avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0
   output logic avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_enable,
   output logic avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_read,
   output logic avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_write,
   output logic [4:0] avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_burstcount,
   output logic [30:0] avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_address,
   output logic [511:0] avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_writedata,
   output logic [63:0] avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_byteenable,
   input logic avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_waitrequest,
   input logic [511:0] avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_readdata,
   input logic avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_readdatavalid,
   input logic avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_writeack,
   // AVM avm_local_bb33_ld__u179_inst0
   output logic avm_local_bb33_ld__u179_inst0_enable,
   output logic avm_local_bb33_ld__u179_inst0_read,
   output logic avm_local_bb33_ld__u179_inst0_write,
   output logic [4:0] avm_local_bb33_ld__u179_inst0_burstcount,
   output logic [30:0] avm_local_bb33_ld__u179_inst0_address,
   output logic [511:0] avm_local_bb33_ld__u179_inst0_writedata,
   output logic [63:0] avm_local_bb33_ld__u179_inst0_byteenable,
   input logic avm_local_bb33_ld__u179_inst0_waitrequest,
   input logic [511:0] avm_local_bb33_ld__u179_inst0_readdata,
   input logic avm_local_bb33_ld__u179_inst0_readdatavalid,
   input logic avm_local_bb33_ld__u179_inst0_writeack,
   // AVM avm_local_bb33_st__inst0
   output logic avm_local_bb33_st__inst0_enable,
   output logic avm_local_bb33_st__inst0_read,
   output logic avm_local_bb33_st__inst0_write,
   output logic [4:0] avm_local_bb33_st__inst0_burstcount,
   output logic [30:0] avm_local_bb33_st__inst0_address,
   output logic [511:0] avm_local_bb33_st__inst0_writedata,
   output logic [63:0] avm_local_bb33_st__inst0_byteenable,
   input logic avm_local_bb33_st__inst0_waitrequest,
   input logic [511:0] avm_local_bb33_st__inst0_readdata,
   input logic avm_local_bb33_st__inst0_readdatavalid,
   input logic avm_local_bb33_st__inst0_writeack,
   // AVM avm_local_bb33_st_add239_inst0
   output logic avm_local_bb33_st_add239_inst0_enable,
   output logic avm_local_bb33_st_add239_inst0_read,
   output logic avm_local_bb33_st_add239_inst0_write,
   output logic [4:0] avm_local_bb33_st_add239_inst0_burstcount,
   output logic [30:0] avm_local_bb33_st_add239_inst0_address,
   output logic [511:0] avm_local_bb33_st_add239_inst0_writedata,
   output logic [63:0] avm_local_bb33_st_add239_inst0_byteenable,
   input logic avm_local_bb33_st_add239_inst0_waitrequest,
   input logic [511:0] avm_local_bb33_st_add239_inst0_readdata,
   input logic avm_local_bb33_st_add239_inst0_readdatavalid,
   input logic avm_local_bb33_st_add239_inst0_writeack,
   // AVM avm_local_bb3_ld__inst0
   output logic avm_local_bb3_ld__inst0_enable,
   output logic avm_local_bb3_ld__inst0_read,
   output logic avm_local_bb3_ld__inst0_write,
   output logic [4:0] avm_local_bb3_ld__inst0_burstcount,
   output logic [30:0] avm_local_bb3_ld__inst0_address,
   output logic [511:0] avm_local_bb3_ld__inst0_writedata,
   output logic [63:0] avm_local_bb3_ld__inst0_byteenable,
   input logic avm_local_bb3_ld__inst0_waitrequest,
   input logic [511:0] avm_local_bb3_ld__inst0_readdata,
   input logic avm_local_bb3_ld__inst0_readdatavalid,
   input logic avm_local_bb3_ld__inst0_writeack,
   // AVM avm_local_bb40_st__inst0
   output logic avm_local_bb40_st__inst0_enable,
   output logic avm_local_bb40_st__inst0_read,
   output logic avm_local_bb40_st__inst0_write,
   output logic [4:0] avm_local_bb40_st__inst0_burstcount,
   output logic [30:0] avm_local_bb40_st__inst0_address,
   output logic [511:0] avm_local_bb40_st__inst0_writedata,
   output logic [63:0] avm_local_bb40_st__inst0_byteenable,
   input logic avm_local_bb40_st__inst0_waitrequest,
   input logic [511:0] avm_local_bb40_st__inst0_readdata,
   input logic avm_local_bb40_st__inst0_readdatavalid,
   input logic avm_local_bb40_st__inst0_writeack,
   // AVM avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0
   output logic avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_enable,
   output logic avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_read,
   output logic avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_write,
   output logic [4:0] avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_burstcount,
   output logic [30:0] avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_address,
   output logic [511:0] avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_writedata,
   output logic [63:0] avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_byteenable,
   input logic avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_waitrequest,
   input logic [511:0] avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_readdata,
   input logic avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_readdatavalid,
   input logic avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_writeack,
   // AVM avm_local_bb8_st_c0_exe1270_inst0
   output logic avm_local_bb8_st_c0_exe1270_inst0_enable,
   output logic avm_local_bb8_st_c0_exe1270_inst0_read,
   output logic avm_local_bb8_st_c0_exe1270_inst0_write,
   output logic [4:0] avm_local_bb8_st_c0_exe1270_inst0_burstcount,
   output logic [30:0] avm_local_bb8_st_c0_exe1270_inst0_address,
   output logic [511:0] avm_local_bb8_st_c0_exe1270_inst0_writedata,
   output logic [63:0] avm_local_bb8_st_c0_exe1270_inst0_byteenable,
   input logic avm_local_bb8_st_c0_exe1270_inst0_waitrequest,
   input logic [511:0] avm_local_bb8_st_c0_exe1270_inst0_readdata,
   input logic avm_local_bb8_st_c0_exe1270_inst0_readdatavalid,
   input logic avm_local_bb8_st_c0_exe1270_inst0_writeack
);
   genvar __i;
   genvar __j;
   genvar __k;
   genvar __l;
   genvar __m;
   genvar __n;
   genvar __o;
   genvar __p;
   genvar __q;
   genvar __r;
   genvar __s;
   genvar __t;
   genvar __u;
   genvar __v;
   genvar __w;
   genvar __x;
   genvar __y;
   genvar __z;
   logic lmem_invalid_single_bit;
   logic [16:0] lmem_invalid_aspaces;
   logic local_avm_aspace29_enable [1][6];
   logic local_avm_aspace29_read [1][6];
   logic local_avm_aspace29_write [1][6];
   logic local_avm_aspace29_burstcount [1][6];
   logic [31:0] local_avm_aspace29_address [1][6];
   logic [31:0] local_avm_aspace29_writedata [1][6];
   logic [3:0] local_avm_aspace29_byteenable [1][6];
   logic local_avm_aspace29_waitrequest [1][6];
   logic [31:0] local_avm_aspace29_readdata [1][6];
   logic local_avm_aspace29_readdatavalid [1][6];
   logic local_avm_aspace29_writeack [1][6];
   logic local_avm_aspace30_enable [1][5];
   logic local_avm_aspace30_read [1][5];
   logic local_avm_aspace30_write [1][5];
   logic local_avm_aspace30_burstcount [1][5];
   logic [31:0] local_avm_aspace30_address [1][5];
   logic [31:0] local_avm_aspace30_writedata [1][5];
   logic [3:0] local_avm_aspace30_byteenable [1][5];
   logic local_avm_aspace30_waitrequest [1][5];
   logic [31:0] local_avm_aspace30_readdata [1][5];
   logic local_avm_aspace30_readdatavalid [1][5];
   logic local_avm_aspace30_writeack [1][5];
   logic local_avm_aspace31_enable [1][5];
   logic local_avm_aspace31_read [1][5];
   logic local_avm_aspace31_write [1][5];
   logic local_avm_aspace31_burstcount [1][5];
   logic [31:0] local_avm_aspace31_address [1][5];
   logic [31:0] local_avm_aspace31_writedata [1][5];
   logic [3:0] local_avm_aspace31_byteenable [1][5];
   logic local_avm_aspace31_waitrequest [1][5];
   logic [31:0] local_avm_aspace31_readdata [1][5];
   logic local_avm_aspace31_readdatavalid [1][5];
   logic local_avm_aspace31_writeack [1][5];
   logic local_avm_aspace32_enable [1][9];
   logic local_avm_aspace32_read [1][9];
   logic local_avm_aspace32_write [1][9];
   logic local_avm_aspace32_burstcount [1][9];
   logic [31:0] local_avm_aspace32_address [1][9];
   logic [31:0] local_avm_aspace32_writedata [1][9];
   logic [3:0] local_avm_aspace32_byteenable [1][9];
   logic local_avm_aspace32_waitrequest [1][9];
   logic [31:0] local_avm_aspace32_readdata [1][9];
   logic local_avm_aspace32_readdatavalid [1][9];
   logic local_avm_aspace32_writeack [1][9];
   logic local_avm_aspace33_enable [1][9];
   logic local_avm_aspace33_read [1][9];
   logic local_avm_aspace33_write [1][9];
   logic local_avm_aspace33_burstcount [1][9];
   logic [31:0] local_avm_aspace33_address [1][9];
   logic [31:0] local_avm_aspace33_writedata [1][9];
   logic [3:0] local_avm_aspace33_byteenable [1][9];
   logic local_avm_aspace33_waitrequest [1][9];
   logic [31:0] local_avm_aspace33_readdata [1][9];
   logic local_avm_aspace33_readdatavalid [1][9];
   logic local_avm_aspace33_writeack [1][9];
   logic local_avm_aspace34_enable [1][5];
   logic local_avm_aspace34_read [1][5];
   logic local_avm_aspace34_write [1][5];
   logic local_avm_aspace34_burstcount [1][5];
   logic [31:0] local_avm_aspace34_address [1][5];
   logic [31:0] local_avm_aspace34_writedata [1][5];
   logic [3:0] local_avm_aspace34_byteenable [1][5];
   logic local_avm_aspace34_waitrequest [1][5];
   logic [31:0] local_avm_aspace34_readdata [1][5];
   logic local_avm_aspace34_readdatavalid [1][5];
   logic local_avm_aspace34_writeack [1][5];
   logic local_avm_aspace35_enable [1][4];
   logic local_avm_aspace35_read [1][4];
   logic local_avm_aspace35_write [1][4];
   logic local_avm_aspace35_burstcount [1][4];
   logic [31:0] local_avm_aspace35_address [1][4];
   logic [31:0] local_avm_aspace35_writedata [1][4];
   logic [3:0] local_avm_aspace35_byteenable [1][4];
   logic local_avm_aspace35_waitrequest [1][4];
   logic [31:0] local_avm_aspace35_readdata [1][4];
   logic local_avm_aspace35_readdatavalid [1][4];
   logic local_avm_aspace35_writeack [1][4];
   logic local_avm_aspace36_enable [1][4];
   logic local_avm_aspace36_read [1][4];
   logic local_avm_aspace36_write [1][4];
   logic local_avm_aspace36_burstcount [1][4];
   logic [31:0] local_avm_aspace36_address [1][4];
   logic [31:0] local_avm_aspace36_writedata [1][4];
   logic [3:0] local_avm_aspace36_byteenable [1][4];
   logic local_avm_aspace36_waitrequest [1][4];
   logic [31:0] local_avm_aspace36_readdata [1][4];
   logic local_avm_aspace36_readdatavalid [1][4];
   logic local_avm_aspace36_writeack [1][4];
   logic local_avm_aspace37_enable [1][5];
   logic local_avm_aspace37_read [1][5];
   logic local_avm_aspace37_write [1][5];
   logic local_avm_aspace37_burstcount [1][5];
   logic [31:0] local_avm_aspace37_address [1][5];
   logic [31:0] local_avm_aspace37_writedata [1][5];
   logic [3:0] local_avm_aspace37_byteenable [1][5];
   logic local_avm_aspace37_waitrequest [1][5];
   logic [31:0] local_avm_aspace37_readdata [1][5];
   logic local_avm_aspace37_readdatavalid [1][5];
   logic local_avm_aspace37_writeack [1][5];
   logic local_avm_aspace38_enable [1][6];
   logic local_avm_aspace38_read [1][6];
   logic local_avm_aspace38_write [1][6];
   logic local_avm_aspace38_burstcount [1][6];
   logic [31:0] local_avm_aspace38_address [1][6];
   logic [31:0] local_avm_aspace38_writedata [1][6];
   logic [3:0] local_avm_aspace38_byteenable [1][6];
   logic local_avm_aspace38_waitrequest [1][6];
   logic [31:0] local_avm_aspace38_readdata [1][6];
   logic local_avm_aspace38_readdatavalid [1][6];
   logic local_avm_aspace38_writeack [1][6];
   logic local_avm_aspace39_enable [1][5];
   logic local_avm_aspace39_read [1][5];
   logic local_avm_aspace39_write [1][5];
   logic local_avm_aspace39_burstcount [1][5];
   logic [31:0] local_avm_aspace39_address [1][5];
   logic [31:0] local_avm_aspace39_writedata [1][5];
   logic [3:0] local_avm_aspace39_byteenable [1][5];
   logic local_avm_aspace39_waitrequest [1][5];
   logic [31:0] local_avm_aspace39_readdata [1][5];
   logic local_avm_aspace39_readdatavalid [1][5];
   logic local_avm_aspace39_writeack [1][5];
   logic local_avm_aspace40_enable [1][16];
   logic local_avm_aspace40_read [1][16];
   logic local_avm_aspace40_write [1][16];
   logic local_avm_aspace40_burstcount [1][16];
   logic [31:0] local_avm_aspace40_address [1][16];
   logic [31:0] local_avm_aspace40_writedata [1][16];
   logic [3:0] local_avm_aspace40_byteenable [1][16];
   logic local_avm_aspace40_waitrequest [1][16];
   logic [31:0] local_avm_aspace40_readdata [1][16];
   logic local_avm_aspace40_readdatavalid [1][16];
   logic local_avm_aspace40_writeack [1][16];
   logic local_avm_aspace41_enable [1][14];
   logic local_avm_aspace41_read [1][14];
   logic local_avm_aspace41_write [1][14];
   logic local_avm_aspace41_burstcount [1][14];
   logic [31:0] local_avm_aspace41_address [1][14];
   logic [31:0] local_avm_aspace41_writedata [1][14];
   logic [3:0] local_avm_aspace41_byteenable [1][14];
   logic local_avm_aspace41_waitrequest [1][14];
   logic [31:0] local_avm_aspace41_readdata [1][14];
   logic local_avm_aspace41_readdatavalid [1][14];
   logic local_avm_aspace41_writeack [1][14];
   logic local_avm_aspace42_enable [1][10];
   logic local_avm_aspace42_read [1][10];
   logic local_avm_aspace42_write [1][10];
   logic local_avm_aspace42_burstcount [1][10];
   logic [31:0] local_avm_aspace42_address [1][10];
   logic [31:0] local_avm_aspace42_writedata [1][10];
   logic [3:0] local_avm_aspace42_byteenable [1][10];
   logic local_avm_aspace42_waitrequest [1][10];
   logic [31:0] local_avm_aspace42_readdata [1][10];
   logic local_avm_aspace42_readdatavalid [1][10];
   logic local_avm_aspace42_writeack [1][10];
   logic local_avm_aspace43_enable [1][10];
   logic local_avm_aspace43_read [1][10];
   logic local_avm_aspace43_write [1][10];
   logic local_avm_aspace43_burstcount [1][10];
   logic [31:0] local_avm_aspace43_address [1][10];
   logic [31:0] local_avm_aspace43_writedata [1][10];
   logic [3:0] local_avm_aspace43_byteenable [1][10];
   logic local_avm_aspace43_waitrequest [1][10];
   logic [31:0] local_avm_aspace43_readdata [1][10];
   logic local_avm_aspace43_readdatavalid [1][10];
   logic local_avm_aspace43_writeack [1][10];
   logic local_avm_aspace44_enable [1][10];
   logic local_avm_aspace44_read [1][10];
   logic local_avm_aspace44_write [1][10];
   logic local_avm_aspace44_burstcount [1][10];
   logic [31:0] local_avm_aspace44_address [1][10];
   logic [31:0] local_avm_aspace44_writedata [1][10];
   logic [3:0] local_avm_aspace44_byteenable [1][10];
   logic local_avm_aspace44_waitrequest [1][10];
   logic [31:0] local_avm_aspace44_readdata [1][10];
   logic local_avm_aspace44_readdatavalid [1][10];
   logic local_avm_aspace44_writeack [1][10];
   logic local_avm_aspace45_enable [1][7];
   logic local_avm_aspace45_read [1][7];
   logic local_avm_aspace45_write [1][7];
   logic local_avm_aspace45_burstcount [1][7];
   logic [31:0] local_avm_aspace45_address [1][7];
   logic [31:0] local_avm_aspace45_writedata [1][7];
   logic [3:0] local_avm_aspace45_byteenable [1][7];
   logic local_avm_aspace45_waitrequest [1][7];
   logic [31:0] local_avm_aspace45_readdata [1][7];
   logic local_avm_aspace45_readdatavalid [1][7];
   logic local_avm_aspace45_writeack [1][7];

   // INST kernel of perform_ls_function_wrapper
   perform_ls_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_local_bb11_ld__1284_inst0
      .avm_local_bb11_ld__1284_inst0_enable(avm_local_bb11_ld__1284_inst0_enable),
      .avm_local_bb11_ld__1284_inst0_read(avm_local_bb11_ld__1284_inst0_read),
      .avm_local_bb11_ld__1284_inst0_write(avm_local_bb11_ld__1284_inst0_write),
      .avm_local_bb11_ld__1284_inst0_burstcount(avm_local_bb11_ld__1284_inst0_burstcount),
      .avm_local_bb11_ld__1284_inst0_address(avm_local_bb11_ld__1284_inst0_address),
      .avm_local_bb11_ld__1284_inst0_writedata(avm_local_bb11_ld__1284_inst0_writedata),
      .avm_local_bb11_ld__1284_inst0_byteenable(avm_local_bb11_ld__1284_inst0_byteenable),
      .avm_local_bb11_ld__1284_inst0_waitrequest(avm_local_bb11_ld__1284_inst0_waitrequest),
      .avm_local_bb11_ld__1284_inst0_readdata(avm_local_bb11_ld__1284_inst0_readdata),
      .avm_local_bb11_ld__1284_inst0_readdatavalid(avm_local_bb11_ld__1284_inst0_readdatavalid),
      .avm_local_bb11_ld__1284_inst0_writeack(avm_local_bb11_ld__1284_inst0_writeack),
      // AVM avm_local_bb11_ld__1286_inst0
      .avm_local_bb11_ld__1286_inst0_enable(avm_local_bb11_ld__1286_inst0_enable),
      .avm_local_bb11_ld__1286_inst0_read(avm_local_bb11_ld__1286_inst0_read),
      .avm_local_bb11_ld__1286_inst0_write(avm_local_bb11_ld__1286_inst0_write),
      .avm_local_bb11_ld__1286_inst0_burstcount(avm_local_bb11_ld__1286_inst0_burstcount),
      .avm_local_bb11_ld__1286_inst0_address(avm_local_bb11_ld__1286_inst0_address),
      .avm_local_bb11_ld__1286_inst0_writedata(avm_local_bb11_ld__1286_inst0_writedata),
      .avm_local_bb11_ld__1286_inst0_byteenable(avm_local_bb11_ld__1286_inst0_byteenable),
      .avm_local_bb11_ld__1286_inst0_waitrequest(avm_local_bb11_ld__1286_inst0_waitrequest),
      .avm_local_bb11_ld__1286_inst0_readdata(avm_local_bb11_ld__1286_inst0_readdata),
      .avm_local_bb11_ld__1286_inst0_readdatavalid(avm_local_bb11_ld__1286_inst0_readdatavalid),
      .avm_local_bb11_ld__1286_inst0_writeack(avm_local_bb11_ld__1286_inst0_writeack),
      // AVM avm_local_bb11_ld__1288_inst0
      .avm_local_bb11_ld__1288_inst0_enable(avm_local_bb11_ld__1288_inst0_enable),
      .avm_local_bb11_ld__1288_inst0_read(avm_local_bb11_ld__1288_inst0_read),
      .avm_local_bb11_ld__1288_inst0_write(avm_local_bb11_ld__1288_inst0_write),
      .avm_local_bb11_ld__1288_inst0_burstcount(avm_local_bb11_ld__1288_inst0_burstcount),
      .avm_local_bb11_ld__1288_inst0_address(avm_local_bb11_ld__1288_inst0_address),
      .avm_local_bb11_ld__1288_inst0_writedata(avm_local_bb11_ld__1288_inst0_writedata),
      .avm_local_bb11_ld__1288_inst0_byteenable(avm_local_bb11_ld__1288_inst0_byteenable),
      .avm_local_bb11_ld__1288_inst0_waitrequest(avm_local_bb11_ld__1288_inst0_waitrequest),
      .avm_local_bb11_ld__1288_inst0_readdata(avm_local_bb11_ld__1288_inst0_readdata),
      .avm_local_bb11_ld__1288_inst0_readdatavalid(avm_local_bb11_ld__1288_inst0_readdatavalid),
      .avm_local_bb11_ld__1288_inst0_writeack(avm_local_bb11_ld__1288_inst0_writeack),
      // AVM avm_local_bb11_ld__1290_inst0
      .avm_local_bb11_ld__1290_inst0_enable(avm_local_bb11_ld__1290_inst0_enable),
      .avm_local_bb11_ld__1290_inst0_read(avm_local_bb11_ld__1290_inst0_read),
      .avm_local_bb11_ld__1290_inst0_write(avm_local_bb11_ld__1290_inst0_write),
      .avm_local_bb11_ld__1290_inst0_burstcount(avm_local_bb11_ld__1290_inst0_burstcount),
      .avm_local_bb11_ld__1290_inst0_address(avm_local_bb11_ld__1290_inst0_address),
      .avm_local_bb11_ld__1290_inst0_writedata(avm_local_bb11_ld__1290_inst0_writedata),
      .avm_local_bb11_ld__1290_inst0_byteenable(avm_local_bb11_ld__1290_inst0_byteenable),
      .avm_local_bb11_ld__1290_inst0_waitrequest(avm_local_bb11_ld__1290_inst0_waitrequest),
      .avm_local_bb11_ld__1290_inst0_readdata(avm_local_bb11_ld__1290_inst0_readdata),
      .avm_local_bb11_ld__1290_inst0_readdatavalid(avm_local_bb11_ld__1290_inst0_readdatavalid),
      .avm_local_bb11_ld__1290_inst0_writeack(avm_local_bb11_ld__1290_inst0_writeack),
      // AVM avm_local_bb11_ld__inst0
      .avm_local_bb11_ld__inst0_enable(avm_local_bb11_ld__inst0_enable),
      .avm_local_bb11_ld__inst0_read(avm_local_bb11_ld__inst0_read),
      .avm_local_bb11_ld__inst0_write(avm_local_bb11_ld__inst0_write),
      .avm_local_bb11_ld__inst0_burstcount(avm_local_bb11_ld__inst0_burstcount),
      .avm_local_bb11_ld__inst0_address(avm_local_bb11_ld__inst0_address),
      .avm_local_bb11_ld__inst0_writedata(avm_local_bb11_ld__inst0_writedata),
      .avm_local_bb11_ld__inst0_byteenable(avm_local_bb11_ld__inst0_byteenable),
      .avm_local_bb11_ld__inst0_waitrequest(avm_local_bb11_ld__inst0_waitrequest),
      .avm_local_bb11_ld__inst0_readdata(avm_local_bb11_ld__inst0_readdata),
      .avm_local_bb11_ld__inst0_readdatavalid(avm_local_bb11_ld__inst0_readdatavalid),
      .avm_local_bb11_ld__inst0_writeack(avm_local_bb11_ld__inst0_writeack),
      // AVM avm_local_bb11_ld__u46_inst0
      .avm_local_bb11_ld__u46_inst0_enable(avm_local_bb11_ld__u46_inst0_enable),
      .avm_local_bb11_ld__u46_inst0_read(avm_local_bb11_ld__u46_inst0_read),
      .avm_local_bb11_ld__u46_inst0_write(avm_local_bb11_ld__u46_inst0_write),
      .avm_local_bb11_ld__u46_inst0_burstcount(avm_local_bb11_ld__u46_inst0_burstcount),
      .avm_local_bb11_ld__u46_inst0_address(avm_local_bb11_ld__u46_inst0_address),
      .avm_local_bb11_ld__u46_inst0_writedata(avm_local_bb11_ld__u46_inst0_writedata),
      .avm_local_bb11_ld__u46_inst0_byteenable(avm_local_bb11_ld__u46_inst0_byteenable),
      .avm_local_bb11_ld__u46_inst0_waitrequest(avm_local_bb11_ld__u46_inst0_waitrequest),
      .avm_local_bb11_ld__u46_inst0_readdata(avm_local_bb11_ld__u46_inst0_readdata),
      .avm_local_bb11_ld__u46_inst0_readdatavalid(avm_local_bb11_ld__u46_inst0_readdatavalid),
      .avm_local_bb11_ld__u46_inst0_writeack(avm_local_bb11_ld__u46_inst0_writeack),
      // AVM avm_local_bb11_ld__u47_inst0
      .avm_local_bb11_ld__u47_inst0_enable(avm_local_bb11_ld__u47_inst0_enable),
      .avm_local_bb11_ld__u47_inst0_read(avm_local_bb11_ld__u47_inst0_read),
      .avm_local_bb11_ld__u47_inst0_write(avm_local_bb11_ld__u47_inst0_write),
      .avm_local_bb11_ld__u47_inst0_burstcount(avm_local_bb11_ld__u47_inst0_burstcount),
      .avm_local_bb11_ld__u47_inst0_address(avm_local_bb11_ld__u47_inst0_address),
      .avm_local_bb11_ld__u47_inst0_writedata(avm_local_bb11_ld__u47_inst0_writedata),
      .avm_local_bb11_ld__u47_inst0_byteenable(avm_local_bb11_ld__u47_inst0_byteenable),
      .avm_local_bb11_ld__u47_inst0_waitrequest(avm_local_bb11_ld__u47_inst0_waitrequest),
      .avm_local_bb11_ld__u47_inst0_readdata(avm_local_bb11_ld__u47_inst0_readdata),
      .avm_local_bb11_ld__u47_inst0_readdatavalid(avm_local_bb11_ld__u47_inst0_readdatavalid),
      .avm_local_bb11_ld__u47_inst0_writeack(avm_local_bb11_ld__u47_inst0_writeack),
      // AVM avm_local_bb11_ld__u48_inst0
      .avm_local_bb11_ld__u48_inst0_enable(avm_local_bb11_ld__u48_inst0_enable),
      .avm_local_bb11_ld__u48_inst0_read(avm_local_bb11_ld__u48_inst0_read),
      .avm_local_bb11_ld__u48_inst0_write(avm_local_bb11_ld__u48_inst0_write),
      .avm_local_bb11_ld__u48_inst0_burstcount(avm_local_bb11_ld__u48_inst0_burstcount),
      .avm_local_bb11_ld__u48_inst0_address(avm_local_bb11_ld__u48_inst0_address),
      .avm_local_bb11_ld__u48_inst0_writedata(avm_local_bb11_ld__u48_inst0_writedata),
      .avm_local_bb11_ld__u48_inst0_byteenable(avm_local_bb11_ld__u48_inst0_byteenable),
      .avm_local_bb11_ld__u48_inst0_waitrequest(avm_local_bb11_ld__u48_inst0_waitrequest),
      .avm_local_bb11_ld__u48_inst0_readdata(avm_local_bb11_ld__u48_inst0_readdata),
      .avm_local_bb11_ld__u48_inst0_readdatavalid(avm_local_bb11_ld__u48_inst0_readdatavalid),
      .avm_local_bb11_ld__u48_inst0_writeack(avm_local_bb11_ld__u48_inst0_writeack),
      // AVM avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_enable(avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_enable),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_read(avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_read),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_write(avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_write),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_burstcount(avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_burstcount),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_address(avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_address),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_writedata(avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_writedata),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_byteenable(avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_byteenable),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_waitrequest(avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_waitrequest),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_readdata(avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_readdata),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_readdatavalid(avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_readdatavalid),
      .avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_writeack(avm_local_bb11_ld_memcoalesce_KerConst_load_0_inst0_writeack),
      // AVM avm_local_bb13_ld__u53_inst0
      .avm_local_bb13_ld__u53_inst0_enable(avm_local_bb13_ld__u53_inst0_enable),
      .avm_local_bb13_ld__u53_inst0_read(avm_local_bb13_ld__u53_inst0_read),
      .avm_local_bb13_ld__u53_inst0_write(avm_local_bb13_ld__u53_inst0_write),
      .avm_local_bb13_ld__u53_inst0_burstcount(avm_local_bb13_ld__u53_inst0_burstcount),
      .avm_local_bb13_ld__u53_inst0_address(avm_local_bb13_ld__u53_inst0_address),
      .avm_local_bb13_ld__u53_inst0_writedata(avm_local_bb13_ld__u53_inst0_writedata),
      .avm_local_bb13_ld__u53_inst0_byteenable(avm_local_bb13_ld__u53_inst0_byteenable),
      .avm_local_bb13_ld__u53_inst0_waitrequest(avm_local_bb13_ld__u53_inst0_waitrequest),
      .avm_local_bb13_ld__u53_inst0_readdata(avm_local_bb13_ld__u53_inst0_readdata),
      .avm_local_bb13_ld__u53_inst0_readdatavalid(avm_local_bb13_ld__u53_inst0_readdatavalid),
      .avm_local_bb13_ld__u53_inst0_writeack(avm_local_bb13_ld__u53_inst0_writeack),
      // AVM avm_local_bb13_ld__u54_inst0
      .avm_local_bb13_ld__u54_inst0_enable(avm_local_bb13_ld__u54_inst0_enable),
      .avm_local_bb13_ld__u54_inst0_read(avm_local_bb13_ld__u54_inst0_read),
      .avm_local_bb13_ld__u54_inst0_write(avm_local_bb13_ld__u54_inst0_write),
      .avm_local_bb13_ld__u54_inst0_burstcount(avm_local_bb13_ld__u54_inst0_burstcount),
      .avm_local_bb13_ld__u54_inst0_address(avm_local_bb13_ld__u54_inst0_address),
      .avm_local_bb13_ld__u54_inst0_writedata(avm_local_bb13_ld__u54_inst0_writedata),
      .avm_local_bb13_ld__u54_inst0_byteenable(avm_local_bb13_ld__u54_inst0_byteenable),
      .avm_local_bb13_ld__u54_inst0_waitrequest(avm_local_bb13_ld__u54_inst0_waitrequest),
      .avm_local_bb13_ld__u54_inst0_readdata(avm_local_bb13_ld__u54_inst0_readdata),
      .avm_local_bb13_ld__u54_inst0_readdatavalid(avm_local_bb13_ld__u54_inst0_readdatavalid),
      .avm_local_bb13_ld__u54_inst0_writeack(avm_local_bb13_ld__u54_inst0_writeack),
      // AVM avm_local_bb13_ld__u55_inst0
      .avm_local_bb13_ld__u55_inst0_enable(avm_local_bb13_ld__u55_inst0_enable),
      .avm_local_bb13_ld__u55_inst0_read(avm_local_bb13_ld__u55_inst0_read),
      .avm_local_bb13_ld__u55_inst0_write(avm_local_bb13_ld__u55_inst0_write),
      .avm_local_bb13_ld__u55_inst0_burstcount(avm_local_bb13_ld__u55_inst0_burstcount),
      .avm_local_bb13_ld__u55_inst0_address(avm_local_bb13_ld__u55_inst0_address),
      .avm_local_bb13_ld__u55_inst0_writedata(avm_local_bb13_ld__u55_inst0_writedata),
      .avm_local_bb13_ld__u55_inst0_byteenable(avm_local_bb13_ld__u55_inst0_byteenable),
      .avm_local_bb13_ld__u55_inst0_waitrequest(avm_local_bb13_ld__u55_inst0_waitrequest),
      .avm_local_bb13_ld__u55_inst0_readdata(avm_local_bb13_ld__u55_inst0_readdata),
      .avm_local_bb13_ld__u55_inst0_readdatavalid(avm_local_bb13_ld__u55_inst0_readdatavalid),
      .avm_local_bb13_ld__u55_inst0_writeack(avm_local_bb13_ld__u55_inst0_writeack),
      // AVM avm_local_bb13_ld__u56_inst0
      .avm_local_bb13_ld__u56_inst0_enable(avm_local_bb13_ld__u56_inst0_enable),
      .avm_local_bb13_ld__u56_inst0_read(avm_local_bb13_ld__u56_inst0_read),
      .avm_local_bb13_ld__u56_inst0_write(avm_local_bb13_ld__u56_inst0_write),
      .avm_local_bb13_ld__u56_inst0_burstcount(avm_local_bb13_ld__u56_inst0_burstcount),
      .avm_local_bb13_ld__u56_inst0_address(avm_local_bb13_ld__u56_inst0_address),
      .avm_local_bb13_ld__u56_inst0_writedata(avm_local_bb13_ld__u56_inst0_writedata),
      .avm_local_bb13_ld__u56_inst0_byteenable(avm_local_bb13_ld__u56_inst0_byteenable),
      .avm_local_bb13_ld__u56_inst0_waitrequest(avm_local_bb13_ld__u56_inst0_waitrequest),
      .avm_local_bb13_ld__u56_inst0_readdata(avm_local_bb13_ld__u56_inst0_readdata),
      .avm_local_bb13_ld__u56_inst0_readdatavalid(avm_local_bb13_ld__u56_inst0_readdatavalid),
      .avm_local_bb13_ld__u56_inst0_writeack(avm_local_bb13_ld__u56_inst0_writeack),
      // AVM avm_local_bb13_ld__u57_inst0
      .avm_local_bb13_ld__u57_inst0_enable(avm_local_bb13_ld__u57_inst0_enable),
      .avm_local_bb13_ld__u57_inst0_read(avm_local_bb13_ld__u57_inst0_read),
      .avm_local_bb13_ld__u57_inst0_write(avm_local_bb13_ld__u57_inst0_write),
      .avm_local_bb13_ld__u57_inst0_burstcount(avm_local_bb13_ld__u57_inst0_burstcount),
      .avm_local_bb13_ld__u57_inst0_address(avm_local_bb13_ld__u57_inst0_address),
      .avm_local_bb13_ld__u57_inst0_writedata(avm_local_bb13_ld__u57_inst0_writedata),
      .avm_local_bb13_ld__u57_inst0_byteenable(avm_local_bb13_ld__u57_inst0_byteenable),
      .avm_local_bb13_ld__u57_inst0_waitrequest(avm_local_bb13_ld__u57_inst0_waitrequest),
      .avm_local_bb13_ld__u57_inst0_readdata(avm_local_bb13_ld__u57_inst0_readdata),
      .avm_local_bb13_ld__u57_inst0_readdatavalid(avm_local_bb13_ld__u57_inst0_readdatavalid),
      .avm_local_bb13_ld__u57_inst0_writeack(avm_local_bb13_ld__u57_inst0_writeack),
      // AVM avm_local_bb13_ld__u58_inst0
      .avm_local_bb13_ld__u58_inst0_enable(avm_local_bb13_ld__u58_inst0_enable),
      .avm_local_bb13_ld__u58_inst0_read(avm_local_bb13_ld__u58_inst0_read),
      .avm_local_bb13_ld__u58_inst0_write(avm_local_bb13_ld__u58_inst0_write),
      .avm_local_bb13_ld__u58_inst0_burstcount(avm_local_bb13_ld__u58_inst0_burstcount),
      .avm_local_bb13_ld__u58_inst0_address(avm_local_bb13_ld__u58_inst0_address),
      .avm_local_bb13_ld__u58_inst0_writedata(avm_local_bb13_ld__u58_inst0_writedata),
      .avm_local_bb13_ld__u58_inst0_byteenable(avm_local_bb13_ld__u58_inst0_byteenable),
      .avm_local_bb13_ld__u58_inst0_waitrequest(avm_local_bb13_ld__u58_inst0_waitrequest),
      .avm_local_bb13_ld__u58_inst0_readdata(avm_local_bb13_ld__u58_inst0_readdata),
      .avm_local_bb13_ld__u58_inst0_readdatavalid(avm_local_bb13_ld__u58_inst0_readdatavalid),
      .avm_local_bb13_ld__u58_inst0_writeack(avm_local_bb13_ld__u58_inst0_writeack),
      // AVM avm_local_bb13_ld__u59_inst0
      .avm_local_bb13_ld__u59_inst0_enable(avm_local_bb13_ld__u59_inst0_enable),
      .avm_local_bb13_ld__u59_inst0_read(avm_local_bb13_ld__u59_inst0_read),
      .avm_local_bb13_ld__u59_inst0_write(avm_local_bb13_ld__u59_inst0_write),
      .avm_local_bb13_ld__u59_inst0_burstcount(avm_local_bb13_ld__u59_inst0_burstcount),
      .avm_local_bb13_ld__u59_inst0_address(avm_local_bb13_ld__u59_inst0_address),
      .avm_local_bb13_ld__u59_inst0_writedata(avm_local_bb13_ld__u59_inst0_writedata),
      .avm_local_bb13_ld__u59_inst0_byteenable(avm_local_bb13_ld__u59_inst0_byteenable),
      .avm_local_bb13_ld__u59_inst0_waitrequest(avm_local_bb13_ld__u59_inst0_waitrequest),
      .avm_local_bb13_ld__u59_inst0_readdata(avm_local_bb13_ld__u59_inst0_readdata),
      .avm_local_bb13_ld__u59_inst0_readdatavalid(avm_local_bb13_ld__u59_inst0_readdatavalid),
      .avm_local_bb13_ld__u59_inst0_writeack(avm_local_bb13_ld__u59_inst0_writeack),
      // AVM avm_local_bb13_ld__u60_inst0
      .avm_local_bb13_ld__u60_inst0_enable(avm_local_bb13_ld__u60_inst0_enable),
      .avm_local_bb13_ld__u60_inst0_read(avm_local_bb13_ld__u60_inst0_read),
      .avm_local_bb13_ld__u60_inst0_write(avm_local_bb13_ld__u60_inst0_write),
      .avm_local_bb13_ld__u60_inst0_burstcount(avm_local_bb13_ld__u60_inst0_burstcount),
      .avm_local_bb13_ld__u60_inst0_address(avm_local_bb13_ld__u60_inst0_address),
      .avm_local_bb13_ld__u60_inst0_writedata(avm_local_bb13_ld__u60_inst0_writedata),
      .avm_local_bb13_ld__u60_inst0_byteenable(avm_local_bb13_ld__u60_inst0_byteenable),
      .avm_local_bb13_ld__u60_inst0_waitrequest(avm_local_bb13_ld__u60_inst0_waitrequest),
      .avm_local_bb13_ld__u60_inst0_readdata(avm_local_bb13_ld__u60_inst0_readdata),
      .avm_local_bb13_ld__u60_inst0_readdatavalid(avm_local_bb13_ld__u60_inst0_readdatavalid),
      .avm_local_bb13_ld__u60_inst0_writeack(avm_local_bb13_ld__u60_inst0_writeack),
      // AVM avm_local_bb13_ld__u61_inst0
      .avm_local_bb13_ld__u61_inst0_enable(avm_local_bb13_ld__u61_inst0_enable),
      .avm_local_bb13_ld__u61_inst0_read(avm_local_bb13_ld__u61_inst0_read),
      .avm_local_bb13_ld__u61_inst0_write(avm_local_bb13_ld__u61_inst0_write),
      .avm_local_bb13_ld__u61_inst0_burstcount(avm_local_bb13_ld__u61_inst0_burstcount),
      .avm_local_bb13_ld__u61_inst0_address(avm_local_bb13_ld__u61_inst0_address),
      .avm_local_bb13_ld__u61_inst0_writedata(avm_local_bb13_ld__u61_inst0_writedata),
      .avm_local_bb13_ld__u61_inst0_byteenable(avm_local_bb13_ld__u61_inst0_byteenable),
      .avm_local_bb13_ld__u61_inst0_waitrequest(avm_local_bb13_ld__u61_inst0_waitrequest),
      .avm_local_bb13_ld__u61_inst0_readdata(avm_local_bb13_ld__u61_inst0_readdata),
      .avm_local_bb13_ld__u61_inst0_readdatavalid(avm_local_bb13_ld__u61_inst0_readdatavalid),
      .avm_local_bb13_ld__u61_inst0_writeack(avm_local_bb13_ld__u61_inst0_writeack),
      // AVM avm_local_bb13_ld__u62_inst0
      .avm_local_bb13_ld__u62_inst0_enable(avm_local_bb13_ld__u62_inst0_enable),
      .avm_local_bb13_ld__u62_inst0_read(avm_local_bb13_ld__u62_inst0_read),
      .avm_local_bb13_ld__u62_inst0_write(avm_local_bb13_ld__u62_inst0_write),
      .avm_local_bb13_ld__u62_inst0_burstcount(avm_local_bb13_ld__u62_inst0_burstcount),
      .avm_local_bb13_ld__u62_inst0_address(avm_local_bb13_ld__u62_inst0_address),
      .avm_local_bb13_ld__u62_inst0_writedata(avm_local_bb13_ld__u62_inst0_writedata),
      .avm_local_bb13_ld__u62_inst0_byteenable(avm_local_bb13_ld__u62_inst0_byteenable),
      .avm_local_bb13_ld__u62_inst0_waitrequest(avm_local_bb13_ld__u62_inst0_waitrequest),
      .avm_local_bb13_ld__u62_inst0_readdata(avm_local_bb13_ld__u62_inst0_readdata),
      .avm_local_bb13_ld__u62_inst0_readdatavalid(avm_local_bb13_ld__u62_inst0_readdatavalid),
      .avm_local_bb13_ld__u62_inst0_writeack(avm_local_bb13_ld__u62_inst0_writeack),
      // AVM avm_local_bb13_ld__u63_inst0
      .avm_local_bb13_ld__u63_inst0_enable(avm_local_bb13_ld__u63_inst0_enable),
      .avm_local_bb13_ld__u63_inst0_read(avm_local_bb13_ld__u63_inst0_read),
      .avm_local_bb13_ld__u63_inst0_write(avm_local_bb13_ld__u63_inst0_write),
      .avm_local_bb13_ld__u63_inst0_burstcount(avm_local_bb13_ld__u63_inst0_burstcount),
      .avm_local_bb13_ld__u63_inst0_address(avm_local_bb13_ld__u63_inst0_address),
      .avm_local_bb13_ld__u63_inst0_writedata(avm_local_bb13_ld__u63_inst0_writedata),
      .avm_local_bb13_ld__u63_inst0_byteenable(avm_local_bb13_ld__u63_inst0_byteenable),
      .avm_local_bb13_ld__u63_inst0_waitrequest(avm_local_bb13_ld__u63_inst0_waitrequest),
      .avm_local_bb13_ld__u63_inst0_readdata(avm_local_bb13_ld__u63_inst0_readdata),
      .avm_local_bb13_ld__u63_inst0_readdatavalid(avm_local_bb13_ld__u63_inst0_readdatavalid),
      .avm_local_bb13_ld__u63_inst0_writeack(avm_local_bb13_ld__u63_inst0_writeack),
      // AVM avm_local_bb13_ld__u64_inst0
      .avm_local_bb13_ld__u64_inst0_enable(avm_local_bb13_ld__u64_inst0_enable),
      .avm_local_bb13_ld__u64_inst0_read(avm_local_bb13_ld__u64_inst0_read),
      .avm_local_bb13_ld__u64_inst0_write(avm_local_bb13_ld__u64_inst0_write),
      .avm_local_bb13_ld__u64_inst0_burstcount(avm_local_bb13_ld__u64_inst0_burstcount),
      .avm_local_bb13_ld__u64_inst0_address(avm_local_bb13_ld__u64_inst0_address),
      .avm_local_bb13_ld__u64_inst0_writedata(avm_local_bb13_ld__u64_inst0_writedata),
      .avm_local_bb13_ld__u64_inst0_byteenable(avm_local_bb13_ld__u64_inst0_byteenable),
      .avm_local_bb13_ld__u64_inst0_waitrequest(avm_local_bb13_ld__u64_inst0_waitrequest),
      .avm_local_bb13_ld__u64_inst0_readdata(avm_local_bb13_ld__u64_inst0_readdata),
      .avm_local_bb13_ld__u64_inst0_readdatavalid(avm_local_bb13_ld__u64_inst0_readdatavalid),
      .avm_local_bb13_ld__u64_inst0_writeack(avm_local_bb13_ld__u64_inst0_writeack),
      // AVM avm_local_bb13_ld__u65_inst0
      .avm_local_bb13_ld__u65_inst0_enable(avm_local_bb13_ld__u65_inst0_enable),
      .avm_local_bb13_ld__u65_inst0_read(avm_local_bb13_ld__u65_inst0_read),
      .avm_local_bb13_ld__u65_inst0_write(avm_local_bb13_ld__u65_inst0_write),
      .avm_local_bb13_ld__u65_inst0_burstcount(avm_local_bb13_ld__u65_inst0_burstcount),
      .avm_local_bb13_ld__u65_inst0_address(avm_local_bb13_ld__u65_inst0_address),
      .avm_local_bb13_ld__u65_inst0_writedata(avm_local_bb13_ld__u65_inst0_writedata),
      .avm_local_bb13_ld__u65_inst0_byteenable(avm_local_bb13_ld__u65_inst0_byteenable),
      .avm_local_bb13_ld__u65_inst0_waitrequest(avm_local_bb13_ld__u65_inst0_waitrequest),
      .avm_local_bb13_ld__u65_inst0_readdata(avm_local_bb13_ld__u65_inst0_readdata),
      .avm_local_bb13_ld__u65_inst0_readdatavalid(avm_local_bb13_ld__u65_inst0_readdatavalid),
      .avm_local_bb13_ld__u65_inst0_writeack(avm_local_bb13_ld__u65_inst0_writeack),
      // AVM avm_local_bb13_ld__u66_inst0
      .avm_local_bb13_ld__u66_inst0_enable(avm_local_bb13_ld__u66_inst0_enable),
      .avm_local_bb13_ld__u66_inst0_read(avm_local_bb13_ld__u66_inst0_read),
      .avm_local_bb13_ld__u66_inst0_write(avm_local_bb13_ld__u66_inst0_write),
      .avm_local_bb13_ld__u66_inst0_burstcount(avm_local_bb13_ld__u66_inst0_burstcount),
      .avm_local_bb13_ld__u66_inst0_address(avm_local_bb13_ld__u66_inst0_address),
      .avm_local_bb13_ld__u66_inst0_writedata(avm_local_bb13_ld__u66_inst0_writedata),
      .avm_local_bb13_ld__u66_inst0_byteenable(avm_local_bb13_ld__u66_inst0_byteenable),
      .avm_local_bb13_ld__u66_inst0_waitrequest(avm_local_bb13_ld__u66_inst0_waitrequest),
      .avm_local_bb13_ld__u66_inst0_readdata(avm_local_bb13_ld__u66_inst0_readdata),
      .avm_local_bb13_ld__u66_inst0_readdatavalid(avm_local_bb13_ld__u66_inst0_readdatavalid),
      .avm_local_bb13_ld__u66_inst0_writeack(avm_local_bb13_ld__u66_inst0_writeack),
      // AVM avm_local_bb13_ld__u67_inst0
      .avm_local_bb13_ld__u67_inst0_enable(avm_local_bb13_ld__u67_inst0_enable),
      .avm_local_bb13_ld__u67_inst0_read(avm_local_bb13_ld__u67_inst0_read),
      .avm_local_bb13_ld__u67_inst0_write(avm_local_bb13_ld__u67_inst0_write),
      .avm_local_bb13_ld__u67_inst0_burstcount(avm_local_bb13_ld__u67_inst0_burstcount),
      .avm_local_bb13_ld__u67_inst0_address(avm_local_bb13_ld__u67_inst0_address),
      .avm_local_bb13_ld__u67_inst0_writedata(avm_local_bb13_ld__u67_inst0_writedata),
      .avm_local_bb13_ld__u67_inst0_byteenable(avm_local_bb13_ld__u67_inst0_byteenable),
      .avm_local_bb13_ld__u67_inst0_waitrequest(avm_local_bb13_ld__u67_inst0_waitrequest),
      .avm_local_bb13_ld__u67_inst0_readdata(avm_local_bb13_ld__u67_inst0_readdata),
      .avm_local_bb13_ld__u67_inst0_readdatavalid(avm_local_bb13_ld__u67_inst0_readdatavalid),
      .avm_local_bb13_ld__u67_inst0_writeack(avm_local_bb13_ld__u67_inst0_writeack),
      // AVM avm_local_bb13_ld__u68_inst0
      .avm_local_bb13_ld__u68_inst0_enable(avm_local_bb13_ld__u68_inst0_enable),
      .avm_local_bb13_ld__u68_inst0_read(avm_local_bb13_ld__u68_inst0_read),
      .avm_local_bb13_ld__u68_inst0_write(avm_local_bb13_ld__u68_inst0_write),
      .avm_local_bb13_ld__u68_inst0_burstcount(avm_local_bb13_ld__u68_inst0_burstcount),
      .avm_local_bb13_ld__u68_inst0_address(avm_local_bb13_ld__u68_inst0_address),
      .avm_local_bb13_ld__u68_inst0_writedata(avm_local_bb13_ld__u68_inst0_writedata),
      .avm_local_bb13_ld__u68_inst0_byteenable(avm_local_bb13_ld__u68_inst0_byteenable),
      .avm_local_bb13_ld__u68_inst0_waitrequest(avm_local_bb13_ld__u68_inst0_waitrequest),
      .avm_local_bb13_ld__u68_inst0_readdata(avm_local_bb13_ld__u68_inst0_readdata),
      .avm_local_bb13_ld__u68_inst0_readdatavalid(avm_local_bb13_ld__u68_inst0_readdatavalid),
      .avm_local_bb13_ld__u68_inst0_writeack(avm_local_bb13_ld__u68_inst0_writeack),
      // AVM avm_local_bb13_ld__u69_inst0
      .avm_local_bb13_ld__u69_inst0_enable(avm_local_bb13_ld__u69_inst0_enable),
      .avm_local_bb13_ld__u69_inst0_read(avm_local_bb13_ld__u69_inst0_read),
      .avm_local_bb13_ld__u69_inst0_write(avm_local_bb13_ld__u69_inst0_write),
      .avm_local_bb13_ld__u69_inst0_burstcount(avm_local_bb13_ld__u69_inst0_burstcount),
      .avm_local_bb13_ld__u69_inst0_address(avm_local_bb13_ld__u69_inst0_address),
      .avm_local_bb13_ld__u69_inst0_writedata(avm_local_bb13_ld__u69_inst0_writedata),
      .avm_local_bb13_ld__u69_inst0_byteenable(avm_local_bb13_ld__u69_inst0_byteenable),
      .avm_local_bb13_ld__u69_inst0_waitrequest(avm_local_bb13_ld__u69_inst0_waitrequest),
      .avm_local_bb13_ld__u69_inst0_readdata(avm_local_bb13_ld__u69_inst0_readdata),
      .avm_local_bb13_ld__u69_inst0_readdatavalid(avm_local_bb13_ld__u69_inst0_readdatavalid),
      .avm_local_bb13_ld__u69_inst0_writeack(avm_local_bb13_ld__u69_inst0_writeack),
      // AVM avm_local_bb13_ld__u70_inst0
      .avm_local_bb13_ld__u70_inst0_enable(avm_local_bb13_ld__u70_inst0_enable),
      .avm_local_bb13_ld__u70_inst0_read(avm_local_bb13_ld__u70_inst0_read),
      .avm_local_bb13_ld__u70_inst0_write(avm_local_bb13_ld__u70_inst0_write),
      .avm_local_bb13_ld__u70_inst0_burstcount(avm_local_bb13_ld__u70_inst0_burstcount),
      .avm_local_bb13_ld__u70_inst0_address(avm_local_bb13_ld__u70_inst0_address),
      .avm_local_bb13_ld__u70_inst0_writedata(avm_local_bb13_ld__u70_inst0_writedata),
      .avm_local_bb13_ld__u70_inst0_byteenable(avm_local_bb13_ld__u70_inst0_byteenable),
      .avm_local_bb13_ld__u70_inst0_waitrequest(avm_local_bb13_ld__u70_inst0_waitrequest),
      .avm_local_bb13_ld__u70_inst0_readdata(avm_local_bb13_ld__u70_inst0_readdata),
      .avm_local_bb13_ld__u70_inst0_readdatavalid(avm_local_bb13_ld__u70_inst0_readdatavalid),
      .avm_local_bb13_ld__u70_inst0_writeack(avm_local_bb13_ld__u70_inst0_writeack),
      // AVM avm_local_bb13_ld__u71_inst0
      .avm_local_bb13_ld__u71_inst0_enable(avm_local_bb13_ld__u71_inst0_enable),
      .avm_local_bb13_ld__u71_inst0_read(avm_local_bb13_ld__u71_inst0_read),
      .avm_local_bb13_ld__u71_inst0_write(avm_local_bb13_ld__u71_inst0_write),
      .avm_local_bb13_ld__u71_inst0_burstcount(avm_local_bb13_ld__u71_inst0_burstcount),
      .avm_local_bb13_ld__u71_inst0_address(avm_local_bb13_ld__u71_inst0_address),
      .avm_local_bb13_ld__u71_inst0_writedata(avm_local_bb13_ld__u71_inst0_writedata),
      .avm_local_bb13_ld__u71_inst0_byteenable(avm_local_bb13_ld__u71_inst0_byteenable),
      .avm_local_bb13_ld__u71_inst0_waitrequest(avm_local_bb13_ld__u71_inst0_waitrequest),
      .avm_local_bb13_ld__u71_inst0_readdata(avm_local_bb13_ld__u71_inst0_readdata),
      .avm_local_bb13_ld__u71_inst0_readdatavalid(avm_local_bb13_ld__u71_inst0_readdatavalid),
      .avm_local_bb13_ld__u71_inst0_writeack(avm_local_bb13_ld__u71_inst0_writeack),
      // AVM avm_local_bb13_ld__u72_inst0
      .avm_local_bb13_ld__u72_inst0_enable(avm_local_bb13_ld__u72_inst0_enable),
      .avm_local_bb13_ld__u72_inst0_read(avm_local_bb13_ld__u72_inst0_read),
      .avm_local_bb13_ld__u72_inst0_write(avm_local_bb13_ld__u72_inst0_write),
      .avm_local_bb13_ld__u72_inst0_burstcount(avm_local_bb13_ld__u72_inst0_burstcount),
      .avm_local_bb13_ld__u72_inst0_address(avm_local_bb13_ld__u72_inst0_address),
      .avm_local_bb13_ld__u72_inst0_writedata(avm_local_bb13_ld__u72_inst0_writedata),
      .avm_local_bb13_ld__u72_inst0_byteenable(avm_local_bb13_ld__u72_inst0_byteenable),
      .avm_local_bb13_ld__u72_inst0_waitrequest(avm_local_bb13_ld__u72_inst0_waitrequest),
      .avm_local_bb13_ld__u72_inst0_readdata(avm_local_bb13_ld__u72_inst0_readdata),
      .avm_local_bb13_ld__u72_inst0_readdatavalid(avm_local_bb13_ld__u72_inst0_readdatavalid),
      .avm_local_bb13_ld__u72_inst0_writeack(avm_local_bb13_ld__u72_inst0_writeack),
      // AVM avm_local_bb13_ld__u73_inst0
      .avm_local_bb13_ld__u73_inst0_enable(avm_local_bb13_ld__u73_inst0_enable),
      .avm_local_bb13_ld__u73_inst0_read(avm_local_bb13_ld__u73_inst0_read),
      .avm_local_bb13_ld__u73_inst0_write(avm_local_bb13_ld__u73_inst0_write),
      .avm_local_bb13_ld__u73_inst0_burstcount(avm_local_bb13_ld__u73_inst0_burstcount),
      .avm_local_bb13_ld__u73_inst0_address(avm_local_bb13_ld__u73_inst0_address),
      .avm_local_bb13_ld__u73_inst0_writedata(avm_local_bb13_ld__u73_inst0_writedata),
      .avm_local_bb13_ld__u73_inst0_byteenable(avm_local_bb13_ld__u73_inst0_byteenable),
      .avm_local_bb13_ld__u73_inst0_waitrequest(avm_local_bb13_ld__u73_inst0_waitrequest),
      .avm_local_bb13_ld__u73_inst0_readdata(avm_local_bb13_ld__u73_inst0_readdata),
      .avm_local_bb13_ld__u73_inst0_readdatavalid(avm_local_bb13_ld__u73_inst0_readdatavalid),
      .avm_local_bb13_ld__u73_inst0_writeack(avm_local_bb13_ld__u73_inst0_writeack),
      // AVM avm_local_bb13_ld__u74_inst0
      .avm_local_bb13_ld__u74_inst0_enable(avm_local_bb13_ld__u74_inst0_enable),
      .avm_local_bb13_ld__u74_inst0_read(avm_local_bb13_ld__u74_inst0_read),
      .avm_local_bb13_ld__u74_inst0_write(avm_local_bb13_ld__u74_inst0_write),
      .avm_local_bb13_ld__u74_inst0_burstcount(avm_local_bb13_ld__u74_inst0_burstcount),
      .avm_local_bb13_ld__u74_inst0_address(avm_local_bb13_ld__u74_inst0_address),
      .avm_local_bb13_ld__u74_inst0_writedata(avm_local_bb13_ld__u74_inst0_writedata),
      .avm_local_bb13_ld__u74_inst0_byteenable(avm_local_bb13_ld__u74_inst0_byteenable),
      .avm_local_bb13_ld__u74_inst0_waitrequest(avm_local_bb13_ld__u74_inst0_waitrequest),
      .avm_local_bb13_ld__u74_inst0_readdata(avm_local_bb13_ld__u74_inst0_readdata),
      .avm_local_bb13_ld__u74_inst0_readdatavalid(avm_local_bb13_ld__u74_inst0_readdatavalid),
      .avm_local_bb13_ld__u74_inst0_writeack(avm_local_bb13_ld__u74_inst0_writeack),
      // AVM avm_local_bb13_ld__u75_inst0
      .avm_local_bb13_ld__u75_inst0_enable(avm_local_bb13_ld__u75_inst0_enable),
      .avm_local_bb13_ld__u75_inst0_read(avm_local_bb13_ld__u75_inst0_read),
      .avm_local_bb13_ld__u75_inst0_write(avm_local_bb13_ld__u75_inst0_write),
      .avm_local_bb13_ld__u75_inst0_burstcount(avm_local_bb13_ld__u75_inst0_burstcount),
      .avm_local_bb13_ld__u75_inst0_address(avm_local_bb13_ld__u75_inst0_address),
      .avm_local_bb13_ld__u75_inst0_writedata(avm_local_bb13_ld__u75_inst0_writedata),
      .avm_local_bb13_ld__u75_inst0_byteenable(avm_local_bb13_ld__u75_inst0_byteenable),
      .avm_local_bb13_ld__u75_inst0_waitrequest(avm_local_bb13_ld__u75_inst0_waitrequest),
      .avm_local_bb13_ld__u75_inst0_readdata(avm_local_bb13_ld__u75_inst0_readdata),
      .avm_local_bb13_ld__u75_inst0_readdatavalid(avm_local_bb13_ld__u75_inst0_readdatavalid),
      .avm_local_bb13_ld__u75_inst0_writeack(avm_local_bb13_ld__u75_inst0_writeack),
      // AVM avm_local_bb13_ld__u76_inst0
      .avm_local_bb13_ld__u76_inst0_enable(avm_local_bb13_ld__u76_inst0_enable),
      .avm_local_bb13_ld__u76_inst0_read(avm_local_bb13_ld__u76_inst0_read),
      .avm_local_bb13_ld__u76_inst0_write(avm_local_bb13_ld__u76_inst0_write),
      .avm_local_bb13_ld__u76_inst0_burstcount(avm_local_bb13_ld__u76_inst0_burstcount),
      .avm_local_bb13_ld__u76_inst0_address(avm_local_bb13_ld__u76_inst0_address),
      .avm_local_bb13_ld__u76_inst0_writedata(avm_local_bb13_ld__u76_inst0_writedata),
      .avm_local_bb13_ld__u76_inst0_byteenable(avm_local_bb13_ld__u76_inst0_byteenable),
      .avm_local_bb13_ld__u76_inst0_waitrequest(avm_local_bb13_ld__u76_inst0_waitrequest),
      .avm_local_bb13_ld__u76_inst0_readdata(avm_local_bb13_ld__u76_inst0_readdata),
      .avm_local_bb13_ld__u76_inst0_readdatavalid(avm_local_bb13_ld__u76_inst0_readdatavalid),
      .avm_local_bb13_ld__u76_inst0_writeack(avm_local_bb13_ld__u76_inst0_writeack),
      // AVM avm_local_bb13_ld__u77_inst0
      .avm_local_bb13_ld__u77_inst0_enable(avm_local_bb13_ld__u77_inst0_enable),
      .avm_local_bb13_ld__u77_inst0_read(avm_local_bb13_ld__u77_inst0_read),
      .avm_local_bb13_ld__u77_inst0_write(avm_local_bb13_ld__u77_inst0_write),
      .avm_local_bb13_ld__u77_inst0_burstcount(avm_local_bb13_ld__u77_inst0_burstcount),
      .avm_local_bb13_ld__u77_inst0_address(avm_local_bb13_ld__u77_inst0_address),
      .avm_local_bb13_ld__u77_inst0_writedata(avm_local_bb13_ld__u77_inst0_writedata),
      .avm_local_bb13_ld__u77_inst0_byteenable(avm_local_bb13_ld__u77_inst0_byteenable),
      .avm_local_bb13_ld__u77_inst0_waitrequest(avm_local_bb13_ld__u77_inst0_waitrequest),
      .avm_local_bb13_ld__u77_inst0_readdata(avm_local_bb13_ld__u77_inst0_readdata),
      .avm_local_bb13_ld__u77_inst0_readdatavalid(avm_local_bb13_ld__u77_inst0_readdatavalid),
      .avm_local_bb13_ld__u77_inst0_writeack(avm_local_bb13_ld__u77_inst0_writeack),
      // AVM avm_local_bb13_ld__u78_inst0
      .avm_local_bb13_ld__u78_inst0_enable(avm_local_bb13_ld__u78_inst0_enable),
      .avm_local_bb13_ld__u78_inst0_read(avm_local_bb13_ld__u78_inst0_read),
      .avm_local_bb13_ld__u78_inst0_write(avm_local_bb13_ld__u78_inst0_write),
      .avm_local_bb13_ld__u78_inst0_burstcount(avm_local_bb13_ld__u78_inst0_burstcount),
      .avm_local_bb13_ld__u78_inst0_address(avm_local_bb13_ld__u78_inst0_address),
      .avm_local_bb13_ld__u78_inst0_writedata(avm_local_bb13_ld__u78_inst0_writedata),
      .avm_local_bb13_ld__u78_inst0_byteenable(avm_local_bb13_ld__u78_inst0_byteenable),
      .avm_local_bb13_ld__u78_inst0_waitrequest(avm_local_bb13_ld__u78_inst0_waitrequest),
      .avm_local_bb13_ld__u78_inst0_readdata(avm_local_bb13_ld__u78_inst0_readdata),
      .avm_local_bb13_ld__u78_inst0_readdatavalid(avm_local_bb13_ld__u78_inst0_readdatavalid),
      .avm_local_bb13_ld__u78_inst0_writeack(avm_local_bb13_ld__u78_inst0_writeack),
      // AVM avm_local_bb15_ld__u85_inst0
      .avm_local_bb15_ld__u85_inst0_enable(avm_local_bb15_ld__u85_inst0_enable),
      .avm_local_bb15_ld__u85_inst0_read(avm_local_bb15_ld__u85_inst0_read),
      .avm_local_bb15_ld__u85_inst0_write(avm_local_bb15_ld__u85_inst0_write),
      .avm_local_bb15_ld__u85_inst0_burstcount(avm_local_bb15_ld__u85_inst0_burstcount),
      .avm_local_bb15_ld__u85_inst0_address(avm_local_bb15_ld__u85_inst0_address),
      .avm_local_bb15_ld__u85_inst0_writedata(avm_local_bb15_ld__u85_inst0_writedata),
      .avm_local_bb15_ld__u85_inst0_byteenable(avm_local_bb15_ld__u85_inst0_byteenable),
      .avm_local_bb15_ld__u85_inst0_waitrequest(avm_local_bb15_ld__u85_inst0_waitrequest),
      .avm_local_bb15_ld__u85_inst0_readdata(avm_local_bb15_ld__u85_inst0_readdata),
      .avm_local_bb15_ld__u85_inst0_readdatavalid(avm_local_bb15_ld__u85_inst0_readdatavalid),
      .avm_local_bb15_ld__u85_inst0_writeack(avm_local_bb15_ld__u85_inst0_writeack),
      // AVM avm_local_bb15_ld__u86_inst0
      .avm_local_bb15_ld__u86_inst0_enable(avm_local_bb15_ld__u86_inst0_enable),
      .avm_local_bb15_ld__u86_inst0_read(avm_local_bb15_ld__u86_inst0_read),
      .avm_local_bb15_ld__u86_inst0_write(avm_local_bb15_ld__u86_inst0_write),
      .avm_local_bb15_ld__u86_inst0_burstcount(avm_local_bb15_ld__u86_inst0_burstcount),
      .avm_local_bb15_ld__u86_inst0_address(avm_local_bb15_ld__u86_inst0_address),
      .avm_local_bb15_ld__u86_inst0_writedata(avm_local_bb15_ld__u86_inst0_writedata),
      .avm_local_bb15_ld__u86_inst0_byteenable(avm_local_bb15_ld__u86_inst0_byteenable),
      .avm_local_bb15_ld__u86_inst0_waitrequest(avm_local_bb15_ld__u86_inst0_waitrequest),
      .avm_local_bb15_ld__u86_inst0_readdata(avm_local_bb15_ld__u86_inst0_readdata),
      .avm_local_bb15_ld__u86_inst0_readdatavalid(avm_local_bb15_ld__u86_inst0_readdatavalid),
      .avm_local_bb15_ld__u86_inst0_writeack(avm_local_bb15_ld__u86_inst0_writeack),
      // AVM avm_local_bb15_ld__u87_inst0
      .avm_local_bb15_ld__u87_inst0_enable(avm_local_bb15_ld__u87_inst0_enable),
      .avm_local_bb15_ld__u87_inst0_read(avm_local_bb15_ld__u87_inst0_read),
      .avm_local_bb15_ld__u87_inst0_write(avm_local_bb15_ld__u87_inst0_write),
      .avm_local_bb15_ld__u87_inst0_burstcount(avm_local_bb15_ld__u87_inst0_burstcount),
      .avm_local_bb15_ld__u87_inst0_address(avm_local_bb15_ld__u87_inst0_address),
      .avm_local_bb15_ld__u87_inst0_writedata(avm_local_bb15_ld__u87_inst0_writedata),
      .avm_local_bb15_ld__u87_inst0_byteenable(avm_local_bb15_ld__u87_inst0_byteenable),
      .avm_local_bb15_ld__u87_inst0_waitrequest(avm_local_bb15_ld__u87_inst0_waitrequest),
      .avm_local_bb15_ld__u87_inst0_readdata(avm_local_bb15_ld__u87_inst0_readdata),
      .avm_local_bb15_ld__u87_inst0_readdatavalid(avm_local_bb15_ld__u87_inst0_readdatavalid),
      .avm_local_bb15_ld__u87_inst0_writeack(avm_local_bb15_ld__u87_inst0_writeack),
      // AVM avm_local_bb15_ld__u88_inst0
      .avm_local_bb15_ld__u88_inst0_enable(avm_local_bb15_ld__u88_inst0_enable),
      .avm_local_bb15_ld__u88_inst0_read(avm_local_bb15_ld__u88_inst0_read),
      .avm_local_bb15_ld__u88_inst0_write(avm_local_bb15_ld__u88_inst0_write),
      .avm_local_bb15_ld__u88_inst0_burstcount(avm_local_bb15_ld__u88_inst0_burstcount),
      .avm_local_bb15_ld__u88_inst0_address(avm_local_bb15_ld__u88_inst0_address),
      .avm_local_bb15_ld__u88_inst0_writedata(avm_local_bb15_ld__u88_inst0_writedata),
      .avm_local_bb15_ld__u88_inst0_byteenable(avm_local_bb15_ld__u88_inst0_byteenable),
      .avm_local_bb15_ld__u88_inst0_waitrequest(avm_local_bb15_ld__u88_inst0_waitrequest),
      .avm_local_bb15_ld__u88_inst0_readdata(avm_local_bb15_ld__u88_inst0_readdata),
      .avm_local_bb15_ld__u88_inst0_readdatavalid(avm_local_bb15_ld__u88_inst0_readdatavalid),
      .avm_local_bb15_ld__u88_inst0_writeack(avm_local_bb15_ld__u88_inst0_writeack),
      // AVM avm_local_bb15_ld__u89_inst0
      .avm_local_bb15_ld__u89_inst0_enable(avm_local_bb15_ld__u89_inst0_enable),
      .avm_local_bb15_ld__u89_inst0_read(avm_local_bb15_ld__u89_inst0_read),
      .avm_local_bb15_ld__u89_inst0_write(avm_local_bb15_ld__u89_inst0_write),
      .avm_local_bb15_ld__u89_inst0_burstcount(avm_local_bb15_ld__u89_inst0_burstcount),
      .avm_local_bb15_ld__u89_inst0_address(avm_local_bb15_ld__u89_inst0_address),
      .avm_local_bb15_ld__u89_inst0_writedata(avm_local_bb15_ld__u89_inst0_writedata),
      .avm_local_bb15_ld__u89_inst0_byteenable(avm_local_bb15_ld__u89_inst0_byteenable),
      .avm_local_bb15_ld__u89_inst0_waitrequest(avm_local_bb15_ld__u89_inst0_waitrequest),
      .avm_local_bb15_ld__u89_inst0_readdata(avm_local_bb15_ld__u89_inst0_readdata),
      .avm_local_bb15_ld__u89_inst0_readdatavalid(avm_local_bb15_ld__u89_inst0_readdatavalid),
      .avm_local_bb15_ld__u89_inst0_writeack(avm_local_bb15_ld__u89_inst0_writeack),
      // AVM avm_local_bb15_ld__u91_inst0
      .avm_local_bb15_ld__u91_inst0_enable(avm_local_bb15_ld__u91_inst0_enable),
      .avm_local_bb15_ld__u91_inst0_read(avm_local_bb15_ld__u91_inst0_read),
      .avm_local_bb15_ld__u91_inst0_write(avm_local_bb15_ld__u91_inst0_write),
      .avm_local_bb15_ld__u91_inst0_burstcount(avm_local_bb15_ld__u91_inst0_burstcount),
      .avm_local_bb15_ld__u91_inst0_address(avm_local_bb15_ld__u91_inst0_address),
      .avm_local_bb15_ld__u91_inst0_writedata(avm_local_bb15_ld__u91_inst0_writedata),
      .avm_local_bb15_ld__u91_inst0_byteenable(avm_local_bb15_ld__u91_inst0_byteenable),
      .avm_local_bb15_ld__u91_inst0_waitrequest(avm_local_bb15_ld__u91_inst0_waitrequest),
      .avm_local_bb15_ld__u91_inst0_readdata(avm_local_bb15_ld__u91_inst0_readdata),
      .avm_local_bb15_ld__u91_inst0_readdatavalid(avm_local_bb15_ld__u91_inst0_readdatavalid),
      .avm_local_bb15_ld__u91_inst0_writeack(avm_local_bb15_ld__u91_inst0_writeack),
      // AVM avm_local_bb15_ld__u92_inst0
      .avm_local_bb15_ld__u92_inst0_enable(avm_local_bb15_ld__u92_inst0_enable),
      .avm_local_bb15_ld__u92_inst0_read(avm_local_bb15_ld__u92_inst0_read),
      .avm_local_bb15_ld__u92_inst0_write(avm_local_bb15_ld__u92_inst0_write),
      .avm_local_bb15_ld__u92_inst0_burstcount(avm_local_bb15_ld__u92_inst0_burstcount),
      .avm_local_bb15_ld__u92_inst0_address(avm_local_bb15_ld__u92_inst0_address),
      .avm_local_bb15_ld__u92_inst0_writedata(avm_local_bb15_ld__u92_inst0_writedata),
      .avm_local_bb15_ld__u92_inst0_byteenable(avm_local_bb15_ld__u92_inst0_byteenable),
      .avm_local_bb15_ld__u92_inst0_waitrequest(avm_local_bb15_ld__u92_inst0_waitrequest),
      .avm_local_bb15_ld__u92_inst0_readdata(avm_local_bb15_ld__u92_inst0_readdata),
      .avm_local_bb15_ld__u92_inst0_readdatavalid(avm_local_bb15_ld__u92_inst0_readdatavalid),
      .avm_local_bb15_ld__u92_inst0_writeack(avm_local_bb15_ld__u92_inst0_writeack),
      // AVM avm_local_bb15_ld__u93_inst0
      .avm_local_bb15_ld__u93_inst0_enable(avm_local_bb15_ld__u93_inst0_enable),
      .avm_local_bb15_ld__u93_inst0_read(avm_local_bb15_ld__u93_inst0_read),
      .avm_local_bb15_ld__u93_inst0_write(avm_local_bb15_ld__u93_inst0_write),
      .avm_local_bb15_ld__u93_inst0_burstcount(avm_local_bb15_ld__u93_inst0_burstcount),
      .avm_local_bb15_ld__u93_inst0_address(avm_local_bb15_ld__u93_inst0_address),
      .avm_local_bb15_ld__u93_inst0_writedata(avm_local_bb15_ld__u93_inst0_writedata),
      .avm_local_bb15_ld__u93_inst0_byteenable(avm_local_bb15_ld__u93_inst0_byteenable),
      .avm_local_bb15_ld__u93_inst0_waitrequest(avm_local_bb15_ld__u93_inst0_waitrequest),
      .avm_local_bb15_ld__u93_inst0_readdata(avm_local_bb15_ld__u93_inst0_readdata),
      .avm_local_bb15_ld__u93_inst0_readdatavalid(avm_local_bb15_ld__u93_inst0_readdatavalid),
      .avm_local_bb15_ld__u93_inst0_writeack(avm_local_bb15_ld__u93_inst0_writeack),
      // AVM avm_local_bb15_ld__u94_inst0
      .avm_local_bb15_ld__u94_inst0_enable(avm_local_bb15_ld__u94_inst0_enable),
      .avm_local_bb15_ld__u94_inst0_read(avm_local_bb15_ld__u94_inst0_read),
      .avm_local_bb15_ld__u94_inst0_write(avm_local_bb15_ld__u94_inst0_write),
      .avm_local_bb15_ld__u94_inst0_burstcount(avm_local_bb15_ld__u94_inst0_burstcount),
      .avm_local_bb15_ld__u94_inst0_address(avm_local_bb15_ld__u94_inst0_address),
      .avm_local_bb15_ld__u94_inst0_writedata(avm_local_bb15_ld__u94_inst0_writedata),
      .avm_local_bb15_ld__u94_inst0_byteenable(avm_local_bb15_ld__u94_inst0_byteenable),
      .avm_local_bb15_ld__u94_inst0_waitrequest(avm_local_bb15_ld__u94_inst0_waitrequest),
      .avm_local_bb15_ld__u94_inst0_readdata(avm_local_bb15_ld__u94_inst0_readdata),
      .avm_local_bb15_ld__u94_inst0_readdatavalid(avm_local_bb15_ld__u94_inst0_readdatavalid),
      .avm_local_bb15_ld__u94_inst0_writeack(avm_local_bb15_ld__u94_inst0_writeack),
      // AVM avm_local_bb15_ld__u95_inst0
      .avm_local_bb15_ld__u95_inst0_enable(avm_local_bb15_ld__u95_inst0_enable),
      .avm_local_bb15_ld__u95_inst0_read(avm_local_bb15_ld__u95_inst0_read),
      .avm_local_bb15_ld__u95_inst0_write(avm_local_bb15_ld__u95_inst0_write),
      .avm_local_bb15_ld__u95_inst0_burstcount(avm_local_bb15_ld__u95_inst0_burstcount),
      .avm_local_bb15_ld__u95_inst0_address(avm_local_bb15_ld__u95_inst0_address),
      .avm_local_bb15_ld__u95_inst0_writedata(avm_local_bb15_ld__u95_inst0_writedata),
      .avm_local_bb15_ld__u95_inst0_byteenable(avm_local_bb15_ld__u95_inst0_byteenable),
      .avm_local_bb15_ld__u95_inst0_waitrequest(avm_local_bb15_ld__u95_inst0_waitrequest),
      .avm_local_bb15_ld__u95_inst0_readdata(avm_local_bb15_ld__u95_inst0_readdata),
      .avm_local_bb15_ld__u95_inst0_readdatavalid(avm_local_bb15_ld__u95_inst0_readdatavalid),
      .avm_local_bb15_ld__u95_inst0_writeack(avm_local_bb15_ld__u95_inst0_writeack),
      // AVM avm_local_bb15_ld__u96_inst0
      .avm_local_bb15_ld__u96_inst0_enable(avm_local_bb15_ld__u96_inst0_enable),
      .avm_local_bb15_ld__u96_inst0_read(avm_local_bb15_ld__u96_inst0_read),
      .avm_local_bb15_ld__u96_inst0_write(avm_local_bb15_ld__u96_inst0_write),
      .avm_local_bb15_ld__u96_inst0_burstcount(avm_local_bb15_ld__u96_inst0_burstcount),
      .avm_local_bb15_ld__u96_inst0_address(avm_local_bb15_ld__u96_inst0_address),
      .avm_local_bb15_ld__u96_inst0_writedata(avm_local_bb15_ld__u96_inst0_writedata),
      .avm_local_bb15_ld__u96_inst0_byteenable(avm_local_bb15_ld__u96_inst0_byteenable),
      .avm_local_bb15_ld__u96_inst0_waitrequest(avm_local_bb15_ld__u96_inst0_waitrequest),
      .avm_local_bb15_ld__u96_inst0_readdata(avm_local_bb15_ld__u96_inst0_readdata),
      .avm_local_bb15_ld__u96_inst0_readdatavalid(avm_local_bb15_ld__u96_inst0_readdatavalid),
      .avm_local_bb15_ld__u96_inst0_writeack(avm_local_bb15_ld__u96_inst0_writeack),
      // AVM avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_enable(avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_enable),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_read(avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_read),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_write(avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_write),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_burstcount(avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_burstcount),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_address(avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_address),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_writedata(avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_writedata),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_byteenable(avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_byteenable),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_waitrequest(avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_waitrequest),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_readdata(avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_readdata),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_readdatavalid(avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_readdatavalid),
      .avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_writeack(avm_local_bb15_ld_memcoalesce_KerConst_load_02_inst0_writeack),
      // AVM avm_local_bb1_ld__inst0
      .avm_local_bb1_ld__inst0_enable(avm_local_bb1_ld__inst0_enable),
      .avm_local_bb1_ld__inst0_read(avm_local_bb1_ld__inst0_read),
      .avm_local_bb1_ld__inst0_write(avm_local_bb1_ld__inst0_write),
      .avm_local_bb1_ld__inst0_burstcount(avm_local_bb1_ld__inst0_burstcount),
      .avm_local_bb1_ld__inst0_address(avm_local_bb1_ld__inst0_address),
      .avm_local_bb1_ld__inst0_writedata(avm_local_bb1_ld__inst0_writedata),
      .avm_local_bb1_ld__inst0_byteenable(avm_local_bb1_ld__inst0_byteenable),
      .avm_local_bb1_ld__inst0_waitrequest(avm_local_bb1_ld__inst0_waitrequest),
      .avm_local_bb1_ld__inst0_readdata(avm_local_bb1_ld__inst0_readdata),
      .avm_local_bb1_ld__inst0_readdatavalid(avm_local_bb1_ld__inst0_readdatavalid),
      .avm_local_bb1_ld__inst0_writeack(avm_local_bb1_ld__inst0_writeack),
      // AVM avm_local_bb1_ld__u12_inst0
      .avm_local_bb1_ld__u12_inst0_enable(avm_local_bb1_ld__u12_inst0_enable),
      .avm_local_bb1_ld__u12_inst0_read(avm_local_bb1_ld__u12_inst0_read),
      .avm_local_bb1_ld__u12_inst0_write(avm_local_bb1_ld__u12_inst0_write),
      .avm_local_bb1_ld__u12_inst0_burstcount(avm_local_bb1_ld__u12_inst0_burstcount),
      .avm_local_bb1_ld__u12_inst0_address(avm_local_bb1_ld__u12_inst0_address),
      .avm_local_bb1_ld__u12_inst0_writedata(avm_local_bb1_ld__u12_inst0_writedata),
      .avm_local_bb1_ld__u12_inst0_byteenable(avm_local_bb1_ld__u12_inst0_byteenable),
      .avm_local_bb1_ld__u12_inst0_waitrequest(avm_local_bb1_ld__u12_inst0_waitrequest),
      .avm_local_bb1_ld__u12_inst0_readdata(avm_local_bb1_ld__u12_inst0_readdata),
      .avm_local_bb1_ld__u12_inst0_readdatavalid(avm_local_bb1_ld__u12_inst0_readdatavalid),
      .avm_local_bb1_ld__u12_inst0_writeack(avm_local_bb1_ld__u12_inst0_writeack),
      // AVM avm_local_bb1_st_c0_exe4_inst0
      .avm_local_bb1_st_c0_exe4_inst0_enable(avm_local_bb1_st_c0_exe4_inst0_enable),
      .avm_local_bb1_st_c0_exe4_inst0_read(avm_local_bb1_st_c0_exe4_inst0_read),
      .avm_local_bb1_st_c0_exe4_inst0_write(avm_local_bb1_st_c0_exe4_inst0_write),
      .avm_local_bb1_st_c0_exe4_inst0_burstcount(avm_local_bb1_st_c0_exe4_inst0_burstcount),
      .avm_local_bb1_st_c0_exe4_inst0_address(avm_local_bb1_st_c0_exe4_inst0_address),
      .avm_local_bb1_st_c0_exe4_inst0_writedata(avm_local_bb1_st_c0_exe4_inst0_writedata),
      .avm_local_bb1_st_c0_exe4_inst0_byteenable(avm_local_bb1_st_c0_exe4_inst0_byteenable),
      .avm_local_bb1_st_c0_exe4_inst0_waitrequest(avm_local_bb1_st_c0_exe4_inst0_waitrequest),
      .avm_local_bb1_st_c0_exe4_inst0_readdata(avm_local_bb1_st_c0_exe4_inst0_readdata),
      .avm_local_bb1_st_c0_exe4_inst0_readdatavalid(avm_local_bb1_st_c0_exe4_inst0_readdatavalid),
      .avm_local_bb1_st_c0_exe4_inst0_writeack(avm_local_bb1_st_c0_exe4_inst0_writeack),
      // AVM avm_local_bb22_ld__1368_inst0
      .avm_local_bb22_ld__1368_inst0_enable(avm_local_bb22_ld__1368_inst0_enable),
      .avm_local_bb22_ld__1368_inst0_read(avm_local_bb22_ld__1368_inst0_read),
      .avm_local_bb22_ld__1368_inst0_write(avm_local_bb22_ld__1368_inst0_write),
      .avm_local_bb22_ld__1368_inst0_burstcount(avm_local_bb22_ld__1368_inst0_burstcount),
      .avm_local_bb22_ld__1368_inst0_address(avm_local_bb22_ld__1368_inst0_address),
      .avm_local_bb22_ld__1368_inst0_writedata(avm_local_bb22_ld__1368_inst0_writedata),
      .avm_local_bb22_ld__1368_inst0_byteenable(avm_local_bb22_ld__1368_inst0_byteenable),
      .avm_local_bb22_ld__1368_inst0_waitrequest(avm_local_bb22_ld__1368_inst0_waitrequest),
      .avm_local_bb22_ld__1368_inst0_readdata(avm_local_bb22_ld__1368_inst0_readdata),
      .avm_local_bb22_ld__1368_inst0_readdatavalid(avm_local_bb22_ld__1368_inst0_readdatavalid),
      .avm_local_bb22_ld__1368_inst0_writeack(avm_local_bb22_ld__1368_inst0_writeack),
      // AVM avm_local_bb22_ld__1370_inst0
      .avm_local_bb22_ld__1370_inst0_enable(avm_local_bb22_ld__1370_inst0_enable),
      .avm_local_bb22_ld__1370_inst0_read(avm_local_bb22_ld__1370_inst0_read),
      .avm_local_bb22_ld__1370_inst0_write(avm_local_bb22_ld__1370_inst0_write),
      .avm_local_bb22_ld__1370_inst0_burstcount(avm_local_bb22_ld__1370_inst0_burstcount),
      .avm_local_bb22_ld__1370_inst0_address(avm_local_bb22_ld__1370_inst0_address),
      .avm_local_bb22_ld__1370_inst0_writedata(avm_local_bb22_ld__1370_inst0_writedata),
      .avm_local_bb22_ld__1370_inst0_byteenable(avm_local_bb22_ld__1370_inst0_byteenable),
      .avm_local_bb22_ld__1370_inst0_waitrequest(avm_local_bb22_ld__1370_inst0_waitrequest),
      .avm_local_bb22_ld__1370_inst0_readdata(avm_local_bb22_ld__1370_inst0_readdata),
      .avm_local_bb22_ld__1370_inst0_readdatavalid(avm_local_bb22_ld__1370_inst0_readdatavalid),
      .avm_local_bb22_ld__1370_inst0_writeack(avm_local_bb22_ld__1370_inst0_writeack),
      // AVM avm_local_bb22_ld__1372_inst0
      .avm_local_bb22_ld__1372_inst0_enable(avm_local_bb22_ld__1372_inst0_enable),
      .avm_local_bb22_ld__1372_inst0_read(avm_local_bb22_ld__1372_inst0_read),
      .avm_local_bb22_ld__1372_inst0_write(avm_local_bb22_ld__1372_inst0_write),
      .avm_local_bb22_ld__1372_inst0_burstcount(avm_local_bb22_ld__1372_inst0_burstcount),
      .avm_local_bb22_ld__1372_inst0_address(avm_local_bb22_ld__1372_inst0_address),
      .avm_local_bb22_ld__1372_inst0_writedata(avm_local_bb22_ld__1372_inst0_writedata),
      .avm_local_bb22_ld__1372_inst0_byteenable(avm_local_bb22_ld__1372_inst0_byteenable),
      .avm_local_bb22_ld__1372_inst0_waitrequest(avm_local_bb22_ld__1372_inst0_waitrequest),
      .avm_local_bb22_ld__1372_inst0_readdata(avm_local_bb22_ld__1372_inst0_readdata),
      .avm_local_bb22_ld__1372_inst0_readdatavalid(avm_local_bb22_ld__1372_inst0_readdatavalid),
      .avm_local_bb22_ld__1372_inst0_writeack(avm_local_bb22_ld__1372_inst0_writeack),
      // AVM avm_local_bb22_ld__1374_inst0
      .avm_local_bb22_ld__1374_inst0_enable(avm_local_bb22_ld__1374_inst0_enable),
      .avm_local_bb22_ld__1374_inst0_read(avm_local_bb22_ld__1374_inst0_read),
      .avm_local_bb22_ld__1374_inst0_write(avm_local_bb22_ld__1374_inst0_write),
      .avm_local_bb22_ld__1374_inst0_burstcount(avm_local_bb22_ld__1374_inst0_burstcount),
      .avm_local_bb22_ld__1374_inst0_address(avm_local_bb22_ld__1374_inst0_address),
      .avm_local_bb22_ld__1374_inst0_writedata(avm_local_bb22_ld__1374_inst0_writedata),
      .avm_local_bb22_ld__1374_inst0_byteenable(avm_local_bb22_ld__1374_inst0_byteenable),
      .avm_local_bb22_ld__1374_inst0_waitrequest(avm_local_bb22_ld__1374_inst0_waitrequest),
      .avm_local_bb22_ld__1374_inst0_readdata(avm_local_bb22_ld__1374_inst0_readdata),
      .avm_local_bb22_ld__1374_inst0_readdatavalid(avm_local_bb22_ld__1374_inst0_readdatavalid),
      .avm_local_bb22_ld__1374_inst0_writeack(avm_local_bb22_ld__1374_inst0_writeack),
      // AVM avm_local_bb22_ld__inst0
      .avm_local_bb22_ld__inst0_enable(avm_local_bb22_ld__inst0_enable),
      .avm_local_bb22_ld__inst0_read(avm_local_bb22_ld__inst0_read),
      .avm_local_bb22_ld__inst0_write(avm_local_bb22_ld__inst0_write),
      .avm_local_bb22_ld__inst0_burstcount(avm_local_bb22_ld__inst0_burstcount),
      .avm_local_bb22_ld__inst0_address(avm_local_bb22_ld__inst0_address),
      .avm_local_bb22_ld__inst0_writedata(avm_local_bb22_ld__inst0_writedata),
      .avm_local_bb22_ld__inst0_byteenable(avm_local_bb22_ld__inst0_byteenable),
      .avm_local_bb22_ld__inst0_waitrequest(avm_local_bb22_ld__inst0_waitrequest),
      .avm_local_bb22_ld__inst0_readdata(avm_local_bb22_ld__inst0_readdata),
      .avm_local_bb22_ld__inst0_readdatavalid(avm_local_bb22_ld__inst0_readdatavalid),
      .avm_local_bb22_ld__inst0_writeack(avm_local_bb22_ld__inst0_writeack),
      // AVM avm_local_bb22_ld__u115_inst0
      .avm_local_bb22_ld__u115_inst0_enable(avm_local_bb22_ld__u115_inst0_enable),
      .avm_local_bb22_ld__u115_inst0_read(avm_local_bb22_ld__u115_inst0_read),
      .avm_local_bb22_ld__u115_inst0_write(avm_local_bb22_ld__u115_inst0_write),
      .avm_local_bb22_ld__u115_inst0_burstcount(avm_local_bb22_ld__u115_inst0_burstcount),
      .avm_local_bb22_ld__u115_inst0_address(avm_local_bb22_ld__u115_inst0_address),
      .avm_local_bb22_ld__u115_inst0_writedata(avm_local_bb22_ld__u115_inst0_writedata),
      .avm_local_bb22_ld__u115_inst0_byteenable(avm_local_bb22_ld__u115_inst0_byteenable),
      .avm_local_bb22_ld__u115_inst0_waitrequest(avm_local_bb22_ld__u115_inst0_waitrequest),
      .avm_local_bb22_ld__u115_inst0_readdata(avm_local_bb22_ld__u115_inst0_readdata),
      .avm_local_bb22_ld__u115_inst0_readdatavalid(avm_local_bb22_ld__u115_inst0_readdatavalid),
      .avm_local_bb22_ld__u115_inst0_writeack(avm_local_bb22_ld__u115_inst0_writeack),
      // AVM avm_local_bb22_ld__u116_inst0
      .avm_local_bb22_ld__u116_inst0_enable(avm_local_bb22_ld__u116_inst0_enable),
      .avm_local_bb22_ld__u116_inst0_read(avm_local_bb22_ld__u116_inst0_read),
      .avm_local_bb22_ld__u116_inst0_write(avm_local_bb22_ld__u116_inst0_write),
      .avm_local_bb22_ld__u116_inst0_burstcount(avm_local_bb22_ld__u116_inst0_burstcount),
      .avm_local_bb22_ld__u116_inst0_address(avm_local_bb22_ld__u116_inst0_address),
      .avm_local_bb22_ld__u116_inst0_writedata(avm_local_bb22_ld__u116_inst0_writedata),
      .avm_local_bb22_ld__u116_inst0_byteenable(avm_local_bb22_ld__u116_inst0_byteenable),
      .avm_local_bb22_ld__u116_inst0_waitrequest(avm_local_bb22_ld__u116_inst0_waitrequest),
      .avm_local_bb22_ld__u116_inst0_readdata(avm_local_bb22_ld__u116_inst0_readdata),
      .avm_local_bb22_ld__u116_inst0_readdatavalid(avm_local_bb22_ld__u116_inst0_readdatavalid),
      .avm_local_bb22_ld__u116_inst0_writeack(avm_local_bb22_ld__u116_inst0_writeack),
      // AVM avm_local_bb22_ld__u117_inst0
      .avm_local_bb22_ld__u117_inst0_enable(avm_local_bb22_ld__u117_inst0_enable),
      .avm_local_bb22_ld__u117_inst0_read(avm_local_bb22_ld__u117_inst0_read),
      .avm_local_bb22_ld__u117_inst0_write(avm_local_bb22_ld__u117_inst0_write),
      .avm_local_bb22_ld__u117_inst0_burstcount(avm_local_bb22_ld__u117_inst0_burstcount),
      .avm_local_bb22_ld__u117_inst0_address(avm_local_bb22_ld__u117_inst0_address),
      .avm_local_bb22_ld__u117_inst0_writedata(avm_local_bb22_ld__u117_inst0_writedata),
      .avm_local_bb22_ld__u117_inst0_byteenable(avm_local_bb22_ld__u117_inst0_byteenable),
      .avm_local_bb22_ld__u117_inst0_waitrequest(avm_local_bb22_ld__u117_inst0_waitrequest),
      .avm_local_bb22_ld__u117_inst0_readdata(avm_local_bb22_ld__u117_inst0_readdata),
      .avm_local_bb22_ld__u117_inst0_readdatavalid(avm_local_bb22_ld__u117_inst0_readdatavalid),
      .avm_local_bb22_ld__u117_inst0_writeack(avm_local_bb22_ld__u117_inst0_writeack),
      // AVM avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_enable(avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_enable),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_read(avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_read),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_write(avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_write),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_burstcount(avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_burstcount),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_address(avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_address),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_writedata(avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_writedata),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_byteenable(avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_byteenable),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_waitrequest(avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_waitrequest),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_readdata(avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_readdata),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_readdatavalid(avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_readdatavalid),
      .avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_writeack(avm_local_bb22_ld_memcoalesce_KerConst_load_06_inst0_writeack),
      // AVM avm_local_bb24_ld__u122_inst0
      .avm_local_bb24_ld__u122_inst0_enable(avm_local_bb24_ld__u122_inst0_enable),
      .avm_local_bb24_ld__u122_inst0_read(avm_local_bb24_ld__u122_inst0_read),
      .avm_local_bb24_ld__u122_inst0_write(avm_local_bb24_ld__u122_inst0_write),
      .avm_local_bb24_ld__u122_inst0_burstcount(avm_local_bb24_ld__u122_inst0_burstcount),
      .avm_local_bb24_ld__u122_inst0_address(avm_local_bb24_ld__u122_inst0_address),
      .avm_local_bb24_ld__u122_inst0_writedata(avm_local_bb24_ld__u122_inst0_writedata),
      .avm_local_bb24_ld__u122_inst0_byteenable(avm_local_bb24_ld__u122_inst0_byteenable),
      .avm_local_bb24_ld__u122_inst0_waitrequest(avm_local_bb24_ld__u122_inst0_waitrequest),
      .avm_local_bb24_ld__u122_inst0_readdata(avm_local_bb24_ld__u122_inst0_readdata),
      .avm_local_bb24_ld__u122_inst0_readdatavalid(avm_local_bb24_ld__u122_inst0_readdatavalid),
      .avm_local_bb24_ld__u122_inst0_writeack(avm_local_bb24_ld__u122_inst0_writeack),
      // AVM avm_local_bb24_ld__u123_inst0
      .avm_local_bb24_ld__u123_inst0_enable(avm_local_bb24_ld__u123_inst0_enable),
      .avm_local_bb24_ld__u123_inst0_read(avm_local_bb24_ld__u123_inst0_read),
      .avm_local_bb24_ld__u123_inst0_write(avm_local_bb24_ld__u123_inst0_write),
      .avm_local_bb24_ld__u123_inst0_burstcount(avm_local_bb24_ld__u123_inst0_burstcount),
      .avm_local_bb24_ld__u123_inst0_address(avm_local_bb24_ld__u123_inst0_address),
      .avm_local_bb24_ld__u123_inst0_writedata(avm_local_bb24_ld__u123_inst0_writedata),
      .avm_local_bb24_ld__u123_inst0_byteenable(avm_local_bb24_ld__u123_inst0_byteenable),
      .avm_local_bb24_ld__u123_inst0_waitrequest(avm_local_bb24_ld__u123_inst0_waitrequest),
      .avm_local_bb24_ld__u123_inst0_readdata(avm_local_bb24_ld__u123_inst0_readdata),
      .avm_local_bb24_ld__u123_inst0_readdatavalid(avm_local_bb24_ld__u123_inst0_readdatavalid),
      .avm_local_bb24_ld__u123_inst0_writeack(avm_local_bb24_ld__u123_inst0_writeack),
      // AVM avm_local_bb24_ld__u124_inst0
      .avm_local_bb24_ld__u124_inst0_enable(avm_local_bb24_ld__u124_inst0_enable),
      .avm_local_bb24_ld__u124_inst0_read(avm_local_bb24_ld__u124_inst0_read),
      .avm_local_bb24_ld__u124_inst0_write(avm_local_bb24_ld__u124_inst0_write),
      .avm_local_bb24_ld__u124_inst0_burstcount(avm_local_bb24_ld__u124_inst0_burstcount),
      .avm_local_bb24_ld__u124_inst0_address(avm_local_bb24_ld__u124_inst0_address),
      .avm_local_bb24_ld__u124_inst0_writedata(avm_local_bb24_ld__u124_inst0_writedata),
      .avm_local_bb24_ld__u124_inst0_byteenable(avm_local_bb24_ld__u124_inst0_byteenable),
      .avm_local_bb24_ld__u124_inst0_waitrequest(avm_local_bb24_ld__u124_inst0_waitrequest),
      .avm_local_bb24_ld__u124_inst0_readdata(avm_local_bb24_ld__u124_inst0_readdata),
      .avm_local_bb24_ld__u124_inst0_readdatavalid(avm_local_bb24_ld__u124_inst0_readdatavalid),
      .avm_local_bb24_ld__u124_inst0_writeack(avm_local_bb24_ld__u124_inst0_writeack),
      // AVM avm_local_bb24_ld__u125_inst0
      .avm_local_bb24_ld__u125_inst0_enable(avm_local_bb24_ld__u125_inst0_enable),
      .avm_local_bb24_ld__u125_inst0_read(avm_local_bb24_ld__u125_inst0_read),
      .avm_local_bb24_ld__u125_inst0_write(avm_local_bb24_ld__u125_inst0_write),
      .avm_local_bb24_ld__u125_inst0_burstcount(avm_local_bb24_ld__u125_inst0_burstcount),
      .avm_local_bb24_ld__u125_inst0_address(avm_local_bb24_ld__u125_inst0_address),
      .avm_local_bb24_ld__u125_inst0_writedata(avm_local_bb24_ld__u125_inst0_writedata),
      .avm_local_bb24_ld__u125_inst0_byteenable(avm_local_bb24_ld__u125_inst0_byteenable),
      .avm_local_bb24_ld__u125_inst0_waitrequest(avm_local_bb24_ld__u125_inst0_waitrequest),
      .avm_local_bb24_ld__u125_inst0_readdata(avm_local_bb24_ld__u125_inst0_readdata),
      .avm_local_bb24_ld__u125_inst0_readdatavalid(avm_local_bb24_ld__u125_inst0_readdatavalid),
      .avm_local_bb24_ld__u125_inst0_writeack(avm_local_bb24_ld__u125_inst0_writeack),
      // AVM avm_local_bb24_ld__u126_inst0
      .avm_local_bb24_ld__u126_inst0_enable(avm_local_bb24_ld__u126_inst0_enable),
      .avm_local_bb24_ld__u126_inst0_read(avm_local_bb24_ld__u126_inst0_read),
      .avm_local_bb24_ld__u126_inst0_write(avm_local_bb24_ld__u126_inst0_write),
      .avm_local_bb24_ld__u126_inst0_burstcount(avm_local_bb24_ld__u126_inst0_burstcount),
      .avm_local_bb24_ld__u126_inst0_address(avm_local_bb24_ld__u126_inst0_address),
      .avm_local_bb24_ld__u126_inst0_writedata(avm_local_bb24_ld__u126_inst0_writedata),
      .avm_local_bb24_ld__u126_inst0_byteenable(avm_local_bb24_ld__u126_inst0_byteenable),
      .avm_local_bb24_ld__u126_inst0_waitrequest(avm_local_bb24_ld__u126_inst0_waitrequest),
      .avm_local_bb24_ld__u126_inst0_readdata(avm_local_bb24_ld__u126_inst0_readdata),
      .avm_local_bb24_ld__u126_inst0_readdatavalid(avm_local_bb24_ld__u126_inst0_readdatavalid),
      .avm_local_bb24_ld__u126_inst0_writeack(avm_local_bb24_ld__u126_inst0_writeack),
      // AVM avm_local_bb24_ld__u127_inst0
      .avm_local_bb24_ld__u127_inst0_enable(avm_local_bb24_ld__u127_inst0_enable),
      .avm_local_bb24_ld__u127_inst0_read(avm_local_bb24_ld__u127_inst0_read),
      .avm_local_bb24_ld__u127_inst0_write(avm_local_bb24_ld__u127_inst0_write),
      .avm_local_bb24_ld__u127_inst0_burstcount(avm_local_bb24_ld__u127_inst0_burstcount),
      .avm_local_bb24_ld__u127_inst0_address(avm_local_bb24_ld__u127_inst0_address),
      .avm_local_bb24_ld__u127_inst0_writedata(avm_local_bb24_ld__u127_inst0_writedata),
      .avm_local_bb24_ld__u127_inst0_byteenable(avm_local_bb24_ld__u127_inst0_byteenable),
      .avm_local_bb24_ld__u127_inst0_waitrequest(avm_local_bb24_ld__u127_inst0_waitrequest),
      .avm_local_bb24_ld__u127_inst0_readdata(avm_local_bb24_ld__u127_inst0_readdata),
      .avm_local_bb24_ld__u127_inst0_readdatavalid(avm_local_bb24_ld__u127_inst0_readdatavalid),
      .avm_local_bb24_ld__u127_inst0_writeack(avm_local_bb24_ld__u127_inst0_writeack),
      // AVM avm_local_bb24_ld__u128_inst0
      .avm_local_bb24_ld__u128_inst0_enable(avm_local_bb24_ld__u128_inst0_enable),
      .avm_local_bb24_ld__u128_inst0_read(avm_local_bb24_ld__u128_inst0_read),
      .avm_local_bb24_ld__u128_inst0_write(avm_local_bb24_ld__u128_inst0_write),
      .avm_local_bb24_ld__u128_inst0_burstcount(avm_local_bb24_ld__u128_inst0_burstcount),
      .avm_local_bb24_ld__u128_inst0_address(avm_local_bb24_ld__u128_inst0_address),
      .avm_local_bb24_ld__u128_inst0_writedata(avm_local_bb24_ld__u128_inst0_writedata),
      .avm_local_bb24_ld__u128_inst0_byteenable(avm_local_bb24_ld__u128_inst0_byteenable),
      .avm_local_bb24_ld__u128_inst0_waitrequest(avm_local_bb24_ld__u128_inst0_waitrequest),
      .avm_local_bb24_ld__u128_inst0_readdata(avm_local_bb24_ld__u128_inst0_readdata),
      .avm_local_bb24_ld__u128_inst0_readdatavalid(avm_local_bb24_ld__u128_inst0_readdatavalid),
      .avm_local_bb24_ld__u128_inst0_writeack(avm_local_bb24_ld__u128_inst0_writeack),
      // AVM avm_local_bb24_ld__u129_inst0
      .avm_local_bb24_ld__u129_inst0_enable(avm_local_bb24_ld__u129_inst0_enable),
      .avm_local_bb24_ld__u129_inst0_read(avm_local_bb24_ld__u129_inst0_read),
      .avm_local_bb24_ld__u129_inst0_write(avm_local_bb24_ld__u129_inst0_write),
      .avm_local_bb24_ld__u129_inst0_burstcount(avm_local_bb24_ld__u129_inst0_burstcount),
      .avm_local_bb24_ld__u129_inst0_address(avm_local_bb24_ld__u129_inst0_address),
      .avm_local_bb24_ld__u129_inst0_writedata(avm_local_bb24_ld__u129_inst0_writedata),
      .avm_local_bb24_ld__u129_inst0_byteenable(avm_local_bb24_ld__u129_inst0_byteenable),
      .avm_local_bb24_ld__u129_inst0_waitrequest(avm_local_bb24_ld__u129_inst0_waitrequest),
      .avm_local_bb24_ld__u129_inst0_readdata(avm_local_bb24_ld__u129_inst0_readdata),
      .avm_local_bb24_ld__u129_inst0_readdatavalid(avm_local_bb24_ld__u129_inst0_readdatavalid),
      .avm_local_bb24_ld__u129_inst0_writeack(avm_local_bb24_ld__u129_inst0_writeack),
      // AVM avm_local_bb24_ld__u130_inst0
      .avm_local_bb24_ld__u130_inst0_enable(avm_local_bb24_ld__u130_inst0_enable),
      .avm_local_bb24_ld__u130_inst0_read(avm_local_bb24_ld__u130_inst0_read),
      .avm_local_bb24_ld__u130_inst0_write(avm_local_bb24_ld__u130_inst0_write),
      .avm_local_bb24_ld__u130_inst0_burstcount(avm_local_bb24_ld__u130_inst0_burstcount),
      .avm_local_bb24_ld__u130_inst0_address(avm_local_bb24_ld__u130_inst0_address),
      .avm_local_bb24_ld__u130_inst0_writedata(avm_local_bb24_ld__u130_inst0_writedata),
      .avm_local_bb24_ld__u130_inst0_byteenable(avm_local_bb24_ld__u130_inst0_byteenable),
      .avm_local_bb24_ld__u130_inst0_waitrequest(avm_local_bb24_ld__u130_inst0_waitrequest),
      .avm_local_bb24_ld__u130_inst0_readdata(avm_local_bb24_ld__u130_inst0_readdata),
      .avm_local_bb24_ld__u130_inst0_readdatavalid(avm_local_bb24_ld__u130_inst0_readdatavalid),
      .avm_local_bb24_ld__u130_inst0_writeack(avm_local_bb24_ld__u130_inst0_writeack),
      // AVM avm_local_bb24_ld__u131_inst0
      .avm_local_bb24_ld__u131_inst0_enable(avm_local_bb24_ld__u131_inst0_enable),
      .avm_local_bb24_ld__u131_inst0_read(avm_local_bb24_ld__u131_inst0_read),
      .avm_local_bb24_ld__u131_inst0_write(avm_local_bb24_ld__u131_inst0_write),
      .avm_local_bb24_ld__u131_inst0_burstcount(avm_local_bb24_ld__u131_inst0_burstcount),
      .avm_local_bb24_ld__u131_inst0_address(avm_local_bb24_ld__u131_inst0_address),
      .avm_local_bb24_ld__u131_inst0_writedata(avm_local_bb24_ld__u131_inst0_writedata),
      .avm_local_bb24_ld__u131_inst0_byteenable(avm_local_bb24_ld__u131_inst0_byteenable),
      .avm_local_bb24_ld__u131_inst0_waitrequest(avm_local_bb24_ld__u131_inst0_waitrequest),
      .avm_local_bb24_ld__u131_inst0_readdata(avm_local_bb24_ld__u131_inst0_readdata),
      .avm_local_bb24_ld__u131_inst0_readdatavalid(avm_local_bb24_ld__u131_inst0_readdatavalid),
      .avm_local_bb24_ld__u131_inst0_writeack(avm_local_bb24_ld__u131_inst0_writeack),
      // AVM avm_local_bb24_ld__u132_inst0
      .avm_local_bb24_ld__u132_inst0_enable(avm_local_bb24_ld__u132_inst0_enable),
      .avm_local_bb24_ld__u132_inst0_read(avm_local_bb24_ld__u132_inst0_read),
      .avm_local_bb24_ld__u132_inst0_write(avm_local_bb24_ld__u132_inst0_write),
      .avm_local_bb24_ld__u132_inst0_burstcount(avm_local_bb24_ld__u132_inst0_burstcount),
      .avm_local_bb24_ld__u132_inst0_address(avm_local_bb24_ld__u132_inst0_address),
      .avm_local_bb24_ld__u132_inst0_writedata(avm_local_bb24_ld__u132_inst0_writedata),
      .avm_local_bb24_ld__u132_inst0_byteenable(avm_local_bb24_ld__u132_inst0_byteenable),
      .avm_local_bb24_ld__u132_inst0_waitrequest(avm_local_bb24_ld__u132_inst0_waitrequest),
      .avm_local_bb24_ld__u132_inst0_readdata(avm_local_bb24_ld__u132_inst0_readdata),
      .avm_local_bb24_ld__u132_inst0_readdatavalid(avm_local_bb24_ld__u132_inst0_readdatavalid),
      .avm_local_bb24_ld__u132_inst0_writeack(avm_local_bb24_ld__u132_inst0_writeack),
      // AVM avm_local_bb24_ld__u133_inst0
      .avm_local_bb24_ld__u133_inst0_enable(avm_local_bb24_ld__u133_inst0_enable),
      .avm_local_bb24_ld__u133_inst0_read(avm_local_bb24_ld__u133_inst0_read),
      .avm_local_bb24_ld__u133_inst0_write(avm_local_bb24_ld__u133_inst0_write),
      .avm_local_bb24_ld__u133_inst0_burstcount(avm_local_bb24_ld__u133_inst0_burstcount),
      .avm_local_bb24_ld__u133_inst0_address(avm_local_bb24_ld__u133_inst0_address),
      .avm_local_bb24_ld__u133_inst0_writedata(avm_local_bb24_ld__u133_inst0_writedata),
      .avm_local_bb24_ld__u133_inst0_byteenable(avm_local_bb24_ld__u133_inst0_byteenable),
      .avm_local_bb24_ld__u133_inst0_waitrequest(avm_local_bb24_ld__u133_inst0_waitrequest),
      .avm_local_bb24_ld__u133_inst0_readdata(avm_local_bb24_ld__u133_inst0_readdata),
      .avm_local_bb24_ld__u133_inst0_readdatavalid(avm_local_bb24_ld__u133_inst0_readdatavalid),
      .avm_local_bb24_ld__u133_inst0_writeack(avm_local_bb24_ld__u133_inst0_writeack),
      // AVM avm_local_bb24_ld__u134_inst0
      .avm_local_bb24_ld__u134_inst0_enable(avm_local_bb24_ld__u134_inst0_enable),
      .avm_local_bb24_ld__u134_inst0_read(avm_local_bb24_ld__u134_inst0_read),
      .avm_local_bb24_ld__u134_inst0_write(avm_local_bb24_ld__u134_inst0_write),
      .avm_local_bb24_ld__u134_inst0_burstcount(avm_local_bb24_ld__u134_inst0_burstcount),
      .avm_local_bb24_ld__u134_inst0_address(avm_local_bb24_ld__u134_inst0_address),
      .avm_local_bb24_ld__u134_inst0_writedata(avm_local_bb24_ld__u134_inst0_writedata),
      .avm_local_bb24_ld__u134_inst0_byteenable(avm_local_bb24_ld__u134_inst0_byteenable),
      .avm_local_bb24_ld__u134_inst0_waitrequest(avm_local_bb24_ld__u134_inst0_waitrequest),
      .avm_local_bb24_ld__u134_inst0_readdata(avm_local_bb24_ld__u134_inst0_readdata),
      .avm_local_bb24_ld__u134_inst0_readdatavalid(avm_local_bb24_ld__u134_inst0_readdatavalid),
      .avm_local_bb24_ld__u134_inst0_writeack(avm_local_bb24_ld__u134_inst0_writeack),
      // AVM avm_local_bb24_ld__u135_inst0
      .avm_local_bb24_ld__u135_inst0_enable(avm_local_bb24_ld__u135_inst0_enable),
      .avm_local_bb24_ld__u135_inst0_read(avm_local_bb24_ld__u135_inst0_read),
      .avm_local_bb24_ld__u135_inst0_write(avm_local_bb24_ld__u135_inst0_write),
      .avm_local_bb24_ld__u135_inst0_burstcount(avm_local_bb24_ld__u135_inst0_burstcount),
      .avm_local_bb24_ld__u135_inst0_address(avm_local_bb24_ld__u135_inst0_address),
      .avm_local_bb24_ld__u135_inst0_writedata(avm_local_bb24_ld__u135_inst0_writedata),
      .avm_local_bb24_ld__u135_inst0_byteenable(avm_local_bb24_ld__u135_inst0_byteenable),
      .avm_local_bb24_ld__u135_inst0_waitrequest(avm_local_bb24_ld__u135_inst0_waitrequest),
      .avm_local_bb24_ld__u135_inst0_readdata(avm_local_bb24_ld__u135_inst0_readdata),
      .avm_local_bb24_ld__u135_inst0_readdatavalid(avm_local_bb24_ld__u135_inst0_readdatavalid),
      .avm_local_bb24_ld__u135_inst0_writeack(avm_local_bb24_ld__u135_inst0_writeack),
      // AVM avm_local_bb24_ld__u136_inst0
      .avm_local_bb24_ld__u136_inst0_enable(avm_local_bb24_ld__u136_inst0_enable),
      .avm_local_bb24_ld__u136_inst0_read(avm_local_bb24_ld__u136_inst0_read),
      .avm_local_bb24_ld__u136_inst0_write(avm_local_bb24_ld__u136_inst0_write),
      .avm_local_bb24_ld__u136_inst0_burstcount(avm_local_bb24_ld__u136_inst0_burstcount),
      .avm_local_bb24_ld__u136_inst0_address(avm_local_bb24_ld__u136_inst0_address),
      .avm_local_bb24_ld__u136_inst0_writedata(avm_local_bb24_ld__u136_inst0_writedata),
      .avm_local_bb24_ld__u136_inst0_byteenable(avm_local_bb24_ld__u136_inst0_byteenable),
      .avm_local_bb24_ld__u136_inst0_waitrequest(avm_local_bb24_ld__u136_inst0_waitrequest),
      .avm_local_bb24_ld__u136_inst0_readdata(avm_local_bb24_ld__u136_inst0_readdata),
      .avm_local_bb24_ld__u136_inst0_readdatavalid(avm_local_bb24_ld__u136_inst0_readdatavalid),
      .avm_local_bb24_ld__u136_inst0_writeack(avm_local_bb24_ld__u136_inst0_writeack),
      // AVM avm_local_bb24_ld__u137_inst0
      .avm_local_bb24_ld__u137_inst0_enable(avm_local_bb24_ld__u137_inst0_enable),
      .avm_local_bb24_ld__u137_inst0_read(avm_local_bb24_ld__u137_inst0_read),
      .avm_local_bb24_ld__u137_inst0_write(avm_local_bb24_ld__u137_inst0_write),
      .avm_local_bb24_ld__u137_inst0_burstcount(avm_local_bb24_ld__u137_inst0_burstcount),
      .avm_local_bb24_ld__u137_inst0_address(avm_local_bb24_ld__u137_inst0_address),
      .avm_local_bb24_ld__u137_inst0_writedata(avm_local_bb24_ld__u137_inst0_writedata),
      .avm_local_bb24_ld__u137_inst0_byteenable(avm_local_bb24_ld__u137_inst0_byteenable),
      .avm_local_bb24_ld__u137_inst0_waitrequest(avm_local_bb24_ld__u137_inst0_waitrequest),
      .avm_local_bb24_ld__u137_inst0_readdata(avm_local_bb24_ld__u137_inst0_readdata),
      .avm_local_bb24_ld__u137_inst0_readdatavalid(avm_local_bb24_ld__u137_inst0_readdatavalid),
      .avm_local_bb24_ld__u137_inst0_writeack(avm_local_bb24_ld__u137_inst0_writeack),
      // AVM avm_local_bb24_ld__u138_inst0
      .avm_local_bb24_ld__u138_inst0_enable(avm_local_bb24_ld__u138_inst0_enable),
      .avm_local_bb24_ld__u138_inst0_read(avm_local_bb24_ld__u138_inst0_read),
      .avm_local_bb24_ld__u138_inst0_write(avm_local_bb24_ld__u138_inst0_write),
      .avm_local_bb24_ld__u138_inst0_burstcount(avm_local_bb24_ld__u138_inst0_burstcount),
      .avm_local_bb24_ld__u138_inst0_address(avm_local_bb24_ld__u138_inst0_address),
      .avm_local_bb24_ld__u138_inst0_writedata(avm_local_bb24_ld__u138_inst0_writedata),
      .avm_local_bb24_ld__u138_inst0_byteenable(avm_local_bb24_ld__u138_inst0_byteenable),
      .avm_local_bb24_ld__u138_inst0_waitrequest(avm_local_bb24_ld__u138_inst0_waitrequest),
      .avm_local_bb24_ld__u138_inst0_readdata(avm_local_bb24_ld__u138_inst0_readdata),
      .avm_local_bb24_ld__u138_inst0_readdatavalid(avm_local_bb24_ld__u138_inst0_readdatavalid),
      .avm_local_bb24_ld__u138_inst0_writeack(avm_local_bb24_ld__u138_inst0_writeack),
      // AVM avm_local_bb24_ld__u139_inst0
      .avm_local_bb24_ld__u139_inst0_enable(avm_local_bb24_ld__u139_inst0_enable),
      .avm_local_bb24_ld__u139_inst0_read(avm_local_bb24_ld__u139_inst0_read),
      .avm_local_bb24_ld__u139_inst0_write(avm_local_bb24_ld__u139_inst0_write),
      .avm_local_bb24_ld__u139_inst0_burstcount(avm_local_bb24_ld__u139_inst0_burstcount),
      .avm_local_bb24_ld__u139_inst0_address(avm_local_bb24_ld__u139_inst0_address),
      .avm_local_bb24_ld__u139_inst0_writedata(avm_local_bb24_ld__u139_inst0_writedata),
      .avm_local_bb24_ld__u139_inst0_byteenable(avm_local_bb24_ld__u139_inst0_byteenable),
      .avm_local_bb24_ld__u139_inst0_waitrequest(avm_local_bb24_ld__u139_inst0_waitrequest),
      .avm_local_bb24_ld__u139_inst0_readdata(avm_local_bb24_ld__u139_inst0_readdata),
      .avm_local_bb24_ld__u139_inst0_readdatavalid(avm_local_bb24_ld__u139_inst0_readdatavalid),
      .avm_local_bb24_ld__u139_inst0_writeack(avm_local_bb24_ld__u139_inst0_writeack),
      // AVM avm_local_bb24_ld__u140_inst0
      .avm_local_bb24_ld__u140_inst0_enable(avm_local_bb24_ld__u140_inst0_enable),
      .avm_local_bb24_ld__u140_inst0_read(avm_local_bb24_ld__u140_inst0_read),
      .avm_local_bb24_ld__u140_inst0_write(avm_local_bb24_ld__u140_inst0_write),
      .avm_local_bb24_ld__u140_inst0_burstcount(avm_local_bb24_ld__u140_inst0_burstcount),
      .avm_local_bb24_ld__u140_inst0_address(avm_local_bb24_ld__u140_inst0_address),
      .avm_local_bb24_ld__u140_inst0_writedata(avm_local_bb24_ld__u140_inst0_writedata),
      .avm_local_bb24_ld__u140_inst0_byteenable(avm_local_bb24_ld__u140_inst0_byteenable),
      .avm_local_bb24_ld__u140_inst0_waitrequest(avm_local_bb24_ld__u140_inst0_waitrequest),
      .avm_local_bb24_ld__u140_inst0_readdata(avm_local_bb24_ld__u140_inst0_readdata),
      .avm_local_bb24_ld__u140_inst0_readdatavalid(avm_local_bb24_ld__u140_inst0_readdatavalid),
      .avm_local_bb24_ld__u140_inst0_writeack(avm_local_bb24_ld__u140_inst0_writeack),
      // AVM avm_local_bb24_ld__u141_inst0
      .avm_local_bb24_ld__u141_inst0_enable(avm_local_bb24_ld__u141_inst0_enable),
      .avm_local_bb24_ld__u141_inst0_read(avm_local_bb24_ld__u141_inst0_read),
      .avm_local_bb24_ld__u141_inst0_write(avm_local_bb24_ld__u141_inst0_write),
      .avm_local_bb24_ld__u141_inst0_burstcount(avm_local_bb24_ld__u141_inst0_burstcount),
      .avm_local_bb24_ld__u141_inst0_address(avm_local_bb24_ld__u141_inst0_address),
      .avm_local_bb24_ld__u141_inst0_writedata(avm_local_bb24_ld__u141_inst0_writedata),
      .avm_local_bb24_ld__u141_inst0_byteenable(avm_local_bb24_ld__u141_inst0_byteenable),
      .avm_local_bb24_ld__u141_inst0_waitrequest(avm_local_bb24_ld__u141_inst0_waitrequest),
      .avm_local_bb24_ld__u141_inst0_readdata(avm_local_bb24_ld__u141_inst0_readdata),
      .avm_local_bb24_ld__u141_inst0_readdatavalid(avm_local_bb24_ld__u141_inst0_readdatavalid),
      .avm_local_bb24_ld__u141_inst0_writeack(avm_local_bb24_ld__u141_inst0_writeack),
      // AVM avm_local_bb24_ld__u142_inst0
      .avm_local_bb24_ld__u142_inst0_enable(avm_local_bb24_ld__u142_inst0_enable),
      .avm_local_bb24_ld__u142_inst0_read(avm_local_bb24_ld__u142_inst0_read),
      .avm_local_bb24_ld__u142_inst0_write(avm_local_bb24_ld__u142_inst0_write),
      .avm_local_bb24_ld__u142_inst0_burstcount(avm_local_bb24_ld__u142_inst0_burstcount),
      .avm_local_bb24_ld__u142_inst0_address(avm_local_bb24_ld__u142_inst0_address),
      .avm_local_bb24_ld__u142_inst0_writedata(avm_local_bb24_ld__u142_inst0_writedata),
      .avm_local_bb24_ld__u142_inst0_byteenable(avm_local_bb24_ld__u142_inst0_byteenable),
      .avm_local_bb24_ld__u142_inst0_waitrequest(avm_local_bb24_ld__u142_inst0_waitrequest),
      .avm_local_bb24_ld__u142_inst0_readdata(avm_local_bb24_ld__u142_inst0_readdata),
      .avm_local_bb24_ld__u142_inst0_readdatavalid(avm_local_bb24_ld__u142_inst0_readdatavalid),
      .avm_local_bb24_ld__u142_inst0_writeack(avm_local_bb24_ld__u142_inst0_writeack),
      // AVM avm_local_bb24_ld__u143_inst0
      .avm_local_bb24_ld__u143_inst0_enable(avm_local_bb24_ld__u143_inst0_enable),
      .avm_local_bb24_ld__u143_inst0_read(avm_local_bb24_ld__u143_inst0_read),
      .avm_local_bb24_ld__u143_inst0_write(avm_local_bb24_ld__u143_inst0_write),
      .avm_local_bb24_ld__u143_inst0_burstcount(avm_local_bb24_ld__u143_inst0_burstcount),
      .avm_local_bb24_ld__u143_inst0_address(avm_local_bb24_ld__u143_inst0_address),
      .avm_local_bb24_ld__u143_inst0_writedata(avm_local_bb24_ld__u143_inst0_writedata),
      .avm_local_bb24_ld__u143_inst0_byteenable(avm_local_bb24_ld__u143_inst0_byteenable),
      .avm_local_bb24_ld__u143_inst0_waitrequest(avm_local_bb24_ld__u143_inst0_waitrequest),
      .avm_local_bb24_ld__u143_inst0_readdata(avm_local_bb24_ld__u143_inst0_readdata),
      .avm_local_bb24_ld__u143_inst0_readdatavalid(avm_local_bb24_ld__u143_inst0_readdatavalid),
      .avm_local_bb24_ld__u143_inst0_writeack(avm_local_bb24_ld__u143_inst0_writeack),
      // AVM avm_local_bb24_ld__u144_inst0
      .avm_local_bb24_ld__u144_inst0_enable(avm_local_bb24_ld__u144_inst0_enable),
      .avm_local_bb24_ld__u144_inst0_read(avm_local_bb24_ld__u144_inst0_read),
      .avm_local_bb24_ld__u144_inst0_write(avm_local_bb24_ld__u144_inst0_write),
      .avm_local_bb24_ld__u144_inst0_burstcount(avm_local_bb24_ld__u144_inst0_burstcount),
      .avm_local_bb24_ld__u144_inst0_address(avm_local_bb24_ld__u144_inst0_address),
      .avm_local_bb24_ld__u144_inst0_writedata(avm_local_bb24_ld__u144_inst0_writedata),
      .avm_local_bb24_ld__u144_inst0_byteenable(avm_local_bb24_ld__u144_inst0_byteenable),
      .avm_local_bb24_ld__u144_inst0_waitrequest(avm_local_bb24_ld__u144_inst0_waitrequest),
      .avm_local_bb24_ld__u144_inst0_readdata(avm_local_bb24_ld__u144_inst0_readdata),
      .avm_local_bb24_ld__u144_inst0_readdatavalid(avm_local_bb24_ld__u144_inst0_readdatavalid),
      .avm_local_bb24_ld__u144_inst0_writeack(avm_local_bb24_ld__u144_inst0_writeack),
      // AVM avm_local_bb24_ld__u145_inst0
      .avm_local_bb24_ld__u145_inst0_enable(avm_local_bb24_ld__u145_inst0_enable),
      .avm_local_bb24_ld__u145_inst0_read(avm_local_bb24_ld__u145_inst0_read),
      .avm_local_bb24_ld__u145_inst0_write(avm_local_bb24_ld__u145_inst0_write),
      .avm_local_bb24_ld__u145_inst0_burstcount(avm_local_bb24_ld__u145_inst0_burstcount),
      .avm_local_bb24_ld__u145_inst0_address(avm_local_bb24_ld__u145_inst0_address),
      .avm_local_bb24_ld__u145_inst0_writedata(avm_local_bb24_ld__u145_inst0_writedata),
      .avm_local_bb24_ld__u145_inst0_byteenable(avm_local_bb24_ld__u145_inst0_byteenable),
      .avm_local_bb24_ld__u145_inst0_waitrequest(avm_local_bb24_ld__u145_inst0_waitrequest),
      .avm_local_bb24_ld__u145_inst0_readdata(avm_local_bb24_ld__u145_inst0_readdata),
      .avm_local_bb24_ld__u145_inst0_readdatavalid(avm_local_bb24_ld__u145_inst0_readdatavalid),
      .avm_local_bb24_ld__u145_inst0_writeack(avm_local_bb24_ld__u145_inst0_writeack),
      // AVM avm_local_bb24_ld__u146_inst0
      .avm_local_bb24_ld__u146_inst0_enable(avm_local_bb24_ld__u146_inst0_enable),
      .avm_local_bb24_ld__u146_inst0_read(avm_local_bb24_ld__u146_inst0_read),
      .avm_local_bb24_ld__u146_inst0_write(avm_local_bb24_ld__u146_inst0_write),
      .avm_local_bb24_ld__u146_inst0_burstcount(avm_local_bb24_ld__u146_inst0_burstcount),
      .avm_local_bb24_ld__u146_inst0_address(avm_local_bb24_ld__u146_inst0_address),
      .avm_local_bb24_ld__u146_inst0_writedata(avm_local_bb24_ld__u146_inst0_writedata),
      .avm_local_bb24_ld__u146_inst0_byteenable(avm_local_bb24_ld__u146_inst0_byteenable),
      .avm_local_bb24_ld__u146_inst0_waitrequest(avm_local_bb24_ld__u146_inst0_waitrequest),
      .avm_local_bb24_ld__u146_inst0_readdata(avm_local_bb24_ld__u146_inst0_readdata),
      .avm_local_bb24_ld__u146_inst0_readdatavalid(avm_local_bb24_ld__u146_inst0_readdatavalid),
      .avm_local_bb24_ld__u146_inst0_writeack(avm_local_bb24_ld__u146_inst0_writeack),
      // AVM avm_local_bb24_ld__u147_inst0
      .avm_local_bb24_ld__u147_inst0_enable(avm_local_bb24_ld__u147_inst0_enable),
      .avm_local_bb24_ld__u147_inst0_read(avm_local_bb24_ld__u147_inst0_read),
      .avm_local_bb24_ld__u147_inst0_write(avm_local_bb24_ld__u147_inst0_write),
      .avm_local_bb24_ld__u147_inst0_burstcount(avm_local_bb24_ld__u147_inst0_burstcount),
      .avm_local_bb24_ld__u147_inst0_address(avm_local_bb24_ld__u147_inst0_address),
      .avm_local_bb24_ld__u147_inst0_writedata(avm_local_bb24_ld__u147_inst0_writedata),
      .avm_local_bb24_ld__u147_inst0_byteenable(avm_local_bb24_ld__u147_inst0_byteenable),
      .avm_local_bb24_ld__u147_inst0_waitrequest(avm_local_bb24_ld__u147_inst0_waitrequest),
      .avm_local_bb24_ld__u147_inst0_readdata(avm_local_bb24_ld__u147_inst0_readdata),
      .avm_local_bb24_ld__u147_inst0_readdatavalid(avm_local_bb24_ld__u147_inst0_readdatavalid),
      .avm_local_bb24_ld__u147_inst0_writeack(avm_local_bb24_ld__u147_inst0_writeack),
      // AVM avm_local_bb26_ld__u154_inst0
      .avm_local_bb26_ld__u154_inst0_enable(avm_local_bb26_ld__u154_inst0_enable),
      .avm_local_bb26_ld__u154_inst0_read(avm_local_bb26_ld__u154_inst0_read),
      .avm_local_bb26_ld__u154_inst0_write(avm_local_bb26_ld__u154_inst0_write),
      .avm_local_bb26_ld__u154_inst0_burstcount(avm_local_bb26_ld__u154_inst0_burstcount),
      .avm_local_bb26_ld__u154_inst0_address(avm_local_bb26_ld__u154_inst0_address),
      .avm_local_bb26_ld__u154_inst0_writedata(avm_local_bb26_ld__u154_inst0_writedata),
      .avm_local_bb26_ld__u154_inst0_byteenable(avm_local_bb26_ld__u154_inst0_byteenable),
      .avm_local_bb26_ld__u154_inst0_waitrequest(avm_local_bb26_ld__u154_inst0_waitrequest),
      .avm_local_bb26_ld__u154_inst0_readdata(avm_local_bb26_ld__u154_inst0_readdata),
      .avm_local_bb26_ld__u154_inst0_readdatavalid(avm_local_bb26_ld__u154_inst0_readdatavalid),
      .avm_local_bb26_ld__u154_inst0_writeack(avm_local_bb26_ld__u154_inst0_writeack),
      // AVM avm_local_bb26_ld__u155_inst0
      .avm_local_bb26_ld__u155_inst0_enable(avm_local_bb26_ld__u155_inst0_enable),
      .avm_local_bb26_ld__u155_inst0_read(avm_local_bb26_ld__u155_inst0_read),
      .avm_local_bb26_ld__u155_inst0_write(avm_local_bb26_ld__u155_inst0_write),
      .avm_local_bb26_ld__u155_inst0_burstcount(avm_local_bb26_ld__u155_inst0_burstcount),
      .avm_local_bb26_ld__u155_inst0_address(avm_local_bb26_ld__u155_inst0_address),
      .avm_local_bb26_ld__u155_inst0_writedata(avm_local_bb26_ld__u155_inst0_writedata),
      .avm_local_bb26_ld__u155_inst0_byteenable(avm_local_bb26_ld__u155_inst0_byteenable),
      .avm_local_bb26_ld__u155_inst0_waitrequest(avm_local_bb26_ld__u155_inst0_waitrequest),
      .avm_local_bb26_ld__u155_inst0_readdata(avm_local_bb26_ld__u155_inst0_readdata),
      .avm_local_bb26_ld__u155_inst0_readdatavalid(avm_local_bb26_ld__u155_inst0_readdatavalid),
      .avm_local_bb26_ld__u155_inst0_writeack(avm_local_bb26_ld__u155_inst0_writeack),
      // AVM avm_local_bb26_ld__u156_inst0
      .avm_local_bb26_ld__u156_inst0_enable(avm_local_bb26_ld__u156_inst0_enable),
      .avm_local_bb26_ld__u156_inst0_read(avm_local_bb26_ld__u156_inst0_read),
      .avm_local_bb26_ld__u156_inst0_write(avm_local_bb26_ld__u156_inst0_write),
      .avm_local_bb26_ld__u156_inst0_burstcount(avm_local_bb26_ld__u156_inst0_burstcount),
      .avm_local_bb26_ld__u156_inst0_address(avm_local_bb26_ld__u156_inst0_address),
      .avm_local_bb26_ld__u156_inst0_writedata(avm_local_bb26_ld__u156_inst0_writedata),
      .avm_local_bb26_ld__u156_inst0_byteenable(avm_local_bb26_ld__u156_inst0_byteenable),
      .avm_local_bb26_ld__u156_inst0_waitrequest(avm_local_bb26_ld__u156_inst0_waitrequest),
      .avm_local_bb26_ld__u156_inst0_readdata(avm_local_bb26_ld__u156_inst0_readdata),
      .avm_local_bb26_ld__u156_inst0_readdatavalid(avm_local_bb26_ld__u156_inst0_readdatavalid),
      .avm_local_bb26_ld__u156_inst0_writeack(avm_local_bb26_ld__u156_inst0_writeack),
      // AVM avm_local_bb26_ld__u157_inst0
      .avm_local_bb26_ld__u157_inst0_enable(avm_local_bb26_ld__u157_inst0_enable),
      .avm_local_bb26_ld__u157_inst0_read(avm_local_bb26_ld__u157_inst0_read),
      .avm_local_bb26_ld__u157_inst0_write(avm_local_bb26_ld__u157_inst0_write),
      .avm_local_bb26_ld__u157_inst0_burstcount(avm_local_bb26_ld__u157_inst0_burstcount),
      .avm_local_bb26_ld__u157_inst0_address(avm_local_bb26_ld__u157_inst0_address),
      .avm_local_bb26_ld__u157_inst0_writedata(avm_local_bb26_ld__u157_inst0_writedata),
      .avm_local_bb26_ld__u157_inst0_byteenable(avm_local_bb26_ld__u157_inst0_byteenable),
      .avm_local_bb26_ld__u157_inst0_waitrequest(avm_local_bb26_ld__u157_inst0_waitrequest),
      .avm_local_bb26_ld__u157_inst0_readdata(avm_local_bb26_ld__u157_inst0_readdata),
      .avm_local_bb26_ld__u157_inst0_readdatavalid(avm_local_bb26_ld__u157_inst0_readdatavalid),
      .avm_local_bb26_ld__u157_inst0_writeack(avm_local_bb26_ld__u157_inst0_writeack),
      // AVM avm_local_bb26_ld__u158_inst0
      .avm_local_bb26_ld__u158_inst0_enable(avm_local_bb26_ld__u158_inst0_enable),
      .avm_local_bb26_ld__u158_inst0_read(avm_local_bb26_ld__u158_inst0_read),
      .avm_local_bb26_ld__u158_inst0_write(avm_local_bb26_ld__u158_inst0_write),
      .avm_local_bb26_ld__u158_inst0_burstcount(avm_local_bb26_ld__u158_inst0_burstcount),
      .avm_local_bb26_ld__u158_inst0_address(avm_local_bb26_ld__u158_inst0_address),
      .avm_local_bb26_ld__u158_inst0_writedata(avm_local_bb26_ld__u158_inst0_writedata),
      .avm_local_bb26_ld__u158_inst0_byteenable(avm_local_bb26_ld__u158_inst0_byteenable),
      .avm_local_bb26_ld__u158_inst0_waitrequest(avm_local_bb26_ld__u158_inst0_waitrequest),
      .avm_local_bb26_ld__u158_inst0_readdata(avm_local_bb26_ld__u158_inst0_readdata),
      .avm_local_bb26_ld__u158_inst0_readdatavalid(avm_local_bb26_ld__u158_inst0_readdatavalid),
      .avm_local_bb26_ld__u158_inst0_writeack(avm_local_bb26_ld__u158_inst0_writeack),
      // AVM avm_local_bb26_ld__u160_inst0
      .avm_local_bb26_ld__u160_inst0_enable(avm_local_bb26_ld__u160_inst0_enable),
      .avm_local_bb26_ld__u160_inst0_read(avm_local_bb26_ld__u160_inst0_read),
      .avm_local_bb26_ld__u160_inst0_write(avm_local_bb26_ld__u160_inst0_write),
      .avm_local_bb26_ld__u160_inst0_burstcount(avm_local_bb26_ld__u160_inst0_burstcount),
      .avm_local_bb26_ld__u160_inst0_address(avm_local_bb26_ld__u160_inst0_address),
      .avm_local_bb26_ld__u160_inst0_writedata(avm_local_bb26_ld__u160_inst0_writedata),
      .avm_local_bb26_ld__u160_inst0_byteenable(avm_local_bb26_ld__u160_inst0_byteenable),
      .avm_local_bb26_ld__u160_inst0_waitrequest(avm_local_bb26_ld__u160_inst0_waitrequest),
      .avm_local_bb26_ld__u160_inst0_readdata(avm_local_bb26_ld__u160_inst0_readdata),
      .avm_local_bb26_ld__u160_inst0_readdatavalid(avm_local_bb26_ld__u160_inst0_readdatavalid),
      .avm_local_bb26_ld__u160_inst0_writeack(avm_local_bb26_ld__u160_inst0_writeack),
      // AVM avm_local_bb26_ld__u161_inst0
      .avm_local_bb26_ld__u161_inst0_enable(avm_local_bb26_ld__u161_inst0_enable),
      .avm_local_bb26_ld__u161_inst0_read(avm_local_bb26_ld__u161_inst0_read),
      .avm_local_bb26_ld__u161_inst0_write(avm_local_bb26_ld__u161_inst0_write),
      .avm_local_bb26_ld__u161_inst0_burstcount(avm_local_bb26_ld__u161_inst0_burstcount),
      .avm_local_bb26_ld__u161_inst0_address(avm_local_bb26_ld__u161_inst0_address),
      .avm_local_bb26_ld__u161_inst0_writedata(avm_local_bb26_ld__u161_inst0_writedata),
      .avm_local_bb26_ld__u161_inst0_byteenable(avm_local_bb26_ld__u161_inst0_byteenable),
      .avm_local_bb26_ld__u161_inst0_waitrequest(avm_local_bb26_ld__u161_inst0_waitrequest),
      .avm_local_bb26_ld__u161_inst0_readdata(avm_local_bb26_ld__u161_inst0_readdata),
      .avm_local_bb26_ld__u161_inst0_readdatavalid(avm_local_bb26_ld__u161_inst0_readdatavalid),
      .avm_local_bb26_ld__u161_inst0_writeack(avm_local_bb26_ld__u161_inst0_writeack),
      // AVM avm_local_bb26_ld__u162_inst0
      .avm_local_bb26_ld__u162_inst0_enable(avm_local_bb26_ld__u162_inst0_enable),
      .avm_local_bb26_ld__u162_inst0_read(avm_local_bb26_ld__u162_inst0_read),
      .avm_local_bb26_ld__u162_inst0_write(avm_local_bb26_ld__u162_inst0_write),
      .avm_local_bb26_ld__u162_inst0_burstcount(avm_local_bb26_ld__u162_inst0_burstcount),
      .avm_local_bb26_ld__u162_inst0_address(avm_local_bb26_ld__u162_inst0_address),
      .avm_local_bb26_ld__u162_inst0_writedata(avm_local_bb26_ld__u162_inst0_writedata),
      .avm_local_bb26_ld__u162_inst0_byteenable(avm_local_bb26_ld__u162_inst0_byteenable),
      .avm_local_bb26_ld__u162_inst0_waitrequest(avm_local_bb26_ld__u162_inst0_waitrequest),
      .avm_local_bb26_ld__u162_inst0_readdata(avm_local_bb26_ld__u162_inst0_readdata),
      .avm_local_bb26_ld__u162_inst0_readdatavalid(avm_local_bb26_ld__u162_inst0_readdatavalid),
      .avm_local_bb26_ld__u162_inst0_writeack(avm_local_bb26_ld__u162_inst0_writeack),
      // AVM avm_local_bb26_ld__u163_inst0
      .avm_local_bb26_ld__u163_inst0_enable(avm_local_bb26_ld__u163_inst0_enable),
      .avm_local_bb26_ld__u163_inst0_read(avm_local_bb26_ld__u163_inst0_read),
      .avm_local_bb26_ld__u163_inst0_write(avm_local_bb26_ld__u163_inst0_write),
      .avm_local_bb26_ld__u163_inst0_burstcount(avm_local_bb26_ld__u163_inst0_burstcount),
      .avm_local_bb26_ld__u163_inst0_address(avm_local_bb26_ld__u163_inst0_address),
      .avm_local_bb26_ld__u163_inst0_writedata(avm_local_bb26_ld__u163_inst0_writedata),
      .avm_local_bb26_ld__u163_inst0_byteenable(avm_local_bb26_ld__u163_inst0_byteenable),
      .avm_local_bb26_ld__u163_inst0_waitrequest(avm_local_bb26_ld__u163_inst0_waitrequest),
      .avm_local_bb26_ld__u163_inst0_readdata(avm_local_bb26_ld__u163_inst0_readdata),
      .avm_local_bb26_ld__u163_inst0_readdatavalid(avm_local_bb26_ld__u163_inst0_readdatavalid),
      .avm_local_bb26_ld__u163_inst0_writeack(avm_local_bb26_ld__u163_inst0_writeack),
      // AVM avm_local_bb26_ld__u164_inst0
      .avm_local_bb26_ld__u164_inst0_enable(avm_local_bb26_ld__u164_inst0_enable),
      .avm_local_bb26_ld__u164_inst0_read(avm_local_bb26_ld__u164_inst0_read),
      .avm_local_bb26_ld__u164_inst0_write(avm_local_bb26_ld__u164_inst0_write),
      .avm_local_bb26_ld__u164_inst0_burstcount(avm_local_bb26_ld__u164_inst0_burstcount),
      .avm_local_bb26_ld__u164_inst0_address(avm_local_bb26_ld__u164_inst0_address),
      .avm_local_bb26_ld__u164_inst0_writedata(avm_local_bb26_ld__u164_inst0_writedata),
      .avm_local_bb26_ld__u164_inst0_byteenable(avm_local_bb26_ld__u164_inst0_byteenable),
      .avm_local_bb26_ld__u164_inst0_waitrequest(avm_local_bb26_ld__u164_inst0_waitrequest),
      .avm_local_bb26_ld__u164_inst0_readdata(avm_local_bb26_ld__u164_inst0_readdata),
      .avm_local_bb26_ld__u164_inst0_readdatavalid(avm_local_bb26_ld__u164_inst0_readdatavalid),
      .avm_local_bb26_ld__u164_inst0_writeack(avm_local_bb26_ld__u164_inst0_writeack),
      // AVM avm_local_bb26_ld__u165_inst0
      .avm_local_bb26_ld__u165_inst0_enable(avm_local_bb26_ld__u165_inst0_enable),
      .avm_local_bb26_ld__u165_inst0_read(avm_local_bb26_ld__u165_inst0_read),
      .avm_local_bb26_ld__u165_inst0_write(avm_local_bb26_ld__u165_inst0_write),
      .avm_local_bb26_ld__u165_inst0_burstcount(avm_local_bb26_ld__u165_inst0_burstcount),
      .avm_local_bb26_ld__u165_inst0_address(avm_local_bb26_ld__u165_inst0_address),
      .avm_local_bb26_ld__u165_inst0_writedata(avm_local_bb26_ld__u165_inst0_writedata),
      .avm_local_bb26_ld__u165_inst0_byteenable(avm_local_bb26_ld__u165_inst0_byteenable),
      .avm_local_bb26_ld__u165_inst0_waitrequest(avm_local_bb26_ld__u165_inst0_waitrequest),
      .avm_local_bb26_ld__u165_inst0_readdata(avm_local_bb26_ld__u165_inst0_readdata),
      .avm_local_bb26_ld__u165_inst0_readdatavalid(avm_local_bb26_ld__u165_inst0_readdatavalid),
      .avm_local_bb26_ld__u165_inst0_writeack(avm_local_bb26_ld__u165_inst0_writeack),
      // AVM avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_enable(avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_enable),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_read(avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_read),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_write(avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_write),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_burstcount(avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_burstcount),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_address(avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_address),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_writedata(avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_writedata),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_byteenable(avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_byteenable),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_waitrequest(avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_waitrequest),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_readdata(avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_readdata),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_readdatavalid(avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_readdatavalid),
      .avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_writeack(avm_local_bb26_ld_memcoalesce_KerConst_load_010_inst0_writeack),
      // AVM avm_local_bb33_ld__u179_inst0
      .avm_local_bb33_ld__u179_inst0_enable(avm_local_bb33_ld__u179_inst0_enable),
      .avm_local_bb33_ld__u179_inst0_read(avm_local_bb33_ld__u179_inst0_read),
      .avm_local_bb33_ld__u179_inst0_write(avm_local_bb33_ld__u179_inst0_write),
      .avm_local_bb33_ld__u179_inst0_burstcount(avm_local_bb33_ld__u179_inst0_burstcount),
      .avm_local_bb33_ld__u179_inst0_address(avm_local_bb33_ld__u179_inst0_address),
      .avm_local_bb33_ld__u179_inst0_writedata(avm_local_bb33_ld__u179_inst0_writedata),
      .avm_local_bb33_ld__u179_inst0_byteenable(avm_local_bb33_ld__u179_inst0_byteenable),
      .avm_local_bb33_ld__u179_inst0_waitrequest(avm_local_bb33_ld__u179_inst0_waitrequest),
      .avm_local_bb33_ld__u179_inst0_readdata(avm_local_bb33_ld__u179_inst0_readdata),
      .avm_local_bb33_ld__u179_inst0_readdatavalid(avm_local_bb33_ld__u179_inst0_readdatavalid),
      .avm_local_bb33_ld__u179_inst0_writeack(avm_local_bb33_ld__u179_inst0_writeack),
      // AVM avm_local_bb33_st__inst0
      .avm_local_bb33_st__inst0_enable(avm_local_bb33_st__inst0_enable),
      .avm_local_bb33_st__inst0_read(avm_local_bb33_st__inst0_read),
      .avm_local_bb33_st__inst0_write(avm_local_bb33_st__inst0_write),
      .avm_local_bb33_st__inst0_burstcount(avm_local_bb33_st__inst0_burstcount),
      .avm_local_bb33_st__inst0_address(avm_local_bb33_st__inst0_address),
      .avm_local_bb33_st__inst0_writedata(avm_local_bb33_st__inst0_writedata),
      .avm_local_bb33_st__inst0_byteenable(avm_local_bb33_st__inst0_byteenable),
      .avm_local_bb33_st__inst0_waitrequest(avm_local_bb33_st__inst0_waitrequest),
      .avm_local_bb33_st__inst0_readdata(avm_local_bb33_st__inst0_readdata),
      .avm_local_bb33_st__inst0_readdatavalid(avm_local_bb33_st__inst0_readdatavalid),
      .avm_local_bb33_st__inst0_writeack(avm_local_bb33_st__inst0_writeack),
      // AVM avm_local_bb33_st_add239_inst0
      .avm_local_bb33_st_add239_inst0_enable(avm_local_bb33_st_add239_inst0_enable),
      .avm_local_bb33_st_add239_inst0_read(avm_local_bb33_st_add239_inst0_read),
      .avm_local_bb33_st_add239_inst0_write(avm_local_bb33_st_add239_inst0_write),
      .avm_local_bb33_st_add239_inst0_burstcount(avm_local_bb33_st_add239_inst0_burstcount),
      .avm_local_bb33_st_add239_inst0_address(avm_local_bb33_st_add239_inst0_address),
      .avm_local_bb33_st_add239_inst0_writedata(avm_local_bb33_st_add239_inst0_writedata),
      .avm_local_bb33_st_add239_inst0_byteenable(avm_local_bb33_st_add239_inst0_byteenable),
      .avm_local_bb33_st_add239_inst0_waitrequest(avm_local_bb33_st_add239_inst0_waitrequest),
      .avm_local_bb33_st_add239_inst0_readdata(avm_local_bb33_st_add239_inst0_readdata),
      .avm_local_bb33_st_add239_inst0_readdatavalid(avm_local_bb33_st_add239_inst0_readdatavalid),
      .avm_local_bb33_st_add239_inst0_writeack(avm_local_bb33_st_add239_inst0_writeack),
      // AVM avm_local_bb3_ld__inst0
      .avm_local_bb3_ld__inst0_enable(avm_local_bb3_ld__inst0_enable),
      .avm_local_bb3_ld__inst0_read(avm_local_bb3_ld__inst0_read),
      .avm_local_bb3_ld__inst0_write(avm_local_bb3_ld__inst0_write),
      .avm_local_bb3_ld__inst0_burstcount(avm_local_bb3_ld__inst0_burstcount),
      .avm_local_bb3_ld__inst0_address(avm_local_bb3_ld__inst0_address),
      .avm_local_bb3_ld__inst0_writedata(avm_local_bb3_ld__inst0_writedata),
      .avm_local_bb3_ld__inst0_byteenable(avm_local_bb3_ld__inst0_byteenable),
      .avm_local_bb3_ld__inst0_waitrequest(avm_local_bb3_ld__inst0_waitrequest),
      .avm_local_bb3_ld__inst0_readdata(avm_local_bb3_ld__inst0_readdata),
      .avm_local_bb3_ld__inst0_readdatavalid(avm_local_bb3_ld__inst0_readdatavalid),
      .avm_local_bb3_ld__inst0_writeack(avm_local_bb3_ld__inst0_writeack),
      // AVM avm_local_bb40_st__inst0
      .avm_local_bb40_st__inst0_enable(avm_local_bb40_st__inst0_enable),
      .avm_local_bb40_st__inst0_read(avm_local_bb40_st__inst0_read),
      .avm_local_bb40_st__inst0_write(avm_local_bb40_st__inst0_write),
      .avm_local_bb40_st__inst0_burstcount(avm_local_bb40_st__inst0_burstcount),
      .avm_local_bb40_st__inst0_address(avm_local_bb40_st__inst0_address),
      .avm_local_bb40_st__inst0_writedata(avm_local_bb40_st__inst0_writedata),
      .avm_local_bb40_st__inst0_byteenable(avm_local_bb40_st__inst0_byteenable),
      .avm_local_bb40_st__inst0_waitrequest(avm_local_bb40_st__inst0_waitrequest),
      .avm_local_bb40_st__inst0_readdata(avm_local_bb40_st__inst0_readdata),
      .avm_local_bb40_st__inst0_readdatavalid(avm_local_bb40_st__inst0_readdatavalid),
      .avm_local_bb40_st__inst0_writeack(avm_local_bb40_st__inst0_writeack),
      // AVM avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_enable(avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_enable),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_read(avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_read),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_write(avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_write),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_burstcount(avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_burstcount),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_address(avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_address),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_writedata(avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_writedata),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_byteenable(avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_byteenable),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_waitrequest(avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_waitrequest),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_readdata(avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_readdata),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_readdatavalid(avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_readdatavalid),
      .avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_writeack(avm_local_bb6_ld_arrayidx_i_i16_promoted_inst0_writeack),
      // AVM avm_local_bb8_st_c0_exe1270_inst0
      .avm_local_bb8_st_c0_exe1270_inst0_enable(avm_local_bb8_st_c0_exe1270_inst0_enable),
      .avm_local_bb8_st_c0_exe1270_inst0_read(avm_local_bb8_st_c0_exe1270_inst0_read),
      .avm_local_bb8_st_c0_exe1270_inst0_write(avm_local_bb8_st_c0_exe1270_inst0_write),
      .avm_local_bb8_st_c0_exe1270_inst0_burstcount(avm_local_bb8_st_c0_exe1270_inst0_burstcount),
      .avm_local_bb8_st_c0_exe1270_inst0_address(avm_local_bb8_st_c0_exe1270_inst0_address),
      .avm_local_bb8_st_c0_exe1270_inst0_writedata(avm_local_bb8_st_c0_exe1270_inst0_writedata),
      .avm_local_bb8_st_c0_exe1270_inst0_byteenable(avm_local_bb8_st_c0_exe1270_inst0_byteenable),
      .avm_local_bb8_st_c0_exe1270_inst0_waitrequest(avm_local_bb8_st_c0_exe1270_inst0_waitrequest),
      .avm_local_bb8_st_c0_exe1270_inst0_readdata(avm_local_bb8_st_c0_exe1270_inst0_readdata),
      .avm_local_bb8_st_c0_exe1270_inst0_readdatavalid(avm_local_bb8_st_c0_exe1270_inst0_readdatavalid),
      .avm_local_bb8_st_c0_exe1270_inst0_writeack(avm_local_bb8_st_c0_exe1270_inst0_writeack),
      // AVM avm_local_bb11_ld__u39_inst0
      .avm_local_bb11_ld__u39_inst0_enable(local_avm_aspace29_enable[0][0]),
      .avm_local_bb11_ld__u39_inst0_read(local_avm_aspace29_read[0][0]),
      .avm_local_bb11_ld__u39_inst0_write(local_avm_aspace29_write[0][0]),
      .avm_local_bb11_ld__u39_inst0_burstcount(local_avm_aspace29_burstcount[0][0]),
      .avm_local_bb11_ld__u39_inst0_address(local_avm_aspace29_address[0][0]),
      .avm_local_bb11_ld__u39_inst0_writedata(local_avm_aspace29_writedata[0][0]),
      .avm_local_bb11_ld__u39_inst0_byteenable(local_avm_aspace29_byteenable[0][0]),
      .avm_local_bb11_ld__u39_inst0_waitrequest(local_avm_aspace29_waitrequest[0][0]),
      .avm_local_bb11_ld__u39_inst0_readdata(local_avm_aspace29_readdata[0][0]),
      .avm_local_bb11_ld__u39_inst0_readdatavalid(local_avm_aspace29_readdatavalid[0][0]),
      .avm_local_bb11_ld__u39_inst0_writeack(local_avm_aspace29_writeack[0][0]),
      // AVM avm_local_bb1_ld__u13_inst0
      .avm_local_bb1_ld__u13_inst0_enable(local_avm_aspace29_enable[0][1]),
      .avm_local_bb1_ld__u13_inst0_read(local_avm_aspace29_read[0][1]),
      .avm_local_bb1_ld__u13_inst0_write(local_avm_aspace29_write[0][1]),
      .avm_local_bb1_ld__u13_inst0_burstcount(local_avm_aspace29_burstcount[0][1]),
      .avm_local_bb1_ld__u13_inst0_address(local_avm_aspace29_address[0][1]),
      .avm_local_bb1_ld__u13_inst0_writedata(local_avm_aspace29_writedata[0][1]),
      .avm_local_bb1_ld__u13_inst0_byteenable(local_avm_aspace29_byteenable[0][1]),
      .avm_local_bb1_ld__u13_inst0_waitrequest(local_avm_aspace29_waitrequest[0][1]),
      .avm_local_bb1_ld__u13_inst0_readdata(local_avm_aspace29_readdata[0][1]),
      .avm_local_bb1_ld__u13_inst0_readdatavalid(local_avm_aspace29_readdatavalid[0][1]),
      .avm_local_bb1_ld__u13_inst0_writeack(local_avm_aspace29_writeack[0][1]),
      // AVM avm_local_bb1_st_c0_exe2_inst0
      .avm_local_bb1_st_c0_exe2_inst0_enable(local_avm_aspace29_enable[0][2]),
      .avm_local_bb1_st_c0_exe2_inst0_read(local_avm_aspace29_read[0][2]),
      .avm_local_bb1_st_c0_exe2_inst0_write(local_avm_aspace29_write[0][2]),
      .avm_local_bb1_st_c0_exe2_inst0_burstcount(local_avm_aspace29_burstcount[0][2]),
      .avm_local_bb1_st_c0_exe2_inst0_address(local_avm_aspace29_address[0][2]),
      .avm_local_bb1_st_c0_exe2_inst0_writedata(local_avm_aspace29_writedata[0][2]),
      .avm_local_bb1_st_c0_exe2_inst0_byteenable(local_avm_aspace29_byteenable[0][2]),
      .avm_local_bb1_st_c0_exe2_inst0_waitrequest(local_avm_aspace29_waitrequest[0][2]),
      .avm_local_bb1_st_c0_exe2_inst0_readdata(local_avm_aspace29_readdata[0][2]),
      .avm_local_bb1_st_c0_exe2_inst0_readdatavalid(local_avm_aspace29_readdatavalid[0][2]),
      .avm_local_bb1_st_c0_exe2_inst0_writeack(local_avm_aspace29_writeack[0][2]),
      // AVM avm_local_bb22_ld__u108_inst0
      .avm_local_bb22_ld__u108_inst0_enable(local_avm_aspace29_enable[0][3]),
      .avm_local_bb22_ld__u108_inst0_read(local_avm_aspace29_read[0][3]),
      .avm_local_bb22_ld__u108_inst0_write(local_avm_aspace29_write[0][3]),
      .avm_local_bb22_ld__u108_inst0_burstcount(local_avm_aspace29_burstcount[0][3]),
      .avm_local_bb22_ld__u108_inst0_address(local_avm_aspace29_address[0][3]),
      .avm_local_bb22_ld__u108_inst0_writedata(local_avm_aspace29_writedata[0][3]),
      .avm_local_bb22_ld__u108_inst0_byteenable(local_avm_aspace29_byteenable[0][3]),
      .avm_local_bb22_ld__u108_inst0_waitrequest(local_avm_aspace29_waitrequest[0][3]),
      .avm_local_bb22_ld__u108_inst0_readdata(local_avm_aspace29_readdata[0][3]),
      .avm_local_bb22_ld__u108_inst0_readdatavalid(local_avm_aspace29_readdatavalid[0][3]),
      .avm_local_bb22_ld__u108_inst0_writeack(local_avm_aspace29_writeack[0][3]),
      // AVM avm_local_bb33_ld__inst0
      .avm_local_bb33_ld__inst0_enable(local_avm_aspace29_enable[0][4]),
      .avm_local_bb33_ld__inst0_read(local_avm_aspace29_read[0][4]),
      .avm_local_bb33_ld__inst0_write(local_avm_aspace29_write[0][4]),
      .avm_local_bb33_ld__inst0_burstcount(local_avm_aspace29_burstcount[0][4]),
      .avm_local_bb33_ld__inst0_address(local_avm_aspace29_address[0][4]),
      .avm_local_bb33_ld__inst0_writedata(local_avm_aspace29_writedata[0][4]),
      .avm_local_bb33_ld__inst0_byteenable(local_avm_aspace29_byteenable[0][4]),
      .avm_local_bb33_ld__inst0_waitrequest(local_avm_aspace29_waitrequest[0][4]),
      .avm_local_bb33_ld__inst0_readdata(local_avm_aspace29_readdata[0][4]),
      .avm_local_bb33_ld__inst0_readdatavalid(local_avm_aspace29_readdatavalid[0][4]),
      .avm_local_bb33_ld__inst0_writeack(local_avm_aspace29_writeack[0][4]),
      // AVM avm_local_bb39_ld__inst0
      .avm_local_bb39_ld__inst0_enable(local_avm_aspace29_enable[0][5]),
      .avm_local_bb39_ld__inst0_read(local_avm_aspace29_read[0][5]),
      .avm_local_bb39_ld__inst0_write(local_avm_aspace29_write[0][5]),
      .avm_local_bb39_ld__inst0_burstcount(local_avm_aspace29_burstcount[0][5]),
      .avm_local_bb39_ld__inst0_address(local_avm_aspace29_address[0][5]),
      .avm_local_bb39_ld__inst0_writedata(local_avm_aspace29_writedata[0][5]),
      .avm_local_bb39_ld__inst0_byteenable(local_avm_aspace29_byteenable[0][5]),
      .avm_local_bb39_ld__inst0_waitrequest(local_avm_aspace29_waitrequest[0][5]),
      .avm_local_bb39_ld__inst0_readdata(local_avm_aspace29_readdata[0][5]),
      .avm_local_bb39_ld__inst0_readdatavalid(local_avm_aspace29_readdatavalid[0][5]),
      .avm_local_bb39_ld__inst0_writeack(local_avm_aspace29_writeack[0][5]),
      // AVM avm_local_bb1_ld__u14_inst0
      .avm_local_bb1_ld__u14_inst0_enable(local_avm_aspace30_enable[0][0]),
      .avm_local_bb1_ld__u14_inst0_read(local_avm_aspace30_read[0][0]),
      .avm_local_bb1_ld__u14_inst0_write(local_avm_aspace30_write[0][0]),
      .avm_local_bb1_ld__u14_inst0_burstcount(local_avm_aspace30_burstcount[0][0]),
      .avm_local_bb1_ld__u14_inst0_address(local_avm_aspace30_address[0][0]),
      .avm_local_bb1_ld__u14_inst0_writedata(local_avm_aspace30_writedata[0][0]),
      .avm_local_bb1_ld__u14_inst0_byteenable(local_avm_aspace30_byteenable[0][0]),
      .avm_local_bb1_ld__u14_inst0_waitrequest(local_avm_aspace30_waitrequest[0][0]),
      .avm_local_bb1_ld__u14_inst0_readdata(local_avm_aspace30_readdata[0][0]),
      .avm_local_bb1_ld__u14_inst0_readdatavalid(local_avm_aspace30_readdatavalid[0][0]),
      .avm_local_bb1_ld__u14_inst0_writeack(local_avm_aspace30_writeack[0][0]),
      // AVM avm_local_bb1_st_c1_exe1_inst0
      .avm_local_bb1_st_c1_exe1_inst0_enable(local_avm_aspace30_enable[0][1]),
      .avm_local_bb1_st_c1_exe1_inst0_read(local_avm_aspace30_read[0][1]),
      .avm_local_bb1_st_c1_exe1_inst0_write(local_avm_aspace30_write[0][1]),
      .avm_local_bb1_st_c1_exe1_inst0_burstcount(local_avm_aspace30_burstcount[0][1]),
      .avm_local_bb1_st_c1_exe1_inst0_address(local_avm_aspace30_address[0][1]),
      .avm_local_bb1_st_c1_exe1_inst0_writedata(local_avm_aspace30_writedata[0][1]),
      .avm_local_bb1_st_c1_exe1_inst0_byteenable(local_avm_aspace30_byteenable[0][1]),
      .avm_local_bb1_st_c1_exe1_inst0_waitrequest(local_avm_aspace30_waitrequest[0][1]),
      .avm_local_bb1_st_c1_exe1_inst0_readdata(local_avm_aspace30_readdata[0][1]),
      .avm_local_bb1_st_c1_exe1_inst0_readdatavalid(local_avm_aspace30_readdatavalid[0][1]),
      .avm_local_bb1_st_c1_exe1_inst0_writeack(local_avm_aspace30_writeack[0][1]),
      // AVM avm_local_bb1_st_dockpars_num_of_lsentities_inst0
      .avm_local_bb1_st_dockpars_num_of_lsentities_inst0_enable(local_avm_aspace30_enable[0][2]),
      .avm_local_bb1_st_dockpars_num_of_lsentities_inst0_read(local_avm_aspace30_read[0][2]),
      .avm_local_bb1_st_dockpars_num_of_lsentities_inst0_write(local_avm_aspace30_write[0][2]),
      .avm_local_bb1_st_dockpars_num_of_lsentities_inst0_burstcount(local_avm_aspace30_burstcount[0][2]),
      .avm_local_bb1_st_dockpars_num_of_lsentities_inst0_address(local_avm_aspace30_address[0][2]),
      .avm_local_bb1_st_dockpars_num_of_lsentities_inst0_writedata(local_avm_aspace30_writedata[0][2]),
      .avm_local_bb1_st_dockpars_num_of_lsentities_inst0_byteenable(local_avm_aspace30_byteenable[0][2]),
      .avm_local_bb1_st_dockpars_num_of_lsentities_inst0_waitrequest(local_avm_aspace30_waitrequest[0][2]),
      .avm_local_bb1_st_dockpars_num_of_lsentities_inst0_readdata(local_avm_aspace30_readdata[0][2]),
      .avm_local_bb1_st_dockpars_num_of_lsentities_inst0_readdatavalid(local_avm_aspace30_readdatavalid[0][2]),
      .avm_local_bb1_st_dockpars_num_of_lsentities_inst0_writeack(local_avm_aspace30_writeack[0][2]),
      // AVM avm_local_bb33_ld__u176_inst0
      .avm_local_bb33_ld__u176_inst0_enable(local_avm_aspace30_enable[0][3]),
      .avm_local_bb33_ld__u176_inst0_read(local_avm_aspace30_read[0][3]),
      .avm_local_bb33_ld__u176_inst0_write(local_avm_aspace30_write[0][3]),
      .avm_local_bb33_ld__u176_inst0_burstcount(local_avm_aspace30_burstcount[0][3]),
      .avm_local_bb33_ld__u176_inst0_address(local_avm_aspace30_address[0][3]),
      .avm_local_bb33_ld__u176_inst0_writedata(local_avm_aspace30_writedata[0][3]),
      .avm_local_bb33_ld__u176_inst0_byteenable(local_avm_aspace30_byteenable[0][3]),
      .avm_local_bb33_ld__u176_inst0_waitrequest(local_avm_aspace30_waitrequest[0][3]),
      .avm_local_bb33_ld__u176_inst0_readdata(local_avm_aspace30_readdata[0][3]),
      .avm_local_bb33_ld__u176_inst0_readdatavalid(local_avm_aspace30_readdatavalid[0][3]),
      .avm_local_bb33_ld__u176_inst0_writeack(local_avm_aspace30_writeack[0][3]),
      // AVM avm_local_bb39_ld__u187_inst0
      .avm_local_bb39_ld__u187_inst0_enable(local_avm_aspace30_enable[0][4]),
      .avm_local_bb39_ld__u187_inst0_read(local_avm_aspace30_read[0][4]),
      .avm_local_bb39_ld__u187_inst0_write(local_avm_aspace30_write[0][4]),
      .avm_local_bb39_ld__u187_inst0_burstcount(local_avm_aspace30_burstcount[0][4]),
      .avm_local_bb39_ld__u187_inst0_address(local_avm_aspace30_address[0][4]),
      .avm_local_bb39_ld__u187_inst0_writedata(local_avm_aspace30_writedata[0][4]),
      .avm_local_bb39_ld__u187_inst0_byteenable(local_avm_aspace30_byteenable[0][4]),
      .avm_local_bb39_ld__u187_inst0_waitrequest(local_avm_aspace30_waitrequest[0][4]),
      .avm_local_bb39_ld__u187_inst0_readdata(local_avm_aspace30_readdata[0][4]),
      .avm_local_bb39_ld__u187_inst0_readdatavalid(local_avm_aspace30_readdatavalid[0][4]),
      .avm_local_bb39_ld__u187_inst0_writeack(local_avm_aspace30_writeack[0][4]),
      // AVM avm_local_bb18_ld__u98_inst0
      .avm_local_bb18_ld__u98_inst0_enable(local_avm_aspace31_enable[0][0]),
      .avm_local_bb18_ld__u98_inst0_read(local_avm_aspace31_read[0][0]),
      .avm_local_bb18_ld__u98_inst0_write(local_avm_aspace31_write[0][0]),
      .avm_local_bb18_ld__u98_inst0_burstcount(local_avm_aspace31_burstcount[0][0]),
      .avm_local_bb18_ld__u98_inst0_address(local_avm_aspace31_address[0][0]),
      .avm_local_bb18_ld__u98_inst0_writedata(local_avm_aspace31_writedata[0][0]),
      .avm_local_bb18_ld__u98_inst0_byteenable(local_avm_aspace31_byteenable[0][0]),
      .avm_local_bb18_ld__u98_inst0_waitrequest(local_avm_aspace31_waitrequest[0][0]),
      .avm_local_bb18_ld__u98_inst0_readdata(local_avm_aspace31_readdata[0][0]),
      .avm_local_bb18_ld__u98_inst0_readdatavalid(local_avm_aspace31_readdatavalid[0][0]),
      .avm_local_bb18_ld__u98_inst0_writeack(local_avm_aspace31_writeack[0][0]),
      // AVM avm_local_bb1_st__inst0
      .avm_local_bb1_st__inst0_enable(local_avm_aspace31_enable[0][1]),
      .avm_local_bb1_st__inst0_read(local_avm_aspace31_read[0][1]),
      .avm_local_bb1_st__inst0_write(local_avm_aspace31_write[0][1]),
      .avm_local_bb1_st__inst0_burstcount(local_avm_aspace31_burstcount[0][1]),
      .avm_local_bb1_st__inst0_address(local_avm_aspace31_address[0][1]),
      .avm_local_bb1_st__inst0_writedata(local_avm_aspace31_writedata[0][1]),
      .avm_local_bb1_st__inst0_byteenable(local_avm_aspace31_byteenable[0][1]),
      .avm_local_bb1_st__inst0_waitrequest(local_avm_aspace31_waitrequest[0][1]),
      .avm_local_bb1_st__inst0_readdata(local_avm_aspace31_readdata[0][1]),
      .avm_local_bb1_st__inst0_readdatavalid(local_avm_aspace31_readdatavalid[0][1]),
      .avm_local_bb1_st__inst0_writeack(local_avm_aspace31_writeack[0][1]),
      // AVM avm_local_bb29_ld__u167_inst0
      .avm_local_bb29_ld__u167_inst0_enable(local_avm_aspace31_enable[0][2]),
      .avm_local_bb29_ld__u167_inst0_read(local_avm_aspace31_read[0][2]),
      .avm_local_bb29_ld__u167_inst0_write(local_avm_aspace31_write[0][2]),
      .avm_local_bb29_ld__u167_inst0_burstcount(local_avm_aspace31_burstcount[0][2]),
      .avm_local_bb29_ld__u167_inst0_address(local_avm_aspace31_address[0][2]),
      .avm_local_bb29_ld__u167_inst0_writedata(local_avm_aspace31_writedata[0][2]),
      .avm_local_bb29_ld__u167_inst0_byteenable(local_avm_aspace31_byteenable[0][2]),
      .avm_local_bb29_ld__u167_inst0_waitrequest(local_avm_aspace31_waitrequest[0][2]),
      .avm_local_bb29_ld__u167_inst0_readdata(local_avm_aspace31_readdata[0][2]),
      .avm_local_bb29_ld__u167_inst0_readdatavalid(local_avm_aspace31_readdatavalid[0][2]),
      .avm_local_bb29_ld__u167_inst0_writeack(local_avm_aspace31_writeack[0][2]),
      // AVM avm_local_bb31_st__1487_inst0
      .avm_local_bb31_st__1487_inst0_enable(local_avm_aspace31_enable[0][3]),
      .avm_local_bb31_st__1487_inst0_read(local_avm_aspace31_read[0][3]),
      .avm_local_bb31_st__1487_inst0_write(local_avm_aspace31_write[0][3]),
      .avm_local_bb31_st__1487_inst0_burstcount(local_avm_aspace31_burstcount[0][3]),
      .avm_local_bb31_st__1487_inst0_address(local_avm_aspace31_address[0][3]),
      .avm_local_bb31_st__1487_inst0_writedata(local_avm_aspace31_writedata[0][3]),
      .avm_local_bb31_st__1487_inst0_byteenable(local_avm_aspace31_byteenable[0][3]),
      .avm_local_bb31_st__1487_inst0_waitrequest(local_avm_aspace31_waitrequest[0][3]),
      .avm_local_bb31_st__1487_inst0_readdata(local_avm_aspace31_readdata[0][3]),
      .avm_local_bb31_st__1487_inst0_readdatavalid(local_avm_aspace31_readdatavalid[0][3]),
      .avm_local_bb31_st__1487_inst0_writeack(local_avm_aspace31_writeack[0][3]),
      // AVM avm_local_bb33_ld__u177_inst0
      .avm_local_bb33_ld__u177_inst0_enable(local_avm_aspace31_enable[0][4]),
      .avm_local_bb33_ld__u177_inst0_read(local_avm_aspace31_read[0][4]),
      .avm_local_bb33_ld__u177_inst0_write(local_avm_aspace31_write[0][4]),
      .avm_local_bb33_ld__u177_inst0_burstcount(local_avm_aspace31_burstcount[0][4]),
      .avm_local_bb33_ld__u177_inst0_address(local_avm_aspace31_address[0][4]),
      .avm_local_bb33_ld__u177_inst0_writedata(local_avm_aspace31_writedata[0][4]),
      .avm_local_bb33_ld__u177_inst0_byteenable(local_avm_aspace31_byteenable[0][4]),
      .avm_local_bb33_ld__u177_inst0_waitrequest(local_avm_aspace31_waitrequest[0][4]),
      .avm_local_bb33_ld__u177_inst0_readdata(local_avm_aspace31_readdata[0][4]),
      .avm_local_bb33_ld__u177_inst0_readdatavalid(local_avm_aspace31_readdatavalid[0][4]),
      .avm_local_bb33_ld__u177_inst0_writeack(local_avm_aspace31_writeack[0][4]),
      // AVM avm_local_bb19_st__inst0
      .avm_local_bb19_st__inst0_enable(local_avm_aspace32_enable[0][0]),
      .avm_local_bb19_st__inst0_read(local_avm_aspace32_read[0][0]),
      .avm_local_bb19_st__inst0_write(local_avm_aspace32_write[0][0]),
      .avm_local_bb19_st__inst0_burstcount(local_avm_aspace32_burstcount[0][0]),
      .avm_local_bb19_st__inst0_address(local_avm_aspace32_address[0][0]),
      .avm_local_bb19_st__inst0_writedata(local_avm_aspace32_writedata[0][0]),
      .avm_local_bb19_st__inst0_byteenable(local_avm_aspace32_byteenable[0][0]),
      .avm_local_bb19_st__inst0_waitrequest(local_avm_aspace32_waitrequest[0][0]),
      .avm_local_bb19_st__inst0_readdata(local_avm_aspace32_readdata[0][0]),
      .avm_local_bb19_st__inst0_readdatavalid(local_avm_aspace32_readdatavalid[0][0]),
      .avm_local_bb19_st__inst0_writeack(local_avm_aspace32_writeack[0][0]),
      // AVM avm_local_bb20_ld__inst0
      .avm_local_bb20_ld__inst0_enable(local_avm_aspace32_enable[0][1]),
      .avm_local_bb20_ld__inst0_read(local_avm_aspace32_read[0][1]),
      .avm_local_bb20_ld__inst0_write(local_avm_aspace32_write[0][1]),
      .avm_local_bb20_ld__inst0_burstcount(local_avm_aspace32_burstcount[0][1]),
      .avm_local_bb20_ld__inst0_address(local_avm_aspace32_address[0][1]),
      .avm_local_bb20_ld__inst0_writedata(local_avm_aspace32_writedata[0][1]),
      .avm_local_bb20_ld__inst0_byteenable(local_avm_aspace32_byteenable[0][1]),
      .avm_local_bb20_ld__inst0_waitrequest(local_avm_aspace32_waitrequest[0][1]),
      .avm_local_bb20_ld__inst0_readdata(local_avm_aspace32_readdata[0][1]),
      .avm_local_bb20_ld__inst0_readdatavalid(local_avm_aspace32_readdatavalid[0][1]),
      .avm_local_bb20_ld__inst0_writeack(local_avm_aspace32_writeack[0][1]),
      // AVM avm_local_bb30_st__inst0
      .avm_local_bb30_st__inst0_enable(local_avm_aspace32_enable[0][2]),
      .avm_local_bb30_st__inst0_read(local_avm_aspace32_read[0][2]),
      .avm_local_bb30_st__inst0_write(local_avm_aspace32_write[0][2]),
      .avm_local_bb30_st__inst0_burstcount(local_avm_aspace32_burstcount[0][2]),
      .avm_local_bb30_st__inst0_address(local_avm_aspace32_address[0][2]),
      .avm_local_bb30_st__inst0_writedata(local_avm_aspace32_writedata[0][2]),
      .avm_local_bb30_st__inst0_byteenable(local_avm_aspace32_byteenable[0][2]),
      .avm_local_bb30_st__inst0_waitrequest(local_avm_aspace32_waitrequest[0][2]),
      .avm_local_bb30_st__inst0_readdata(local_avm_aspace32_readdata[0][2]),
      .avm_local_bb30_st__inst0_readdatavalid(local_avm_aspace32_readdatavalid[0][2]),
      .avm_local_bb30_st__inst0_writeack(local_avm_aspace32_writeack[0][2]),
      // AVM avm_local_bb34_ld__pr1199_inst0
      .avm_local_bb34_ld__pr1199_inst0_enable(local_avm_aspace32_enable[0][3]),
      .avm_local_bb34_ld__pr1199_inst0_read(local_avm_aspace32_read[0][3]),
      .avm_local_bb34_ld__pr1199_inst0_write(local_avm_aspace32_write[0][3]),
      .avm_local_bb34_ld__pr1199_inst0_burstcount(local_avm_aspace32_burstcount[0][3]),
      .avm_local_bb34_ld__pr1199_inst0_address(local_avm_aspace32_address[0][3]),
      .avm_local_bb34_ld__pr1199_inst0_writedata(local_avm_aspace32_writedata[0][3]),
      .avm_local_bb34_ld__pr1199_inst0_byteenable(local_avm_aspace32_byteenable[0][3]),
      .avm_local_bb34_ld__pr1199_inst0_waitrequest(local_avm_aspace32_waitrequest[0][3]),
      .avm_local_bb34_ld__pr1199_inst0_readdata(local_avm_aspace32_readdata[0][3]),
      .avm_local_bb34_ld__pr1199_inst0_readdatavalid(local_avm_aspace32_readdatavalid[0][3]),
      .avm_local_bb34_ld__pr1199_inst0_writeack(local_avm_aspace32_writeack[0][3]),
      // AVM avm_local_bb36_st_c3_exe159_inst0
      .avm_local_bb36_st_c3_exe159_inst0_enable(local_avm_aspace32_enable[0][4]),
      .avm_local_bb36_st_c3_exe159_inst0_read(local_avm_aspace32_read[0][4]),
      .avm_local_bb36_st_c3_exe159_inst0_write(local_avm_aspace32_write[0][4]),
      .avm_local_bb36_st_c3_exe159_inst0_burstcount(local_avm_aspace32_burstcount[0][4]),
      .avm_local_bb36_st_c3_exe159_inst0_address(local_avm_aspace32_address[0][4]),
      .avm_local_bb36_st_c3_exe159_inst0_writedata(local_avm_aspace32_writedata[0][4]),
      .avm_local_bb36_st_c3_exe159_inst0_byteenable(local_avm_aspace32_byteenable[0][4]),
      .avm_local_bb36_st_c3_exe159_inst0_waitrequest(local_avm_aspace32_waitrequest[0][4]),
      .avm_local_bb36_st_c3_exe159_inst0_readdata(local_avm_aspace32_readdata[0][4]),
      .avm_local_bb36_st_c3_exe159_inst0_readdatavalid(local_avm_aspace32_readdatavalid[0][4]),
      .avm_local_bb36_st_c3_exe159_inst0_writeack(local_avm_aspace32_writeack[0][4]),
      // AVM avm_local_bb38_st_c3_exe191_inst0
      .avm_local_bb38_st_c3_exe191_inst0_enable(local_avm_aspace32_enable[0][5]),
      .avm_local_bb38_st_c3_exe191_inst0_read(local_avm_aspace32_read[0][5]),
      .avm_local_bb38_st_c3_exe191_inst0_write(local_avm_aspace32_write[0][5]),
      .avm_local_bb38_st_c3_exe191_inst0_burstcount(local_avm_aspace32_burstcount[0][5]),
      .avm_local_bb38_st_c3_exe191_inst0_address(local_avm_aspace32_address[0][5]),
      .avm_local_bb38_st_c3_exe191_inst0_writedata(local_avm_aspace32_writedata[0][5]),
      .avm_local_bb38_st_c3_exe191_inst0_byteenable(local_avm_aspace32_byteenable[0][5]),
      .avm_local_bb38_st_c3_exe191_inst0_waitrequest(local_avm_aspace32_waitrequest[0][5]),
      .avm_local_bb38_st_c3_exe191_inst0_readdata(local_avm_aspace32_readdata[0][5]),
      .avm_local_bb38_st_c3_exe191_inst0_readdatavalid(local_avm_aspace32_readdatavalid[0][5]),
      .avm_local_bb38_st_c3_exe191_inst0_writeack(local_avm_aspace32_writeack[0][5]),
      // AVM avm_local_bb3_st__inst0
      .avm_local_bb3_st__inst0_enable(local_avm_aspace32_enable[0][6]),
      .avm_local_bb3_st__inst0_read(local_avm_aspace32_read[0][6]),
      .avm_local_bb3_st__inst0_write(local_avm_aspace32_write[0][6]),
      .avm_local_bb3_st__inst0_burstcount(local_avm_aspace32_burstcount[0][6]),
      .avm_local_bb3_st__inst0_address(local_avm_aspace32_address[0][6]),
      .avm_local_bb3_st__inst0_writedata(local_avm_aspace32_writedata[0][6]),
      .avm_local_bb3_st__inst0_byteenable(local_avm_aspace32_byteenable[0][6]),
      .avm_local_bb3_st__inst0_waitrequest(local_avm_aspace32_waitrequest[0][6]),
      .avm_local_bb3_st__inst0_readdata(local_avm_aspace32_readdata[0][6]),
      .avm_local_bb3_st__inst0_readdatavalid(local_avm_aspace32_readdatavalid[0][6]),
      .avm_local_bb3_st__inst0_writeack(local_avm_aspace32_writeack[0][6]),
      // AVM avm_local_bb40_ld__inst0
      .avm_local_bb40_ld__inst0_enable(local_avm_aspace32_enable[0][7]),
      .avm_local_bb40_ld__inst0_read(local_avm_aspace32_read[0][7]),
      .avm_local_bb40_ld__inst0_write(local_avm_aspace32_write[0][7]),
      .avm_local_bb40_ld__inst0_burstcount(local_avm_aspace32_burstcount[0][7]),
      .avm_local_bb40_ld__inst0_address(local_avm_aspace32_address[0][7]),
      .avm_local_bb40_ld__inst0_writedata(local_avm_aspace32_writedata[0][7]),
      .avm_local_bb40_ld__inst0_byteenable(local_avm_aspace32_byteenable[0][7]),
      .avm_local_bb40_ld__inst0_waitrequest(local_avm_aspace32_waitrequest[0][7]),
      .avm_local_bb40_ld__inst0_readdata(local_avm_aspace32_readdata[0][7]),
      .avm_local_bb40_ld__inst0_readdatavalid(local_avm_aspace32_readdatavalid[0][7]),
      .avm_local_bb40_ld__inst0_writeack(local_avm_aspace32_writeack[0][7]),
      // AVM avm_local_bb9_ld__inst0
      .avm_local_bb9_ld__inst0_enable(local_avm_aspace32_enable[0][8]),
      .avm_local_bb9_ld__inst0_read(local_avm_aspace32_read[0][8]),
      .avm_local_bb9_ld__inst0_write(local_avm_aspace32_write[0][8]),
      .avm_local_bb9_ld__inst0_burstcount(local_avm_aspace32_burstcount[0][8]),
      .avm_local_bb9_ld__inst0_address(local_avm_aspace32_address[0][8]),
      .avm_local_bb9_ld__inst0_writedata(local_avm_aspace32_writedata[0][8]),
      .avm_local_bb9_ld__inst0_byteenable(local_avm_aspace32_byteenable[0][8]),
      .avm_local_bb9_ld__inst0_waitrequest(local_avm_aspace32_waitrequest[0][8]),
      .avm_local_bb9_ld__inst0_readdata(local_avm_aspace32_readdata[0][8]),
      .avm_local_bb9_ld__inst0_readdatavalid(local_avm_aspace32_readdatavalid[0][8]),
      .avm_local_bb9_ld__inst0_writeack(local_avm_aspace32_writeack[0][8]),
      // AVM avm_local_bb19_ld__inst0
      .avm_local_bb19_ld__inst0_enable(local_avm_aspace33_enable[0][0]),
      .avm_local_bb19_ld__inst0_read(local_avm_aspace33_read[0][0]),
      .avm_local_bb19_ld__inst0_write(local_avm_aspace33_write[0][0]),
      .avm_local_bb19_ld__inst0_burstcount(local_avm_aspace33_burstcount[0][0]),
      .avm_local_bb19_ld__inst0_address(local_avm_aspace33_address[0][0]),
      .avm_local_bb19_ld__inst0_writedata(local_avm_aspace33_writedata[0][0]),
      .avm_local_bb19_ld__inst0_byteenable(local_avm_aspace33_byteenable[0][0]),
      .avm_local_bb19_ld__inst0_waitrequest(local_avm_aspace33_waitrequest[0][0]),
      .avm_local_bb19_ld__inst0_readdata(local_avm_aspace33_readdata[0][0]),
      .avm_local_bb19_ld__inst0_readdatavalid(local_avm_aspace33_readdatavalid[0][0]),
      .avm_local_bb19_ld__inst0_writeack(local_avm_aspace33_writeack[0][0]),
      // AVM avm_local_bb19_st_c0_exe1409_inst0
      .avm_local_bb19_st_c0_exe1409_inst0_enable(local_avm_aspace33_enable[0][1]),
      .avm_local_bb19_st_c0_exe1409_inst0_read(local_avm_aspace33_read[0][1]),
      .avm_local_bb19_st_c0_exe1409_inst0_write(local_avm_aspace33_write[0][1]),
      .avm_local_bb19_st_c0_exe1409_inst0_burstcount(local_avm_aspace33_burstcount[0][1]),
      .avm_local_bb19_st_c0_exe1409_inst0_address(local_avm_aspace33_address[0][1]),
      .avm_local_bb19_st_c0_exe1409_inst0_writedata(local_avm_aspace33_writedata[0][1]),
      .avm_local_bb19_st_c0_exe1409_inst0_byteenable(local_avm_aspace33_byteenable[0][1]),
      .avm_local_bb19_st_c0_exe1409_inst0_waitrequest(local_avm_aspace33_waitrequest[0][1]),
      .avm_local_bb19_st_c0_exe1409_inst0_readdata(local_avm_aspace33_readdata[0][1]),
      .avm_local_bb19_st_c0_exe1409_inst0_readdatavalid(local_avm_aspace33_readdatavalid[0][1]),
      .avm_local_bb19_st_c0_exe1409_inst0_writeack(local_avm_aspace33_writeack[0][1]),
      // AVM avm_local_bb20_ld__u101_inst0
      .avm_local_bb20_ld__u101_inst0_enable(local_avm_aspace33_enable[0][2]),
      .avm_local_bb20_ld__u101_inst0_read(local_avm_aspace33_read[0][2]),
      .avm_local_bb20_ld__u101_inst0_write(local_avm_aspace33_write[0][2]),
      .avm_local_bb20_ld__u101_inst0_burstcount(local_avm_aspace33_burstcount[0][2]),
      .avm_local_bb20_ld__u101_inst0_address(local_avm_aspace33_address[0][2]),
      .avm_local_bb20_ld__u101_inst0_writedata(local_avm_aspace33_writedata[0][2]),
      .avm_local_bb20_ld__u101_inst0_byteenable(local_avm_aspace33_byteenable[0][2]),
      .avm_local_bb20_ld__u101_inst0_waitrequest(local_avm_aspace33_waitrequest[0][2]),
      .avm_local_bb20_ld__u101_inst0_readdata(local_avm_aspace33_readdata[0][2]),
      .avm_local_bb20_ld__u101_inst0_readdatavalid(local_avm_aspace33_readdatavalid[0][2]),
      .avm_local_bb20_ld__u101_inst0_writeack(local_avm_aspace33_writeack[0][2]),
      // AVM avm_local_bb30_ld__u168_inst0
      .avm_local_bb30_ld__u168_inst0_enable(local_avm_aspace33_enable[0][3]),
      .avm_local_bb30_ld__u168_inst0_read(local_avm_aspace33_read[0][3]),
      .avm_local_bb30_ld__u168_inst0_write(local_avm_aspace33_write[0][3]),
      .avm_local_bb30_ld__u168_inst0_burstcount(local_avm_aspace33_burstcount[0][3]),
      .avm_local_bb30_ld__u168_inst0_address(local_avm_aspace33_address[0][3]),
      .avm_local_bb30_ld__u168_inst0_writedata(local_avm_aspace33_writedata[0][3]),
      .avm_local_bb30_ld__u168_inst0_byteenable(local_avm_aspace33_byteenable[0][3]),
      .avm_local_bb30_ld__u168_inst0_waitrequest(local_avm_aspace33_waitrequest[0][3]),
      .avm_local_bb30_ld__u168_inst0_readdata(local_avm_aspace33_readdata[0][3]),
      .avm_local_bb30_ld__u168_inst0_readdatavalid(local_avm_aspace33_readdatavalid[0][3]),
      .avm_local_bb30_ld__u168_inst0_writeack(local_avm_aspace33_writeack[0][3]),
      // AVM avm_local_bb30_st_sub175_hfp_0_0_inst0
      .avm_local_bb30_st_sub175_hfp_0_0_inst0_enable(local_avm_aspace33_enable[0][4]),
      .avm_local_bb30_st_sub175_hfp_0_0_inst0_read(local_avm_aspace33_read[0][4]),
      .avm_local_bb30_st_sub175_hfp_0_0_inst0_write(local_avm_aspace33_write[0][4]),
      .avm_local_bb30_st_sub175_hfp_0_0_inst0_burstcount(local_avm_aspace33_burstcount[0][4]),
      .avm_local_bb30_st_sub175_hfp_0_0_inst0_address(local_avm_aspace33_address[0][4]),
      .avm_local_bb30_st_sub175_hfp_0_0_inst0_writedata(local_avm_aspace33_writedata[0][4]),
      .avm_local_bb30_st_sub175_hfp_0_0_inst0_byteenable(local_avm_aspace33_byteenable[0][4]),
      .avm_local_bb30_st_sub175_hfp_0_0_inst0_waitrequest(local_avm_aspace33_waitrequest[0][4]),
      .avm_local_bb30_st_sub175_hfp_0_0_inst0_readdata(local_avm_aspace33_readdata[0][4]),
      .avm_local_bb30_st_sub175_hfp_0_0_inst0_readdatavalid(local_avm_aspace33_readdatavalid[0][4]),
      .avm_local_bb30_st_sub175_hfp_0_0_inst0_writeack(local_avm_aspace33_writeack[0][4]),
      // AVM avm_local_bb32_ld__inst0
      .avm_local_bb32_ld__inst0_enable(local_avm_aspace33_enable[0][5]),
      .avm_local_bb32_ld__inst0_read(local_avm_aspace33_read[0][5]),
      .avm_local_bb32_ld__inst0_write(local_avm_aspace33_write[0][5]),
      .avm_local_bb32_ld__inst0_burstcount(local_avm_aspace33_burstcount[0][5]),
      .avm_local_bb32_ld__inst0_address(local_avm_aspace33_address[0][5]),
      .avm_local_bb32_ld__inst0_writedata(local_avm_aspace33_writedata[0][5]),
      .avm_local_bb32_ld__inst0_byteenable(local_avm_aspace33_byteenable[0][5]),
      .avm_local_bb32_ld__inst0_waitrequest(local_avm_aspace33_waitrequest[0][5]),
      .avm_local_bb32_ld__inst0_readdata(local_avm_aspace33_readdata[0][5]),
      .avm_local_bb32_ld__inst0_readdatavalid(local_avm_aspace33_readdatavalid[0][5]),
      .avm_local_bb32_ld__inst0_writeack(local_avm_aspace33_writeack[0][5]),
      // AVM avm_local_bb32_st__inst0
      .avm_local_bb32_st__inst0_enable(local_avm_aspace33_enable[0][6]),
      .avm_local_bb32_st__inst0_read(local_avm_aspace33_read[0][6]),
      .avm_local_bb32_st__inst0_write(local_avm_aspace33_write[0][6]),
      .avm_local_bb32_st__inst0_burstcount(local_avm_aspace33_burstcount[0][6]),
      .avm_local_bb32_st__inst0_address(local_avm_aspace33_address[0][6]),
      .avm_local_bb32_st__inst0_writedata(local_avm_aspace33_writedata[0][6]),
      .avm_local_bb32_st__inst0_byteenable(local_avm_aspace33_byteenable[0][6]),
      .avm_local_bb32_st__inst0_waitrequest(local_avm_aspace33_waitrequest[0][6]),
      .avm_local_bb32_st__inst0_readdata(local_avm_aspace33_readdata[0][6]),
      .avm_local_bb32_st__inst0_readdatavalid(local_avm_aspace33_readdatavalid[0][6]),
      .avm_local_bb32_st__inst0_writeack(local_avm_aspace33_writeack[0][6]),
      // AVM avm_local_bb4_st__inst0
      .avm_local_bb4_st__inst0_enable(local_avm_aspace33_enable[0][7]),
      .avm_local_bb4_st__inst0_read(local_avm_aspace33_read[0][7]),
      .avm_local_bb4_st__inst0_write(local_avm_aspace33_write[0][7]),
      .avm_local_bb4_st__inst0_burstcount(local_avm_aspace33_burstcount[0][7]),
      .avm_local_bb4_st__inst0_address(local_avm_aspace33_address[0][7]),
      .avm_local_bb4_st__inst0_writedata(local_avm_aspace33_writedata[0][7]),
      .avm_local_bb4_st__inst0_byteenable(local_avm_aspace33_byteenable[0][7]),
      .avm_local_bb4_st__inst0_waitrequest(local_avm_aspace33_waitrequest[0][7]),
      .avm_local_bb4_st__inst0_readdata(local_avm_aspace33_readdata[0][7]),
      .avm_local_bb4_st__inst0_readdatavalid(local_avm_aspace33_readdatavalid[0][7]),
      .avm_local_bb4_st__inst0_writeack(local_avm_aspace33_writeack[0][7]),
      // AVM avm_local_bb9_ld__u32_inst0
      .avm_local_bb9_ld__u32_inst0_enable(local_avm_aspace33_enable[0][8]),
      .avm_local_bb9_ld__u32_inst0_read(local_avm_aspace33_read[0][8]),
      .avm_local_bb9_ld__u32_inst0_write(local_avm_aspace33_write[0][8]),
      .avm_local_bb9_ld__u32_inst0_burstcount(local_avm_aspace33_burstcount[0][8]),
      .avm_local_bb9_ld__u32_inst0_address(local_avm_aspace33_address[0][8]),
      .avm_local_bb9_ld__u32_inst0_writedata(local_avm_aspace33_writedata[0][8]),
      .avm_local_bb9_ld__u32_inst0_byteenable(local_avm_aspace33_byteenable[0][8]),
      .avm_local_bb9_ld__u32_inst0_waitrequest(local_avm_aspace33_waitrequest[0][8]),
      .avm_local_bb9_ld__u32_inst0_readdata(local_avm_aspace33_readdata[0][8]),
      .avm_local_bb9_ld__u32_inst0_readdatavalid(local_avm_aspace33_readdatavalid[0][8]),
      .avm_local_bb9_ld__u32_inst0_writeack(local_avm_aspace33_writeack[0][8]),
      // AVM avm_local_bb31_ld__1507_inst0
      .avm_local_bb31_ld__1507_inst0_enable(local_avm_aspace34_enable[0][0]),
      .avm_local_bb31_ld__1507_inst0_read(local_avm_aspace34_read[0][0]),
      .avm_local_bb31_ld__1507_inst0_write(local_avm_aspace34_write[0][0]),
      .avm_local_bb31_ld__1507_inst0_burstcount(local_avm_aspace34_burstcount[0][0]),
      .avm_local_bb31_ld__1507_inst0_address(local_avm_aspace34_address[0][0]),
      .avm_local_bb31_ld__1507_inst0_writedata(local_avm_aspace34_writedata[0][0]),
      .avm_local_bb31_ld__1507_inst0_byteenable(local_avm_aspace34_byteenable[0][0]),
      .avm_local_bb31_ld__1507_inst0_waitrequest(local_avm_aspace34_waitrequest[0][0]),
      .avm_local_bb31_ld__1507_inst0_readdata(local_avm_aspace34_readdata[0][0]),
      .avm_local_bb31_ld__1507_inst0_readdatavalid(local_avm_aspace34_readdatavalid[0][0]),
      .avm_local_bb31_ld__1507_inst0_writeack(local_avm_aspace34_writeack[0][0]),
      // AVM avm_local_bb31_ld__inst0
      .avm_local_bb31_ld__inst0_enable(local_avm_aspace34_enable[0][1]),
      .avm_local_bb31_ld__inst0_read(local_avm_aspace34_read[0][1]),
      .avm_local_bb31_ld__inst0_write(local_avm_aspace34_write[0][1]),
      .avm_local_bb31_ld__inst0_burstcount(local_avm_aspace34_burstcount[0][1]),
      .avm_local_bb31_ld__inst0_address(local_avm_aspace34_address[0][1]),
      .avm_local_bb31_ld__inst0_writedata(local_avm_aspace34_writedata[0][1]),
      .avm_local_bb31_ld__inst0_byteenable(local_avm_aspace34_byteenable[0][1]),
      .avm_local_bb31_ld__inst0_waitrequest(local_avm_aspace34_waitrequest[0][1]),
      .avm_local_bb31_ld__inst0_readdata(local_avm_aspace34_readdata[0][1]),
      .avm_local_bb31_ld__inst0_readdatavalid(local_avm_aspace34_readdatavalid[0][1]),
      .avm_local_bb31_ld__inst0_writeack(local_avm_aspace34_writeack[0][1]),
      // AVM avm_local_bb31_st_c2_exe140_inst0
      .avm_local_bb31_st_c2_exe140_inst0_enable(local_avm_aspace34_enable[0][2]),
      .avm_local_bb31_st_c2_exe140_inst0_read(local_avm_aspace34_read[0][2]),
      .avm_local_bb31_st_c2_exe140_inst0_write(local_avm_aspace34_write[0][2]),
      .avm_local_bb31_st_c2_exe140_inst0_burstcount(local_avm_aspace34_burstcount[0][2]),
      .avm_local_bb31_st_c2_exe140_inst0_address(local_avm_aspace34_address[0][2]),
      .avm_local_bb31_st_c2_exe140_inst0_writedata(local_avm_aspace34_writedata[0][2]),
      .avm_local_bb31_st_c2_exe140_inst0_byteenable(local_avm_aspace34_byteenable[0][2]),
      .avm_local_bb31_st_c2_exe140_inst0_waitrequest(local_avm_aspace34_waitrequest[0][2]),
      .avm_local_bb31_st_c2_exe140_inst0_readdata(local_avm_aspace34_readdata[0][2]),
      .avm_local_bb31_st_c2_exe140_inst0_readdatavalid(local_avm_aspace34_readdatavalid[0][2]),
      .avm_local_bb31_st_c2_exe140_inst0_writeack(local_avm_aspace34_writeack[0][2]),
      // AVM avm_local_bb5_ld__inst0
      .avm_local_bb5_ld__inst0_enable(local_avm_aspace34_enable[0][3]),
      .avm_local_bb5_ld__inst0_read(local_avm_aspace34_read[0][3]),
      .avm_local_bb5_ld__inst0_write(local_avm_aspace34_write[0][3]),
      .avm_local_bb5_ld__inst0_burstcount(local_avm_aspace34_burstcount[0][3]),
      .avm_local_bb5_ld__inst0_address(local_avm_aspace34_address[0][3]),
      .avm_local_bb5_ld__inst0_writedata(local_avm_aspace34_writedata[0][3]),
      .avm_local_bb5_ld__inst0_byteenable(local_avm_aspace34_byteenable[0][3]),
      .avm_local_bb5_ld__inst0_waitrequest(local_avm_aspace34_waitrequest[0][3]),
      .avm_local_bb5_ld__inst0_readdata(local_avm_aspace34_readdata[0][3]),
      .avm_local_bb5_ld__inst0_readdatavalid(local_avm_aspace34_readdatavalid[0][3]),
      .avm_local_bb5_ld__inst0_writeack(local_avm_aspace34_writeack[0][3]),
      // AVM avm_local_bb5_st__u17_inst0
      .avm_local_bb5_st__u17_inst0_enable(local_avm_aspace34_enable[0][4]),
      .avm_local_bb5_st__u17_inst0_read(local_avm_aspace34_read[0][4]),
      .avm_local_bb5_st__u17_inst0_write(local_avm_aspace34_write[0][4]),
      .avm_local_bb5_st__u17_inst0_burstcount(local_avm_aspace34_burstcount[0][4]),
      .avm_local_bb5_st__u17_inst0_address(local_avm_aspace34_address[0][4]),
      .avm_local_bb5_st__u17_inst0_writedata(local_avm_aspace34_writedata[0][4]),
      .avm_local_bb5_st__u17_inst0_byteenable(local_avm_aspace34_byteenable[0][4]),
      .avm_local_bb5_st__u17_inst0_waitrequest(local_avm_aspace34_waitrequest[0][4]),
      .avm_local_bb5_st__u17_inst0_readdata(local_avm_aspace34_readdata[0][4]),
      .avm_local_bb5_st__u17_inst0_readdatavalid(local_avm_aspace34_readdatavalid[0][4]),
      .avm_local_bb5_st__u17_inst0_writeack(local_avm_aspace34_writeack[0][4]),
      // AVM avm_local_bb31_ld__1498_inst0
      .avm_local_bb31_ld__1498_inst0_enable(local_avm_aspace35_enable[0][0]),
      .avm_local_bb31_ld__1498_inst0_read(local_avm_aspace35_read[0][0]),
      .avm_local_bb31_ld__1498_inst0_write(local_avm_aspace35_write[0][0]),
      .avm_local_bb31_ld__1498_inst0_burstcount(local_avm_aspace35_burstcount[0][0]),
      .avm_local_bb31_ld__1498_inst0_address(local_avm_aspace35_address[0][0]),
      .avm_local_bb31_ld__1498_inst0_writedata(local_avm_aspace35_writedata[0][0]),
      .avm_local_bb31_ld__1498_inst0_byteenable(local_avm_aspace35_byteenable[0][0]),
      .avm_local_bb31_ld__1498_inst0_waitrequest(local_avm_aspace35_waitrequest[0][0]),
      .avm_local_bb31_ld__1498_inst0_readdata(local_avm_aspace35_readdata[0][0]),
      .avm_local_bb31_ld__1498_inst0_readdatavalid(local_avm_aspace35_readdatavalid[0][0]),
      .avm_local_bb31_ld__1498_inst0_writeack(local_avm_aspace35_writeack[0][0]),
      // AVM avm_local_bb31_st__1496_inst0
      .avm_local_bb31_st__1496_inst0_enable(local_avm_aspace35_enable[0][1]),
      .avm_local_bb31_st__1496_inst0_read(local_avm_aspace35_read[0][1]),
      .avm_local_bb31_st__1496_inst0_write(local_avm_aspace35_write[0][1]),
      .avm_local_bb31_st__1496_inst0_burstcount(local_avm_aspace35_burstcount[0][1]),
      .avm_local_bb31_st__1496_inst0_address(local_avm_aspace35_address[0][1]),
      .avm_local_bb31_st__1496_inst0_writedata(local_avm_aspace35_writedata[0][1]),
      .avm_local_bb31_st__1496_inst0_byteenable(local_avm_aspace35_byteenable[0][1]),
      .avm_local_bb31_st__1496_inst0_waitrequest(local_avm_aspace35_waitrequest[0][1]),
      .avm_local_bb31_st__1496_inst0_readdata(local_avm_aspace35_readdata[0][1]),
      .avm_local_bb31_st__1496_inst0_readdatavalid(local_avm_aspace35_readdatavalid[0][1]),
      .avm_local_bb31_st__1496_inst0_writeack(local_avm_aspace35_writeack[0][1]),
      // AVM avm_local_bb31_st__u171_inst0
      .avm_local_bb31_st__u171_inst0_enable(local_avm_aspace35_enable[0][2]),
      .avm_local_bb31_st__u171_inst0_read(local_avm_aspace35_read[0][2]),
      .avm_local_bb31_st__u171_inst0_write(local_avm_aspace35_write[0][2]),
      .avm_local_bb31_st__u171_inst0_burstcount(local_avm_aspace35_burstcount[0][2]),
      .avm_local_bb31_st__u171_inst0_address(local_avm_aspace35_address[0][2]),
      .avm_local_bb31_st__u171_inst0_writedata(local_avm_aspace35_writedata[0][2]),
      .avm_local_bb31_st__u171_inst0_byteenable(local_avm_aspace35_byteenable[0][2]),
      .avm_local_bb31_st__u171_inst0_waitrequest(local_avm_aspace35_waitrequest[0][2]),
      .avm_local_bb31_st__u171_inst0_readdata(local_avm_aspace35_readdata[0][2]),
      .avm_local_bb31_st__u171_inst0_readdatavalid(local_avm_aspace35_readdatavalid[0][2]),
      .avm_local_bb31_st__u171_inst0_writeack(local_avm_aspace35_writeack[0][2]),
      // AVM avm_local_bb5_st__u18_inst0
      .avm_local_bb5_st__u18_inst0_enable(local_avm_aspace35_enable[0][3]),
      .avm_local_bb5_st__u18_inst0_read(local_avm_aspace35_read[0][3]),
      .avm_local_bb5_st__u18_inst0_write(local_avm_aspace35_write[0][3]),
      .avm_local_bb5_st__u18_inst0_burstcount(local_avm_aspace35_burstcount[0][3]),
      .avm_local_bb5_st__u18_inst0_address(local_avm_aspace35_address[0][3]),
      .avm_local_bb5_st__u18_inst0_writedata(local_avm_aspace35_writedata[0][3]),
      .avm_local_bb5_st__u18_inst0_byteenable(local_avm_aspace35_byteenable[0][3]),
      .avm_local_bb5_st__u18_inst0_waitrequest(local_avm_aspace35_waitrequest[0][3]),
      .avm_local_bb5_st__u18_inst0_readdata(local_avm_aspace35_readdata[0][3]),
      .avm_local_bb5_st__u18_inst0_readdatavalid(local_avm_aspace35_readdatavalid[0][3]),
      .avm_local_bb5_st__u18_inst0_writeack(local_avm_aspace35_writeack[0][3]),
      // AVM avm_local_bb31_ld__u170_inst0
      .avm_local_bb31_ld__u170_inst0_enable(local_avm_aspace36_enable[0][0]),
      .avm_local_bb31_ld__u170_inst0_read(local_avm_aspace36_read[0][0]),
      .avm_local_bb31_ld__u170_inst0_write(local_avm_aspace36_write[0][0]),
      .avm_local_bb31_ld__u170_inst0_burstcount(local_avm_aspace36_burstcount[0][0]),
      .avm_local_bb31_ld__u170_inst0_address(local_avm_aspace36_address[0][0]),
      .avm_local_bb31_ld__u170_inst0_writedata(local_avm_aspace36_writedata[0][0]),
      .avm_local_bb31_ld__u170_inst0_byteenable(local_avm_aspace36_byteenable[0][0]),
      .avm_local_bb31_ld__u170_inst0_waitrequest(local_avm_aspace36_waitrequest[0][0]),
      .avm_local_bb31_ld__u170_inst0_readdata(local_avm_aspace36_readdata[0][0]),
      .avm_local_bb31_ld__u170_inst0_readdatavalid(local_avm_aspace36_readdatavalid[0][0]),
      .avm_local_bb31_ld__u170_inst0_writeack(local_avm_aspace36_writeack[0][0]),
      // AVM avm_local_bb31_st__1500_inst0
      .avm_local_bb31_st__1500_inst0_enable(local_avm_aspace36_enable[0][1]),
      .avm_local_bb31_st__1500_inst0_read(local_avm_aspace36_read[0][1]),
      .avm_local_bb31_st__1500_inst0_write(local_avm_aspace36_write[0][1]),
      .avm_local_bb31_st__1500_inst0_burstcount(local_avm_aspace36_burstcount[0][1]),
      .avm_local_bb31_st__1500_inst0_address(local_avm_aspace36_address[0][1]),
      .avm_local_bb31_st__1500_inst0_writedata(local_avm_aspace36_writedata[0][1]),
      .avm_local_bb31_st__1500_inst0_byteenable(local_avm_aspace36_byteenable[0][1]),
      .avm_local_bb31_st__1500_inst0_waitrequest(local_avm_aspace36_waitrequest[0][1]),
      .avm_local_bb31_st__1500_inst0_readdata(local_avm_aspace36_readdata[0][1]),
      .avm_local_bb31_st__1500_inst0_readdatavalid(local_avm_aspace36_readdatavalid[0][1]),
      .avm_local_bb31_st__1500_inst0_writeack(local_avm_aspace36_writeack[0][1]),
      // AVM avm_local_bb31_st__inst0
      .avm_local_bb31_st__inst0_enable(local_avm_aspace36_enable[0][2]),
      .avm_local_bb31_st__inst0_read(local_avm_aspace36_read[0][2]),
      .avm_local_bb31_st__inst0_write(local_avm_aspace36_write[0][2]),
      .avm_local_bb31_st__inst0_burstcount(local_avm_aspace36_burstcount[0][2]),
      .avm_local_bb31_st__inst0_address(local_avm_aspace36_address[0][2]),
      .avm_local_bb31_st__inst0_writedata(local_avm_aspace36_writedata[0][2]),
      .avm_local_bb31_st__inst0_byteenable(local_avm_aspace36_byteenable[0][2]),
      .avm_local_bb31_st__inst0_waitrequest(local_avm_aspace36_waitrequest[0][2]),
      .avm_local_bb31_st__inst0_readdata(local_avm_aspace36_readdata[0][2]),
      .avm_local_bb31_st__inst0_readdatavalid(local_avm_aspace36_readdatavalid[0][2]),
      .avm_local_bb31_st__inst0_writeack(local_avm_aspace36_writeack[0][2]),
      // AVM avm_local_bb5_st__u19_inst0
      .avm_local_bb5_st__u19_inst0_enable(local_avm_aspace36_enable[0][3]),
      .avm_local_bb5_st__u19_inst0_read(local_avm_aspace36_read[0][3]),
      .avm_local_bb5_st__u19_inst0_write(local_avm_aspace36_write[0][3]),
      .avm_local_bb5_st__u19_inst0_burstcount(local_avm_aspace36_burstcount[0][3]),
      .avm_local_bb5_st__u19_inst0_address(local_avm_aspace36_address[0][3]),
      .avm_local_bb5_st__u19_inst0_writedata(local_avm_aspace36_writedata[0][3]),
      .avm_local_bb5_st__u19_inst0_byteenable(local_avm_aspace36_byteenable[0][3]),
      .avm_local_bb5_st__u19_inst0_waitrequest(local_avm_aspace36_waitrequest[0][3]),
      .avm_local_bb5_st__u19_inst0_readdata(local_avm_aspace36_readdata[0][3]),
      .avm_local_bb5_st__u19_inst0_readdatavalid(local_avm_aspace36_readdatavalid[0][3]),
      .avm_local_bb5_st__u19_inst0_writeack(local_avm_aspace36_writeack[0][3]),
      // AVM avm_local_bb31_ld__u172_inst0
      .avm_local_bb31_ld__u172_inst0_enable(local_avm_aspace37_enable[0][0]),
      .avm_local_bb31_ld__u172_inst0_read(local_avm_aspace37_read[0][0]),
      .avm_local_bb31_ld__u172_inst0_write(local_avm_aspace37_write[0][0]),
      .avm_local_bb31_ld__u172_inst0_burstcount(local_avm_aspace37_burstcount[0][0]),
      .avm_local_bb31_ld__u172_inst0_address(local_avm_aspace37_address[0][0]),
      .avm_local_bb31_ld__u172_inst0_writedata(local_avm_aspace37_writedata[0][0]),
      .avm_local_bb31_ld__u172_inst0_byteenable(local_avm_aspace37_byteenable[0][0]),
      .avm_local_bb31_ld__u172_inst0_waitrequest(local_avm_aspace37_waitrequest[0][0]),
      .avm_local_bb31_ld__u172_inst0_readdata(local_avm_aspace37_readdata[0][0]),
      .avm_local_bb31_ld__u172_inst0_readdatavalid(local_avm_aspace37_readdatavalid[0][0]),
      .avm_local_bb31_ld__u172_inst0_writeack(local_avm_aspace37_writeack[0][0]),
      // AVM avm_local_bb31_ld__u174_inst0
      .avm_local_bb31_ld__u174_inst0_enable(local_avm_aspace37_enable[0][1]),
      .avm_local_bb31_ld__u174_inst0_read(local_avm_aspace37_read[0][1]),
      .avm_local_bb31_ld__u174_inst0_write(local_avm_aspace37_write[0][1]),
      .avm_local_bb31_ld__u174_inst0_burstcount(local_avm_aspace37_burstcount[0][1]),
      .avm_local_bb31_ld__u174_inst0_address(local_avm_aspace37_address[0][1]),
      .avm_local_bb31_ld__u174_inst0_writedata(local_avm_aspace37_writedata[0][1]),
      .avm_local_bb31_ld__u174_inst0_byteenable(local_avm_aspace37_byteenable[0][1]),
      .avm_local_bb31_ld__u174_inst0_waitrequest(local_avm_aspace37_waitrequest[0][1]),
      .avm_local_bb31_ld__u174_inst0_readdata(local_avm_aspace37_readdata[0][1]),
      .avm_local_bb31_ld__u174_inst0_readdatavalid(local_avm_aspace37_readdatavalid[0][1]),
      .avm_local_bb31_ld__u174_inst0_writeack(local_avm_aspace37_writeack[0][1]),
      // AVM avm_local_bb31_st_inc216_inst0
      .avm_local_bb31_st_inc216_inst0_enable(local_avm_aspace37_enable[0][2]),
      .avm_local_bb31_st_inc216_inst0_read(local_avm_aspace37_read[0][2]),
      .avm_local_bb31_st_inc216_inst0_write(local_avm_aspace37_write[0][2]),
      .avm_local_bb31_st_inc216_inst0_burstcount(local_avm_aspace37_burstcount[0][2]),
      .avm_local_bb31_st_inc216_inst0_address(local_avm_aspace37_address[0][2]),
      .avm_local_bb31_st_inc216_inst0_writedata(local_avm_aspace37_writedata[0][2]),
      .avm_local_bb31_st_inc216_inst0_byteenable(local_avm_aspace37_byteenable[0][2]),
      .avm_local_bb31_st_inc216_inst0_waitrequest(local_avm_aspace37_waitrequest[0][2]),
      .avm_local_bb31_st_inc216_inst0_readdata(local_avm_aspace37_readdata[0][2]),
      .avm_local_bb31_st_inc216_inst0_readdatavalid(local_avm_aspace37_readdatavalid[0][2]),
      .avm_local_bb31_st_inc216_inst0_writeack(local_avm_aspace37_writeack[0][2]),
      // AVM avm_local_bb5_ld__u20_inst0
      .avm_local_bb5_ld__u20_inst0_enable(local_avm_aspace37_enable[0][3]),
      .avm_local_bb5_ld__u20_inst0_read(local_avm_aspace37_read[0][3]),
      .avm_local_bb5_ld__u20_inst0_write(local_avm_aspace37_write[0][3]),
      .avm_local_bb5_ld__u20_inst0_burstcount(local_avm_aspace37_burstcount[0][3]),
      .avm_local_bb5_ld__u20_inst0_address(local_avm_aspace37_address[0][3]),
      .avm_local_bb5_ld__u20_inst0_writedata(local_avm_aspace37_writedata[0][3]),
      .avm_local_bb5_ld__u20_inst0_byteenable(local_avm_aspace37_byteenable[0][3]),
      .avm_local_bb5_ld__u20_inst0_waitrequest(local_avm_aspace37_waitrequest[0][3]),
      .avm_local_bb5_ld__u20_inst0_readdata(local_avm_aspace37_readdata[0][3]),
      .avm_local_bb5_ld__u20_inst0_readdatavalid(local_avm_aspace37_readdatavalid[0][3]),
      .avm_local_bb5_ld__u20_inst0_writeack(local_avm_aspace37_writeack[0][3]),
      // AVM avm_local_bb5_st__u16_inst0
      .avm_local_bb5_st__u16_inst0_enable(local_avm_aspace37_enable[0][4]),
      .avm_local_bb5_st__u16_inst0_read(local_avm_aspace37_read[0][4]),
      .avm_local_bb5_st__u16_inst0_write(local_avm_aspace37_write[0][4]),
      .avm_local_bb5_st__u16_inst0_burstcount(local_avm_aspace37_burstcount[0][4]),
      .avm_local_bb5_st__u16_inst0_address(local_avm_aspace37_address[0][4]),
      .avm_local_bb5_st__u16_inst0_writedata(local_avm_aspace37_writedata[0][4]),
      .avm_local_bb5_st__u16_inst0_byteenable(local_avm_aspace37_byteenable[0][4]),
      .avm_local_bb5_st__u16_inst0_waitrequest(local_avm_aspace37_waitrequest[0][4]),
      .avm_local_bb5_st__u16_inst0_readdata(local_avm_aspace37_readdata[0][4]),
      .avm_local_bb5_st__u16_inst0_readdatavalid(local_avm_aspace37_readdatavalid[0][4]),
      .avm_local_bb5_st__u16_inst0_writeack(local_avm_aspace37_writeack[0][4]),
      // AVM avm_local_bb18_ld__inst0
      .avm_local_bb18_ld__inst0_enable(local_avm_aspace38_enable[0][0]),
      .avm_local_bb18_ld__inst0_read(local_avm_aspace38_read[0][0]),
      .avm_local_bb18_ld__inst0_write(local_avm_aspace38_write[0][0]),
      .avm_local_bb18_ld__inst0_burstcount(local_avm_aspace38_burstcount[0][0]),
      .avm_local_bb18_ld__inst0_address(local_avm_aspace38_address[0][0]),
      .avm_local_bb18_ld__inst0_writedata(local_avm_aspace38_writedata[0][0]),
      .avm_local_bb18_ld__inst0_byteenable(local_avm_aspace38_byteenable[0][0]),
      .avm_local_bb18_ld__inst0_waitrequest(local_avm_aspace38_waitrequest[0][0]),
      .avm_local_bb18_ld__inst0_readdata(local_avm_aspace38_readdata[0][0]),
      .avm_local_bb18_ld__inst0_readdatavalid(local_avm_aspace38_readdatavalid[0][0]),
      .avm_local_bb18_ld__inst0_writeack(local_avm_aspace38_writeack[0][0]),
      // AVM avm_local_bb18_st_inc_inst0
      .avm_local_bb18_st_inc_inst0_enable(local_avm_aspace38_enable[0][1]),
      .avm_local_bb18_st_inc_inst0_read(local_avm_aspace38_read[0][1]),
      .avm_local_bb18_st_inc_inst0_write(local_avm_aspace38_write[0][1]),
      .avm_local_bb18_st_inc_inst0_burstcount(local_avm_aspace38_burstcount[0][1]),
      .avm_local_bb18_st_inc_inst0_address(local_avm_aspace38_address[0][1]),
      .avm_local_bb18_st_inc_inst0_writedata(local_avm_aspace38_writedata[0][1]),
      .avm_local_bb18_st_inc_inst0_byteenable(local_avm_aspace38_byteenable[0][1]),
      .avm_local_bb18_st_inc_inst0_waitrequest(local_avm_aspace38_waitrequest[0][1]),
      .avm_local_bb18_st_inc_inst0_readdata(local_avm_aspace38_readdata[0][1]),
      .avm_local_bb18_st_inc_inst0_readdatavalid(local_avm_aspace38_readdatavalid[0][1]),
      .avm_local_bb18_st_inc_inst0_writeack(local_avm_aspace38_writeack[0][1]),
      // AVM avm_local_bb29_ld__inst0
      .avm_local_bb29_ld__inst0_enable(local_avm_aspace38_enable[0][2]),
      .avm_local_bb29_ld__inst0_read(local_avm_aspace38_read[0][2]),
      .avm_local_bb29_ld__inst0_write(local_avm_aspace38_write[0][2]),
      .avm_local_bb29_ld__inst0_burstcount(local_avm_aspace38_burstcount[0][2]),
      .avm_local_bb29_ld__inst0_address(local_avm_aspace38_address[0][2]),
      .avm_local_bb29_ld__inst0_writedata(local_avm_aspace38_writedata[0][2]),
      .avm_local_bb29_ld__inst0_byteenable(local_avm_aspace38_byteenable[0][2]),
      .avm_local_bb29_ld__inst0_waitrequest(local_avm_aspace38_waitrequest[0][2]),
      .avm_local_bb29_ld__inst0_readdata(local_avm_aspace38_readdata[0][2]),
      .avm_local_bb29_ld__inst0_readdatavalid(local_avm_aspace38_readdatavalid[0][2]),
      .avm_local_bb29_ld__inst0_writeack(local_avm_aspace38_writeack[0][2]),
      // AVM avm_local_bb29_st_inc152_inst0
      .avm_local_bb29_st_inc152_inst0_enable(local_avm_aspace38_enable[0][3]),
      .avm_local_bb29_st_inc152_inst0_read(local_avm_aspace38_read[0][3]),
      .avm_local_bb29_st_inc152_inst0_write(local_avm_aspace38_write[0][3]),
      .avm_local_bb29_st_inc152_inst0_burstcount(local_avm_aspace38_burstcount[0][3]),
      .avm_local_bb29_st_inc152_inst0_address(local_avm_aspace38_address[0][3]),
      .avm_local_bb29_st_inc152_inst0_writedata(local_avm_aspace38_writedata[0][3]),
      .avm_local_bb29_st_inc152_inst0_byteenable(local_avm_aspace38_byteenable[0][3]),
      .avm_local_bb29_st_inc152_inst0_waitrequest(local_avm_aspace38_waitrequest[0][3]),
      .avm_local_bb29_st_inc152_inst0_readdata(local_avm_aspace38_readdata[0][3]),
      .avm_local_bb29_st_inc152_inst0_readdatavalid(local_avm_aspace38_readdatavalid[0][3]),
      .avm_local_bb29_st_inc152_inst0_writeack(local_avm_aspace38_writeack[0][3]),
      // AVM avm_local_bb33_ld__u178_inst0
      .avm_local_bb33_ld__u178_inst0_enable(local_avm_aspace38_enable[0][4]),
      .avm_local_bb33_ld__u178_inst0_read(local_avm_aspace38_read[0][4]),
      .avm_local_bb33_ld__u178_inst0_write(local_avm_aspace38_write[0][4]),
      .avm_local_bb33_ld__u178_inst0_burstcount(local_avm_aspace38_burstcount[0][4]),
      .avm_local_bb33_ld__u178_inst0_address(local_avm_aspace38_address[0][4]),
      .avm_local_bb33_ld__u178_inst0_writedata(local_avm_aspace38_writedata[0][4]),
      .avm_local_bb33_ld__u178_inst0_byteenable(local_avm_aspace38_byteenable[0][4]),
      .avm_local_bb33_ld__u178_inst0_waitrequest(local_avm_aspace38_waitrequest[0][4]),
      .avm_local_bb33_ld__u178_inst0_readdata(local_avm_aspace38_readdata[0][4]),
      .avm_local_bb33_ld__u178_inst0_readdatavalid(local_avm_aspace38_readdatavalid[0][4]),
      .avm_local_bb33_ld__u178_inst0_writeack(local_avm_aspace38_writeack[0][4]),
      // AVM avm_local_bb5_st__inst0
      .avm_local_bb5_st__inst0_enable(local_avm_aspace38_enable[0][5]),
      .avm_local_bb5_st__inst0_read(local_avm_aspace38_read[0][5]),
      .avm_local_bb5_st__inst0_write(local_avm_aspace38_write[0][5]),
      .avm_local_bb5_st__inst0_burstcount(local_avm_aspace38_burstcount[0][5]),
      .avm_local_bb5_st__inst0_address(local_avm_aspace38_address[0][5]),
      .avm_local_bb5_st__inst0_writedata(local_avm_aspace38_writedata[0][5]),
      .avm_local_bb5_st__inst0_byteenable(local_avm_aspace38_byteenable[0][5]),
      .avm_local_bb5_st__inst0_waitrequest(local_avm_aspace38_waitrequest[0][5]),
      .avm_local_bb5_st__inst0_readdata(local_avm_aspace38_readdata[0][5]),
      .avm_local_bb5_st__inst0_readdatavalid(local_avm_aspace38_readdatavalid[0][5]),
      .avm_local_bb5_st__inst0_writeack(local_avm_aspace38_writeack[0][5]),
      // AVM avm_local_bb19_ld__u100_inst0
      .avm_local_bb19_ld__u100_inst0_enable(local_avm_aspace39_enable[0][0]),
      .avm_local_bb19_ld__u100_inst0_read(local_avm_aspace39_read[0][0]),
      .avm_local_bb19_ld__u100_inst0_write(local_avm_aspace39_write[0][0]),
      .avm_local_bb19_ld__u100_inst0_burstcount(local_avm_aspace39_burstcount[0][0]),
      .avm_local_bb19_ld__u100_inst0_address(local_avm_aspace39_address[0][0]),
      .avm_local_bb19_ld__u100_inst0_writedata(local_avm_aspace39_writedata[0][0]),
      .avm_local_bb19_ld__u100_inst0_byteenable(local_avm_aspace39_byteenable[0][0]),
      .avm_local_bb19_ld__u100_inst0_waitrequest(local_avm_aspace39_waitrequest[0][0]),
      .avm_local_bb19_ld__u100_inst0_readdata(local_avm_aspace39_readdata[0][0]),
      .avm_local_bb19_ld__u100_inst0_readdatavalid(local_avm_aspace39_readdatavalid[0][0]),
      .avm_local_bb19_ld__u100_inst0_writeack(local_avm_aspace39_writeack[0][0]),
      // AVM avm_local_bb20_ld__u102_inst0
      .avm_local_bb20_ld__u102_inst0_enable(local_avm_aspace39_enable[0][1]),
      .avm_local_bb20_ld__u102_inst0_read(local_avm_aspace39_read[0][1]),
      .avm_local_bb20_ld__u102_inst0_write(local_avm_aspace39_write[0][1]),
      .avm_local_bb20_ld__u102_inst0_burstcount(local_avm_aspace39_burstcount[0][1]),
      .avm_local_bb20_ld__u102_inst0_address(local_avm_aspace39_address[0][1]),
      .avm_local_bb20_ld__u102_inst0_writedata(local_avm_aspace39_writedata[0][1]),
      .avm_local_bb20_ld__u102_inst0_byteenable(local_avm_aspace39_byteenable[0][1]),
      .avm_local_bb20_ld__u102_inst0_waitrequest(local_avm_aspace39_waitrequest[0][1]),
      .avm_local_bb20_ld__u102_inst0_readdata(local_avm_aspace39_readdata[0][1]),
      .avm_local_bb20_ld__u102_inst0_readdatavalid(local_avm_aspace39_readdatavalid[0][1]),
      .avm_local_bb20_ld__u102_inst0_writeack(local_avm_aspace39_writeack[0][1]),
      // AVM avm_local_bb30_ld__u169_inst0
      .avm_local_bb30_ld__u169_inst0_enable(local_avm_aspace39_enable[0][2]),
      .avm_local_bb30_ld__u169_inst0_read(local_avm_aspace39_read[0][2]),
      .avm_local_bb30_ld__u169_inst0_write(local_avm_aspace39_write[0][2]),
      .avm_local_bb30_ld__u169_inst0_burstcount(local_avm_aspace39_burstcount[0][2]),
      .avm_local_bb30_ld__u169_inst0_address(local_avm_aspace39_address[0][2]),
      .avm_local_bb30_ld__u169_inst0_writedata(local_avm_aspace39_writedata[0][2]),
      .avm_local_bb30_ld__u169_inst0_byteenable(local_avm_aspace39_byteenable[0][2]),
      .avm_local_bb30_ld__u169_inst0_waitrequest(local_avm_aspace39_waitrequest[0][2]),
      .avm_local_bb30_ld__u169_inst0_readdata(local_avm_aspace39_readdata[0][2]),
      .avm_local_bb30_ld__u169_inst0_readdatavalid(local_avm_aspace39_readdatavalid[0][2]),
      .avm_local_bb30_ld__u169_inst0_writeack(local_avm_aspace39_writeack[0][2]),
      // AVM avm_local_bb7_st_c0_exe2271_inst0
      .avm_local_bb7_st_c0_exe2271_inst0_enable(local_avm_aspace39_enable[0][3]),
      .avm_local_bb7_st_c0_exe2271_inst0_read(local_avm_aspace39_read[0][3]),
      .avm_local_bb7_st_c0_exe2271_inst0_write(local_avm_aspace39_write[0][3]),
      .avm_local_bb7_st_c0_exe2271_inst0_burstcount(local_avm_aspace39_burstcount[0][3]),
      .avm_local_bb7_st_c0_exe2271_inst0_address(local_avm_aspace39_address[0][3]),
      .avm_local_bb7_st_c0_exe2271_inst0_writedata(local_avm_aspace39_writedata[0][3]),
      .avm_local_bb7_st_c0_exe2271_inst0_byteenable(local_avm_aspace39_byteenable[0][3]),
      .avm_local_bb7_st_c0_exe2271_inst0_waitrequest(local_avm_aspace39_waitrequest[0][3]),
      .avm_local_bb7_st_c0_exe2271_inst0_readdata(local_avm_aspace39_readdata[0][3]),
      .avm_local_bb7_st_c0_exe2271_inst0_readdatavalid(local_avm_aspace39_readdatavalid[0][3]),
      .avm_local_bb7_st_c0_exe2271_inst0_writeack(local_avm_aspace39_writeack[0][3]),
      // AVM avm_local_bb9_ld__u33_inst0
      .avm_local_bb9_ld__u33_inst0_enable(local_avm_aspace39_enable[0][4]),
      .avm_local_bb9_ld__u33_inst0_read(local_avm_aspace39_read[0][4]),
      .avm_local_bb9_ld__u33_inst0_write(local_avm_aspace39_write[0][4]),
      .avm_local_bb9_ld__u33_inst0_burstcount(local_avm_aspace39_burstcount[0][4]),
      .avm_local_bb9_ld__u33_inst0_address(local_avm_aspace39_address[0][4]),
      .avm_local_bb9_ld__u33_inst0_writedata(local_avm_aspace39_writedata[0][4]),
      .avm_local_bb9_ld__u33_inst0_byteenable(local_avm_aspace39_byteenable[0][4]),
      .avm_local_bb9_ld__u33_inst0_waitrequest(local_avm_aspace39_waitrequest[0][4]),
      .avm_local_bb9_ld__u33_inst0_readdata(local_avm_aspace39_readdata[0][4]),
      .avm_local_bb9_ld__u33_inst0_readdatavalid(local_avm_aspace39_readdatavalid[0][4]),
      .avm_local_bb9_ld__u33_inst0_writeack(local_avm_aspace39_writeack[0][4]),
      // AVM avm_local_bb10_ld__inst0
      .avm_local_bb10_ld__inst0_enable(local_avm_aspace40_enable[0][0]),
      .avm_local_bb10_ld__inst0_read(local_avm_aspace40_read[0][0]),
      .avm_local_bb10_ld__inst0_write(local_avm_aspace40_write[0][0]),
      .avm_local_bb10_ld__inst0_burstcount(local_avm_aspace40_burstcount[0][0]),
      .avm_local_bb10_ld__inst0_address(local_avm_aspace40_address[0][0]),
      .avm_local_bb10_ld__inst0_writedata(local_avm_aspace40_writedata[0][0]),
      .avm_local_bb10_ld__inst0_byteenable(local_avm_aspace40_byteenable[0][0]),
      .avm_local_bb10_ld__inst0_waitrequest(local_avm_aspace40_waitrequest[0][0]),
      .avm_local_bb10_ld__inst0_readdata(local_avm_aspace40_readdata[0][0]),
      .avm_local_bb10_ld__inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][0]),
      .avm_local_bb10_ld__inst0_writeack(local_avm_aspace40_writeack[0][0]),
      // AVM avm_local_bb10_ld__u34_inst0
      .avm_local_bb10_ld__u34_inst0_enable(local_avm_aspace40_enable[0][1]),
      .avm_local_bb10_ld__u34_inst0_read(local_avm_aspace40_read[0][1]),
      .avm_local_bb10_ld__u34_inst0_write(local_avm_aspace40_write[0][1]),
      .avm_local_bb10_ld__u34_inst0_burstcount(local_avm_aspace40_burstcount[0][1]),
      .avm_local_bb10_ld__u34_inst0_address(local_avm_aspace40_address[0][1]),
      .avm_local_bb10_ld__u34_inst0_writedata(local_avm_aspace40_writedata[0][1]),
      .avm_local_bb10_ld__u34_inst0_byteenable(local_avm_aspace40_byteenable[0][1]),
      .avm_local_bb10_ld__u34_inst0_waitrequest(local_avm_aspace40_waitrequest[0][1]),
      .avm_local_bb10_ld__u34_inst0_readdata(local_avm_aspace40_readdata[0][1]),
      .avm_local_bb10_ld__u34_inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][1]),
      .avm_local_bb10_ld__u34_inst0_writeack(local_avm_aspace40_writeack[0][1]),
      // AVM avm_local_bb10_ld__u35_inst0
      .avm_local_bb10_ld__u35_inst0_enable(local_avm_aspace40_enable[0][2]),
      .avm_local_bb10_ld__u35_inst0_read(local_avm_aspace40_read[0][2]),
      .avm_local_bb10_ld__u35_inst0_write(local_avm_aspace40_write[0][2]),
      .avm_local_bb10_ld__u35_inst0_burstcount(local_avm_aspace40_burstcount[0][2]),
      .avm_local_bb10_ld__u35_inst0_address(local_avm_aspace40_address[0][2]),
      .avm_local_bb10_ld__u35_inst0_writedata(local_avm_aspace40_writedata[0][2]),
      .avm_local_bb10_ld__u35_inst0_byteenable(local_avm_aspace40_byteenable[0][2]),
      .avm_local_bb10_ld__u35_inst0_waitrequest(local_avm_aspace40_waitrequest[0][2]),
      .avm_local_bb10_ld__u35_inst0_readdata(local_avm_aspace40_readdata[0][2]),
      .avm_local_bb10_ld__u35_inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][2]),
      .avm_local_bb10_ld__u35_inst0_writeack(local_avm_aspace40_writeack[0][2]),
      // AVM avm_local_bb11_ld__1281_inst0
      .avm_local_bb11_ld__1281_inst0_enable(local_avm_aspace40_enable[0][3]),
      .avm_local_bb11_ld__1281_inst0_read(local_avm_aspace40_read[0][3]),
      .avm_local_bb11_ld__1281_inst0_write(local_avm_aspace40_write[0][3]),
      .avm_local_bb11_ld__1281_inst0_burstcount(local_avm_aspace40_burstcount[0][3]),
      .avm_local_bb11_ld__1281_inst0_address(local_avm_aspace40_address[0][3]),
      .avm_local_bb11_ld__1281_inst0_writedata(local_avm_aspace40_writedata[0][3]),
      .avm_local_bb11_ld__1281_inst0_byteenable(local_avm_aspace40_byteenable[0][3]),
      .avm_local_bb11_ld__1281_inst0_waitrequest(local_avm_aspace40_waitrequest[0][3]),
      .avm_local_bb11_ld__1281_inst0_readdata(local_avm_aspace40_readdata[0][3]),
      .avm_local_bb11_ld__1281_inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][3]),
      .avm_local_bb11_ld__1281_inst0_writeack(local_avm_aspace40_writeack[0][3]),
      // AVM avm_local_bb11_ld__u41_inst0
      .avm_local_bb11_ld__u41_inst0_enable(local_avm_aspace40_enable[0][4]),
      .avm_local_bb11_ld__u41_inst0_read(local_avm_aspace40_read[0][4]),
      .avm_local_bb11_ld__u41_inst0_write(local_avm_aspace40_write[0][4]),
      .avm_local_bb11_ld__u41_inst0_burstcount(local_avm_aspace40_burstcount[0][4]),
      .avm_local_bb11_ld__u41_inst0_address(local_avm_aspace40_address[0][4]),
      .avm_local_bb11_ld__u41_inst0_writedata(local_avm_aspace40_writedata[0][4]),
      .avm_local_bb11_ld__u41_inst0_byteenable(local_avm_aspace40_byteenable[0][4]),
      .avm_local_bb11_ld__u41_inst0_waitrequest(local_avm_aspace40_waitrequest[0][4]),
      .avm_local_bb11_ld__u41_inst0_readdata(local_avm_aspace40_readdata[0][4]),
      .avm_local_bb11_ld__u41_inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][4]),
      .avm_local_bb11_ld__u41_inst0_writeack(local_avm_aspace40_writeack[0][4]),
      // AVM avm_local_bb11_ld__u42_inst0
      .avm_local_bb11_ld__u42_inst0_enable(local_avm_aspace40_enable[0][5]),
      .avm_local_bb11_ld__u42_inst0_read(local_avm_aspace40_read[0][5]),
      .avm_local_bb11_ld__u42_inst0_write(local_avm_aspace40_write[0][5]),
      .avm_local_bb11_ld__u42_inst0_burstcount(local_avm_aspace40_burstcount[0][5]),
      .avm_local_bb11_ld__u42_inst0_address(local_avm_aspace40_address[0][5]),
      .avm_local_bb11_ld__u42_inst0_writedata(local_avm_aspace40_writedata[0][5]),
      .avm_local_bb11_ld__u42_inst0_byteenable(local_avm_aspace40_byteenable[0][5]),
      .avm_local_bb11_ld__u42_inst0_waitrequest(local_avm_aspace40_waitrequest[0][5]),
      .avm_local_bb11_ld__u42_inst0_readdata(local_avm_aspace40_readdata[0][5]),
      .avm_local_bb11_ld__u42_inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][5]),
      .avm_local_bb11_ld__u42_inst0_writeack(local_avm_aspace40_writeack[0][5]),
      // AVM avm_local_bb19_ld__u99_inst0
      .avm_local_bb19_ld__u99_inst0_enable(local_avm_aspace40_enable[0][6]),
      .avm_local_bb19_ld__u99_inst0_read(local_avm_aspace40_read[0][6]),
      .avm_local_bb19_ld__u99_inst0_write(local_avm_aspace40_write[0][6]),
      .avm_local_bb19_ld__u99_inst0_burstcount(local_avm_aspace40_burstcount[0][6]),
      .avm_local_bb19_ld__u99_inst0_address(local_avm_aspace40_address[0][6]),
      .avm_local_bb19_ld__u99_inst0_writedata(local_avm_aspace40_writedata[0][6]),
      .avm_local_bb19_ld__u99_inst0_byteenable(local_avm_aspace40_byteenable[0][6]),
      .avm_local_bb19_ld__u99_inst0_waitrequest(local_avm_aspace40_waitrequest[0][6]),
      .avm_local_bb19_ld__u99_inst0_readdata(local_avm_aspace40_readdata[0][6]),
      .avm_local_bb19_ld__u99_inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][6]),
      .avm_local_bb19_ld__u99_inst0_writeack(local_avm_aspace40_writeack[0][6]),
      // AVM avm_local_bb20_st_c0_exe1423_inst0
      .avm_local_bb20_st_c0_exe1423_inst0_enable(local_avm_aspace40_enable[0][7]),
      .avm_local_bb20_st_c0_exe1423_inst0_read(local_avm_aspace40_read[0][7]),
      .avm_local_bb20_st_c0_exe1423_inst0_write(local_avm_aspace40_write[0][7]),
      .avm_local_bb20_st_c0_exe1423_inst0_burstcount(local_avm_aspace40_burstcount[0][7]),
      .avm_local_bb20_st_c0_exe1423_inst0_address(local_avm_aspace40_address[0][7]),
      .avm_local_bb20_st_c0_exe1423_inst0_writedata(local_avm_aspace40_writedata[0][7]),
      .avm_local_bb20_st_c0_exe1423_inst0_byteenable(local_avm_aspace40_byteenable[0][7]),
      .avm_local_bb20_st_c0_exe1423_inst0_waitrequest(local_avm_aspace40_waitrequest[0][7]),
      .avm_local_bb20_st_c0_exe1423_inst0_readdata(local_avm_aspace40_readdata[0][7]),
      .avm_local_bb20_st_c0_exe1423_inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][7]),
      .avm_local_bb20_st_c0_exe1423_inst0_writeack(local_avm_aspace40_writeack[0][7]),
      // AVM avm_local_bb21_ld__inst0
      .avm_local_bb21_ld__inst0_enable(local_avm_aspace40_enable[0][8]),
      .avm_local_bb21_ld__inst0_read(local_avm_aspace40_read[0][8]),
      .avm_local_bb21_ld__inst0_write(local_avm_aspace40_write[0][8]),
      .avm_local_bb21_ld__inst0_burstcount(local_avm_aspace40_burstcount[0][8]),
      .avm_local_bb21_ld__inst0_address(local_avm_aspace40_address[0][8]),
      .avm_local_bb21_ld__inst0_writedata(local_avm_aspace40_writedata[0][8]),
      .avm_local_bb21_ld__inst0_byteenable(local_avm_aspace40_byteenable[0][8]),
      .avm_local_bb21_ld__inst0_waitrequest(local_avm_aspace40_waitrequest[0][8]),
      .avm_local_bb21_ld__inst0_readdata(local_avm_aspace40_readdata[0][8]),
      .avm_local_bb21_ld__inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][8]),
      .avm_local_bb21_ld__inst0_writeack(local_avm_aspace40_writeack[0][8]),
      // AVM avm_local_bb21_ld__u103_inst0
      .avm_local_bb21_ld__u103_inst0_enable(local_avm_aspace40_enable[0][9]),
      .avm_local_bb21_ld__u103_inst0_read(local_avm_aspace40_read[0][9]),
      .avm_local_bb21_ld__u103_inst0_write(local_avm_aspace40_write[0][9]),
      .avm_local_bb21_ld__u103_inst0_burstcount(local_avm_aspace40_burstcount[0][9]),
      .avm_local_bb21_ld__u103_inst0_address(local_avm_aspace40_address[0][9]),
      .avm_local_bb21_ld__u103_inst0_writedata(local_avm_aspace40_writedata[0][9]),
      .avm_local_bb21_ld__u103_inst0_byteenable(local_avm_aspace40_byteenable[0][9]),
      .avm_local_bb21_ld__u103_inst0_waitrequest(local_avm_aspace40_waitrequest[0][9]),
      .avm_local_bb21_ld__u103_inst0_readdata(local_avm_aspace40_readdata[0][9]),
      .avm_local_bb21_ld__u103_inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][9]),
      .avm_local_bb21_ld__u103_inst0_writeack(local_avm_aspace40_writeack[0][9]),
      // AVM avm_local_bb21_ld__u104_inst0
      .avm_local_bb21_ld__u104_inst0_enable(local_avm_aspace40_enable[0][10]),
      .avm_local_bb21_ld__u104_inst0_read(local_avm_aspace40_read[0][10]),
      .avm_local_bb21_ld__u104_inst0_write(local_avm_aspace40_write[0][10]),
      .avm_local_bb21_ld__u104_inst0_burstcount(local_avm_aspace40_burstcount[0][10]),
      .avm_local_bb21_ld__u104_inst0_address(local_avm_aspace40_address[0][10]),
      .avm_local_bb21_ld__u104_inst0_writedata(local_avm_aspace40_writedata[0][10]),
      .avm_local_bb21_ld__u104_inst0_byteenable(local_avm_aspace40_byteenable[0][10]),
      .avm_local_bb21_ld__u104_inst0_waitrequest(local_avm_aspace40_waitrequest[0][10]),
      .avm_local_bb21_ld__u104_inst0_readdata(local_avm_aspace40_readdata[0][10]),
      .avm_local_bb21_ld__u104_inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][10]),
      .avm_local_bb21_ld__u104_inst0_writeack(local_avm_aspace40_writeack[0][10]),
      // AVM avm_local_bb22_ld__1365_inst0
      .avm_local_bb22_ld__1365_inst0_enable(local_avm_aspace40_enable[0][11]),
      .avm_local_bb22_ld__1365_inst0_read(local_avm_aspace40_read[0][11]),
      .avm_local_bb22_ld__1365_inst0_write(local_avm_aspace40_write[0][11]),
      .avm_local_bb22_ld__1365_inst0_burstcount(local_avm_aspace40_burstcount[0][11]),
      .avm_local_bb22_ld__1365_inst0_address(local_avm_aspace40_address[0][11]),
      .avm_local_bb22_ld__1365_inst0_writedata(local_avm_aspace40_writedata[0][11]),
      .avm_local_bb22_ld__1365_inst0_byteenable(local_avm_aspace40_byteenable[0][11]),
      .avm_local_bb22_ld__1365_inst0_waitrequest(local_avm_aspace40_waitrequest[0][11]),
      .avm_local_bb22_ld__1365_inst0_readdata(local_avm_aspace40_readdata[0][11]),
      .avm_local_bb22_ld__1365_inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][11]),
      .avm_local_bb22_ld__1365_inst0_writeack(local_avm_aspace40_writeack[0][11]),
      // AVM avm_local_bb22_ld__u110_inst0
      .avm_local_bb22_ld__u110_inst0_enable(local_avm_aspace40_enable[0][12]),
      .avm_local_bb22_ld__u110_inst0_read(local_avm_aspace40_read[0][12]),
      .avm_local_bb22_ld__u110_inst0_write(local_avm_aspace40_write[0][12]),
      .avm_local_bb22_ld__u110_inst0_burstcount(local_avm_aspace40_burstcount[0][12]),
      .avm_local_bb22_ld__u110_inst0_address(local_avm_aspace40_address[0][12]),
      .avm_local_bb22_ld__u110_inst0_writedata(local_avm_aspace40_writedata[0][12]),
      .avm_local_bb22_ld__u110_inst0_byteenable(local_avm_aspace40_byteenable[0][12]),
      .avm_local_bb22_ld__u110_inst0_waitrequest(local_avm_aspace40_waitrequest[0][12]),
      .avm_local_bb22_ld__u110_inst0_readdata(local_avm_aspace40_readdata[0][12]),
      .avm_local_bb22_ld__u110_inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][12]),
      .avm_local_bb22_ld__u110_inst0_writeack(local_avm_aspace40_writeack[0][12]),
      // AVM avm_local_bb22_ld__u111_inst0
      .avm_local_bb22_ld__u111_inst0_enable(local_avm_aspace40_enable[0][13]),
      .avm_local_bb22_ld__u111_inst0_read(local_avm_aspace40_read[0][13]),
      .avm_local_bb22_ld__u111_inst0_write(local_avm_aspace40_write[0][13]),
      .avm_local_bb22_ld__u111_inst0_burstcount(local_avm_aspace40_burstcount[0][13]),
      .avm_local_bb22_ld__u111_inst0_address(local_avm_aspace40_address[0][13]),
      .avm_local_bb22_ld__u111_inst0_writedata(local_avm_aspace40_writedata[0][13]),
      .avm_local_bb22_ld__u111_inst0_byteenable(local_avm_aspace40_byteenable[0][13]),
      .avm_local_bb22_ld__u111_inst0_waitrequest(local_avm_aspace40_waitrequest[0][13]),
      .avm_local_bb22_ld__u111_inst0_readdata(local_avm_aspace40_readdata[0][13]),
      .avm_local_bb22_ld__u111_inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][13]),
      .avm_local_bb22_ld__u111_inst0_writeack(local_avm_aspace40_writeack[0][13]),
      // AVM avm_local_bb30_ld__inst0
      .avm_local_bb30_ld__inst0_enable(local_avm_aspace40_enable[0][14]),
      .avm_local_bb30_ld__inst0_read(local_avm_aspace40_read[0][14]),
      .avm_local_bb30_ld__inst0_write(local_avm_aspace40_write[0][14]),
      .avm_local_bb30_ld__inst0_burstcount(local_avm_aspace40_burstcount[0][14]),
      .avm_local_bb30_ld__inst0_address(local_avm_aspace40_address[0][14]),
      .avm_local_bb30_ld__inst0_writedata(local_avm_aspace40_writedata[0][14]),
      .avm_local_bb30_ld__inst0_byteenable(local_avm_aspace40_byteenable[0][14]),
      .avm_local_bb30_ld__inst0_waitrequest(local_avm_aspace40_waitrequest[0][14]),
      .avm_local_bb30_ld__inst0_readdata(local_avm_aspace40_readdata[0][14]),
      .avm_local_bb30_ld__inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][14]),
      .avm_local_bb30_ld__inst0_writeack(local_avm_aspace40_writeack[0][14]),
      // AVM avm_local_bb9_st_c0_exe1283_inst0
      .avm_local_bb9_st_c0_exe1283_inst0_enable(local_avm_aspace40_enable[0][15]),
      .avm_local_bb9_st_c0_exe1283_inst0_read(local_avm_aspace40_read[0][15]),
      .avm_local_bb9_st_c0_exe1283_inst0_write(local_avm_aspace40_write[0][15]),
      .avm_local_bb9_st_c0_exe1283_inst0_burstcount(local_avm_aspace40_burstcount[0][15]),
      .avm_local_bb9_st_c0_exe1283_inst0_address(local_avm_aspace40_address[0][15]),
      .avm_local_bb9_st_c0_exe1283_inst0_writedata(local_avm_aspace40_writedata[0][15]),
      .avm_local_bb9_st_c0_exe1283_inst0_byteenable(local_avm_aspace40_byteenable[0][15]),
      .avm_local_bb9_st_c0_exe1283_inst0_waitrequest(local_avm_aspace40_waitrequest[0][15]),
      .avm_local_bb9_st_c0_exe1283_inst0_readdata(local_avm_aspace40_readdata[0][15]),
      .avm_local_bb9_st_c0_exe1283_inst0_readdatavalid(local_avm_aspace40_readdatavalid[0][15]),
      .avm_local_bb9_st_c0_exe1283_inst0_writeack(local_avm_aspace40_writeack[0][15]),
      // AVM avm_local_bb10_st__inst0
      .avm_local_bb10_st__inst0_enable(local_avm_aspace41_enable[0][0]),
      .avm_local_bb10_st__inst0_read(local_avm_aspace41_read[0][0]),
      .avm_local_bb10_st__inst0_write(local_avm_aspace41_write[0][0]),
      .avm_local_bb10_st__inst0_burstcount(local_avm_aspace41_burstcount[0][0]),
      .avm_local_bb10_st__inst0_address(local_avm_aspace41_address[0][0]),
      .avm_local_bb10_st__inst0_writedata(local_avm_aspace41_writedata[0][0]),
      .avm_local_bb10_st__inst0_byteenable(local_avm_aspace41_byteenable[0][0]),
      .avm_local_bb10_st__inst0_waitrequest(local_avm_aspace41_waitrequest[0][0]),
      .avm_local_bb10_st__inst0_readdata(local_avm_aspace41_readdata[0][0]),
      .avm_local_bb10_st__inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][0]),
      .avm_local_bb10_st__inst0_writeack(local_avm_aspace41_writeack[0][0]),
      // AVM avm_local_bb12_ld__inst0
      .avm_local_bb12_ld__inst0_enable(local_avm_aspace41_enable[0][1]),
      .avm_local_bb12_ld__inst0_read(local_avm_aspace41_read[0][1]),
      .avm_local_bb12_ld__inst0_write(local_avm_aspace41_write[0][1]),
      .avm_local_bb12_ld__inst0_burstcount(local_avm_aspace41_burstcount[0][1]),
      .avm_local_bb12_ld__inst0_address(local_avm_aspace41_address[0][1]),
      .avm_local_bb12_ld__inst0_writedata(local_avm_aspace41_writedata[0][1]),
      .avm_local_bb12_ld__inst0_byteenable(local_avm_aspace41_byteenable[0][1]),
      .avm_local_bb12_ld__inst0_waitrequest(local_avm_aspace41_waitrequest[0][1]),
      .avm_local_bb12_ld__inst0_readdata(local_avm_aspace41_readdata[0][1]),
      .avm_local_bb12_ld__inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][1]),
      .avm_local_bb12_ld__inst0_writeack(local_avm_aspace41_writeack[0][1]),
      // AVM avm_local_bb14_st_c1_exe1343_inst0
      .avm_local_bb14_st_c1_exe1343_inst0_enable(local_avm_aspace41_enable[0][2]),
      .avm_local_bb14_st_c1_exe1343_inst0_read(local_avm_aspace41_read[0][2]),
      .avm_local_bb14_st_c1_exe1343_inst0_write(local_avm_aspace41_write[0][2]),
      .avm_local_bb14_st_c1_exe1343_inst0_burstcount(local_avm_aspace41_burstcount[0][2]),
      .avm_local_bb14_st_c1_exe1343_inst0_address(local_avm_aspace41_address[0][2]),
      .avm_local_bb14_st_c1_exe1343_inst0_writedata(local_avm_aspace41_writedata[0][2]),
      .avm_local_bb14_st_c1_exe1343_inst0_byteenable(local_avm_aspace41_byteenable[0][2]),
      .avm_local_bb14_st_c1_exe1343_inst0_waitrequest(local_avm_aspace41_waitrequest[0][2]),
      .avm_local_bb14_st_c1_exe1343_inst0_readdata(local_avm_aspace41_readdata[0][2]),
      .avm_local_bb14_st_c1_exe1343_inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][2]),
      .avm_local_bb14_st_c1_exe1343_inst0_writeack(local_avm_aspace41_writeack[0][2]),
      // AVM avm_local_bb15_ld__u90_inst0
      .avm_local_bb15_ld__u90_inst0_enable(local_avm_aspace41_enable[0][3]),
      .avm_local_bb15_ld__u90_inst0_read(local_avm_aspace41_read[0][3]),
      .avm_local_bb15_ld__u90_inst0_write(local_avm_aspace41_write[0][3]),
      .avm_local_bb15_ld__u90_inst0_burstcount(local_avm_aspace41_burstcount[0][3]),
      .avm_local_bb15_ld__u90_inst0_address(local_avm_aspace41_address[0][3]),
      .avm_local_bb15_ld__u90_inst0_writedata(local_avm_aspace41_writedata[0][3]),
      .avm_local_bb15_ld__u90_inst0_byteenable(local_avm_aspace41_byteenable[0][3]),
      .avm_local_bb15_ld__u90_inst0_waitrequest(local_avm_aspace41_waitrequest[0][3]),
      .avm_local_bb15_ld__u90_inst0_readdata(local_avm_aspace41_readdata[0][3]),
      .avm_local_bb15_ld__u90_inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][3]),
      .avm_local_bb15_ld__u90_inst0_writeack(local_avm_aspace41_writeack[0][3]),
      // AVM avm_local_bb15_st_c1_exe1397_inst0
      .avm_local_bb15_st_c1_exe1397_inst0_enable(local_avm_aspace41_enable[0][4]),
      .avm_local_bb15_st_c1_exe1397_inst0_read(local_avm_aspace41_read[0][4]),
      .avm_local_bb15_st_c1_exe1397_inst0_write(local_avm_aspace41_write[0][4]),
      .avm_local_bb15_st_c1_exe1397_inst0_burstcount(local_avm_aspace41_burstcount[0][4]),
      .avm_local_bb15_st_c1_exe1397_inst0_address(local_avm_aspace41_address[0][4]),
      .avm_local_bb15_st_c1_exe1397_inst0_writedata(local_avm_aspace41_writedata[0][4]),
      .avm_local_bb15_st_c1_exe1397_inst0_byteenable(local_avm_aspace41_byteenable[0][4]),
      .avm_local_bb15_st_c1_exe1397_inst0_waitrequest(local_avm_aspace41_waitrequest[0][4]),
      .avm_local_bb15_st_c1_exe1397_inst0_readdata(local_avm_aspace41_readdata[0][4]),
      .avm_local_bb15_st_c1_exe1397_inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][4]),
      .avm_local_bb15_st_c1_exe1397_inst0_writeack(local_avm_aspace41_writeack[0][4]),
      // AVM avm_local_bb16_ld__inst0
      .avm_local_bb16_ld__inst0_enable(local_avm_aspace41_enable[0][5]),
      .avm_local_bb16_ld__inst0_read(local_avm_aspace41_read[0][5]),
      .avm_local_bb16_ld__inst0_write(local_avm_aspace41_write[0][5]),
      .avm_local_bb16_ld__inst0_burstcount(local_avm_aspace41_burstcount[0][5]),
      .avm_local_bb16_ld__inst0_address(local_avm_aspace41_address[0][5]),
      .avm_local_bb16_ld__inst0_writedata(local_avm_aspace41_writedata[0][5]),
      .avm_local_bb16_ld__inst0_byteenable(local_avm_aspace41_byteenable[0][5]),
      .avm_local_bb16_ld__inst0_waitrequest(local_avm_aspace41_waitrequest[0][5]),
      .avm_local_bb16_ld__inst0_readdata(local_avm_aspace41_readdata[0][5]),
      .avm_local_bb16_ld__inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][5]),
      .avm_local_bb16_ld__inst0_writeack(local_avm_aspace41_writeack[0][5]),
      // AVM avm_local_bb17_ld__inst0
      .avm_local_bb17_ld__inst0_enable(local_avm_aspace41_enable[0][6]),
      .avm_local_bb17_ld__inst0_read(local_avm_aspace41_read[0][6]),
      .avm_local_bb17_ld__inst0_write(local_avm_aspace41_write[0][6]),
      .avm_local_bb17_ld__inst0_burstcount(local_avm_aspace41_burstcount[0][6]),
      .avm_local_bb17_ld__inst0_address(local_avm_aspace41_address[0][6]),
      .avm_local_bb17_ld__inst0_writedata(local_avm_aspace41_writedata[0][6]),
      .avm_local_bb17_ld__inst0_byteenable(local_avm_aspace41_byteenable[0][6]),
      .avm_local_bb17_ld__inst0_waitrequest(local_avm_aspace41_waitrequest[0][6]),
      .avm_local_bb17_ld__inst0_readdata(local_avm_aspace41_readdata[0][6]),
      .avm_local_bb17_ld__inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][6]),
      .avm_local_bb17_ld__inst0_writeack(local_avm_aspace41_writeack[0][6]),
      // AVM avm_local_bb21_st__inst0
      .avm_local_bb21_st__inst0_enable(local_avm_aspace41_enable[0][7]),
      .avm_local_bb21_st__inst0_read(local_avm_aspace41_read[0][7]),
      .avm_local_bb21_st__inst0_write(local_avm_aspace41_write[0][7]),
      .avm_local_bb21_st__inst0_burstcount(local_avm_aspace41_burstcount[0][7]),
      .avm_local_bb21_st__inst0_address(local_avm_aspace41_address[0][7]),
      .avm_local_bb21_st__inst0_writedata(local_avm_aspace41_writedata[0][7]),
      .avm_local_bb21_st__inst0_byteenable(local_avm_aspace41_byteenable[0][7]),
      .avm_local_bb21_st__inst0_waitrequest(local_avm_aspace41_waitrequest[0][7]),
      .avm_local_bb21_st__inst0_readdata(local_avm_aspace41_readdata[0][7]),
      .avm_local_bb21_st__inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][7]),
      .avm_local_bb21_st__inst0_writeack(local_avm_aspace41_writeack[0][7]),
      // AVM avm_local_bb23_ld__inst0
      .avm_local_bb23_ld__inst0_enable(local_avm_aspace41_enable[0][8]),
      .avm_local_bb23_ld__inst0_read(local_avm_aspace41_read[0][8]),
      .avm_local_bb23_ld__inst0_write(local_avm_aspace41_write[0][8]),
      .avm_local_bb23_ld__inst0_burstcount(local_avm_aspace41_burstcount[0][8]),
      .avm_local_bb23_ld__inst0_address(local_avm_aspace41_address[0][8]),
      .avm_local_bb23_ld__inst0_writedata(local_avm_aspace41_writedata[0][8]),
      .avm_local_bb23_ld__inst0_byteenable(local_avm_aspace41_byteenable[0][8]),
      .avm_local_bb23_ld__inst0_waitrequest(local_avm_aspace41_waitrequest[0][8]),
      .avm_local_bb23_ld__inst0_readdata(local_avm_aspace41_readdata[0][8]),
      .avm_local_bb23_ld__inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][8]),
      .avm_local_bb23_ld__inst0_writeack(local_avm_aspace41_writeack[0][8]),
      // AVM avm_local_bb25_st_c1_exe1617_inst0
      .avm_local_bb25_st_c1_exe1617_inst0_enable(local_avm_aspace41_enable[0][9]),
      .avm_local_bb25_st_c1_exe1617_inst0_read(local_avm_aspace41_read[0][9]),
      .avm_local_bb25_st_c1_exe1617_inst0_write(local_avm_aspace41_write[0][9]),
      .avm_local_bb25_st_c1_exe1617_inst0_burstcount(local_avm_aspace41_burstcount[0][9]),
      .avm_local_bb25_st_c1_exe1617_inst0_address(local_avm_aspace41_address[0][9]),
      .avm_local_bb25_st_c1_exe1617_inst0_writedata(local_avm_aspace41_writedata[0][9]),
      .avm_local_bb25_st_c1_exe1617_inst0_byteenable(local_avm_aspace41_byteenable[0][9]),
      .avm_local_bb25_st_c1_exe1617_inst0_waitrequest(local_avm_aspace41_waitrequest[0][9]),
      .avm_local_bb25_st_c1_exe1617_inst0_readdata(local_avm_aspace41_readdata[0][9]),
      .avm_local_bb25_st_c1_exe1617_inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][9]),
      .avm_local_bb25_st_c1_exe1617_inst0_writeack(local_avm_aspace41_writeack[0][9]),
      // AVM avm_local_bb26_ld__u159_inst0
      .avm_local_bb26_ld__u159_inst0_enable(local_avm_aspace41_enable[0][10]),
      .avm_local_bb26_ld__u159_inst0_read(local_avm_aspace41_read[0][10]),
      .avm_local_bb26_ld__u159_inst0_write(local_avm_aspace41_write[0][10]),
      .avm_local_bb26_ld__u159_inst0_burstcount(local_avm_aspace41_burstcount[0][10]),
      .avm_local_bb26_ld__u159_inst0_address(local_avm_aspace41_address[0][10]),
      .avm_local_bb26_ld__u159_inst0_writedata(local_avm_aspace41_writedata[0][10]),
      .avm_local_bb26_ld__u159_inst0_byteenable(local_avm_aspace41_byteenable[0][10]),
      .avm_local_bb26_ld__u159_inst0_waitrequest(local_avm_aspace41_waitrequest[0][10]),
      .avm_local_bb26_ld__u159_inst0_readdata(local_avm_aspace41_readdata[0][10]),
      .avm_local_bb26_ld__u159_inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][10]),
      .avm_local_bb26_ld__u159_inst0_writeack(local_avm_aspace41_writeack[0][10]),
      // AVM avm_local_bb26_st_c1_exe1681_inst0
      .avm_local_bb26_st_c1_exe1681_inst0_enable(local_avm_aspace41_enable[0][11]),
      .avm_local_bb26_st_c1_exe1681_inst0_read(local_avm_aspace41_read[0][11]),
      .avm_local_bb26_st_c1_exe1681_inst0_write(local_avm_aspace41_write[0][11]),
      .avm_local_bb26_st_c1_exe1681_inst0_burstcount(local_avm_aspace41_burstcount[0][11]),
      .avm_local_bb26_st_c1_exe1681_inst0_address(local_avm_aspace41_address[0][11]),
      .avm_local_bb26_st_c1_exe1681_inst0_writedata(local_avm_aspace41_writedata[0][11]),
      .avm_local_bb26_st_c1_exe1681_inst0_byteenable(local_avm_aspace41_byteenable[0][11]),
      .avm_local_bb26_st_c1_exe1681_inst0_waitrequest(local_avm_aspace41_waitrequest[0][11]),
      .avm_local_bb26_st_c1_exe1681_inst0_readdata(local_avm_aspace41_readdata[0][11]),
      .avm_local_bb26_st_c1_exe1681_inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][11]),
      .avm_local_bb26_st_c1_exe1681_inst0_writeack(local_avm_aspace41_writeack[0][11]),
      // AVM avm_local_bb27_ld__inst0
      .avm_local_bb27_ld__inst0_enable(local_avm_aspace41_enable[0][12]),
      .avm_local_bb27_ld__inst0_read(local_avm_aspace41_read[0][12]),
      .avm_local_bb27_ld__inst0_write(local_avm_aspace41_write[0][12]),
      .avm_local_bb27_ld__inst0_burstcount(local_avm_aspace41_burstcount[0][12]),
      .avm_local_bb27_ld__inst0_address(local_avm_aspace41_address[0][12]),
      .avm_local_bb27_ld__inst0_writedata(local_avm_aspace41_writedata[0][12]),
      .avm_local_bb27_ld__inst0_byteenable(local_avm_aspace41_byteenable[0][12]),
      .avm_local_bb27_ld__inst0_waitrequest(local_avm_aspace41_waitrequest[0][12]),
      .avm_local_bb27_ld__inst0_readdata(local_avm_aspace41_readdata[0][12]),
      .avm_local_bb27_ld__inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][12]),
      .avm_local_bb27_ld__inst0_writeack(local_avm_aspace41_writeack[0][12]),
      // AVM avm_local_bb28_ld__inst0
      .avm_local_bb28_ld__inst0_enable(local_avm_aspace41_enable[0][13]),
      .avm_local_bb28_ld__inst0_read(local_avm_aspace41_read[0][13]),
      .avm_local_bb28_ld__inst0_write(local_avm_aspace41_write[0][13]),
      .avm_local_bb28_ld__inst0_burstcount(local_avm_aspace41_burstcount[0][13]),
      .avm_local_bb28_ld__inst0_address(local_avm_aspace41_address[0][13]),
      .avm_local_bb28_ld__inst0_writedata(local_avm_aspace41_writedata[0][13]),
      .avm_local_bb28_ld__inst0_byteenable(local_avm_aspace41_byteenable[0][13]),
      .avm_local_bb28_ld__inst0_waitrequest(local_avm_aspace41_waitrequest[0][13]),
      .avm_local_bb28_ld__inst0_readdata(local_avm_aspace41_readdata[0][13]),
      .avm_local_bb28_ld__inst0_readdatavalid(local_avm_aspace41_readdatavalid[0][13]),
      .avm_local_bb28_ld__inst0_writeack(local_avm_aspace41_writeack[0][13]),
      // AVM avm_local_bb11_ld__u45_inst0
      .avm_local_bb11_ld__u45_inst0_enable(local_avm_aspace42_enable[0][0]),
      .avm_local_bb11_ld__u45_inst0_read(local_avm_aspace42_read[0][0]),
      .avm_local_bb11_ld__u45_inst0_write(local_avm_aspace42_write[0][0]),
      .avm_local_bb11_ld__u45_inst0_burstcount(local_avm_aspace42_burstcount[0][0]),
      .avm_local_bb11_ld__u45_inst0_address(local_avm_aspace42_address[0][0]),
      .avm_local_bb11_ld__u45_inst0_writedata(local_avm_aspace42_writedata[0][0]),
      .avm_local_bb11_ld__u45_inst0_byteenable(local_avm_aspace42_byteenable[0][0]),
      .avm_local_bb11_ld__u45_inst0_waitrequest(local_avm_aspace42_waitrequest[0][0]),
      .avm_local_bb11_ld__u45_inst0_readdata(local_avm_aspace42_readdata[0][0]),
      .avm_local_bb11_ld__u45_inst0_readdatavalid(local_avm_aspace42_readdatavalid[0][0]),
      .avm_local_bb11_ld__u45_inst0_writeack(local_avm_aspace42_writeack[0][0]),
      // AVM avm_local_bb11_st_c0_exe1311_inst0
      .avm_local_bb11_st_c0_exe1311_inst0_enable(local_avm_aspace42_enable[0][1]),
      .avm_local_bb11_st_c0_exe1311_inst0_read(local_avm_aspace42_read[0][1]),
      .avm_local_bb11_st_c0_exe1311_inst0_write(local_avm_aspace42_write[0][1]),
      .avm_local_bb11_st_c0_exe1311_inst0_burstcount(local_avm_aspace42_burstcount[0][1]),
      .avm_local_bb11_st_c0_exe1311_inst0_address(local_avm_aspace42_address[0][1]),
      .avm_local_bb11_st_c0_exe1311_inst0_writedata(local_avm_aspace42_writedata[0][1]),
      .avm_local_bb11_st_c0_exe1311_inst0_byteenable(local_avm_aspace42_byteenable[0][1]),
      .avm_local_bb11_st_c0_exe1311_inst0_waitrequest(local_avm_aspace42_waitrequest[0][1]),
      .avm_local_bb11_st_c0_exe1311_inst0_readdata(local_avm_aspace42_readdata[0][1]),
      .avm_local_bb11_st_c0_exe1311_inst0_readdatavalid(local_avm_aspace42_readdatavalid[0][1]),
      .avm_local_bb11_st_c0_exe1311_inst0_writeack(local_avm_aspace42_writeack[0][1]),
      // AVM avm_local_bb13_ld__u52_inst0
      .avm_local_bb13_ld__u52_inst0_enable(local_avm_aspace42_enable[0][2]),
      .avm_local_bb13_ld__u52_inst0_read(local_avm_aspace42_read[0][2]),
      .avm_local_bb13_ld__u52_inst0_write(local_avm_aspace42_write[0][2]),
      .avm_local_bb13_ld__u52_inst0_burstcount(local_avm_aspace42_burstcount[0][2]),
      .avm_local_bb13_ld__u52_inst0_address(local_avm_aspace42_address[0][2]),
      .avm_local_bb13_ld__u52_inst0_writedata(local_avm_aspace42_writedata[0][2]),
      .avm_local_bb13_ld__u52_inst0_byteenable(local_avm_aspace42_byteenable[0][2]),
      .avm_local_bb13_ld__u52_inst0_waitrequest(local_avm_aspace42_waitrequest[0][2]),
      .avm_local_bb13_ld__u52_inst0_readdata(local_avm_aspace42_readdata[0][2]),
      .avm_local_bb13_ld__u52_inst0_readdatavalid(local_avm_aspace42_readdatavalid[0][2]),
      .avm_local_bb13_ld__u52_inst0_writeack(local_avm_aspace42_writeack[0][2]),
      // AVM avm_local_bb15_ld__inst0
      .avm_local_bb15_ld__inst0_enable(local_avm_aspace42_enable[0][3]),
      .avm_local_bb15_ld__inst0_read(local_avm_aspace42_read[0][3]),
      .avm_local_bb15_ld__inst0_write(local_avm_aspace42_write[0][3]),
      .avm_local_bb15_ld__inst0_burstcount(local_avm_aspace42_burstcount[0][3]),
      .avm_local_bb15_ld__inst0_address(local_avm_aspace42_address[0][3]),
      .avm_local_bb15_ld__inst0_writedata(local_avm_aspace42_writedata[0][3]),
      .avm_local_bb15_ld__inst0_byteenable(local_avm_aspace42_byteenable[0][3]),
      .avm_local_bb15_ld__inst0_waitrequest(local_avm_aspace42_waitrequest[0][3]),
      .avm_local_bb15_ld__inst0_readdata(local_avm_aspace42_readdata[0][3]),
      .avm_local_bb15_ld__inst0_readdatavalid(local_avm_aspace42_readdatavalid[0][3]),
      .avm_local_bb15_ld__inst0_writeack(local_avm_aspace42_writeack[0][3]),
      // AVM avm_local_bb15_ld__u82_inst0
      .avm_local_bb15_ld__u82_inst0_enable(local_avm_aspace42_enable[0][4]),
      .avm_local_bb15_ld__u82_inst0_read(local_avm_aspace42_read[0][4]),
      .avm_local_bb15_ld__u82_inst0_write(local_avm_aspace42_write[0][4]),
      .avm_local_bb15_ld__u82_inst0_burstcount(local_avm_aspace42_burstcount[0][4]),
      .avm_local_bb15_ld__u82_inst0_address(local_avm_aspace42_address[0][4]),
      .avm_local_bb15_ld__u82_inst0_writedata(local_avm_aspace42_writedata[0][4]),
      .avm_local_bb15_ld__u82_inst0_byteenable(local_avm_aspace42_byteenable[0][4]),
      .avm_local_bb15_ld__u82_inst0_waitrequest(local_avm_aspace42_waitrequest[0][4]),
      .avm_local_bb15_ld__u82_inst0_readdata(local_avm_aspace42_readdata[0][4]),
      .avm_local_bb15_ld__u82_inst0_readdatavalid(local_avm_aspace42_readdatavalid[0][4]),
      .avm_local_bb15_ld__u82_inst0_writeack(local_avm_aspace42_writeack[0][4]),
      // AVM avm_local_bb22_ld__u114_inst0
      .avm_local_bb22_ld__u114_inst0_enable(local_avm_aspace42_enable[0][5]),
      .avm_local_bb22_ld__u114_inst0_read(local_avm_aspace42_read[0][5]),
      .avm_local_bb22_ld__u114_inst0_write(local_avm_aspace42_write[0][5]),
      .avm_local_bb22_ld__u114_inst0_burstcount(local_avm_aspace42_burstcount[0][5]),
      .avm_local_bb22_ld__u114_inst0_address(local_avm_aspace42_address[0][5]),
      .avm_local_bb22_ld__u114_inst0_writedata(local_avm_aspace42_writedata[0][5]),
      .avm_local_bb22_ld__u114_inst0_byteenable(local_avm_aspace42_byteenable[0][5]),
      .avm_local_bb22_ld__u114_inst0_waitrequest(local_avm_aspace42_waitrequest[0][5]),
      .avm_local_bb22_ld__u114_inst0_readdata(local_avm_aspace42_readdata[0][5]),
      .avm_local_bb22_ld__u114_inst0_readdatavalid(local_avm_aspace42_readdatavalid[0][5]),
      .avm_local_bb22_ld__u114_inst0_writeack(local_avm_aspace42_writeack[0][5]),
      // AVM avm_local_bb22_st_c0_exe1481_inst0
      .avm_local_bb22_st_c0_exe1481_inst0_enable(local_avm_aspace42_enable[0][6]),
      .avm_local_bb22_st_c0_exe1481_inst0_read(local_avm_aspace42_read[0][6]),
      .avm_local_bb22_st_c0_exe1481_inst0_write(local_avm_aspace42_write[0][6]),
      .avm_local_bb22_st_c0_exe1481_inst0_burstcount(local_avm_aspace42_burstcount[0][6]),
      .avm_local_bb22_st_c0_exe1481_inst0_address(local_avm_aspace42_address[0][6]),
      .avm_local_bb22_st_c0_exe1481_inst0_writedata(local_avm_aspace42_writedata[0][6]),
      .avm_local_bb22_st_c0_exe1481_inst0_byteenable(local_avm_aspace42_byteenable[0][6]),
      .avm_local_bb22_st_c0_exe1481_inst0_waitrequest(local_avm_aspace42_waitrequest[0][6]),
      .avm_local_bb22_st_c0_exe1481_inst0_readdata(local_avm_aspace42_readdata[0][6]),
      .avm_local_bb22_st_c0_exe1481_inst0_readdatavalid(local_avm_aspace42_readdatavalid[0][6]),
      .avm_local_bb22_st_c0_exe1481_inst0_writeack(local_avm_aspace42_writeack[0][6]),
      // AVM avm_local_bb24_ld__inst0
      .avm_local_bb24_ld__inst0_enable(local_avm_aspace42_enable[0][7]),
      .avm_local_bb24_ld__inst0_read(local_avm_aspace42_read[0][7]),
      .avm_local_bb24_ld__inst0_write(local_avm_aspace42_write[0][7]),
      .avm_local_bb24_ld__inst0_burstcount(local_avm_aspace42_burstcount[0][7]),
      .avm_local_bb24_ld__inst0_address(local_avm_aspace42_address[0][7]),
      .avm_local_bb24_ld__inst0_writedata(local_avm_aspace42_writedata[0][7]),
      .avm_local_bb24_ld__inst0_byteenable(local_avm_aspace42_byteenable[0][7]),
      .avm_local_bb24_ld__inst0_waitrequest(local_avm_aspace42_waitrequest[0][7]),
      .avm_local_bb24_ld__inst0_readdata(local_avm_aspace42_readdata[0][7]),
      .avm_local_bb24_ld__inst0_readdatavalid(local_avm_aspace42_readdatavalid[0][7]),
      .avm_local_bb24_ld__inst0_writeack(local_avm_aspace42_writeack[0][7]),
      // AVM avm_local_bb26_ld__inst0
      .avm_local_bb26_ld__inst0_enable(local_avm_aspace42_enable[0][8]),
      .avm_local_bb26_ld__inst0_read(local_avm_aspace42_read[0][8]),
      .avm_local_bb26_ld__inst0_write(local_avm_aspace42_write[0][8]),
      .avm_local_bb26_ld__inst0_burstcount(local_avm_aspace42_burstcount[0][8]),
      .avm_local_bb26_ld__inst0_address(local_avm_aspace42_address[0][8]),
      .avm_local_bb26_ld__inst0_writedata(local_avm_aspace42_writedata[0][8]),
      .avm_local_bb26_ld__inst0_byteenable(local_avm_aspace42_byteenable[0][8]),
      .avm_local_bb26_ld__inst0_waitrequest(local_avm_aspace42_waitrequest[0][8]),
      .avm_local_bb26_ld__inst0_readdata(local_avm_aspace42_readdata[0][8]),
      .avm_local_bb26_ld__inst0_readdatavalid(local_avm_aspace42_readdatavalid[0][8]),
      .avm_local_bb26_ld__inst0_writeack(local_avm_aspace42_writeack[0][8]),
      // AVM avm_local_bb26_ld__u151_inst0
      .avm_local_bb26_ld__u151_inst0_enable(local_avm_aspace42_enable[0][9]),
      .avm_local_bb26_ld__u151_inst0_read(local_avm_aspace42_read[0][9]),
      .avm_local_bb26_ld__u151_inst0_write(local_avm_aspace42_write[0][9]),
      .avm_local_bb26_ld__u151_inst0_burstcount(local_avm_aspace42_burstcount[0][9]),
      .avm_local_bb26_ld__u151_inst0_address(local_avm_aspace42_address[0][9]),
      .avm_local_bb26_ld__u151_inst0_writedata(local_avm_aspace42_writedata[0][9]),
      .avm_local_bb26_ld__u151_inst0_byteenable(local_avm_aspace42_byteenable[0][9]),
      .avm_local_bb26_ld__u151_inst0_waitrequest(local_avm_aspace42_waitrequest[0][9]),
      .avm_local_bb26_ld__u151_inst0_readdata(local_avm_aspace42_readdata[0][9]),
      .avm_local_bb26_ld__u151_inst0_readdatavalid(local_avm_aspace42_readdatavalid[0][9]),
      .avm_local_bb26_ld__u151_inst0_writeack(local_avm_aspace42_writeack[0][9]),
      // AVM avm_local_bb11_ld__u44_inst0
      .avm_local_bb11_ld__u44_inst0_enable(local_avm_aspace43_enable[0][0]),
      .avm_local_bb11_ld__u44_inst0_read(local_avm_aspace43_read[0][0]),
      .avm_local_bb11_ld__u44_inst0_write(local_avm_aspace43_write[0][0]),
      .avm_local_bb11_ld__u44_inst0_burstcount(local_avm_aspace43_burstcount[0][0]),
      .avm_local_bb11_ld__u44_inst0_address(local_avm_aspace43_address[0][0]),
      .avm_local_bb11_ld__u44_inst0_writedata(local_avm_aspace43_writedata[0][0]),
      .avm_local_bb11_ld__u44_inst0_byteenable(local_avm_aspace43_byteenable[0][0]),
      .avm_local_bb11_ld__u44_inst0_waitrequest(local_avm_aspace43_waitrequest[0][0]),
      .avm_local_bb11_ld__u44_inst0_readdata(local_avm_aspace43_readdata[0][0]),
      .avm_local_bb11_ld__u44_inst0_readdatavalid(local_avm_aspace43_readdatavalid[0][0]),
      .avm_local_bb11_ld__u44_inst0_writeack(local_avm_aspace43_writeack[0][0]),
      // AVM avm_local_bb11_st_c0_exe2312_inst0
      .avm_local_bb11_st_c0_exe2312_inst0_enable(local_avm_aspace43_enable[0][1]),
      .avm_local_bb11_st_c0_exe2312_inst0_read(local_avm_aspace43_read[0][1]),
      .avm_local_bb11_st_c0_exe2312_inst0_write(local_avm_aspace43_write[0][1]),
      .avm_local_bb11_st_c0_exe2312_inst0_burstcount(local_avm_aspace43_burstcount[0][1]),
      .avm_local_bb11_st_c0_exe2312_inst0_address(local_avm_aspace43_address[0][1]),
      .avm_local_bb11_st_c0_exe2312_inst0_writedata(local_avm_aspace43_writedata[0][1]),
      .avm_local_bb11_st_c0_exe2312_inst0_byteenable(local_avm_aspace43_byteenable[0][1]),
      .avm_local_bb11_st_c0_exe2312_inst0_waitrequest(local_avm_aspace43_waitrequest[0][1]),
      .avm_local_bb11_st_c0_exe2312_inst0_readdata(local_avm_aspace43_readdata[0][1]),
      .avm_local_bb11_st_c0_exe2312_inst0_readdatavalid(local_avm_aspace43_readdatavalid[0][1]),
      .avm_local_bb11_st_c0_exe2312_inst0_writeack(local_avm_aspace43_writeack[0][1]),
      // AVM avm_local_bb13_ld__u51_inst0
      .avm_local_bb13_ld__u51_inst0_enable(local_avm_aspace43_enable[0][2]),
      .avm_local_bb13_ld__u51_inst0_read(local_avm_aspace43_read[0][2]),
      .avm_local_bb13_ld__u51_inst0_write(local_avm_aspace43_write[0][2]),
      .avm_local_bb13_ld__u51_inst0_burstcount(local_avm_aspace43_burstcount[0][2]),
      .avm_local_bb13_ld__u51_inst0_address(local_avm_aspace43_address[0][2]),
      .avm_local_bb13_ld__u51_inst0_writedata(local_avm_aspace43_writedata[0][2]),
      .avm_local_bb13_ld__u51_inst0_byteenable(local_avm_aspace43_byteenable[0][2]),
      .avm_local_bb13_ld__u51_inst0_waitrequest(local_avm_aspace43_waitrequest[0][2]),
      .avm_local_bb13_ld__u51_inst0_readdata(local_avm_aspace43_readdata[0][2]),
      .avm_local_bb13_ld__u51_inst0_readdatavalid(local_avm_aspace43_readdatavalid[0][2]),
      .avm_local_bb13_ld__u51_inst0_writeack(local_avm_aspace43_writeack[0][2]),
      // AVM avm_local_bb15_ld__u80_inst0
      .avm_local_bb15_ld__u80_inst0_enable(local_avm_aspace43_enable[0][3]),
      .avm_local_bb15_ld__u80_inst0_read(local_avm_aspace43_read[0][3]),
      .avm_local_bb15_ld__u80_inst0_write(local_avm_aspace43_write[0][3]),
      .avm_local_bb15_ld__u80_inst0_burstcount(local_avm_aspace43_burstcount[0][3]),
      .avm_local_bb15_ld__u80_inst0_address(local_avm_aspace43_address[0][3]),
      .avm_local_bb15_ld__u80_inst0_writedata(local_avm_aspace43_writedata[0][3]),
      .avm_local_bb15_ld__u80_inst0_byteenable(local_avm_aspace43_byteenable[0][3]),
      .avm_local_bb15_ld__u80_inst0_waitrequest(local_avm_aspace43_waitrequest[0][3]),
      .avm_local_bb15_ld__u80_inst0_readdata(local_avm_aspace43_readdata[0][3]),
      .avm_local_bb15_ld__u80_inst0_readdatavalid(local_avm_aspace43_readdatavalid[0][3]),
      .avm_local_bb15_ld__u80_inst0_writeack(local_avm_aspace43_writeack[0][3]),
      // AVM avm_local_bb15_ld__u83_inst0
      .avm_local_bb15_ld__u83_inst0_enable(local_avm_aspace43_enable[0][4]),
      .avm_local_bb15_ld__u83_inst0_read(local_avm_aspace43_read[0][4]),
      .avm_local_bb15_ld__u83_inst0_write(local_avm_aspace43_write[0][4]),
      .avm_local_bb15_ld__u83_inst0_burstcount(local_avm_aspace43_burstcount[0][4]),
      .avm_local_bb15_ld__u83_inst0_address(local_avm_aspace43_address[0][4]),
      .avm_local_bb15_ld__u83_inst0_writedata(local_avm_aspace43_writedata[0][4]),
      .avm_local_bb15_ld__u83_inst0_byteenable(local_avm_aspace43_byteenable[0][4]),
      .avm_local_bb15_ld__u83_inst0_waitrequest(local_avm_aspace43_waitrequest[0][4]),
      .avm_local_bb15_ld__u83_inst0_readdata(local_avm_aspace43_readdata[0][4]),
      .avm_local_bb15_ld__u83_inst0_readdatavalid(local_avm_aspace43_readdatavalid[0][4]),
      .avm_local_bb15_ld__u83_inst0_writeack(local_avm_aspace43_writeack[0][4]),
      // AVM avm_local_bb22_ld__u113_inst0
      .avm_local_bb22_ld__u113_inst0_enable(local_avm_aspace43_enable[0][5]),
      .avm_local_bb22_ld__u113_inst0_read(local_avm_aspace43_read[0][5]),
      .avm_local_bb22_ld__u113_inst0_write(local_avm_aspace43_write[0][5]),
      .avm_local_bb22_ld__u113_inst0_burstcount(local_avm_aspace43_burstcount[0][5]),
      .avm_local_bb22_ld__u113_inst0_address(local_avm_aspace43_address[0][5]),
      .avm_local_bb22_ld__u113_inst0_writedata(local_avm_aspace43_writedata[0][5]),
      .avm_local_bb22_ld__u113_inst0_byteenable(local_avm_aspace43_byteenable[0][5]),
      .avm_local_bb22_ld__u113_inst0_waitrequest(local_avm_aspace43_waitrequest[0][5]),
      .avm_local_bb22_ld__u113_inst0_readdata(local_avm_aspace43_readdata[0][5]),
      .avm_local_bb22_ld__u113_inst0_readdatavalid(local_avm_aspace43_readdatavalid[0][5]),
      .avm_local_bb22_ld__u113_inst0_writeack(local_avm_aspace43_writeack[0][5]),
      // AVM avm_local_bb22_st_c0_exe2482_inst0
      .avm_local_bb22_st_c0_exe2482_inst0_enable(local_avm_aspace43_enable[0][6]),
      .avm_local_bb22_st_c0_exe2482_inst0_read(local_avm_aspace43_read[0][6]),
      .avm_local_bb22_st_c0_exe2482_inst0_write(local_avm_aspace43_write[0][6]),
      .avm_local_bb22_st_c0_exe2482_inst0_burstcount(local_avm_aspace43_burstcount[0][6]),
      .avm_local_bb22_st_c0_exe2482_inst0_address(local_avm_aspace43_address[0][6]),
      .avm_local_bb22_st_c0_exe2482_inst0_writedata(local_avm_aspace43_writedata[0][6]),
      .avm_local_bb22_st_c0_exe2482_inst0_byteenable(local_avm_aspace43_byteenable[0][6]),
      .avm_local_bb22_st_c0_exe2482_inst0_waitrequest(local_avm_aspace43_waitrequest[0][6]),
      .avm_local_bb22_st_c0_exe2482_inst0_readdata(local_avm_aspace43_readdata[0][6]),
      .avm_local_bb22_st_c0_exe2482_inst0_readdatavalid(local_avm_aspace43_readdatavalid[0][6]),
      .avm_local_bb22_st_c0_exe2482_inst0_writeack(local_avm_aspace43_writeack[0][6]),
      // AVM avm_local_bb24_ld__u120_inst0
      .avm_local_bb24_ld__u120_inst0_enable(local_avm_aspace43_enable[0][7]),
      .avm_local_bb24_ld__u120_inst0_read(local_avm_aspace43_read[0][7]),
      .avm_local_bb24_ld__u120_inst0_write(local_avm_aspace43_write[0][7]),
      .avm_local_bb24_ld__u120_inst0_burstcount(local_avm_aspace43_burstcount[0][7]),
      .avm_local_bb24_ld__u120_inst0_address(local_avm_aspace43_address[0][7]),
      .avm_local_bb24_ld__u120_inst0_writedata(local_avm_aspace43_writedata[0][7]),
      .avm_local_bb24_ld__u120_inst0_byteenable(local_avm_aspace43_byteenable[0][7]),
      .avm_local_bb24_ld__u120_inst0_waitrequest(local_avm_aspace43_waitrequest[0][7]),
      .avm_local_bb24_ld__u120_inst0_readdata(local_avm_aspace43_readdata[0][7]),
      .avm_local_bb24_ld__u120_inst0_readdatavalid(local_avm_aspace43_readdatavalid[0][7]),
      .avm_local_bb24_ld__u120_inst0_writeack(local_avm_aspace43_writeack[0][7]),
      // AVM avm_local_bb26_ld__u149_inst0
      .avm_local_bb26_ld__u149_inst0_enable(local_avm_aspace43_enable[0][8]),
      .avm_local_bb26_ld__u149_inst0_read(local_avm_aspace43_read[0][8]),
      .avm_local_bb26_ld__u149_inst0_write(local_avm_aspace43_write[0][8]),
      .avm_local_bb26_ld__u149_inst0_burstcount(local_avm_aspace43_burstcount[0][8]),
      .avm_local_bb26_ld__u149_inst0_address(local_avm_aspace43_address[0][8]),
      .avm_local_bb26_ld__u149_inst0_writedata(local_avm_aspace43_writedata[0][8]),
      .avm_local_bb26_ld__u149_inst0_byteenable(local_avm_aspace43_byteenable[0][8]),
      .avm_local_bb26_ld__u149_inst0_waitrequest(local_avm_aspace43_waitrequest[0][8]),
      .avm_local_bb26_ld__u149_inst0_readdata(local_avm_aspace43_readdata[0][8]),
      .avm_local_bb26_ld__u149_inst0_readdatavalid(local_avm_aspace43_readdatavalid[0][8]),
      .avm_local_bb26_ld__u149_inst0_writeack(local_avm_aspace43_writeack[0][8]),
      // AVM avm_local_bb26_ld__u152_inst0
      .avm_local_bb26_ld__u152_inst0_enable(local_avm_aspace43_enable[0][9]),
      .avm_local_bb26_ld__u152_inst0_read(local_avm_aspace43_read[0][9]),
      .avm_local_bb26_ld__u152_inst0_write(local_avm_aspace43_write[0][9]),
      .avm_local_bb26_ld__u152_inst0_burstcount(local_avm_aspace43_burstcount[0][9]),
      .avm_local_bb26_ld__u152_inst0_address(local_avm_aspace43_address[0][9]),
      .avm_local_bb26_ld__u152_inst0_writedata(local_avm_aspace43_writedata[0][9]),
      .avm_local_bb26_ld__u152_inst0_byteenable(local_avm_aspace43_byteenable[0][9]),
      .avm_local_bb26_ld__u152_inst0_waitrequest(local_avm_aspace43_waitrequest[0][9]),
      .avm_local_bb26_ld__u152_inst0_readdata(local_avm_aspace43_readdata[0][9]),
      .avm_local_bb26_ld__u152_inst0_readdatavalid(local_avm_aspace43_readdatavalid[0][9]),
      .avm_local_bb26_ld__u152_inst0_writeack(local_avm_aspace43_writeack[0][9]),
      // AVM avm_local_bb11_ld__u43_inst0
      .avm_local_bb11_ld__u43_inst0_enable(local_avm_aspace44_enable[0][0]),
      .avm_local_bb11_ld__u43_inst0_read(local_avm_aspace44_read[0][0]),
      .avm_local_bb11_ld__u43_inst0_write(local_avm_aspace44_write[0][0]),
      .avm_local_bb11_ld__u43_inst0_burstcount(local_avm_aspace44_burstcount[0][0]),
      .avm_local_bb11_ld__u43_inst0_address(local_avm_aspace44_address[0][0]),
      .avm_local_bb11_ld__u43_inst0_writedata(local_avm_aspace44_writedata[0][0]),
      .avm_local_bb11_ld__u43_inst0_byteenable(local_avm_aspace44_byteenable[0][0]),
      .avm_local_bb11_ld__u43_inst0_waitrequest(local_avm_aspace44_waitrequest[0][0]),
      .avm_local_bb11_ld__u43_inst0_readdata(local_avm_aspace44_readdata[0][0]),
      .avm_local_bb11_ld__u43_inst0_readdatavalid(local_avm_aspace44_readdatavalid[0][0]),
      .avm_local_bb11_ld__u43_inst0_writeack(local_avm_aspace44_writeack[0][0]),
      // AVM avm_local_bb11_st_c0_exe3313_inst0
      .avm_local_bb11_st_c0_exe3313_inst0_enable(local_avm_aspace44_enable[0][1]),
      .avm_local_bb11_st_c0_exe3313_inst0_read(local_avm_aspace44_read[0][1]),
      .avm_local_bb11_st_c0_exe3313_inst0_write(local_avm_aspace44_write[0][1]),
      .avm_local_bb11_st_c0_exe3313_inst0_burstcount(local_avm_aspace44_burstcount[0][1]),
      .avm_local_bb11_st_c0_exe3313_inst0_address(local_avm_aspace44_address[0][1]),
      .avm_local_bb11_st_c0_exe3313_inst0_writedata(local_avm_aspace44_writedata[0][1]),
      .avm_local_bb11_st_c0_exe3313_inst0_byteenable(local_avm_aspace44_byteenable[0][1]),
      .avm_local_bb11_st_c0_exe3313_inst0_waitrequest(local_avm_aspace44_waitrequest[0][1]),
      .avm_local_bb11_st_c0_exe3313_inst0_readdata(local_avm_aspace44_readdata[0][1]),
      .avm_local_bb11_st_c0_exe3313_inst0_readdatavalid(local_avm_aspace44_readdatavalid[0][1]),
      .avm_local_bb11_st_c0_exe3313_inst0_writeack(local_avm_aspace44_writeack[0][1]),
      // AVM avm_local_bb13_ld__inst0
      .avm_local_bb13_ld__inst0_enable(local_avm_aspace44_enable[0][2]),
      .avm_local_bb13_ld__inst0_read(local_avm_aspace44_read[0][2]),
      .avm_local_bb13_ld__inst0_write(local_avm_aspace44_write[0][2]),
      .avm_local_bb13_ld__inst0_burstcount(local_avm_aspace44_burstcount[0][2]),
      .avm_local_bb13_ld__inst0_address(local_avm_aspace44_address[0][2]),
      .avm_local_bb13_ld__inst0_writedata(local_avm_aspace44_writedata[0][2]),
      .avm_local_bb13_ld__inst0_byteenable(local_avm_aspace44_byteenable[0][2]),
      .avm_local_bb13_ld__inst0_waitrequest(local_avm_aspace44_waitrequest[0][2]),
      .avm_local_bb13_ld__inst0_readdata(local_avm_aspace44_readdata[0][2]),
      .avm_local_bb13_ld__inst0_readdatavalid(local_avm_aspace44_readdatavalid[0][2]),
      .avm_local_bb13_ld__inst0_writeack(local_avm_aspace44_writeack[0][2]),
      // AVM avm_local_bb15_ld__u81_inst0
      .avm_local_bb15_ld__u81_inst0_enable(local_avm_aspace44_enable[0][3]),
      .avm_local_bb15_ld__u81_inst0_read(local_avm_aspace44_read[0][3]),
      .avm_local_bb15_ld__u81_inst0_write(local_avm_aspace44_write[0][3]),
      .avm_local_bb15_ld__u81_inst0_burstcount(local_avm_aspace44_burstcount[0][3]),
      .avm_local_bb15_ld__u81_inst0_address(local_avm_aspace44_address[0][3]),
      .avm_local_bb15_ld__u81_inst0_writedata(local_avm_aspace44_writedata[0][3]),
      .avm_local_bb15_ld__u81_inst0_byteenable(local_avm_aspace44_byteenable[0][3]),
      .avm_local_bb15_ld__u81_inst0_waitrequest(local_avm_aspace44_waitrequest[0][3]),
      .avm_local_bb15_ld__u81_inst0_readdata(local_avm_aspace44_readdata[0][3]),
      .avm_local_bb15_ld__u81_inst0_readdatavalid(local_avm_aspace44_readdatavalid[0][3]),
      .avm_local_bb15_ld__u81_inst0_writeack(local_avm_aspace44_writeack[0][3]),
      // AVM avm_local_bb15_ld__u84_inst0
      .avm_local_bb15_ld__u84_inst0_enable(local_avm_aspace44_enable[0][4]),
      .avm_local_bb15_ld__u84_inst0_read(local_avm_aspace44_read[0][4]),
      .avm_local_bb15_ld__u84_inst0_write(local_avm_aspace44_write[0][4]),
      .avm_local_bb15_ld__u84_inst0_burstcount(local_avm_aspace44_burstcount[0][4]),
      .avm_local_bb15_ld__u84_inst0_address(local_avm_aspace44_address[0][4]),
      .avm_local_bb15_ld__u84_inst0_writedata(local_avm_aspace44_writedata[0][4]),
      .avm_local_bb15_ld__u84_inst0_byteenable(local_avm_aspace44_byteenable[0][4]),
      .avm_local_bb15_ld__u84_inst0_waitrequest(local_avm_aspace44_waitrequest[0][4]),
      .avm_local_bb15_ld__u84_inst0_readdata(local_avm_aspace44_readdata[0][4]),
      .avm_local_bb15_ld__u84_inst0_readdatavalid(local_avm_aspace44_readdatavalid[0][4]),
      .avm_local_bb15_ld__u84_inst0_writeack(local_avm_aspace44_writeack[0][4]),
      // AVM avm_local_bb22_ld__u112_inst0
      .avm_local_bb22_ld__u112_inst0_enable(local_avm_aspace44_enable[0][5]),
      .avm_local_bb22_ld__u112_inst0_read(local_avm_aspace44_read[0][5]),
      .avm_local_bb22_ld__u112_inst0_write(local_avm_aspace44_write[0][5]),
      .avm_local_bb22_ld__u112_inst0_burstcount(local_avm_aspace44_burstcount[0][5]),
      .avm_local_bb22_ld__u112_inst0_address(local_avm_aspace44_address[0][5]),
      .avm_local_bb22_ld__u112_inst0_writedata(local_avm_aspace44_writedata[0][5]),
      .avm_local_bb22_ld__u112_inst0_byteenable(local_avm_aspace44_byteenable[0][5]),
      .avm_local_bb22_ld__u112_inst0_waitrequest(local_avm_aspace44_waitrequest[0][5]),
      .avm_local_bb22_ld__u112_inst0_readdata(local_avm_aspace44_readdata[0][5]),
      .avm_local_bb22_ld__u112_inst0_readdatavalid(local_avm_aspace44_readdatavalid[0][5]),
      .avm_local_bb22_ld__u112_inst0_writeack(local_avm_aspace44_writeack[0][5]),
      // AVM avm_local_bb22_st_c0_exe3483_inst0
      .avm_local_bb22_st_c0_exe3483_inst0_enable(local_avm_aspace44_enable[0][6]),
      .avm_local_bb22_st_c0_exe3483_inst0_read(local_avm_aspace44_read[0][6]),
      .avm_local_bb22_st_c0_exe3483_inst0_write(local_avm_aspace44_write[0][6]),
      .avm_local_bb22_st_c0_exe3483_inst0_burstcount(local_avm_aspace44_burstcount[0][6]),
      .avm_local_bb22_st_c0_exe3483_inst0_address(local_avm_aspace44_address[0][6]),
      .avm_local_bb22_st_c0_exe3483_inst0_writedata(local_avm_aspace44_writedata[0][6]),
      .avm_local_bb22_st_c0_exe3483_inst0_byteenable(local_avm_aspace44_byteenable[0][6]),
      .avm_local_bb22_st_c0_exe3483_inst0_waitrequest(local_avm_aspace44_waitrequest[0][6]),
      .avm_local_bb22_st_c0_exe3483_inst0_readdata(local_avm_aspace44_readdata[0][6]),
      .avm_local_bb22_st_c0_exe3483_inst0_readdatavalid(local_avm_aspace44_readdatavalid[0][6]),
      .avm_local_bb22_st_c0_exe3483_inst0_writeack(local_avm_aspace44_writeack[0][6]),
      // AVM avm_local_bb24_ld__u121_inst0
      .avm_local_bb24_ld__u121_inst0_enable(local_avm_aspace44_enable[0][7]),
      .avm_local_bb24_ld__u121_inst0_read(local_avm_aspace44_read[0][7]),
      .avm_local_bb24_ld__u121_inst0_write(local_avm_aspace44_write[0][7]),
      .avm_local_bb24_ld__u121_inst0_burstcount(local_avm_aspace44_burstcount[0][7]),
      .avm_local_bb24_ld__u121_inst0_address(local_avm_aspace44_address[0][7]),
      .avm_local_bb24_ld__u121_inst0_writedata(local_avm_aspace44_writedata[0][7]),
      .avm_local_bb24_ld__u121_inst0_byteenable(local_avm_aspace44_byteenable[0][7]),
      .avm_local_bb24_ld__u121_inst0_waitrequest(local_avm_aspace44_waitrequest[0][7]),
      .avm_local_bb24_ld__u121_inst0_readdata(local_avm_aspace44_readdata[0][7]),
      .avm_local_bb24_ld__u121_inst0_readdatavalid(local_avm_aspace44_readdatavalid[0][7]),
      .avm_local_bb24_ld__u121_inst0_writeack(local_avm_aspace44_writeack[0][7]),
      // AVM avm_local_bb26_ld__u150_inst0
      .avm_local_bb26_ld__u150_inst0_enable(local_avm_aspace44_enable[0][8]),
      .avm_local_bb26_ld__u150_inst0_read(local_avm_aspace44_read[0][8]),
      .avm_local_bb26_ld__u150_inst0_write(local_avm_aspace44_write[0][8]),
      .avm_local_bb26_ld__u150_inst0_burstcount(local_avm_aspace44_burstcount[0][8]),
      .avm_local_bb26_ld__u150_inst0_address(local_avm_aspace44_address[0][8]),
      .avm_local_bb26_ld__u150_inst0_writedata(local_avm_aspace44_writedata[0][8]),
      .avm_local_bb26_ld__u150_inst0_byteenable(local_avm_aspace44_byteenable[0][8]),
      .avm_local_bb26_ld__u150_inst0_waitrequest(local_avm_aspace44_waitrequest[0][8]),
      .avm_local_bb26_ld__u150_inst0_readdata(local_avm_aspace44_readdata[0][8]),
      .avm_local_bb26_ld__u150_inst0_readdatavalid(local_avm_aspace44_readdatavalid[0][8]),
      .avm_local_bb26_ld__u150_inst0_writeack(local_avm_aspace44_writeack[0][8]),
      // AVM avm_local_bb26_ld__u153_inst0
      .avm_local_bb26_ld__u153_inst0_enable(local_avm_aspace44_enable[0][9]),
      .avm_local_bb26_ld__u153_inst0_read(local_avm_aspace44_read[0][9]),
      .avm_local_bb26_ld__u153_inst0_write(local_avm_aspace44_write[0][9]),
      .avm_local_bb26_ld__u153_inst0_burstcount(local_avm_aspace44_burstcount[0][9]),
      .avm_local_bb26_ld__u153_inst0_address(local_avm_aspace44_address[0][9]),
      .avm_local_bb26_ld__u153_inst0_writedata(local_avm_aspace44_writedata[0][9]),
      .avm_local_bb26_ld__u153_inst0_byteenable(local_avm_aspace44_byteenable[0][9]),
      .avm_local_bb26_ld__u153_inst0_waitrequest(local_avm_aspace44_waitrequest[0][9]),
      .avm_local_bb26_ld__u153_inst0_readdata(local_avm_aspace44_readdata[0][9]),
      .avm_local_bb26_ld__u153_inst0_readdatavalid(local_avm_aspace44_readdatavalid[0][9]),
      .avm_local_bb26_ld__u153_inst0_writeack(local_avm_aspace44_writeack[0][9]),
      // AVM avm_local_bb16_st__inst0
      .avm_local_bb16_st__inst0_enable(local_avm_aspace45_enable[0][0]),
      .avm_local_bb16_st__inst0_read(local_avm_aspace45_read[0][0]),
      .avm_local_bb16_st__inst0_write(local_avm_aspace45_write[0][0]),
      .avm_local_bb16_st__inst0_burstcount(local_avm_aspace45_burstcount[0][0]),
      .avm_local_bb16_st__inst0_address(local_avm_aspace45_address[0][0]),
      .avm_local_bb16_st__inst0_writedata(local_avm_aspace45_writedata[0][0]),
      .avm_local_bb16_st__inst0_byteenable(local_avm_aspace45_byteenable[0][0]),
      .avm_local_bb16_st__inst0_waitrequest(local_avm_aspace45_waitrequest[0][0]),
      .avm_local_bb16_st__inst0_readdata(local_avm_aspace45_readdata[0][0]),
      .avm_local_bb16_st__inst0_readdatavalid(local_avm_aspace45_readdatavalid[0][0]),
      .avm_local_bb16_st__inst0_writeack(local_avm_aspace45_writeack[0][0]),
      // AVM avm_local_bb18_ld__u97_inst0
      .avm_local_bb18_ld__u97_inst0_enable(local_avm_aspace45_enable[0][1]),
      .avm_local_bb18_ld__u97_inst0_read(local_avm_aspace45_read[0][1]),
      .avm_local_bb18_ld__u97_inst0_write(local_avm_aspace45_write[0][1]),
      .avm_local_bb18_ld__u97_inst0_burstcount(local_avm_aspace45_burstcount[0][1]),
      .avm_local_bb18_ld__u97_inst0_address(local_avm_aspace45_address[0][1]),
      .avm_local_bb18_ld__u97_inst0_writedata(local_avm_aspace45_writedata[0][1]),
      .avm_local_bb18_ld__u97_inst0_byteenable(local_avm_aspace45_byteenable[0][1]),
      .avm_local_bb18_ld__u97_inst0_waitrequest(local_avm_aspace45_waitrequest[0][1]),
      .avm_local_bb18_ld__u97_inst0_readdata(local_avm_aspace45_readdata[0][1]),
      .avm_local_bb18_ld__u97_inst0_readdatavalid(local_avm_aspace45_readdatavalid[0][1]),
      .avm_local_bb18_ld__u97_inst0_writeack(local_avm_aspace45_writeack[0][1]),
      // AVM avm_local_bb18_st_add1001_i_hfp_inst0
      .avm_local_bb18_st_add1001_i_hfp_inst0_enable(local_avm_aspace45_enable[0][2]),
      .avm_local_bb18_st_add1001_i_hfp_inst0_read(local_avm_aspace45_read[0][2]),
      .avm_local_bb18_st_add1001_i_hfp_inst0_write(local_avm_aspace45_write[0][2]),
      .avm_local_bb18_st_add1001_i_hfp_inst0_burstcount(local_avm_aspace45_burstcount[0][2]),
      .avm_local_bb18_st_add1001_i_hfp_inst0_address(local_avm_aspace45_address[0][2]),
      .avm_local_bb18_st_add1001_i_hfp_inst0_writedata(local_avm_aspace45_writedata[0][2]),
      .avm_local_bb18_st_add1001_i_hfp_inst0_byteenable(local_avm_aspace45_byteenable[0][2]),
      .avm_local_bb18_st_add1001_i_hfp_inst0_waitrequest(local_avm_aspace45_waitrequest[0][2]),
      .avm_local_bb18_st_add1001_i_hfp_inst0_readdata(local_avm_aspace45_readdata[0][2]),
      .avm_local_bb18_st_add1001_i_hfp_inst0_readdatavalid(local_avm_aspace45_readdatavalid[0][2]),
      .avm_local_bb18_st_add1001_i_hfp_inst0_writeack(local_avm_aspace45_writeack[0][2]),
      // AVM avm_local_bb27_st__inst0
      .avm_local_bb27_st__inst0_enable(local_avm_aspace45_enable[0][3]),
      .avm_local_bb27_st__inst0_read(local_avm_aspace45_read[0][3]),
      .avm_local_bb27_st__inst0_write(local_avm_aspace45_write[0][3]),
      .avm_local_bb27_st__inst0_burstcount(local_avm_aspace45_burstcount[0][3]),
      .avm_local_bb27_st__inst0_address(local_avm_aspace45_address[0][3]),
      .avm_local_bb27_st__inst0_writedata(local_avm_aspace45_writedata[0][3]),
      .avm_local_bb27_st__inst0_byteenable(local_avm_aspace45_byteenable[0][3]),
      .avm_local_bb27_st__inst0_waitrequest(local_avm_aspace45_waitrequest[0][3]),
      .avm_local_bb27_st__inst0_readdata(local_avm_aspace45_readdata[0][3]),
      .avm_local_bb27_st__inst0_readdatavalid(local_avm_aspace45_readdatavalid[0][3]),
      .avm_local_bb27_st__inst0_writeack(local_avm_aspace45_writeack[0][3]),
      // AVM avm_local_bb29_ld__u166_inst0
      .avm_local_bb29_ld__u166_inst0_enable(local_avm_aspace45_enable[0][4]),
      .avm_local_bb29_ld__u166_inst0_read(local_avm_aspace45_read[0][4]),
      .avm_local_bb29_ld__u166_inst0_write(local_avm_aspace45_write[0][4]),
      .avm_local_bb29_ld__u166_inst0_burstcount(local_avm_aspace45_burstcount[0][4]),
      .avm_local_bb29_ld__u166_inst0_address(local_avm_aspace45_address[0][4]),
      .avm_local_bb29_ld__u166_inst0_writedata(local_avm_aspace45_writedata[0][4]),
      .avm_local_bb29_ld__u166_inst0_byteenable(local_avm_aspace45_byteenable[0][4]),
      .avm_local_bb29_ld__u166_inst0_waitrequest(local_avm_aspace45_waitrequest[0][4]),
      .avm_local_bb29_ld__u166_inst0_readdata(local_avm_aspace45_readdata[0][4]),
      .avm_local_bb29_ld__u166_inst0_readdatavalid(local_avm_aspace45_readdatavalid[0][4]),
      .avm_local_bb29_ld__u166_inst0_writeack(local_avm_aspace45_writeack[0][4]),
      // AVM avm_local_bb29_st_add1001_i1013_hfp_inst0
      .avm_local_bb29_st_add1001_i1013_hfp_inst0_enable(local_avm_aspace45_enable[0][5]),
      .avm_local_bb29_st_add1001_i1013_hfp_inst0_read(local_avm_aspace45_read[0][5]),
      .avm_local_bb29_st_add1001_i1013_hfp_inst0_write(local_avm_aspace45_write[0][5]),
      .avm_local_bb29_st_add1001_i1013_hfp_inst0_burstcount(local_avm_aspace45_burstcount[0][5]),
      .avm_local_bb29_st_add1001_i1013_hfp_inst0_address(local_avm_aspace45_address[0][5]),
      .avm_local_bb29_st_add1001_i1013_hfp_inst0_writedata(local_avm_aspace45_writedata[0][5]),
      .avm_local_bb29_st_add1001_i1013_hfp_inst0_byteenable(local_avm_aspace45_byteenable[0][5]),
      .avm_local_bb29_st_add1001_i1013_hfp_inst0_waitrequest(local_avm_aspace45_waitrequest[0][5]),
      .avm_local_bb29_st_add1001_i1013_hfp_inst0_readdata(local_avm_aspace45_readdata[0][5]),
      .avm_local_bb29_st_add1001_i1013_hfp_inst0_readdatavalid(local_avm_aspace45_readdatavalid[0][5]),
      .avm_local_bb29_st_add1001_i1013_hfp_inst0_writeack(local_avm_aspace45_writeack[0][5]),
      // AVM avm_local_bb31_ld__1487_inst0
      .avm_local_bb31_ld__1487_inst0_enable(local_avm_aspace45_enable[0][6]),
      .avm_local_bb31_ld__1487_inst0_read(local_avm_aspace45_read[0][6]),
      .avm_local_bb31_ld__1487_inst0_write(local_avm_aspace45_write[0][6]),
      .avm_local_bb31_ld__1487_inst0_burstcount(local_avm_aspace45_burstcount[0][6]),
      .avm_local_bb31_ld__1487_inst0_address(local_avm_aspace45_address[0][6]),
      .avm_local_bb31_ld__1487_inst0_writedata(local_avm_aspace45_writedata[0][6]),
      .avm_local_bb31_ld__1487_inst0_byteenable(local_avm_aspace45_byteenable[0][6]),
      .avm_local_bb31_ld__1487_inst0_waitrequest(local_avm_aspace45_waitrequest[0][6]),
      .avm_local_bb31_ld__1487_inst0_readdata(local_avm_aspace45_readdata[0][6]),
      .avm_local_bb31_ld__1487_inst0_readdatavalid(local_avm_aspace45_readdatavalid[0][6]),
      .avm_local_bb31_ld__1487_inst0_writeack(local_avm_aspace45_writeack[0][6])
   );

   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace29
      logic local_icm_arb_request [1][6];
      logic local_icm_arb_enable [1][6];
      logic local_icm_arb_read [1][6];
      logic local_icm_arb_write [1][6];
      logic local_icm_arb_burstcount [1][6];
      logic local_icm_arb_address [1][6];
      logic [31:0] local_icm_arb_writedata [1][6];
      logic [3:0] local_icm_arb_byteenable [1][6];
      logic local_icm_arb_stall [1][6];
      logic local_icm_wrp_ack [1][6];
      logic local_icm_rrp_datavalid [1][6];
      logic [31:0] local_icm_rrp_data [1][6];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         for( __j = 0; __j < 6; __j = __j + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace29_enable[__i][__j]),
               .avm_read(local_avm_aspace29_read[__i][__j]),
               .avm_write(local_avm_aspace29_write[__i][__j]),
               .avm_burstcount(local_avm_aspace29_burstcount[__i][__j]),
               .avm_address(local_avm_aspace29_address[__i][__j]),
               .avm_writedata(local_avm_aspace29_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace29_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace29_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace29_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace29_readdatavalid[__i][__j]),
               .avm_writeack(local_avm_aspace29_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __j = 0; __j < 6; __j = __j + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[4].b_arb_read[0];
            assign icm_in_arb_write[2] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_35
            calc_initpop_system_interconnect_35 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[5].b_arb_read[0];
            assign icm_in_arb_write[2] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_36
            calc_initpop_system_interconnect_36 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace30
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];

      for( __j = 0; __j < 1; __j = __j + 1 )
      begin:local_mem_group
         for( __k = 0; __k < 5; __k = __k + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace30_enable[__j][__k]),
               .avm_read(local_avm_aspace30_read[__j][__k]),
               .avm_write(local_avm_aspace30_write[__j][__k]),
               .avm_burstcount(local_avm_aspace30_burstcount[__j][__k]),
               .avm_address(local_avm_aspace30_address[__j][__k]),
               .avm_writedata(local_avm_aspace30_writedata[__j][__k]),
               .avm_byteenable(local_avm_aspace30_byteenable[__j][__k]),
               .avm_waitrequest(local_avm_aspace30_waitrequest[__j][__k]),
               .avm_readdata(local_avm_aspace30_readdata[__j][__k]),
               .avm_readdatavalid(local_avm_aspace30_readdatavalid[__j][__k]),
               .avm_writeack(local_avm_aspace30_writeack[__j][__k]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__j][__k]),
               .ic_arb_enable(local_icm_arb_enable[__j][__k]),
               .ic_arb_read(local_icm_arb_read[__j][__k]),
               .ic_arb_write(local_icm_arb_write[__j][__k]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .ic_arb_address(local_icm_arb_address[__j][__k]),
               .ic_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .ic_arb_stall(local_icm_arb_stall[__j][__k]),
               .ic_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .ic_rrp_data(local_icm_rrp_data[__j][__k])
            );

         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __k = 0; __k < 5; __k = __k + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__j][__k]),
               .m_arb_enable(local_icm_arb_enable[__j][__k]),
               .m_arb_read(local_icm_arb_read[__j][__k]),
               .m_arb_write(local_icm_arb_write[__j][__k]),
               .m_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .m_arb_address(local_icm_arb_address[__j][__k]),
               .m_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .m_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .m_arb_stall(local_icm_arb_stall[__j][__k]),
               .m_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .m_rrp_data(local_icm_rrp_data[__j][__k]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[4].b_arb_read[0];
            assign icm_in_arb_write[2] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_35
            calc_initpop_system_interconnect_35 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_37
            calc_initpop_system_interconnect_37 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace31
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];

      for( __k = 0; __k < 1; __k = __k + 1 )
      begin:local_mem_group
         for( __l = 0; __l < 5; __l = __l + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace31_enable[__k][__l]),
               .avm_read(local_avm_aspace31_read[__k][__l]),
               .avm_write(local_avm_aspace31_write[__k][__l]),
               .avm_burstcount(local_avm_aspace31_burstcount[__k][__l]),
               .avm_address(local_avm_aspace31_address[__k][__l]),
               .avm_writedata(local_avm_aspace31_writedata[__k][__l]),
               .avm_byteenable(local_avm_aspace31_byteenable[__k][__l]),
               .avm_waitrequest(local_avm_aspace31_waitrequest[__k][__l]),
               .avm_readdata(local_avm_aspace31_readdata[__k][__l]),
               .avm_readdatavalid(local_avm_aspace31_readdatavalid[__k][__l]),
               .avm_writeack(local_avm_aspace31_writeack[__k][__l]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__k][__l]),
               .ic_arb_enable(local_icm_arb_enable[__k][__l]),
               .ic_arb_read(local_icm_arb_read[__k][__l]),
               .ic_arb_write(local_icm_arb_write[__k][__l]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .ic_arb_address(local_icm_arb_address[__k][__l]),
               .ic_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .ic_arb_stall(local_icm_arb_stall[__k][__l]),
               .ic_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .ic_rrp_data(local_icm_rrp_data[__k][__l])
            );

         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __l = 0; __l < 5; __l = __l + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__k][__l]),
               .m_arb_enable(local_icm_arb_enable[__k][__l]),
               .m_arb_read(local_icm_arb_read[__k][__l]),
               .m_arb_write(local_icm_arb_write[__k][__l]),
               .m_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .m_arb_address(local_icm_arb_address[__k][__l]),
               .m_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .m_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .m_arb_stall(local_icm_arb_stall[__k][__l]),
               .m_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .m_rrp_data(local_icm_rrp_data[__k][__l]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[4].b_arb_read[0];
            assign icm_in_arb_write[2] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_38
            calc_initpop_system_interconnect_38 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_39
            calc_initpop_system_interconnect_39 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace32
      logic local_icm_arb_request [1][9];
      logic local_icm_arb_enable [1][9];
      logic local_icm_arb_read [1][9];
      logic local_icm_arb_write [1][9];
      logic local_icm_arb_burstcount [1][9];
      logic [6:0] local_icm_arb_address [1][9];
      logic [31:0] local_icm_arb_writedata [1][9];
      logic [3:0] local_icm_arb_byteenable [1][9];
      logic local_icm_arb_stall [1][9];
      logic local_icm_wrp_ack [1][9];
      logic local_icm_rrp_datavalid [1][9];
      logic [31:0] local_icm_rrp_data [1][9];
      logic invalid_access_grps;

      for( __l = 0; __l < 1; __l = __l + 1 )
      begin:local_mem_group
         for( __m = 0; __m < 9; __m = __m + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace32_enable[__l][__m]),
               .avm_read(local_avm_aspace32_read[__l][__m]),
               .avm_write(local_avm_aspace32_write[__l][__m]),
               .avm_burstcount(local_avm_aspace32_burstcount[__l][__m]),
               .avm_address(local_avm_aspace32_address[__l][__m]),
               .avm_writedata(local_avm_aspace32_writedata[__l][__m]),
               .avm_byteenable(local_avm_aspace32_byteenable[__l][__m]),
               .avm_waitrequest(local_avm_aspace32_waitrequest[__l][__m]),
               .avm_readdata(local_avm_aspace32_readdata[__l][__m]),
               .avm_readdatavalid(local_avm_aspace32_readdatavalid[__l][__m]),
               .avm_writeack(local_avm_aspace32_writeack[__l][__m]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__l][__m]),
               .ic_arb_enable(local_icm_arb_enable[__l][__m]),
               .ic_arb_read(local_icm_arb_read[__l][__m]),
               .ic_arb_write(local_icm_arb_write[__l][__m]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .ic_arb_address(local_icm_arb_address[__l][__m]),
               .ic_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .ic_arb_stall(local_icm_arb_stall[__l][__m]),
               .ic_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .ic_rrp_data(local_icm_rrp_data[__l][__m])
            );

         end

         for( __m = 0; __m < 4; __m = __m + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [4:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(32),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __m = 0; __m < 9; __m = __m + 1 )
         begin:router
            logic b_arb_request [4];
            logic b_arb_enable [4];
            logic b_arb_read [4];
            logic b_arb_write [4];
            logic b_arb_burstcount [4];
            logic [4:0] b_arb_address [4];
            logic [31:0] b_arb_writedata [4];
            logic [3:0] b_arb_byteenable [4];
            logic b_arb_stall [4];
            logic b_wrp_ack [4];
            logic b_rrp_datavalid [4];
            logic [31:0] b_rrp_data [4];
            logic [3:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(4),
               .NUM_BANKS(4)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__l][__m]),
               .m_arb_enable(local_icm_arb_enable[__l][__m]),
               .m_arb_read(local_icm_arb_read[__l][__m]),
               .m_arb_write(local_icm_arb_write[__l][__m]),
               .m_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .m_arb_address(local_icm_arb_address[__l][__m]),
               .m_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .m_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .m_arb_stall(local_icm_arb_stall[__l][__m]),
               .m_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .m_rrp_data(local_icm_rrp_data[__l][__m]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__l][__m][6:5] == 2'b00);
            assign bank_select[1] = (local_icm_arb_address[__l][__m][6:5] == 2'b01);
            assign bank_select[2] = (local_icm_arb_address[__l][__m][6:5] == 2'b10);
            assign bank_select[3] = (local_icm_arb_address[__l][__m][6:5] == 2'b11);
         end

         assign invalid_access_grps = 'b0;
         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[6].b_arb_read[0];
            assign icm_in_arb_write[1] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[7].b_arb_read[0];
            assign icm_in_arb_write[2] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_32
            calc_initpop_system_interconnect_32 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[6].b_arb_read[1];
            assign icm_in_arb_write[1] = router[6].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[6].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[1];
            assign router[6].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[7].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[7].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[7].b_arb_read[1];
            assign icm_in_arb_write[2] = router[7].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[7].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[7].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[7].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[7].b_arb_byteenable[1];
            assign router[7].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[7].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[7].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[7].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_32
            calc_initpop_system_interconnect_32 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[2].b_arb_read[2];
            assign icm_in_arb_write[0] = router[2].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[2].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[2];
            assign router[2].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[6].b_arb_read[2];
            assign icm_in_arb_write[1] = router[6].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[6].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[2];
            assign router[6].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[7].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[7].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[7].b_arb_read[2];
            assign icm_in_arb_write[2] = router[7].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[7].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[7].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[7].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[7].b_arb_byteenable[2];
            assign router[7].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[7].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[7].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[7].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_32
            calc_initpop_system_interconnect_32 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[2].b_arb_read[3];
            assign icm_in_arb_write[0] = router[2].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[2].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[3];
            assign router[2].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[6].b_arb_read[3];
            assign icm_in_arb_write[1] = router[6].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[6].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[3];
            assign router[6].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[7].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[7].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[7].b_arb_read[3];
            assign icm_in_arb_write[2] = router[7].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[7].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[7].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[7].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[7].b_arb_byteenable[3];
            assign router[7].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[7].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[7].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[7].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_32
            calc_initpop_system_interconnect_32 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[8].b_arb_read[0];
            assign icm_in_arb_write[1] = router[8].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[8].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[0];
            assign router[8].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[3].b_arb_read[1];
            assign icm_in_arb_write[0] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[8].b_arb_read[1];
            assign icm_in_arb_write[1] = router[8].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[8].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[1];
            assign router[8].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[3].b_arb_read[2];
            assign icm_in_arb_write[0] = router[3].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[3].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[2];
            assign router[3].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[8].b_arb_read[2];
            assign icm_in_arb_write[1] = router[8].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[8].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[2];
            assign router[8].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[3].b_arb_read[3];
            assign icm_in_arb_write[0] = router[3].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[3].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[3];
            assign router[3].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[8].b_arb_read[3];
            assign icm_in_arb_write[1] = router[8].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[8].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[3];
            assign router[8].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port3bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[4].b_arb_read[0];
            assign icm_in_arb_write[1] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_4
            calc_initpop_system_interconnect_4 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port3bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[4].b_arb_read[1];
            assign icm_in_arb_write[1] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_4
            calc_initpop_system_interconnect_4 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port3bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[0].b_arb_read[2];
            assign icm_in_arb_write[0] = router[0].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[0].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[2];
            assign router[0].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[4].b_arb_read[2];
            assign icm_in_arb_write[1] = router[4].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[4].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[2];
            assign router[4].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_4
            calc_initpop_system_interconnect_4 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[3] = icm_out_arb_enable;
            assign bank[2].port_read[3] = icm_out_arb_read;
            assign bank[2].port_write[3] = icm_out_arb_write;
            assign bank[2].port_address[3] = icm_out_arb_address;
            assign bank[2].port_writedata[3] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[3];
            assign icm_out_rrp_data = bank[2].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port3bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[0].b_arb_read[3];
            assign icm_in_arb_write[0] = router[0].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[0].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[3];
            assign router[0].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[4].b_arb_read[3];
            assign icm_in_arb_write[1] = router[4].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[4].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[3];
            assign router[4].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_4
            calc_initpop_system_interconnect_4 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[3] = icm_out_arb_enable;
            assign bank[3].port_read[3] = icm_out_arb_read;
            assign bank[3].port_write[3] = icm_out_arb_write;
            assign bank[3].port_address[3] = icm_out_arb_address;
            assign bank[3].port_writedata[3] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[3];
            assign icm_out_rrp_data = bank[3].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port4bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[5].b_arb_read[0];
            assign icm_in_arb_write[1] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_6
            calc_initpop_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port4bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[5].b_arb_read[1];
            assign icm_in_arb_write[1] = router[5].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[5].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[1];
            assign router[5].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_6
            calc_initpop_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port4bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[1].b_arb_read[2];
            assign icm_in_arb_write[0] = router[1].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[1].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[2];
            assign router[1].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[5].b_arb_read[2];
            assign icm_in_arb_write[1] = router[5].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[5].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[2];
            assign router[5].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_6
            calc_initpop_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[4] = icm_out_arb_enable;
            assign bank[2].port_read[4] = icm_out_arb_read;
            assign bank[2].port_write[4] = icm_out_arb_write;
            assign bank[2].port_address[4] = icm_out_arb_address;
            assign bank[2].port_writedata[4] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[4];
            assign icm_out_rrp_data = bank[2].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port4bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[1].b_arb_read[3];
            assign icm_in_arb_write[0] = router[1].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[1].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[3];
            assign router[1].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[5].b_arb_read[3];
            assign icm_in_arb_write[1] = router[5].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[5].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[3];
            assign router[5].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_6
            calc_initpop_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[4] = icm_out_arb_enable;
            assign bank[3].port_read[4] = icm_out_arb_read;
            assign bank[3].port_write[4] = icm_out_arb_write;
            assign bank[3].port_address[4] = icm_out_arb_address;
            assign bank[3].port_writedata[4] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[4];
            assign icm_out_rrp_data = bank[3].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[3] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace33
      logic local_icm_arb_request [1][9];
      logic local_icm_arb_enable [1][9];
      logic local_icm_arb_read [1][9];
      logic local_icm_arb_write [1][9];
      logic local_icm_arb_burstcount [1][9];
      logic [6:0] local_icm_arb_address [1][9];
      logic [31:0] local_icm_arb_writedata [1][9];
      logic [3:0] local_icm_arb_byteenable [1][9];
      logic local_icm_arb_stall [1][9];
      logic local_icm_wrp_ack [1][9];
      logic local_icm_rrp_datavalid [1][9];
      logic [31:0] local_icm_rrp_data [1][9];
      logic invalid_access_grps;

      for( __m = 0; __m < 1; __m = __m + 1 )
      begin:local_mem_group
         for( __n = 0; __n < 9; __n = __n + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace33_enable[__m][__n]),
               .avm_read(local_avm_aspace33_read[__m][__n]),
               .avm_write(local_avm_aspace33_write[__m][__n]),
               .avm_burstcount(local_avm_aspace33_burstcount[__m][__n]),
               .avm_address(local_avm_aspace33_address[__m][__n]),
               .avm_writedata(local_avm_aspace33_writedata[__m][__n]),
               .avm_byteenable(local_avm_aspace33_byteenable[__m][__n]),
               .avm_waitrequest(local_avm_aspace33_waitrequest[__m][__n]),
               .avm_readdata(local_avm_aspace33_readdata[__m][__n]),
               .avm_readdatavalid(local_avm_aspace33_readdatavalid[__m][__n]),
               .avm_writeack(local_avm_aspace33_writeack[__m][__n]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__m][__n]),
               .ic_arb_enable(local_icm_arb_enable[__m][__n]),
               .ic_arb_read(local_icm_arb_read[__m][__n]),
               .ic_arb_write(local_icm_arb_write[__m][__n]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__m][__n]),
               .ic_arb_address(local_icm_arb_address[__m][__n]),
               .ic_arb_writedata(local_icm_arb_writedata[__m][__n]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__m][__n]),
               .ic_arb_stall(local_icm_arb_stall[__m][__n]),
               .ic_wrp_ack(local_icm_wrp_ack[__m][__n]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__m][__n]),
               .ic_rrp_data(local_icm_rrp_data[__m][__n])
            );

         end

         for( __n = 0; __n < 4; __n = __n + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [4:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(32),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __n = 0; __n < 9; __n = __n + 1 )
         begin:router
            logic b_arb_request [4];
            logic b_arb_enable [4];
            logic b_arb_read [4];
            logic b_arb_write [4];
            logic b_arb_burstcount [4];
            logic [4:0] b_arb_address [4];
            logic [31:0] b_arb_writedata [4];
            logic [3:0] b_arb_byteenable [4];
            logic b_arb_stall [4];
            logic b_wrp_ack [4];
            logic b_rrp_datavalid [4];
            logic [31:0] b_rrp_data [4];
            logic [3:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(4),
               .NUM_BANKS(4)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__m][__n]),
               .m_arb_enable(local_icm_arb_enable[__m][__n]),
               .m_arb_read(local_icm_arb_read[__m][__n]),
               .m_arb_write(local_icm_arb_write[__m][__n]),
               .m_arb_burstcount(local_icm_arb_burstcount[__m][__n]),
               .m_arb_address(local_icm_arb_address[__m][__n]),
               .m_arb_writedata(local_icm_arb_writedata[__m][__n]),
               .m_arb_byteenable(local_icm_arb_byteenable[__m][__n]),
               .m_arb_stall(local_icm_arb_stall[__m][__n]),
               .m_wrp_ack(local_icm_wrp_ack[__m][__n]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__m][__n]),
               .m_rrp_data(local_icm_rrp_data[__m][__n]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__m][__n][6:5] == 2'b00);
            assign bank_select[1] = (local_icm_arb_address[__m][__n][6:5] == 2'b01);
            assign bank_select[2] = (local_icm_arb_address[__m][__n][6:5] == 2'b10);
            assign bank_select[3] = (local_icm_arb_address[__m][__n][6:5] == 2'b11);
         end

         assign invalid_access_grps = 'b0;
         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[6].b_arb_read[0];
            assign icm_in_arb_write[1] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[7].b_arb_read[0];
            assign icm_in_arb_write[2] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_40
            calc_initpop_system_interconnect_40 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port1bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[6].b_arb_read[1];
            assign icm_in_arb_write[1] = router[6].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[6].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[1];
            assign router[6].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[7].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[7].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[7].b_arb_read[1];
            assign icm_in_arb_write[2] = router[7].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[7].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[7].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[7].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[7].b_arb_byteenable[1];
            assign router[7].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[7].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[7].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[7].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_40
            calc_initpop_system_interconnect_40 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port1bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[2].b_arb_read[2];
            assign icm_in_arb_write[0] = router[2].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[2].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[2];
            assign router[2].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[6].b_arb_read[2];
            assign icm_in_arb_write[1] = router[6].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[6].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[2];
            assign router[6].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[7].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[7].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[7].b_arb_read[2];
            assign icm_in_arb_write[2] = router[7].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[7].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[7].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[7].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[7].b_arb_byteenable[2];
            assign router[7].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[7].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[7].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[7].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_40
            calc_initpop_system_interconnect_40 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port1bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[2].b_arb_read[3];
            assign icm_in_arb_write[0] = router[2].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[2].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[3];
            assign router[2].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[6].b_arb_read[3];
            assign icm_in_arb_write[1] = router[6].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[6].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[3];
            assign router[6].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[7].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[7].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[7].b_arb_read[3];
            assign icm_in_arb_write[2] = router[7].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[7].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[7].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[7].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[7].b_arb_byteenable[3];
            assign router[7].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[7].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[7].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[7].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_40
            calc_initpop_system_interconnect_40 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[8].b_arb_read[0];
            assign icm_in_arb_write[1] = router[8].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[8].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[0];
            assign router[8].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port2bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[3].b_arb_read[1];
            assign icm_in_arb_write[0] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[8].b_arb_read[1];
            assign icm_in_arb_write[1] = router[8].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[8].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[1];
            assign router[8].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port2bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[3].b_arb_read[2];
            assign icm_in_arb_write[0] = router[3].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[3].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[2];
            assign router[3].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[8].b_arb_read[2];
            assign icm_in_arb_write[1] = router[8].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[8].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[2];
            assign router[8].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port2bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[3].b_arb_read[3];
            assign icm_in_arb_write[0] = router[3].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[3].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[3];
            assign router[3].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[8].b_arb_read[3];
            assign icm_in_arb_write[1] = router[8].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[8].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[3];
            assign router[8].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port3bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[4].b_arb_read[0];
            assign icm_in_arb_write[1] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_6
            calc_initpop_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port3bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[4].b_arb_read[1];
            assign icm_in_arb_write[1] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_6
            calc_initpop_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port3bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[0].b_arb_read[2];
            assign icm_in_arb_write[0] = router[0].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[0].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[2];
            assign router[0].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[4].b_arb_read[2];
            assign icm_in_arb_write[1] = router[4].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[4].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[2];
            assign router[4].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_6
            calc_initpop_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[3] = icm_out_arb_enable;
            assign bank[2].port_read[3] = icm_out_arb_read;
            assign bank[2].port_write[3] = icm_out_arb_write;
            assign bank[2].port_address[3] = icm_out_arb_address;
            assign bank[2].port_writedata[3] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[3];
            assign icm_out_rrp_data = bank[2].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port3bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[0].b_arb_read[3];
            assign icm_in_arb_write[0] = router[0].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[0].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[3];
            assign router[0].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[4].b_arb_read[3];
            assign icm_in_arb_write[1] = router[4].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[4].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[3];
            assign router[4].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_6
            calc_initpop_system_interconnect_6 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[3] = icm_out_arb_enable;
            assign bank[3].port_read[3] = icm_out_arb_read;
            assign bank[3].port_write[3] = icm_out_arb_write;
            assign bank[3].port_address[3] = icm_out_arb_address;
            assign bank[3].port_writedata[3] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[3];
            assign icm_out_rrp_data = bank[3].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port4bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[5].b_arb_read[0];
            assign icm_in_arb_write[1] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_34
            calc_initpop_system_interconnect_34 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port4bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[5].b_arb_read[1];
            assign icm_in_arb_write[1] = router[5].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[5].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[1];
            assign router[5].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_34
            calc_initpop_system_interconnect_34 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port4bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[1].b_arb_read[2];
            assign icm_in_arb_write[0] = router[1].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[1].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[2];
            assign router[1].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[5].b_arb_read[2];
            assign icm_in_arb_write[1] = router[5].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[5].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[2];
            assign router[5].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_34
            calc_initpop_system_interconnect_34 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[4] = icm_out_arb_enable;
            assign bank[2].port_read[4] = icm_out_arb_read;
            assign bank[2].port_write[4] = icm_out_arb_write;
            assign bank[2].port_address[4] = icm_out_arb_address;
            assign bank[2].port_writedata[4] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[4];
            assign icm_out_rrp_data = bank[2].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port4bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[1].b_arb_read[3];
            assign icm_in_arb_write[0] = router[1].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[1].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[3];
            assign router[1].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[5].b_arb_read[3];
            assign icm_in_arb_write[1] = router[5].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[5].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[3];
            assign router[5].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_34
            calc_initpop_system_interconnect_34 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[4] = icm_out_arb_enable;
            assign bank[3].port_read[4] = icm_out_arb_read;
            assign bank[3].port_write[4] = icm_out_arb_write;
            assign bank[3].port_address[4] = icm_out_arb_address;
            assign bank[3].port_writedata[4] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[4];
            assign icm_out_rrp_data = bank[3].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[4] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace34
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];

      for( __n = 0; __n < 1; __n = __n + 1 )
      begin:local_mem_group
         for( __o = 0; __o < 5; __o = __o + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace34_enable[__n][__o]),
               .avm_read(local_avm_aspace34_read[__n][__o]),
               .avm_write(local_avm_aspace34_write[__n][__o]),
               .avm_burstcount(local_avm_aspace34_burstcount[__n][__o]),
               .avm_address(local_avm_aspace34_address[__n][__o]),
               .avm_writedata(local_avm_aspace34_writedata[__n][__o]),
               .avm_byteenable(local_avm_aspace34_byteenable[__n][__o]),
               .avm_waitrequest(local_avm_aspace34_waitrequest[__n][__o]),
               .avm_readdata(local_avm_aspace34_readdata[__n][__o]),
               .avm_readdatavalid(local_avm_aspace34_readdatavalid[__n][__o]),
               .avm_writeack(local_avm_aspace34_writeack[__n][__o]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__n][__o]),
               .ic_arb_enable(local_icm_arb_enable[__n][__o]),
               .ic_arb_read(local_icm_arb_read[__n][__o]),
               .ic_arb_write(local_icm_arb_write[__n][__o]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__n][__o]),
               .ic_arb_address(local_icm_arb_address[__n][__o]),
               .ic_arb_writedata(local_icm_arb_writedata[__n][__o]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__n][__o]),
               .ic_arb_stall(local_icm_arb_stall[__n][__o]),
               .ic_wrp_ack(local_icm_wrp_ack[__n][__o]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__n][__o]),
               .ic_rrp_data(local_icm_rrp_data[__n][__o])
            );

         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __o = 0; __o < 5; __o = __o + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__n][__o]),
               .m_arb_enable(local_icm_arb_enable[__n][__o]),
               .m_arb_read(local_icm_arb_read[__n][__o]),
               .m_arb_write(local_icm_arb_write[__n][__o]),
               .m_arb_burstcount(local_icm_arb_burstcount[__n][__o]),
               .m_arb_address(local_icm_arb_address[__n][__o]),
               .m_arb_writedata(local_icm_arb_writedata[__n][__o]),
               .m_arb_byteenable(local_icm_arb_byteenable[__n][__o]),
               .m_arb_stall(local_icm_arb_stall[__n][__o]),
               .m_wrp_ack(local_icm_wrp_ack[__n][__o]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__n][__o]),
               .m_rrp_data(local_icm_rrp_data[__n][__o]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[4].b_arb_read[0];
            assign icm_in_arb_write[2] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_25
            calc_initpop_system_interconnect_25 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __o = 0; __o < 1; __o = __o + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_37
            calc_initpop_system_interconnect_37 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace35
      logic local_icm_arb_request [1][4];
      logic local_icm_arb_enable [1][4];
      logic local_icm_arb_read [1][4];
      logic local_icm_arb_write [1][4];
      logic local_icm_arb_burstcount [1][4];
      logic local_icm_arb_address [1][4];
      logic [31:0] local_icm_arb_writedata [1][4];
      logic [3:0] local_icm_arb_byteenable [1][4];
      logic local_icm_arb_stall [1][4];
      logic local_icm_wrp_ack [1][4];
      logic local_icm_rrp_datavalid [1][4];
      logic [31:0] local_icm_rrp_data [1][4];

      for( __o = 0; __o < 1; __o = __o + 1 )
      begin:local_mem_group
         for( __p = 0; __p < 4; __p = __p + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace35_enable[__o][__p]),
               .avm_read(local_avm_aspace35_read[__o][__p]),
               .avm_write(local_avm_aspace35_write[__o][__p]),
               .avm_burstcount(local_avm_aspace35_burstcount[__o][__p]),
               .avm_address(local_avm_aspace35_address[__o][__p]),
               .avm_writedata(local_avm_aspace35_writedata[__o][__p]),
               .avm_byteenable(local_avm_aspace35_byteenable[__o][__p]),
               .avm_waitrequest(local_avm_aspace35_waitrequest[__o][__p]),
               .avm_readdata(local_avm_aspace35_readdata[__o][__p]),
               .avm_readdatavalid(local_avm_aspace35_readdatavalid[__o][__p]),
               .avm_writeack(local_avm_aspace35_writeack[__o][__p]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__o][__p]),
               .ic_arb_enable(local_icm_arb_enable[__o][__p]),
               .ic_arb_read(local_icm_arb_read[__o][__p]),
               .ic_arb_write(local_icm_arb_write[__o][__p]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__o][__p]),
               .ic_arb_address(local_icm_arb_address[__o][__p]),
               .ic_arb_writedata(local_icm_arb_writedata[__o][__p]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__o][__p]),
               .ic_arb_stall(local_icm_arb_stall[__o][__p]),
               .ic_wrp_ack(local_icm_wrp_ack[__o][__p]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__o][__p]),
               .ic_rrp_data(local_icm_rrp_data[__o][__p])
            );

         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __p = 0; __p < 4; __p = __p + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__o][__p]),
               .m_arb_enable(local_icm_arb_enable[__o][__p]),
               .m_arb_read(local_icm_arb_read[__o][__p]),
               .m_arb_write(local_icm_arb_write[__o][__p]),
               .m_arb_burstcount(local_icm_arb_burstcount[__o][__p]),
               .m_arb_address(local_icm_arb_address[__o][__p]),
               .m_arb_writedata(local_icm_arb_writedata[__o][__p]),
               .m_arb_byteenable(local_icm_arb_byteenable[__o][__p]),
               .m_arb_stall(local_icm_arb_stall[__o][__p]),
               .m_wrp_ack(local_icm_wrp_ack[__o][__p]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__o][__p]),
               .m_rrp_data(local_icm_rrp_data[__o][__p]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_19
            calc_initpop_system_interconnect_19 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_20
            calc_initpop_system_interconnect_20 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_19
            calc_initpop_system_interconnect_19 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __p = 0; __p < 1; __p = __p + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_19
            calc_initpop_system_interconnect_19 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace36
      logic local_icm_arb_request [1][4];
      logic local_icm_arb_enable [1][4];
      logic local_icm_arb_read [1][4];
      logic local_icm_arb_write [1][4];
      logic local_icm_arb_burstcount [1][4];
      logic local_icm_arb_address [1][4];
      logic [31:0] local_icm_arb_writedata [1][4];
      logic [3:0] local_icm_arb_byteenable [1][4];
      logic local_icm_arb_stall [1][4];
      logic local_icm_wrp_ack [1][4];
      logic local_icm_rrp_datavalid [1][4];
      logic [31:0] local_icm_rrp_data [1][4];

      for( __p = 0; __p < 1; __p = __p + 1 )
      begin:local_mem_group
         for( __q = 0; __q < 4; __q = __q + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace36_enable[__p][__q]),
               .avm_read(local_avm_aspace36_read[__p][__q]),
               .avm_write(local_avm_aspace36_write[__p][__q]),
               .avm_burstcount(local_avm_aspace36_burstcount[__p][__q]),
               .avm_address(local_avm_aspace36_address[__p][__q]),
               .avm_writedata(local_avm_aspace36_writedata[__p][__q]),
               .avm_byteenable(local_avm_aspace36_byteenable[__p][__q]),
               .avm_waitrequest(local_avm_aspace36_waitrequest[__p][__q]),
               .avm_readdata(local_avm_aspace36_readdata[__p][__q]),
               .avm_readdatavalid(local_avm_aspace36_readdatavalid[__p][__q]),
               .avm_writeack(local_avm_aspace36_writeack[__p][__q]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__p][__q]),
               .ic_arb_enable(local_icm_arb_enable[__p][__q]),
               .ic_arb_read(local_icm_arb_read[__p][__q]),
               .ic_arb_write(local_icm_arb_write[__p][__q]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__p][__q]),
               .ic_arb_address(local_icm_arb_address[__p][__q]),
               .ic_arb_writedata(local_icm_arb_writedata[__p][__q]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__p][__q]),
               .ic_arb_stall(local_icm_arb_stall[__p][__q]),
               .ic_wrp_ack(local_icm_wrp_ack[__p][__q]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__p][__q]),
               .ic_rrp_data(local_icm_rrp_data[__p][__q])
            );

         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __q = 0; __q < 4; __q = __q + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__p][__q]),
               .m_arb_enable(local_icm_arb_enable[__p][__q]),
               .m_arb_read(local_icm_arb_read[__p][__q]),
               .m_arb_write(local_icm_arb_write[__p][__q]),
               .m_arb_burstcount(local_icm_arb_burstcount[__p][__q]),
               .m_arb_address(local_icm_arb_address[__p][__q]),
               .m_arb_writedata(local_icm_arb_writedata[__p][__q]),
               .m_arb_byteenable(local_icm_arb_byteenable[__p][__q]),
               .m_arb_stall(local_icm_arb_stall[__p][__q]),
               .m_wrp_ack(local_icm_wrp_ack[__p][__q]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__p][__q]),
               .m_rrp_data(local_icm_rrp_data[__p][__q]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_19
            calc_initpop_system_interconnect_19 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_20
            calc_initpop_system_interconnect_20 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_19
            calc_initpop_system_interconnect_19 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __q = 0; __q < 1; __q = __q + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_19
            calc_initpop_system_interconnect_19 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace37
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];

      for( __q = 0; __q < 1; __q = __q + 1 )
      begin:local_mem_group
         for( __r = 0; __r < 5; __r = __r + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace37_enable[__q][__r]),
               .avm_read(local_avm_aspace37_read[__q][__r]),
               .avm_write(local_avm_aspace37_write[__q][__r]),
               .avm_burstcount(local_avm_aspace37_burstcount[__q][__r]),
               .avm_address(local_avm_aspace37_address[__q][__r]),
               .avm_writedata(local_avm_aspace37_writedata[__q][__r]),
               .avm_byteenable(local_avm_aspace37_byteenable[__q][__r]),
               .avm_waitrequest(local_avm_aspace37_waitrequest[__q][__r]),
               .avm_readdata(local_avm_aspace37_readdata[__q][__r]),
               .avm_readdatavalid(local_avm_aspace37_readdatavalid[__q][__r]),
               .avm_writeack(local_avm_aspace37_writeack[__q][__r]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__q][__r]),
               .ic_arb_enable(local_icm_arb_enable[__q][__r]),
               .ic_arb_read(local_icm_arb_read[__q][__r]),
               .ic_arb_write(local_icm_arb_write[__q][__r]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__q][__r]),
               .ic_arb_address(local_icm_arb_address[__q][__r]),
               .ic_arb_writedata(local_icm_arb_writedata[__q][__r]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__q][__r]),
               .ic_arb_stall(local_icm_arb_stall[__q][__r]),
               .ic_wrp_ack(local_icm_wrp_ack[__q][__r]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__q][__r]),
               .ic_rrp_data(local_icm_rrp_data[__q][__r])
            );

         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __r = 0; __r < 5; __r = __r + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__q][__r]),
               .m_arb_enable(local_icm_arb_enable[__q][__r]),
               .m_arb_read(local_icm_arb_read[__q][__r]),
               .m_arb_write(local_icm_arb_write[__q][__r]),
               .m_arb_burstcount(local_icm_arb_burstcount[__q][__r]),
               .m_arb_address(local_icm_arb_address[__q][__r]),
               .m_arb_writedata(local_icm_arb_writedata[__q][__r]),
               .m_arb_byteenable(local_icm_arb_byteenable[__q][__r]),
               .m_arb_stall(local_icm_arb_stall[__q][__r]),
               .m_wrp_ack(local_icm_wrp_ack[__q][__r]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__q][__r]),
               .m_rrp_data(local_icm_rrp_data[__q][__r]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[4].b_arb_read[0];
            assign icm_in_arb_write[2] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_25
            calc_initpop_system_interconnect_25 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __r = 0; __r < 1; __r = __r + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_37
            calc_initpop_system_interconnect_37 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace38
      logic local_icm_arb_request [1][6];
      logic local_icm_arb_enable [1][6];
      logic local_icm_arb_read [1][6];
      logic local_icm_arb_write [1][6];
      logic local_icm_arb_burstcount [1][6];
      logic local_icm_arb_address [1][6];
      logic [31:0] local_icm_arb_writedata [1][6];
      logic [3:0] local_icm_arb_byteenable [1][6];
      logic local_icm_arb_stall [1][6];
      logic local_icm_wrp_ack [1][6];
      logic local_icm_rrp_datavalid [1][6];
      logic [31:0] local_icm_rrp_data [1][6];

      for( __r = 0; __r < 1; __r = __r + 1 )
      begin:local_mem_group
         for( __s = 0; __s < 6; __s = __s + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace38_enable[__r][__s]),
               .avm_read(local_avm_aspace38_read[__r][__s]),
               .avm_write(local_avm_aspace38_write[__r][__s]),
               .avm_burstcount(local_avm_aspace38_burstcount[__r][__s]),
               .avm_address(local_avm_aspace38_address[__r][__s]),
               .avm_writedata(local_avm_aspace38_writedata[__r][__s]),
               .avm_byteenable(local_avm_aspace38_byteenable[__r][__s]),
               .avm_waitrequest(local_avm_aspace38_waitrequest[__r][__s]),
               .avm_readdata(local_avm_aspace38_readdata[__r][__s]),
               .avm_readdatavalid(local_avm_aspace38_readdatavalid[__r][__s]),
               .avm_writeack(local_avm_aspace38_writeack[__r][__s]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__r][__s]),
               .ic_arb_enable(local_icm_arb_enable[__r][__s]),
               .ic_arb_read(local_icm_arb_read[__r][__s]),
               .ic_arb_write(local_icm_arb_write[__r][__s]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__r][__s]),
               .ic_arb_address(local_icm_arb_address[__r][__s]),
               .ic_arb_writedata(local_icm_arb_writedata[__r][__s]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__r][__s]),
               .ic_arb_stall(local_icm_arb_stall[__r][__s]),
               .ic_wrp_ack(local_icm_wrp_ack[__r][__s]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__r][__s]),
               .ic_rrp_data(local_icm_rrp_data[__r][__s])
            );

         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .PREFERRED_WIDTH(320),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __s = 0; __s < 6; __s = __s + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__r][__s]),
               .m_arb_enable(local_icm_arb_enable[__r][__s]),
               .m_arb_read(local_icm_arb_read[__r][__s]),
               .m_arb_write(local_icm_arb_write[__r][__s]),
               .m_arb_burstcount(local_icm_arb_burstcount[__r][__s]),
               .m_arb_address(local_icm_arb_address[__r][__s]),
               .m_arb_writedata(local_icm_arb_writedata[__r][__s]),
               .m_arb_byteenable(local_icm_arb_byteenable[__r][__s]),
               .m_arb_stall(local_icm_arb_stall[__r][__s]),
               .m_wrp_ack(local_icm_wrp_ack[__r][__s]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__r][__s]),
               .m_rrp_data(local_icm_rrp_data[__r][__s]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[5].b_arb_read[0];
            assign icm_in_arb_write[2] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_41
            calc_initpop_system_interconnect_41 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __s = 0; __s < 1; __s = __s + 1 )
         begin:port2bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[2].b_arb_read[0];
            assign icm_in_arb_write[1] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[4].b_arb_read[0];
            assign icm_in_arb_write[2] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_36
            calc_initpop_system_interconnect_36 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace39
      logic local_icm_arb_request [1][5];
      logic local_icm_arb_enable [1][5];
      logic local_icm_arb_read [1][5];
      logic local_icm_arb_write [1][5];
      logic local_icm_arb_burstcount [1][5];
      logic [6:0] local_icm_arb_address [1][5];
      logic [31:0] local_icm_arb_writedata [1][5];
      logic [3:0] local_icm_arb_byteenable [1][5];
      logic local_icm_arb_stall [1][5];
      logic local_icm_wrp_ack [1][5];
      logic local_icm_rrp_datavalid [1][5];
      logic [31:0] local_icm_rrp_data [1][5];
      logic invalid_access_grps;

      for( __s = 0; __s < 1; __s = __s + 1 )
      begin:local_mem_group
         for( __t = 0; __t < 5; __t = __t + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace39_enable[__s][__t]),
               .avm_read(local_avm_aspace39_read[__s][__t]),
               .avm_write(local_avm_aspace39_write[__s][__t]),
               .avm_burstcount(local_avm_aspace39_burstcount[__s][__t]),
               .avm_address(local_avm_aspace39_address[__s][__t]),
               .avm_writedata(local_avm_aspace39_writedata[__s][__t]),
               .avm_byteenable(local_avm_aspace39_byteenable[__s][__t]),
               .avm_waitrequest(local_avm_aspace39_waitrequest[__s][__t]),
               .avm_readdata(local_avm_aspace39_readdata[__s][__t]),
               .avm_readdatavalid(local_avm_aspace39_readdatavalid[__s][__t]),
               .avm_writeack(local_avm_aspace39_writeack[__s][__t]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__s][__t]),
               .ic_arb_enable(local_icm_arb_enable[__s][__t]),
               .ic_arb_read(local_icm_arb_read[__s][__t]),
               .ic_arb_write(local_icm_arb_write[__s][__t]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__s][__t]),
               .ic_arb_address(local_icm_arb_address[__s][__t]),
               .ic_arb_writedata(local_icm_arb_writedata[__s][__t]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__s][__t]),
               .ic_arb_stall(local_icm_arb_stall[__s][__t]),
               .ic_wrp_ack(local_icm_wrp_ack[__s][__t]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__s][__t]),
               .ic_rrp_data(local_icm_rrp_data[__s][__t])
            );

         end

         for( __t = 0; __t < 2; __t = __t + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [5:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(64),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __t = 0; __t < 5; __t = __t + 1 )
         begin:router
            logic b_arb_request [2];
            logic b_arb_enable [2];
            logic b_arb_read [2];
            logic b_arb_write [2];
            logic b_arb_burstcount [2];
            logic [5:0] b_arb_address [2];
            logic [31:0] b_arb_writedata [2];
            logic [3:0] b_arb_byteenable [2];
            logic b_arb_stall [2];
            logic b_wrp_ack [2];
            logic b_rrp_datavalid [2];
            logic [31:0] b_rrp_data [2];
            logic [1:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(4),
               .NUM_BANKS(2)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__s][__t]),
               .m_arb_enable(local_icm_arb_enable[__s][__t]),
               .m_arb_read(local_icm_arb_read[__s][__t]),
               .m_arb_write(local_icm_arb_write[__s][__t]),
               .m_arb_burstcount(local_icm_arb_burstcount[__s][__t]),
               .m_arb_address(local_icm_arb_address[__s][__t]),
               .m_arb_writedata(local_icm_arb_writedata[__s][__t]),
               .m_arb_byteenable(local_icm_arb_byteenable[__s][__t]),
               .m_arb_stall(local_icm_arb_stall[__s][__t]),
               .m_wrp_ack(local_icm_wrp_ack[__s][__t]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__s][__t]),
               .m_rrp_data(local_icm_rrp_data[__s][__t]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__s][__t][6] == 1'b0);
            assign bank_select[1] = (local_icm_arb_address[__s][__t][6] == 1'b1);
         end

         assign invalid_access_grps = 'b0;
         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port1bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[3].b_arb_read[1];
            assign icm_in_arb_write[1] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_18
            calc_initpop_system_interconnect_18 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[4].b_arb_read[1];
            assign icm_in_arb_write[0] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_18
            calc_initpop_system_interconnect_18 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_18
            calc_initpop_system_interconnect_18 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_18
            calc_initpop_system_interconnect_18 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_18
            calc_initpop_system_interconnect_18 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __t = 0; __t < 1; __t = __t + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_18
            calc_initpop_system_interconnect_18 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[10] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace40
      logic local_icm_arb_request [1][16];
      logic local_icm_arb_enable [1][16];
      logic local_icm_arb_read [1][16];
      logic local_icm_arb_write [1][16];
      logic local_icm_arb_burstcount [1][16];
      logic [6:0] local_icm_arb_address [1][16];
      logic [31:0] local_icm_arb_writedata [1][16];
      logic [3:0] local_icm_arb_byteenable [1][16];
      logic local_icm_arb_stall [1][16];
      logic local_icm_wrp_ack [1][16];
      logic local_icm_rrp_datavalid [1][16];
      logic [31:0] local_icm_rrp_data [1][16];
      logic invalid_access_grps;

      for( __t = 0; __t < 1; __t = __t + 1 )
      begin:local_mem_group
         logic [29:0] invalid_access_terms;

         for( __u = 0; __u < 16; __u = __u + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace40_enable[__t][__u]),
               .avm_read(local_avm_aspace40_read[__t][__u]),
               .avm_write(local_avm_aspace40_write[__t][__u]),
               .avm_burstcount(local_avm_aspace40_burstcount[__t][__u]),
               .avm_address(local_avm_aspace40_address[__t][__u]),
               .avm_writedata(local_avm_aspace40_writedata[__t][__u]),
               .avm_byteenable(local_avm_aspace40_byteenable[__t][__u]),
               .avm_waitrequest(local_avm_aspace40_waitrequest[__t][__u]),
               .avm_readdata(local_avm_aspace40_readdata[__t][__u]),
               .avm_readdatavalid(local_avm_aspace40_readdatavalid[__t][__u]),
               .avm_writeack(local_avm_aspace40_writeack[__t][__u]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__t][__u]),
               .ic_arb_enable(local_icm_arb_enable[__t][__u]),
               .ic_arb_read(local_icm_arb_read[__t][__u]),
               .ic_arb_write(local_icm_arb_write[__t][__u]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__t][__u]),
               .ic_arb_address(local_icm_arb_address[__t][__u]),
               .ic_arb_writedata(local_icm_arb_writedata[__t][__u]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__t][__u]),
               .ic_arb_stall(local_icm_arb_stall[__t][__u]),
               .ic_wrp_ack(local_icm_wrp_ack[__t][__u]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__t][__u]),
               .ic_rrp_data(local_icm_rrp_data[__t][__u])
            );

         end

         for( __u = 0; __u < 4; __u = __u + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [4:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(32),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __u = 0; __u < 16; __u = __u + 1 )
         begin:router
            logic b_arb_request [4];
            logic b_arb_enable [4];
            logic b_arb_read [4];
            logic b_arb_write [4];
            logic b_arb_burstcount [4];
            logic [4:0] b_arb_address [4];
            logic [31:0] b_arb_writedata [4];
            logic [3:0] b_arb_byteenable [4];
            logic b_arb_stall [4];
            logic b_wrp_ack [4];
            logic b_rrp_datavalid [4];
            logic [31:0] b_rrp_data [4];
            logic [3:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(7),
               .BYTEENA_W(4),
               .NUM_BANKS(4)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__t][__u]),
               .m_arb_enable(local_icm_arb_enable[__t][__u]),
               .m_arb_read(local_icm_arb_read[__t][__u]),
               .m_arb_write(local_icm_arb_write[__t][__u]),
               .m_arb_burstcount(local_icm_arb_burstcount[__t][__u]),
               .m_arb_address(local_icm_arb_address[__t][__u]),
               .m_arb_writedata(local_icm_arb_writedata[__t][__u]),
               .m_arb_byteenable(local_icm_arb_byteenable[__t][__u]),
               .m_arb_stall(local_icm_arb_stall[__t][__u]),
               .m_wrp_ack(local_icm_wrp_ack[__t][__u]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__t][__u]),
               .m_rrp_data(local_icm_rrp_data[__t][__u]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__t][__u][6:5] == 2'b00);
            assign bank_select[1] = (local_icm_arb_address[__t][__u][6:5] == 2'b01);
            assign bank_select[2] = (local_icm_arb_address[__t][__u][6:5] == 2'b10);
            assign bank_select[3] = (local_icm_arb_address[__t][__u][6:5] == 2'b11);
         end

         assign invalid_access_grps = |invalid_access_terms;
         // INST acl_ic_local_mem_router_terminator_m0b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m0b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[0].b_arb_request[0]),
            .b_arb_read(router[0].b_arb_read[0]),
            .b_arb_write(router[0].b_arb_write[0]),
            .b_arb_stall(router[0].b_arb_stall[0]),
            .b_wrp_ack(router[0].b_wrp_ack[0]),
            .b_rrp_datavalid(router[0].b_rrp_datavalid[0]),
            .b_rrp_data(router[0].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[0])
         );

         // INST acl_ic_local_mem_router_terminator_m0b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m0b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[0].b_arb_request[2]),
            .b_arb_read(router[0].b_arb_read[2]),
            .b_arb_write(router[0].b_arb_write[2]),
            .b_arb_stall(router[0].b_arb_stall[2]),
            .b_wrp_ack(router[0].b_wrp_ack[2]),
            .b_rrp_datavalid(router[0].b_rrp_datavalid[2]),
            .b_rrp_data(router[0].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[1])
         );

         // INST acl_ic_local_mem_router_terminator_m0b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m0b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[0].b_arb_request[3]),
            .b_arb_read(router[0].b_arb_read[3]),
            .b_arb_write(router[0].b_arb_write[3]),
            .b_arb_stall(router[0].b_arb_stall[3]),
            .b_wrp_ack(router[0].b_wrp_ack[3]),
            .b_rrp_datavalid(router[0].b_rrp_datavalid[3]),
            .b_rrp_data(router[0].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[2])
         );

         // INST acl_ic_local_mem_router_terminator_m1b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m1b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[1].b_arb_request[0]),
            .b_arb_read(router[1].b_arb_read[0]),
            .b_arb_write(router[1].b_arb_write[0]),
            .b_arb_stall(router[1].b_arb_stall[0]),
            .b_wrp_ack(router[1].b_wrp_ack[0]),
            .b_rrp_datavalid(router[1].b_rrp_datavalid[0]),
            .b_rrp_data(router[1].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[3])
         );

         // INST acl_ic_local_mem_router_terminator_m1b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m1b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[1].b_arb_request[1]),
            .b_arb_read(router[1].b_arb_read[1]),
            .b_arb_write(router[1].b_arb_write[1]),
            .b_arb_stall(router[1].b_arb_stall[1]),
            .b_wrp_ack(router[1].b_wrp_ack[1]),
            .b_rrp_datavalid(router[1].b_rrp_datavalid[1]),
            .b_rrp_data(router[1].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[4])
         );

         // INST acl_ic_local_mem_router_terminator_m1b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m1b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[1].b_arb_request[2]),
            .b_arb_read(router[1].b_arb_read[2]),
            .b_arb_write(router[1].b_arb_write[2]),
            .b_arb_stall(router[1].b_arb_stall[2]),
            .b_wrp_ack(router[1].b_wrp_ack[2]),
            .b_rrp_datavalid(router[1].b_rrp_datavalid[2]),
            .b_rrp_data(router[1].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[5])
         );

         // INST acl_ic_local_mem_router_terminator_m2b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m2b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[2].b_arb_request[1]),
            .b_arb_read(router[2].b_arb_read[1]),
            .b_arb_write(router[2].b_arb_write[1]),
            .b_arb_stall(router[2].b_arb_stall[1]),
            .b_wrp_ack(router[2].b_wrp_ack[1]),
            .b_rrp_datavalid(router[2].b_rrp_datavalid[1]),
            .b_rrp_data(router[2].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[6])
         );

         // INST acl_ic_local_mem_router_terminator_m2b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m2b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[2].b_arb_request[2]),
            .b_arb_read(router[2].b_arb_read[2]),
            .b_arb_write(router[2].b_arb_write[2]),
            .b_arb_stall(router[2].b_arb_stall[2]),
            .b_wrp_ack(router[2].b_wrp_ack[2]),
            .b_rrp_datavalid(router[2].b_rrp_datavalid[2]),
            .b_rrp_data(router[2].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[7])
         );

         // INST acl_ic_local_mem_router_terminator_m2b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m2b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[2].b_arb_request[3]),
            .b_arb_read(router[2].b_arb_read[3]),
            .b_arb_write(router[2].b_arb_write[3]),
            .b_arb_stall(router[2].b_arb_stall[3]),
            .b_wrp_ack(router[2].b_wrp_ack[3]),
            .b_rrp_datavalid(router[2].b_rrp_datavalid[3]),
            .b_rrp_data(router[2].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[8])
         );

         // INST acl_ic_local_mem_router_terminator_m4b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m4b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[4].b_arb_request[1]),
            .b_arb_read(router[4].b_arb_read[1]),
            .b_arb_write(router[4].b_arb_write[1]),
            .b_arb_stall(router[4].b_arb_stall[1]),
            .b_wrp_ack(router[4].b_wrp_ack[1]),
            .b_rrp_datavalid(router[4].b_rrp_datavalid[1]),
            .b_rrp_data(router[4].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[9])
         );

         // INST acl_ic_local_mem_router_terminator_m4b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m4b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[4].b_arb_request[2]),
            .b_arb_read(router[4].b_arb_read[2]),
            .b_arb_write(router[4].b_arb_write[2]),
            .b_arb_stall(router[4].b_arb_stall[2]),
            .b_wrp_ack(router[4].b_wrp_ack[2]),
            .b_rrp_datavalid(router[4].b_rrp_datavalid[2]),
            .b_rrp_data(router[4].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[10])
         );

         // INST acl_ic_local_mem_router_terminator_m4b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m4b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[4].b_arb_request[3]),
            .b_arb_read(router[4].b_arb_read[3]),
            .b_arb_write(router[4].b_arb_write[3]),
            .b_arb_stall(router[4].b_arb_stall[3]),
            .b_wrp_ack(router[4].b_wrp_ack[3]),
            .b_rrp_datavalid(router[4].b_rrp_datavalid[3]),
            .b_rrp_data(router[4].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[11])
         );

         // INST acl_ic_local_mem_router_terminator_m5b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m5b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[5].b_arb_request[0]),
            .b_arb_read(router[5].b_arb_read[0]),
            .b_arb_write(router[5].b_arb_write[0]),
            .b_arb_stall(router[5].b_arb_stall[0]),
            .b_wrp_ack(router[5].b_wrp_ack[0]),
            .b_rrp_datavalid(router[5].b_rrp_datavalid[0]),
            .b_rrp_data(router[5].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[12])
         );

         // INST acl_ic_local_mem_router_terminator_m5b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m5b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[5].b_arb_request[1]),
            .b_arb_read(router[5].b_arb_read[1]),
            .b_arb_write(router[5].b_arb_write[1]),
            .b_arb_stall(router[5].b_arb_stall[1]),
            .b_wrp_ack(router[5].b_wrp_ack[1]),
            .b_rrp_datavalid(router[5].b_rrp_datavalid[1]),
            .b_rrp_data(router[5].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[13])
         );

         // INST acl_ic_local_mem_router_terminator_m5b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m5b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[5].b_arb_request[3]),
            .b_arb_read(router[5].b_arb_read[3]),
            .b_arb_write(router[5].b_arb_write[3]),
            .b_arb_stall(router[5].b_arb_stall[3]),
            .b_wrp_ack(router[5].b_wrp_ack[3]),
            .b_rrp_datavalid(router[5].b_rrp_datavalid[3]),
            .b_rrp_data(router[5].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[14])
         );

         // INST acl_ic_local_mem_router_terminator_m8b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m8b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[8].b_arb_request[0]),
            .b_arb_read(router[8].b_arb_read[0]),
            .b_arb_write(router[8].b_arb_write[0]),
            .b_arb_stall(router[8].b_arb_stall[0]),
            .b_wrp_ack(router[8].b_wrp_ack[0]),
            .b_rrp_datavalid(router[8].b_rrp_datavalid[0]),
            .b_rrp_data(router[8].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[15])
         );

         // INST acl_ic_local_mem_router_terminator_m8b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m8b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[8].b_arb_request[2]),
            .b_arb_read(router[8].b_arb_read[2]),
            .b_arb_write(router[8].b_arb_write[2]),
            .b_arb_stall(router[8].b_arb_stall[2]),
            .b_wrp_ack(router[8].b_wrp_ack[2]),
            .b_rrp_datavalid(router[8].b_rrp_datavalid[2]),
            .b_rrp_data(router[8].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[16])
         );

         // INST acl_ic_local_mem_router_terminator_m8b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m8b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[8].b_arb_request[3]),
            .b_arb_read(router[8].b_arb_read[3]),
            .b_arb_write(router[8].b_arb_write[3]),
            .b_arb_stall(router[8].b_arb_stall[3]),
            .b_wrp_ack(router[8].b_wrp_ack[3]),
            .b_rrp_datavalid(router[8].b_rrp_datavalid[3]),
            .b_rrp_data(router[8].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[17])
         );

         // INST acl_ic_local_mem_router_terminator_m9b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m9b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[9].b_arb_request[0]),
            .b_arb_read(router[9].b_arb_read[0]),
            .b_arb_write(router[9].b_arb_write[0]),
            .b_arb_stall(router[9].b_arb_stall[0]),
            .b_wrp_ack(router[9].b_wrp_ack[0]),
            .b_rrp_datavalid(router[9].b_rrp_datavalid[0]),
            .b_rrp_data(router[9].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[18])
         );

         // INST acl_ic_local_mem_router_terminator_m9b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m9b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[9].b_arb_request[1]),
            .b_arb_read(router[9].b_arb_read[1]),
            .b_arb_write(router[9].b_arb_write[1]),
            .b_arb_stall(router[9].b_arb_stall[1]),
            .b_wrp_ack(router[9].b_wrp_ack[1]),
            .b_rrp_datavalid(router[9].b_rrp_datavalid[1]),
            .b_rrp_data(router[9].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[19])
         );

         // INST acl_ic_local_mem_router_terminator_m9b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m9b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[9].b_arb_request[2]),
            .b_arb_read(router[9].b_arb_read[2]),
            .b_arb_write(router[9].b_arb_write[2]),
            .b_arb_stall(router[9].b_arb_stall[2]),
            .b_wrp_ack(router[9].b_wrp_ack[2]),
            .b_rrp_datavalid(router[9].b_rrp_datavalid[2]),
            .b_rrp_data(router[9].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[20])
         );

         // INST acl_ic_local_mem_router_terminator_m10b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m10b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[10].b_arb_request[1]),
            .b_arb_read(router[10].b_arb_read[1]),
            .b_arb_write(router[10].b_arb_write[1]),
            .b_arb_stall(router[10].b_arb_stall[1]),
            .b_wrp_ack(router[10].b_wrp_ack[1]),
            .b_rrp_datavalid(router[10].b_rrp_datavalid[1]),
            .b_rrp_data(router[10].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[21])
         );

         // INST acl_ic_local_mem_router_terminator_m10b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m10b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[10].b_arb_request[2]),
            .b_arb_read(router[10].b_arb_read[2]),
            .b_arb_write(router[10].b_arb_write[2]),
            .b_arb_stall(router[10].b_arb_stall[2]),
            .b_wrp_ack(router[10].b_wrp_ack[2]),
            .b_rrp_datavalid(router[10].b_rrp_datavalid[2]),
            .b_rrp_data(router[10].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[22])
         );

         // INST acl_ic_local_mem_router_terminator_m10b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m10b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[10].b_arb_request[3]),
            .b_arb_read(router[10].b_arb_read[3]),
            .b_arb_write(router[10].b_arb_write[3]),
            .b_arb_stall(router[10].b_arb_stall[3]),
            .b_wrp_ack(router[10].b_wrp_ack[3]),
            .b_rrp_datavalid(router[10].b_rrp_datavalid[3]),
            .b_rrp_data(router[10].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[23])
         );

         // INST acl_ic_local_mem_router_terminator_m12b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m12b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[12].b_arb_request[1]),
            .b_arb_read(router[12].b_arb_read[1]),
            .b_arb_write(router[12].b_arb_write[1]),
            .b_arb_stall(router[12].b_arb_stall[1]),
            .b_wrp_ack(router[12].b_wrp_ack[1]),
            .b_rrp_datavalid(router[12].b_rrp_datavalid[1]),
            .b_rrp_data(router[12].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[24])
         );

         // INST acl_ic_local_mem_router_terminator_m12b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m12b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[12].b_arb_request[2]),
            .b_arb_read(router[12].b_arb_read[2]),
            .b_arb_write(router[12].b_arb_write[2]),
            .b_arb_stall(router[12].b_arb_stall[2]),
            .b_wrp_ack(router[12].b_wrp_ack[2]),
            .b_rrp_datavalid(router[12].b_rrp_datavalid[2]),
            .b_rrp_data(router[12].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[25])
         );

         // INST acl_ic_local_mem_router_terminator_m12b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m12b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[12].b_arb_request[3]),
            .b_arb_read(router[12].b_arb_read[3]),
            .b_arb_write(router[12].b_arb_write[3]),
            .b_arb_stall(router[12].b_arb_stall[3]),
            .b_wrp_ack(router[12].b_wrp_ack[3]),
            .b_rrp_datavalid(router[12].b_rrp_datavalid[3]),
            .b_rrp_data(router[12].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[26])
         );

         // INST acl_ic_local_mem_router_terminator_m13b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m13b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[13].b_arb_request[0]),
            .b_arb_read(router[13].b_arb_read[0]),
            .b_arb_write(router[13].b_arb_write[0]),
            .b_arb_stall(router[13].b_arb_stall[0]),
            .b_wrp_ack(router[13].b_wrp_ack[0]),
            .b_rrp_datavalid(router[13].b_rrp_datavalid[0]),
            .b_rrp_data(router[13].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[27])
         );

         // INST acl_ic_local_mem_router_terminator_m13b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m13b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[13].b_arb_request[1]),
            .b_arb_read(router[13].b_arb_read[1]),
            .b_arb_write(router[13].b_arb_write[1]),
            .b_arb_stall(router[13].b_arb_stall[1]),
            .b_wrp_ack(router[13].b_wrp_ack[1]),
            .b_rrp_datavalid(router[13].b_rrp_datavalid[1]),
            .b_rrp_data(router[13].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[28])
         );

         // INST acl_ic_local_mem_router_terminator_m13b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m13b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[13].b_arb_request[3]),
            .b_arb_read(router[13].b_arb_read[3]),
            .b_arb_write(router[13].b_arb_write[3]),
            .b_arb_stall(router[13].b_arb_stall[3]),
            .b_wrp_ack(router[13].b_wrp_ack[3]),
            .b_rrp_datavalid(router[13].b_rrp_datavalid[3]),
            .b_rrp_data(router[13].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[29])
         );

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[6].b_arb_read[0];
            assign icm_in_arb_write[0] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[11].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[11].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[11].b_arb_read[0];
            assign icm_in_arb_write[1] = router[11].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[11].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[11].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[11].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[11].b_arb_byteenable[0];
            assign router[11].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[11].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[11].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[11].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[15].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[15].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[15].b_arb_read[0];
            assign icm_in_arb_write[2] = router[15].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[15].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[15].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[15].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[15].b_arb_byteenable[0];
            assign router[15].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[15].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[15].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[15].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_43
            calc_initpop_system_interconnect_43 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port1bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[7].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[7].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[7].b_arb_read[1];
            assign icm_in_arb_write[0] = router[7].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[7].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[7].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[7].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[7].b_arb_byteenable[1];
            assign router[7].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[7].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[7].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[7].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[15].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[15].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[15].b_arb_read[1];
            assign icm_in_arb_write[1] = router[15].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[15].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[15].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[15].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[15].b_arb_byteenable[1];
            assign router[15].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[15].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[15].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[15].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_4
            calc_initpop_system_interconnect_4 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port1bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[7].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[7].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[7].b_arb_read[2];
            assign icm_in_arb_write[0] = router[7].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[7].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[7].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[7].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[7].b_arb_byteenable[2];
            assign router[7].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[7].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[7].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[7].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[15].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[15].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[15].b_arb_read[2];
            assign icm_in_arb_write[1] = router[15].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[15].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[15].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[15].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[15].b_arb_byteenable[2];
            assign router[15].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[15].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[15].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[15].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_4
            calc_initpop_system_interconnect_4 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port1bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[7].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[7].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[7].b_arb_read[3];
            assign icm_in_arb_write[0] = router[7].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[7].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[7].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[7].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[7].b_arb_byteenable[3];
            assign router[7].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[7].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[7].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[7].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[15].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[15].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[15].b_arb_read[3];
            assign icm_in_arb_write[1] = router[15].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[15].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[15].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[15].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[15].b_arb_byteenable[3];
            assign router[15].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[15].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[15].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[15].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_4
            calc_initpop_system_interconnect_4 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port2bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [4:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[7].b_arb_read[0];
            assign icm_in_arb_write[1] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[14].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[14].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[14].b_arb_read[0];
            assign icm_in_arb_write[2] = router[14].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[14].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[14].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[14].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[14].b_arb_byteenable[0];
            assign router[14].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[14].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[14].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[14].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_33
            calc_initpop_system_interconnect_33 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port2bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[8].b_arb_read[1];
            assign icm_in_arb_write[1] = router[8].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[8].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[1];
            assign router[8].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port2bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[5].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[5].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[5].b_arb_read[2];
            assign icm_in_arb_write[0] = router[5].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[5].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[5].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[5].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[5].b_arb_byteenable[2];
            assign router[5].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[5].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[5].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[5].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[13].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[13].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[13].b_arb_read[2];
            assign icm_in_arb_write[1] = router[13].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[13].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[13].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[13].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[13].b_arb_byteenable[2];
            assign router[13].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[13].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[13].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[13].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port2bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[1].b_arb_read[3];
            assign icm_in_arb_write[0] = router[1].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[1].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[3];
            assign router[1].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[9].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[9].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[9].b_arb_read[3];
            assign icm_in_arb_write[1] = router[9].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[9].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[9].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[9].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[9].b_arb_byteenable[3];
            assign router[9].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[9].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[9].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[9].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port3bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[10].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[10].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[10].b_arb_read[0];
            assign icm_in_arb_write[1] = router[10].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[10].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[10].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[10].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[10].b_arb_byteenable[0];
            assign router[10].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[10].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[10].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[10].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port3bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[3].b_arb_read[1];
            assign icm_in_arb_write[0] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[11].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[11].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[11].b_arb_read[1];
            assign icm_in_arb_write[1] = router[11].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[11].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[11].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[11].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[11].b_arb_byteenable[1];
            assign router[11].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[11].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[11].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[11].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port3bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[3].b_arb_read[2];
            assign icm_in_arb_write[0] = router[3].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[3].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[2];
            assign router[3].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[11].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[11].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[11].b_arb_read[2];
            assign icm_in_arb_write[1] = router[11].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[11].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[11].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[11].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[11].b_arb_byteenable[2];
            assign router[11].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[11].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[11].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[11].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[3] = icm_out_arb_enable;
            assign bank[2].port_read[3] = icm_out_arb_read;
            assign bank[2].port_write[3] = icm_out_arb_write;
            assign bank[2].port_address[3] = icm_out_arb_address;
            assign bank[2].port_writedata[3] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[3];
            assign icm_out_rrp_data = bank[2].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port3bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[3].b_arb_read[3];
            assign icm_in_arb_write[0] = router[3].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[3].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[3];
            assign router[3].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[11].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[11].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[11].b_arb_read[3];
            assign icm_in_arb_write[1] = router[11].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[11].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[11].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[11].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[11].b_arb_byteenable[3];
            assign router[11].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[11].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[11].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[11].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[3] = icm_out_arb_enable;
            assign bank[3].port_read[3] = icm_out_arb_read;
            assign bank[3].port_write[3] = icm_out_arb_write;
            assign bank[3].port_address[3] = icm_out_arb_address;
            assign bank[3].port_writedata[3] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[3];
            assign icm_out_rrp_data = bank[3].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port4bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[12].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[12].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[12].b_arb_read[0];
            assign icm_in_arb_write[1] = router[12].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[12].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[12].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[12].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[12].b_arb_byteenable[0];
            assign router[12].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[12].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[12].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[12].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port4bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[6].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[6].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[6].b_arb_read[1];
            assign icm_in_arb_write[0] = router[6].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[6].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[6].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[6].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[6].b_arb_byteenable[1];
            assign router[6].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[6].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[6].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[6].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[14].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[14].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[14].b_arb_read[1];
            assign icm_in_arb_write[1] = router[14].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[14].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[14].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[14].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[14].b_arb_byteenable[1];
            assign router[14].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[14].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[14].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[14].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port4bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[6].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[6].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[6].b_arb_read[2];
            assign icm_in_arb_write[0] = router[6].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[6].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[6].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[6].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[6].b_arb_byteenable[2];
            assign router[6].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[6].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[6].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[6].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[14].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[14].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[14].b_arb_read[2];
            assign icm_in_arb_write[1] = router[14].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[14].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[14].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[14].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[14].b_arb_byteenable[2];
            assign router[14].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[14].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[14].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[14].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[4] = icm_out_arb_enable;
            assign bank[2].port_read[4] = icm_out_arb_read;
            assign bank[2].port_write[4] = icm_out_arb_write;
            assign bank[2].port_address[4] = icm_out_arb_address;
            assign bank[2].port_writedata[4] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[4];
            assign icm_out_rrp_data = bank[2].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __u = 0; __u < 1; __u = __u + 1 )
         begin:port4bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [4:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[6].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[6].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[6].b_arb_read[3];
            assign icm_in_arb_write[0] = router[6].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[6].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[6].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[6].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[6].b_arb_byteenable[3];
            assign router[6].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[6].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[6].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[6].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[14].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[14].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[14].b_arb_read[3];
            assign icm_in_arb_write[1] = router[14].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[14].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[14].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[14].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[14].b_arb_byteenable[3];
            assign router[14].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[14].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[14].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[14].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_5
            calc_initpop_system_interconnect_5 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[4] = icm_out_arb_enable;
            assign bank[3].port_read[4] = icm_out_arb_read;
            assign bank[3].port_write[4] = icm_out_arb_write;
            assign bank[3].port_address[4] = icm_out_arb_address;
            assign bank[3].port_writedata[4] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[4];
            assign icm_out_rrp_data = bank[3].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[11] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace41
      logic local_icm_arb_request [1][14];
      logic local_icm_arb_enable [1][14];
      logic local_icm_arb_read [1][14];
      logic local_icm_arb_write [1][14];
      logic local_icm_arb_burstcount [1][14];
      logic [5:0] local_icm_arb_address [1][14];
      logic [31:0] local_icm_arb_writedata [1][14];
      logic [3:0] local_icm_arb_byteenable [1][14];
      logic local_icm_arb_stall [1][14];
      logic local_icm_wrp_ack [1][14];
      logic local_icm_rrp_datavalid [1][14];
      logic [31:0] local_icm_rrp_data [1][14];
      logic invalid_access_grps;

      for( __u = 0; __u < 1; __u = __u + 1 )
      begin:local_mem_group
         logic [5:0] invalid_access_terms;

         for( __v = 0; __v < 14; __v = __v + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace41_enable[__u][__v]),
               .avm_read(local_avm_aspace41_read[__u][__v]),
               .avm_write(local_avm_aspace41_write[__u][__v]),
               .avm_burstcount(local_avm_aspace41_burstcount[__u][__v]),
               .avm_address(local_avm_aspace41_address[__u][__v]),
               .avm_writedata(local_avm_aspace41_writedata[__u][__v]),
               .avm_byteenable(local_avm_aspace41_byteenable[__u][__v]),
               .avm_waitrequest(local_avm_aspace41_waitrequest[__u][__v]),
               .avm_readdata(local_avm_aspace41_readdata[__u][__v]),
               .avm_readdatavalid(local_avm_aspace41_readdatavalid[__u][__v]),
               .avm_writeack(local_avm_aspace41_writeack[__u][__v]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__u][__v]),
               .ic_arb_enable(local_icm_arb_enable[__u][__v]),
               .ic_arb_read(local_icm_arb_read[__u][__v]),
               .ic_arb_write(local_icm_arb_write[__u][__v]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__u][__v]),
               .ic_arb_address(local_icm_arb_address[__u][__v]),
               .ic_arb_writedata(local_icm_arb_writedata[__u][__v]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__u][__v]),
               .ic_arb_stall(local_icm_arb_stall[__u][__v]),
               .ic_wrp_ack(local_icm_wrp_ack[__u][__v]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__u][__v]),
               .ic_rrp_data(local_icm_rrp_data[__u][__v])
            );

         end

         for( __v = 0; __v < 4; __v = __v + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [3:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(16),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __v = 0; __v < 14; __v = __v + 1 )
         begin:router
            logic b_arb_request [4];
            logic b_arb_enable [4];
            logic b_arb_read [4];
            logic b_arb_write [4];
            logic b_arb_burstcount [4];
            logic [3:0] b_arb_address [4];
            logic [31:0] b_arb_writedata [4];
            logic [3:0] b_arb_byteenable [4];
            logic b_arb_stall [4];
            logic b_wrp_ack [4];
            logic b_rrp_datavalid [4];
            logic [31:0] b_rrp_data [4];
            logic [3:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(6),
               .BYTEENA_W(4),
               .NUM_BANKS(4)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__u][__v]),
               .m_arb_enable(local_icm_arb_enable[__u][__v]),
               .m_arb_read(local_icm_arb_read[__u][__v]),
               .m_arb_write(local_icm_arb_write[__u][__v]),
               .m_arb_burstcount(local_icm_arb_burstcount[__u][__v]),
               .m_arb_address(local_icm_arb_address[__u][__v]),
               .m_arb_writedata(local_icm_arb_writedata[__u][__v]),
               .m_arb_byteenable(local_icm_arb_byteenable[__u][__v]),
               .m_arb_stall(local_icm_arb_stall[__u][__v]),
               .m_wrp_ack(local_icm_wrp_ack[__u][__v]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__u][__v]),
               .m_rrp_data(local_icm_rrp_data[__u][__v]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__u][__v][5:4] == 2'b00);
            assign bank_select[1] = (local_icm_arb_address[__u][__v][5:4] == 2'b01);
            assign bank_select[2] = (local_icm_arb_address[__u][__v][5:4] == 2'b10);
            assign bank_select[3] = (local_icm_arb_address[__u][__v][5:4] == 2'b11);
         end

         assign invalid_access_grps = |invalid_access_terms;
         // INST acl_ic_local_mem_router_terminator_m5b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m5b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[5].b_arb_request[1]),
            .b_arb_read(router[5].b_arb_read[1]),
            .b_arb_write(router[5].b_arb_write[1]),
            .b_arb_stall(router[5].b_arb_stall[1]),
            .b_wrp_ack(router[5].b_wrp_ack[1]),
            .b_rrp_datavalid(router[5].b_rrp_datavalid[1]),
            .b_rrp_data(router[5].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[0])
         );

         // INST acl_ic_local_mem_router_terminator_m5b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m5b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[5].b_arb_request[2]),
            .b_arb_read(router[5].b_arb_read[2]),
            .b_arb_write(router[5].b_arb_write[2]),
            .b_arb_stall(router[5].b_arb_stall[2]),
            .b_wrp_ack(router[5].b_wrp_ack[2]),
            .b_rrp_datavalid(router[5].b_rrp_datavalid[2]),
            .b_rrp_data(router[5].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[1])
         );

         // INST acl_ic_local_mem_router_terminator_m5b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m5b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[5].b_arb_request[3]),
            .b_arb_read(router[5].b_arb_read[3]),
            .b_arb_write(router[5].b_arb_write[3]),
            .b_arb_stall(router[5].b_arb_stall[3]),
            .b_wrp_ack(router[5].b_wrp_ack[3]),
            .b_rrp_datavalid(router[5].b_rrp_datavalid[3]),
            .b_rrp_data(router[5].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[2])
         );

         // INST acl_ic_local_mem_router_terminator_m12b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m12b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[12].b_arb_request[1]),
            .b_arb_read(router[12].b_arb_read[1]),
            .b_arb_write(router[12].b_arb_write[1]),
            .b_arb_stall(router[12].b_arb_stall[1]),
            .b_wrp_ack(router[12].b_wrp_ack[1]),
            .b_rrp_datavalid(router[12].b_rrp_datavalid[1]),
            .b_rrp_data(router[12].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[3])
         );

         // INST acl_ic_local_mem_router_terminator_m12b2 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m12b2
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[12].b_arb_request[2]),
            .b_arb_read(router[12].b_arb_read[2]),
            .b_arb_write(router[12].b_arb_write[2]),
            .b_arb_stall(router[12].b_arb_stall[2]),
            .b_wrp_ack(router[12].b_wrp_ack[2]),
            .b_rrp_datavalid(router[12].b_rrp_datavalid[2]),
            .b_rrp_data(router[12].b_rrp_data[2]),
            .b_invalid_access(invalid_access_terms[4])
         );

         // INST acl_ic_local_mem_router_terminator_m12b3 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(32)
         )
         acl_ic_local_mem_router_terminator_m12b3
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[12].b_arb_request[3]),
            .b_arb_read(router[12].b_arb_read[3]),
            .b_arb_write(router[12].b_arb_write[3]),
            .b_arb_stall(router[12].b_arb_stall[3]),
            .b_wrp_ack(router[12].b_wrp_ack[3]),
            .b_rrp_datavalid(router[12].b_rrp_datavalid[3]),
            .b_rrp_data(router[12].b_rrp_data[3]),
            .b_invalid_access(invalid_access_terms[5])
         );

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port1bank0
            logic icm_in_arb_request [4];
            logic icm_in_arb_enable [4];
            logic icm_in_arb_read [4];
            logic icm_in_arb_write [4];
            logic icm_in_arb_burstcount [4];
            logic [3:0] icm_in_arb_address [4];
            logic [31:0] icm_in_arb_writedata [4];
            logic [3:0] icm_in_arb_byteenable [4];
            logic icm_in_arb_stall [4];
            logic icm_in_wrp_ack [4];
            logic icm_in_rrp_datavalid [4];
            logic [31:0] icm_in_rrp_data [4];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[4].b_arb_read[0];
            assign icm_in_arb_write[1] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[8].b_arb_read[0];
            assign icm_in_arb_write[2] = router[8].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[8].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[0];
            assign router[8].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[12].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[12].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[12].b_arb_read[0];
            assign icm_in_arb_write[3] = router[12].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[12].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[12].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[12].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[12].b_arb_byteenable[0];
            assign router[12].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[12].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[12].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[12].b_rrp_data[0] = icm_in_rrp_data[3];
            // INST data_ic of calc_initpop_system_interconnect_44
            calc_initpop_system_interconnect_44 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port1bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[4].b_arb_read[1];
            assign icm_in_arb_write[1] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[9].b_arb_read[1];
            assign icm_in_arb_write[2] = router[9].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[9].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[1];
            assign router[9].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_45
            calc_initpop_system_interconnect_45 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port1bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[0].b_arb_read[2];
            assign icm_in_arb_write[0] = router[0].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[0].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[2];
            assign router[0].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[4].b_arb_read[2];
            assign icm_in_arb_write[1] = router[4].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[4].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[2];
            assign router[4].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[9].b_arb_read[2];
            assign icm_in_arb_write[2] = router[9].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[9].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[2];
            assign router[9].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_45
            calc_initpop_system_interconnect_45 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port1bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[0].b_arb_read[3];
            assign icm_in_arb_write[0] = router[0].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[0].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[3];
            assign router[0].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[4].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[4].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[4].b_arb_read[3];
            assign icm_in_arb_write[1] = router[4].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[4].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[4].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[4].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[4].b_arb_byteenable[3];
            assign router[4].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[4].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[4].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[4].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[9].b_arb_read[3];
            assign icm_in_arb_write[2] = router[9].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[9].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[3];
            assign router[9].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_45
            calc_initpop_system_interconnect_45 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port2bank0
            logic icm_in_arb_request [4];
            logic icm_in_arb_enable [4];
            logic icm_in_arb_read [4];
            logic icm_in_arb_write [4];
            logic icm_in_arb_burstcount [4];
            logic [3:0] icm_in_arb_address [4];
            logic [31:0] icm_in_arb_writedata [4];
            logic [3:0] icm_in_arb_byteenable [4];
            logic icm_in_arb_stall [4];
            logic icm_in_wrp_ack [4];
            logic icm_in_rrp_datavalid [4];
            logic [31:0] icm_in_rrp_data [4];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[5].b_arb_read[0];
            assign icm_in_arb_write[1] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[9].b_arb_read[0];
            assign icm_in_arb_write[2] = router[9].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[9].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[0];
            assign router[9].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[13].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[13].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[13].b_arb_read[0];
            assign icm_in_arb_write[3] = router[13].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[13].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[13].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[13].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[13].b_arb_byteenable[0];
            assign router[13].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[13].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[13].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[13].b_rrp_data[0] = icm_in_rrp_data[3];
            // INST data_ic of calc_initpop_system_interconnect_46
            calc_initpop_system_interconnect_46 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port2bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[6].b_arb_read[1];
            assign icm_in_arb_write[1] = router[6].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[6].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[1];
            assign router[6].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[10].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[10].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[10].b_arb_read[1];
            assign icm_in_arb_write[2] = router[10].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[10].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[10].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[10].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[10].b_arb_byteenable[1];
            assign router[10].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[10].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[10].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[10].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_47
            calc_initpop_system_interconnect_47 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port2bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[1].b_arb_read[2];
            assign icm_in_arb_write[0] = router[1].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[1].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[2];
            assign router[1].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[6].b_arb_read[2];
            assign icm_in_arb_write[1] = router[6].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[6].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[2];
            assign router[6].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[10].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[10].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[10].b_arb_read[2];
            assign icm_in_arb_write[2] = router[10].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[10].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[10].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[10].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[10].b_arb_byteenable[2];
            assign router[10].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[10].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[10].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[10].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_47
            calc_initpop_system_interconnect_47 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port2bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[1].b_arb_read[3];
            assign icm_in_arb_write[0] = router[1].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[1].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[3];
            assign router[1].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[6].b_arb_read[3];
            assign icm_in_arb_write[1] = router[6].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[6].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[3];
            assign router[6].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[10].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[10].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[10].b_arb_read[3];
            assign icm_in_arb_write[2] = router[10].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[10].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[10].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[10].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[10].b_arb_byteenable[3];
            assign router[10].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[10].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[10].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[10].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_47
            calc_initpop_system_interconnect_47 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port3bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[6].b_arb_read[0];
            assign icm_in_arb_write[1] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[10].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[10].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[10].b_arb_read[0];
            assign icm_in_arb_write[2] = router[10].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[10].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[10].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[10].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[10].b_arb_byteenable[0];
            assign router[10].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[10].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[10].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[10].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_48
            calc_initpop_system_interconnect_48 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port3bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[7].b_arb_read[1];
            assign icm_in_arb_write[1] = router[7].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[7].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[1];
            assign router[7].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[11].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[11].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[11].b_arb_read[1];
            assign icm_in_arb_write[2] = router[11].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[11].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[11].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[11].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[11].b_arb_byteenable[1];
            assign router[11].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[11].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[11].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[11].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_45
            calc_initpop_system_interconnect_45 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port3bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[2].b_arb_read[2];
            assign icm_in_arb_write[0] = router[2].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[2].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[2];
            assign router[2].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[7].b_arb_read[2];
            assign icm_in_arb_write[1] = router[7].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[7].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[2];
            assign router[7].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[11].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[11].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[11].b_arb_read[2];
            assign icm_in_arb_write[2] = router[11].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[11].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[11].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[11].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[11].b_arb_byteenable[2];
            assign router[11].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[11].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[11].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[11].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_45
            calc_initpop_system_interconnect_45 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[3] = icm_out_arb_enable;
            assign bank[2].port_read[3] = icm_out_arb_read;
            assign bank[2].port_write[3] = icm_out_arb_write;
            assign bank[2].port_address[3] = icm_out_arb_address;
            assign bank[2].port_writedata[3] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[3];
            assign icm_out_rrp_data = bank[2].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port3bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[2].b_arb_read[3];
            assign icm_in_arb_write[0] = router[2].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[2].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[3];
            assign router[2].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[7].b_arb_read[3];
            assign icm_in_arb_write[1] = router[7].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[7].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[3];
            assign router[7].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[11].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[11].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[11].b_arb_read[3];
            assign icm_in_arb_write[2] = router[11].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[11].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[11].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[11].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[11].b_arb_byteenable[3];
            assign router[11].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[11].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[11].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[11].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_45
            calc_initpop_system_interconnect_45 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[3] = icm_out_arb_enable;
            assign bank[3].port_read[3] = icm_out_arb_read;
            assign bank[3].port_write[3] = icm_out_arb_write;
            assign bank[3].port_address[3] = icm_out_arb_address;
            assign bank[3].port_writedata[3] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[3];
            assign icm_out_rrp_data = bank[3].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port4bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[7].b_arb_read[0];
            assign icm_in_arb_write[1] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[11].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[11].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[11].b_arb_read[0];
            assign icm_in_arb_write[2] = router[11].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[11].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[11].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[11].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[11].b_arb_byteenable[0];
            assign router[11].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[11].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[11].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[11].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_49
            calc_initpop_system_interconnect_49 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port4bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[3].b_arb_read[1];
            assign icm_in_arb_write[0] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[8].b_arb_read[1];
            assign icm_in_arb_write[1] = router[8].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[8].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[1];
            assign router[8].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[13].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[13].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[13].b_arb_read[1];
            assign icm_in_arb_write[2] = router[13].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[13].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[13].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[13].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[13].b_arb_byteenable[1];
            assign router[13].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[13].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[13].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[13].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_47
            calc_initpop_system_interconnect_47 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port4bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[3].b_arb_read[2];
            assign icm_in_arb_write[0] = router[3].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[3].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[2];
            assign router[3].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[8].b_arb_read[2];
            assign icm_in_arb_write[1] = router[8].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[8].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[2];
            assign router[8].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[13].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[13].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[13].b_arb_read[2];
            assign icm_in_arb_write[2] = router[13].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[13].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[13].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[13].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[13].b_arb_byteenable[2];
            assign router[13].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[13].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[13].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[13].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_47
            calc_initpop_system_interconnect_47 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[4] = icm_out_arb_enable;
            assign bank[2].port_read[4] = icm_out_arb_read;
            assign bank[2].port_write[4] = icm_out_arb_write;
            assign bank[2].port_address[4] = icm_out_arb_address;
            assign bank[2].port_writedata[4] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[4];
            assign icm_out_rrp_data = bank[2].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __v = 0; __v < 1; __v = __v + 1 )
         begin:port4bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [3:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [3:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[3].b_arb_read[3];
            assign icm_in_arb_write[0] = router[3].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[3].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[3];
            assign router[3].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[8].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[8].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[8].b_arb_read[3];
            assign icm_in_arb_write[1] = router[8].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[8].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[8].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[8].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[8].b_arb_byteenable[3];
            assign router[8].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[8].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[8].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[8].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[13].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[13].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[13].b_arb_read[3];
            assign icm_in_arb_write[2] = router[13].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[13].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[13].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[13].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[13].b_arb_byteenable[3];
            assign router[13].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[13].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[13].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[13].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_47
            calc_initpop_system_interconnect_47 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[4] = icm_out_arb_enable;
            assign bank[3].port_read[4] = icm_out_arb_read;
            assign bank[3].port_write[4] = icm_out_arb_write;
            assign bank[3].port_address[4] = icm_out_arb_address;
            assign bank[3].port_writedata[4] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[4];
            assign icm_out_rrp_data = bank[3].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[12] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace42
      logic local_icm_arb_request [1][10];
      logic local_icm_arb_enable [1][10];
      logic local_icm_arb_read [1][10];
      logic local_icm_arb_write [1][10];
      logic local_icm_arb_burstcount [1][10];
      logic [7:0] local_icm_arb_address [1][10];
      logic [31:0] local_icm_arb_writedata [1][10];
      logic [3:0] local_icm_arb_byteenable [1][10];
      logic local_icm_arb_stall [1][10];
      logic local_icm_wrp_ack [1][10];
      logic local_icm_rrp_datavalid [1][10];
      logic [31:0] local_icm_rrp_data [1][10];
      logic invalid_access_grps;

      for( __v = 0; __v < 1; __v = __v + 1 )
      begin:local_mem_group
         for( __w = 0; __w < 10; __w = __w + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace42_enable[__v][__w]),
               .avm_read(local_avm_aspace42_read[__v][__w]),
               .avm_write(local_avm_aspace42_write[__v][__w]),
               .avm_burstcount(local_avm_aspace42_burstcount[__v][__w]),
               .avm_address(local_avm_aspace42_address[__v][__w]),
               .avm_writedata(local_avm_aspace42_writedata[__v][__w]),
               .avm_byteenable(local_avm_aspace42_byteenable[__v][__w]),
               .avm_waitrequest(local_avm_aspace42_waitrequest[__v][__w]),
               .avm_readdata(local_avm_aspace42_readdata[__v][__w]),
               .avm_readdatavalid(local_avm_aspace42_readdatavalid[__v][__w]),
               .avm_writeack(local_avm_aspace42_writeack[__v][__w]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__v][__w]),
               .ic_arb_enable(local_icm_arb_enable[__v][__w]),
               .ic_arb_read(local_icm_arb_read[__v][__w]),
               .ic_arb_write(local_icm_arb_write[__v][__w]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__v][__w]),
               .ic_arb_address(local_icm_arb_address[__v][__w]),
               .ic_arb_writedata(local_icm_arb_writedata[__v][__w]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__v][__w]),
               .ic_arb_stall(local_icm_arb_stall[__v][__w]),
               .ic_wrp_ack(local_icm_wrp_ack[__v][__w]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__v][__w]),
               .ic_rrp_data(local_icm_rrp_data[__v][__w])
            );

         end

         for( __w = 0; __w < 4; __w = __w + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [5:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(64),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __w = 0; __w < 10; __w = __w + 1 )
         begin:router
            logic b_arb_request [4];
            logic b_arb_enable [4];
            logic b_arb_read [4];
            logic b_arb_write [4];
            logic b_arb_burstcount [4];
            logic [5:0] b_arb_address [4];
            logic [31:0] b_arb_writedata [4];
            logic [3:0] b_arb_byteenable [4];
            logic b_arb_stall [4];
            logic b_wrp_ack [4];
            logic b_rrp_datavalid [4];
            logic [31:0] b_rrp_data [4];
            logic [3:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(8),
               .BYTEENA_W(4),
               .NUM_BANKS(4)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__v][__w]),
               .m_arb_enable(local_icm_arb_enable[__v][__w]),
               .m_arb_read(local_icm_arb_read[__v][__w]),
               .m_arb_write(local_icm_arb_write[__v][__w]),
               .m_arb_burstcount(local_icm_arb_burstcount[__v][__w]),
               .m_arb_address(local_icm_arb_address[__v][__w]),
               .m_arb_writedata(local_icm_arb_writedata[__v][__w]),
               .m_arb_byteenable(local_icm_arb_byteenable[__v][__w]),
               .m_arb_stall(local_icm_arb_stall[__v][__w]),
               .m_wrp_ack(local_icm_wrp_ack[__v][__w]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__v][__w]),
               .m_rrp_data(local_icm_rrp_data[__v][__w]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__v][__w][7:6] == 2'b00);
            assign bank_select[1] = (local_icm_arb_address[__v][__w][7:6] == 2'b01);
            assign bank_select[2] = (local_icm_arb_address[__v][__w][7:6] == 2'b10);
            assign bank_select[3] = (local_icm_arb_address[__v][__w][7:6] == 2'b11);
         end

         assign invalid_access_grps = 'b0;
         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[9].b_arb_read[0];
            assign icm_in_arb_write[2] = router[9].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[9].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[0];
            assign router[9].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_50
            calc_initpop_system_interconnect_50 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port1bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[3].b_arb_read[1];
            assign icm_in_arb_write[1] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[9].b_arb_read[1];
            assign icm_in_arb_write[2] = router[9].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[9].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[1];
            assign router[9].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_50
            calc_initpop_system_interconnect_50 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port1bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[0].b_arb_read[2];
            assign icm_in_arb_write[0] = router[0].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[0].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[2];
            assign router[0].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[3].b_arb_read[2];
            assign icm_in_arb_write[1] = router[3].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[3].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[2];
            assign router[3].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[9].b_arb_read[2];
            assign icm_in_arb_write[2] = router[9].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[9].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[2];
            assign router[9].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_50
            calc_initpop_system_interconnect_50 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port1bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[0].b_arb_read[3];
            assign icm_in_arb_write[0] = router[0].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[0].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[3];
            assign router[0].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[3].b_arb_read[3];
            assign icm_in_arb_write[1] = router[3].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[3].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[3];
            assign router[3].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[9].b_arb_read[3];
            assign icm_in_arb_write[2] = router[9].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[9].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[3];
            assign router[9].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_50
            calc_initpop_system_interconnect_50 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port2bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[5].b_arb_read[0];
            assign icm_in_arb_write[1] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[8].b_arb_read[0];
            assign icm_in_arb_write[2] = router[8].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[8].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[0];
            assign router[8].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_51
            calc_initpop_system_interconnect_51 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port2bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[5].b_arb_read[1];
            assign icm_in_arb_write[1] = router[5].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[5].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[1];
            assign router[5].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[8].b_arb_read[1];
            assign icm_in_arb_write[2] = router[8].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[8].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[1];
            assign router[8].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_51
            calc_initpop_system_interconnect_51 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port2bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[1].b_arb_read[2];
            assign icm_in_arb_write[0] = router[1].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[1].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[2];
            assign router[1].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[5].b_arb_read[2];
            assign icm_in_arb_write[1] = router[5].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[5].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[2];
            assign router[5].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[8].b_arb_read[2];
            assign icm_in_arb_write[2] = router[8].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[8].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[2];
            assign router[8].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_51
            calc_initpop_system_interconnect_51 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port2bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[1].b_arb_read[3];
            assign icm_in_arb_write[0] = router[1].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[1].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[3];
            assign router[1].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[5].b_arb_read[3];
            assign icm_in_arb_write[1] = router[5].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[5].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[3];
            assign router[5].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[8].b_arb_read[3];
            assign icm_in_arb_write[2] = router[8].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[8].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[3];
            assign router[8].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_51
            calc_initpop_system_interconnect_51 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port3bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[6].b_arb_read[0];
            assign icm_in_arb_write[1] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port3bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[6].b_arb_read[1];
            assign icm_in_arb_write[1] = router[6].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[6].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[1];
            assign router[6].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port3bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[2].b_arb_read[2];
            assign icm_in_arb_write[0] = router[2].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[2].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[2];
            assign router[2].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[6].b_arb_read[2];
            assign icm_in_arb_write[1] = router[6].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[6].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[2];
            assign router[6].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[3] = icm_out_arb_enable;
            assign bank[2].port_read[3] = icm_out_arb_read;
            assign bank[2].port_write[3] = icm_out_arb_write;
            assign bank[2].port_address[3] = icm_out_arb_address;
            assign bank[2].port_writedata[3] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[3];
            assign icm_out_rrp_data = bank[2].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port3bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[2].b_arb_read[3];
            assign icm_in_arb_write[0] = router[2].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[2].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[3];
            assign router[2].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[6].b_arb_read[3];
            assign icm_in_arb_write[1] = router[6].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[6].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[3];
            assign router[6].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[3] = icm_out_arb_enable;
            assign bank[3].port_read[3] = icm_out_arb_read;
            assign bank[3].port_write[3] = icm_out_arb_write;
            assign bank[3].port_address[3] = icm_out_arb_address;
            assign bank[3].port_writedata[3] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[3];
            assign icm_out_rrp_data = bank[3].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port4bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[7].b_arb_read[0];
            assign icm_in_arb_write[1] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_52
            calc_initpop_system_interconnect_52 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port4bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[4].b_arb_read[1];
            assign icm_in_arb_write[0] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[7].b_arb_read[1];
            assign icm_in_arb_write[1] = router[7].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[7].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[1];
            assign router[7].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_52
            calc_initpop_system_interconnect_52 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port4bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[4].b_arb_read[2];
            assign icm_in_arb_write[0] = router[4].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[4].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[2];
            assign router[4].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[7].b_arb_read[2];
            assign icm_in_arb_write[1] = router[7].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[7].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[2];
            assign router[7].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_52
            calc_initpop_system_interconnect_52 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[4] = icm_out_arb_enable;
            assign bank[2].port_read[4] = icm_out_arb_read;
            assign bank[2].port_write[4] = icm_out_arb_write;
            assign bank[2].port_address[4] = icm_out_arb_address;
            assign bank[2].port_writedata[4] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[4];
            assign icm_out_rrp_data = bank[2].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __w = 0; __w < 1; __w = __w + 1 )
         begin:port4bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[4].b_arb_read[3];
            assign icm_in_arb_write[0] = router[4].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[4].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[3];
            assign router[4].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[7].b_arb_read[3];
            assign icm_in_arb_write[1] = router[7].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[7].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[3];
            assign router[7].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_52
            calc_initpop_system_interconnect_52 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[4] = icm_out_arb_enable;
            assign bank[3].port_read[4] = icm_out_arb_read;
            assign bank[3].port_write[4] = icm_out_arb_write;
            assign bank[3].port_address[4] = icm_out_arb_address;
            assign bank[3].port_writedata[4] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[4];
            assign icm_out_rrp_data = bank[3].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[13] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace43
      logic local_icm_arb_request [1][10];
      logic local_icm_arb_enable [1][10];
      logic local_icm_arb_read [1][10];
      logic local_icm_arb_write [1][10];
      logic local_icm_arb_burstcount [1][10];
      logic [7:0] local_icm_arb_address [1][10];
      logic [31:0] local_icm_arb_writedata [1][10];
      logic [3:0] local_icm_arb_byteenable [1][10];
      logic local_icm_arb_stall [1][10];
      logic local_icm_wrp_ack [1][10];
      logic local_icm_rrp_datavalid [1][10];
      logic [31:0] local_icm_rrp_data [1][10];
      logic invalid_access_grps;

      for( __w = 0; __w < 1; __w = __w + 1 )
      begin:local_mem_group
         for( __x = 0; __x < 10; __x = __x + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace43_enable[__w][__x]),
               .avm_read(local_avm_aspace43_read[__w][__x]),
               .avm_write(local_avm_aspace43_write[__w][__x]),
               .avm_burstcount(local_avm_aspace43_burstcount[__w][__x]),
               .avm_address(local_avm_aspace43_address[__w][__x]),
               .avm_writedata(local_avm_aspace43_writedata[__w][__x]),
               .avm_byteenable(local_avm_aspace43_byteenable[__w][__x]),
               .avm_waitrequest(local_avm_aspace43_waitrequest[__w][__x]),
               .avm_readdata(local_avm_aspace43_readdata[__w][__x]),
               .avm_readdatavalid(local_avm_aspace43_readdatavalid[__w][__x]),
               .avm_writeack(local_avm_aspace43_writeack[__w][__x]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__w][__x]),
               .ic_arb_enable(local_icm_arb_enable[__w][__x]),
               .ic_arb_read(local_icm_arb_read[__w][__x]),
               .ic_arb_write(local_icm_arb_write[__w][__x]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__w][__x]),
               .ic_arb_address(local_icm_arb_address[__w][__x]),
               .ic_arb_writedata(local_icm_arb_writedata[__w][__x]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__w][__x]),
               .ic_arb_stall(local_icm_arb_stall[__w][__x]),
               .ic_wrp_ack(local_icm_wrp_ack[__w][__x]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__w][__x]),
               .ic_rrp_data(local_icm_rrp_data[__w][__x])
            );

         end

         for( __x = 0; __x < 4; __x = __x + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [5:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(64),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __x = 0; __x < 10; __x = __x + 1 )
         begin:router
            logic b_arb_request [4];
            logic b_arb_enable [4];
            logic b_arb_read [4];
            logic b_arb_write [4];
            logic b_arb_burstcount [4];
            logic [5:0] b_arb_address [4];
            logic [31:0] b_arb_writedata [4];
            logic [3:0] b_arb_byteenable [4];
            logic b_arb_stall [4];
            logic b_wrp_ack [4];
            logic b_rrp_datavalid [4];
            logic [31:0] b_rrp_data [4];
            logic [3:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(8),
               .BYTEENA_W(4),
               .NUM_BANKS(4)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__w][__x]),
               .m_arb_enable(local_icm_arb_enable[__w][__x]),
               .m_arb_read(local_icm_arb_read[__w][__x]),
               .m_arb_write(local_icm_arb_write[__w][__x]),
               .m_arb_burstcount(local_icm_arb_burstcount[__w][__x]),
               .m_arb_address(local_icm_arb_address[__w][__x]),
               .m_arb_writedata(local_icm_arb_writedata[__w][__x]),
               .m_arb_byteenable(local_icm_arb_byteenable[__w][__x]),
               .m_arb_stall(local_icm_arb_stall[__w][__x]),
               .m_wrp_ack(local_icm_wrp_ack[__w][__x]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__w][__x]),
               .m_rrp_data(local_icm_rrp_data[__w][__x]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__w][__x][7:6] == 2'b00);
            assign bank_select[1] = (local_icm_arb_address[__w][__x][7:6] == 2'b01);
            assign bank_select[2] = (local_icm_arb_address[__w][__x][7:6] == 2'b10);
            assign bank_select[3] = (local_icm_arb_address[__w][__x][7:6] == 2'b11);
         end

         assign invalid_access_grps = 'b0;
         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[9].b_arb_read[0];
            assign icm_in_arb_write[2] = router[9].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[9].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[0];
            assign router[9].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_50
            calc_initpop_system_interconnect_50 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port1bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[3].b_arb_read[1];
            assign icm_in_arb_write[1] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[9].b_arb_read[1];
            assign icm_in_arb_write[2] = router[9].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[9].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[1];
            assign router[9].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_50
            calc_initpop_system_interconnect_50 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port1bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[0].b_arb_read[2];
            assign icm_in_arb_write[0] = router[0].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[0].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[2];
            assign router[0].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[3].b_arb_read[2];
            assign icm_in_arb_write[1] = router[3].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[3].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[2];
            assign router[3].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[9].b_arb_read[2];
            assign icm_in_arb_write[2] = router[9].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[9].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[2];
            assign router[9].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_50
            calc_initpop_system_interconnect_50 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port1bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[0].b_arb_read[3];
            assign icm_in_arb_write[0] = router[0].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[0].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[3];
            assign router[0].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[3].b_arb_read[3];
            assign icm_in_arb_write[1] = router[3].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[3].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[3];
            assign router[3].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[9].b_arb_read[3];
            assign icm_in_arb_write[2] = router[9].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[9].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[3];
            assign router[9].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_50
            calc_initpop_system_interconnect_50 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port2bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[5].b_arb_read[0];
            assign icm_in_arb_write[1] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[8].b_arb_read[0];
            assign icm_in_arb_write[2] = router[8].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[8].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[0];
            assign router[8].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_51
            calc_initpop_system_interconnect_51 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port2bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[5].b_arb_read[1];
            assign icm_in_arb_write[1] = router[5].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[5].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[1];
            assign router[5].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[8].b_arb_read[1];
            assign icm_in_arb_write[2] = router[8].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[8].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[1];
            assign router[8].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_51
            calc_initpop_system_interconnect_51 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port2bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[1].b_arb_read[2];
            assign icm_in_arb_write[0] = router[1].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[1].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[2];
            assign router[1].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[5].b_arb_read[2];
            assign icm_in_arb_write[1] = router[5].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[5].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[2];
            assign router[5].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[8].b_arb_read[2];
            assign icm_in_arb_write[2] = router[8].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[8].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[2];
            assign router[8].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_51
            calc_initpop_system_interconnect_51 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port2bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[1].b_arb_read[3];
            assign icm_in_arb_write[0] = router[1].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[1].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[3];
            assign router[1].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[5].b_arb_read[3];
            assign icm_in_arb_write[1] = router[5].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[5].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[3];
            assign router[5].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[8].b_arb_read[3];
            assign icm_in_arb_write[2] = router[8].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[8].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[3];
            assign router[8].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_51
            calc_initpop_system_interconnect_51 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port3bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[6].b_arb_read[0];
            assign icm_in_arb_write[1] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port3bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[6].b_arb_read[1];
            assign icm_in_arb_write[1] = router[6].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[6].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[1];
            assign router[6].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port3bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[2].b_arb_read[2];
            assign icm_in_arb_write[0] = router[2].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[2].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[2];
            assign router[2].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[6].b_arb_read[2];
            assign icm_in_arb_write[1] = router[6].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[6].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[2];
            assign router[6].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[3] = icm_out_arb_enable;
            assign bank[2].port_read[3] = icm_out_arb_read;
            assign bank[2].port_write[3] = icm_out_arb_write;
            assign bank[2].port_address[3] = icm_out_arb_address;
            assign bank[2].port_writedata[3] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[3];
            assign icm_out_rrp_data = bank[2].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port3bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[2].b_arb_read[3];
            assign icm_in_arb_write[0] = router[2].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[2].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[3];
            assign router[2].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[6].b_arb_read[3];
            assign icm_in_arb_write[1] = router[6].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[6].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[3];
            assign router[6].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[3] = icm_out_arb_enable;
            assign bank[3].port_read[3] = icm_out_arb_read;
            assign bank[3].port_write[3] = icm_out_arb_write;
            assign bank[3].port_address[3] = icm_out_arb_address;
            assign bank[3].port_writedata[3] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[3];
            assign icm_out_rrp_data = bank[3].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port4bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[7].b_arb_read[0];
            assign icm_in_arb_write[1] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_52
            calc_initpop_system_interconnect_52 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port4bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[4].b_arb_read[1];
            assign icm_in_arb_write[0] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[7].b_arb_read[1];
            assign icm_in_arb_write[1] = router[7].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[7].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[1];
            assign router[7].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_52
            calc_initpop_system_interconnect_52 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port4bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[4].b_arb_read[2];
            assign icm_in_arb_write[0] = router[4].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[4].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[2];
            assign router[4].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[7].b_arb_read[2];
            assign icm_in_arb_write[1] = router[7].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[7].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[2];
            assign router[7].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_52
            calc_initpop_system_interconnect_52 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[4] = icm_out_arb_enable;
            assign bank[2].port_read[4] = icm_out_arb_read;
            assign bank[2].port_write[4] = icm_out_arb_write;
            assign bank[2].port_address[4] = icm_out_arb_address;
            assign bank[2].port_writedata[4] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[4];
            assign icm_out_rrp_data = bank[2].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __x = 0; __x < 1; __x = __x + 1 )
         begin:port4bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[4].b_arb_read[3];
            assign icm_in_arb_write[0] = router[4].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[4].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[3];
            assign router[4].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[7].b_arb_read[3];
            assign icm_in_arb_write[1] = router[7].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[7].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[3];
            assign router[7].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_52
            calc_initpop_system_interconnect_52 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[4] = icm_out_arb_enable;
            assign bank[3].port_read[4] = icm_out_arb_read;
            assign bank[3].port_write[4] = icm_out_arb_write;
            assign bank[3].port_address[4] = icm_out_arb_address;
            assign bank[3].port_writedata[4] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[4];
            assign icm_out_rrp_data = bank[3].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[14] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace44
      logic local_icm_arb_request [1][10];
      logic local_icm_arb_enable [1][10];
      logic local_icm_arb_read [1][10];
      logic local_icm_arb_write [1][10];
      logic local_icm_arb_burstcount [1][10];
      logic [7:0] local_icm_arb_address [1][10];
      logic [31:0] local_icm_arb_writedata [1][10];
      logic [3:0] local_icm_arb_byteenable [1][10];
      logic local_icm_arb_stall [1][10];
      logic local_icm_wrp_ack [1][10];
      logic local_icm_rrp_datavalid [1][10];
      logic [31:0] local_icm_rrp_data [1][10];
      logic invalid_access_grps;

      for( __x = 0; __x < 1; __x = __x + 1 )
      begin:local_mem_group
         for( __y = 0; __y < 10; __y = __y + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace44_enable[__x][__y]),
               .avm_read(local_avm_aspace44_read[__x][__y]),
               .avm_write(local_avm_aspace44_write[__x][__y]),
               .avm_burstcount(local_avm_aspace44_burstcount[__x][__y]),
               .avm_address(local_avm_aspace44_address[__x][__y]),
               .avm_writedata(local_avm_aspace44_writedata[__x][__y]),
               .avm_byteenable(local_avm_aspace44_byteenable[__x][__y]),
               .avm_waitrequest(local_avm_aspace44_waitrequest[__x][__y]),
               .avm_readdata(local_avm_aspace44_readdata[__x][__y]),
               .avm_readdatavalid(local_avm_aspace44_readdatavalid[__x][__y]),
               .avm_writeack(local_avm_aspace44_writeack[__x][__y]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__x][__y]),
               .ic_arb_enable(local_icm_arb_enable[__x][__y]),
               .ic_arb_read(local_icm_arb_read[__x][__y]),
               .ic_arb_write(local_icm_arb_write[__x][__y]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__x][__y]),
               .ic_arb_address(local_icm_arb_address[__x][__y]),
               .ic_arb_writedata(local_icm_arb_writedata[__x][__y]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__x][__y]),
               .ic_arb_stall(local_icm_arb_stall[__x][__y]),
               .ic_wrp_ack(local_icm_wrp_ack[__x][__y]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__x][__y]),
               .ic_rrp_data(local_icm_rrp_data[__x][__y])
            );

         end

         for( __y = 0; __y < 4; __y = __y + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [5:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(64),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __y = 0; __y < 10; __y = __y + 1 )
         begin:router
            logic b_arb_request [4];
            logic b_arb_enable [4];
            logic b_arb_read [4];
            logic b_arb_write [4];
            logic b_arb_burstcount [4];
            logic [5:0] b_arb_address [4];
            logic [31:0] b_arb_writedata [4];
            logic [3:0] b_arb_byteenable [4];
            logic b_arb_stall [4];
            logic b_wrp_ack [4];
            logic b_rrp_datavalid [4];
            logic [31:0] b_rrp_data [4];
            logic [3:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(8),
               .BYTEENA_W(4),
               .NUM_BANKS(4)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__x][__y]),
               .m_arb_enable(local_icm_arb_enable[__x][__y]),
               .m_arb_read(local_icm_arb_read[__x][__y]),
               .m_arb_write(local_icm_arb_write[__x][__y]),
               .m_arb_burstcount(local_icm_arb_burstcount[__x][__y]),
               .m_arb_address(local_icm_arb_address[__x][__y]),
               .m_arb_writedata(local_icm_arb_writedata[__x][__y]),
               .m_arb_byteenable(local_icm_arb_byteenable[__x][__y]),
               .m_arb_stall(local_icm_arb_stall[__x][__y]),
               .m_wrp_ack(local_icm_wrp_ack[__x][__y]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__x][__y]),
               .m_rrp_data(local_icm_rrp_data[__x][__y]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__x][__y][7:6] == 2'b00);
            assign bank_select[1] = (local_icm_arb_address[__x][__y][7:6] == 2'b01);
            assign bank_select[2] = (local_icm_arb_address[__x][__y][7:6] == 2'b10);
            assign bank_select[3] = (local_icm_arb_address[__x][__y][7:6] == 2'b11);
         end

         assign invalid_access_grps = 'b0;
         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port1bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[9].b_arb_read[0];
            assign icm_in_arb_write[2] = router[9].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[9].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[0];
            assign router[9].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_50
            calc_initpop_system_interconnect_50 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port1bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[3].b_arb_read[1];
            assign icm_in_arb_write[1] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[9].b_arb_read[1];
            assign icm_in_arb_write[2] = router[9].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[9].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[1];
            assign router[9].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_50
            calc_initpop_system_interconnect_50 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port1bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[0].b_arb_read[2];
            assign icm_in_arb_write[0] = router[0].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[0].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[2];
            assign router[0].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[3].b_arb_read[2];
            assign icm_in_arb_write[1] = router[3].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[3].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[2];
            assign router[3].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[9].b_arb_read[2];
            assign icm_in_arb_write[2] = router[9].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[9].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[2];
            assign router[9].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_50
            calc_initpop_system_interconnect_50 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port1bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[0].b_arb_read[3];
            assign icm_in_arb_write[0] = router[0].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[0].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[3];
            assign router[0].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[3].b_arb_read[3];
            assign icm_in_arb_write[1] = router[3].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[3].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[3];
            assign router[3].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[9].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[9].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[9].b_arb_read[3];
            assign icm_in_arb_write[2] = router[9].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[9].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[9].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[9].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[9].b_arb_byteenable[3];
            assign router[9].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[9].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[9].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[9].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_50
            calc_initpop_system_interconnect_50 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port2bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[5].b_arb_read[0];
            assign icm_in_arb_write[1] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[8].b_arb_read[0];
            assign icm_in_arb_write[2] = router[8].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[8].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[0];
            assign router[8].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_51
            calc_initpop_system_interconnect_51 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port2bank1
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[5].b_arb_read[1];
            assign icm_in_arb_write[1] = router[5].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[5].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[1];
            assign router[5].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[1] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[1];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[1];
            assign icm_in_arb_read[2] = router[8].b_arb_read[1];
            assign icm_in_arb_write[2] = router[8].b_arb_write[1];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[1];
            assign icm_in_arb_address[2] = router[8].b_arb_address[1];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[1];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[1];
            assign router[8].b_arb_stall[1] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[1] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[1] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[1] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_51
            calc_initpop_system_interconnect_51 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port2bank2
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[1].b_arb_read[2];
            assign icm_in_arb_write[0] = router[1].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[1].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[2];
            assign router[1].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[5].b_arb_read[2];
            assign icm_in_arb_write[1] = router[5].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[5].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[2];
            assign router[5].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[2] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[2];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[2];
            assign icm_in_arb_read[2] = router[8].b_arb_read[2];
            assign icm_in_arb_write[2] = router[8].b_arb_write[2];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[2];
            assign icm_in_arb_address[2] = router[8].b_arb_address[2];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[2];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[2];
            assign router[8].b_arb_stall[2] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[2] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[2] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[2] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_51
            calc_initpop_system_interconnect_51 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port2bank3
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic [5:0] icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[1].b_arb_read[3];
            assign icm_in_arb_write[0] = router[1].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[1].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[3];
            assign router[1].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[5].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[5].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[5].b_arb_read[3];
            assign icm_in_arb_write[1] = router[5].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[5].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[5].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[5].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[5].b_arb_byteenable[3];
            assign router[5].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[5].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[5].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[5].b_rrp_data[3] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[8].b_arb_request[3];
            assign icm_in_arb_enable[2] = router[8].b_arb_enable[3];
            assign icm_in_arb_read[2] = router[8].b_arb_read[3];
            assign icm_in_arb_write[2] = router[8].b_arb_write[3];
            assign icm_in_arb_burstcount[2] = router[8].b_arb_burstcount[3];
            assign icm_in_arb_address[2] = router[8].b_arb_address[3];
            assign icm_in_arb_writedata[2] = router[8].b_arb_writedata[3];
            assign icm_in_arb_byteenable[2] = router[8].b_arb_byteenable[3];
            assign router[8].b_arb_stall[3] = icm_in_arb_stall[2];
            assign router[8].b_wrp_ack[3] = icm_in_wrp_ack[2];
            assign router[8].b_rrp_datavalid[3] = icm_in_rrp_datavalid[2];
            assign router[8].b_rrp_data[3] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_51
            calc_initpop_system_interconnect_51 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port3bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[6].b_arb_read[0];
            assign icm_in_arb_write[1] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port3bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[6].b_arb_read[1];
            assign icm_in_arb_write[1] = router[6].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[6].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[1];
            assign router[6].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port3bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[2].b_arb_read[2];
            assign icm_in_arb_write[0] = router[2].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[2].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[2];
            assign router[2].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[6].b_arb_read[2];
            assign icm_in_arb_write[1] = router[6].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[6].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[2];
            assign router[6].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[3] = icm_out_arb_enable;
            assign bank[2].port_read[3] = icm_out_arb_read;
            assign bank[2].port_write[3] = icm_out_arb_write;
            assign bank[2].port_address[3] = icm_out_arb_address;
            assign bank[2].port_writedata[3] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[3];
            assign icm_out_rrp_data = bank[2].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port3bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[2].b_arb_read[3];
            assign icm_in_arb_write[0] = router[2].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[2].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[3];
            assign router[2].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[6].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[6].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[6].b_arb_read[3];
            assign icm_in_arb_write[1] = router[6].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[6].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[6].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[6].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[6].b_arb_byteenable[3];
            assign router[6].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[6].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[6].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[6].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_42
            calc_initpop_system_interconnect_42 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[3] = icm_out_arb_enable;
            assign bank[3].port_read[3] = icm_out_arb_read;
            assign bank[3].port_write[3] = icm_out_arb_write;
            assign bank[3].port_address[3] = icm_out_arb_address;
            assign bank[3].port_writedata[3] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[3];
            assign icm_out_rrp_data = bank[3].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port4bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[7].b_arb_read[0];
            assign icm_in_arb_write[1] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_52
            calc_initpop_system_interconnect_52 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port4bank1
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[4].b_arb_read[1];
            assign icm_in_arb_write[0] = router[4].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[4].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[1];
            assign router[4].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[1] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[1];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[1];
            assign icm_in_arb_read[1] = router[7].b_arb_read[1];
            assign icm_in_arb_write[1] = router[7].b_arb_write[1];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[1];
            assign icm_in_arb_address[1] = router[7].b_arb_address[1];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[1];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[1];
            assign router[7].b_arb_stall[1] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[1] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[1] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[1] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_52
            calc_initpop_system_interconnect_52 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port4bank2
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[4].b_arb_read[2];
            assign icm_in_arb_write[0] = router[4].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[4].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[2];
            assign router[4].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[2] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[2];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[2];
            assign icm_in_arb_read[1] = router[7].b_arb_read[2];
            assign icm_in_arb_write[1] = router[7].b_arb_write[2];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[2];
            assign icm_in_arb_address[1] = router[7].b_arb_address[2];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[2];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[2];
            assign router[7].b_arb_stall[2] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[2] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[2] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[2] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_52
            calc_initpop_system_interconnect_52 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[4] = icm_out_arb_enable;
            assign bank[2].port_read[4] = icm_out_arb_read;
            assign bank[2].port_write[4] = icm_out_arb_write;
            assign bank[2].port_address[4] = icm_out_arb_address;
            assign bank[2].port_writedata[4] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[4];
            assign icm_out_rrp_data = bank[2].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __y = 0; __y < 1; __y = __y + 1 )
         begin:port4bank3
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [5:0] icm_in_arb_address [2];
            logic [31:0] icm_in_arb_writedata [2];
            logic [3:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [31:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[4].b_arb_read[3];
            assign icm_in_arb_write[0] = router[4].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[4].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[3];
            assign router[4].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[3] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[7].b_arb_request[3];
            assign icm_in_arb_enable[1] = router[7].b_arb_enable[3];
            assign icm_in_arb_read[1] = router[7].b_arb_read[3];
            assign icm_in_arb_write[1] = router[7].b_arb_write[3];
            assign icm_in_arb_burstcount[1] = router[7].b_arb_burstcount[3];
            assign icm_in_arb_address[1] = router[7].b_arb_address[3];
            assign icm_in_arb_writedata[1] = router[7].b_arb_writedata[3];
            assign icm_in_arb_byteenable[1] = router[7].b_arb_byteenable[3];
            assign router[7].b_arb_stall[3] = icm_in_arb_stall[1];
            assign router[7].b_wrp_ack[3] = icm_in_wrp_ack[1];
            assign router[7].b_rrp_datavalid[3] = icm_in_rrp_datavalid[1];
            assign router[7].b_rrp_data[3] = icm_in_rrp_data[1];
            // INST data_ic of calc_initpop_system_interconnect_52
            calc_initpop_system_interconnect_52 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[4] = icm_out_arb_enable;
            assign bank[3].port_read[4] = icm_out_arb_read;
            assign bank[3].port_write[4] = icm_out_arb_write;
            assign bank[3].port_address[4] = icm_out_arb_address;
            assign bank[3].port_writedata[4] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[4];
            assign icm_out_rrp_data = bank[3].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[15] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace45
      logic local_icm_arb_request [1][7];
      logic local_icm_arb_enable [1][7];
      logic local_icm_arb_read [1][7];
      logic local_icm_arb_write [1][7];
      logic local_icm_arb_burstcount [1][7];
      logic local_icm_arb_address [1][7];
      logic [31:0] local_icm_arb_writedata [1][7];
      logic [3:0] local_icm_arb_byteenable [1][7];
      logic local_icm_arb_stall [1][7];
      logic local_icm_wrp_ack [1][7];
      logic local_icm_rrp_datavalid [1][7];
      logic [31:0] local_icm_rrp_data [1][7];

      for( __y = 0; __y < 1; __y = __y + 1 )
      begin:local_mem_group
         for( __z = 0; __z < 7; __z = __z + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace45_enable[__y][__z]),
               .avm_read(local_avm_aspace45_read[__y][__z]),
               .avm_write(local_avm_aspace45_write[__y][__z]),
               .avm_burstcount(local_avm_aspace45_burstcount[__y][__z]),
               .avm_address(local_avm_aspace45_address[__y][__z]),
               .avm_writedata(local_avm_aspace45_writedata[__y][__z]),
               .avm_byteenable(local_avm_aspace45_byteenable[__y][__z]),
               .avm_waitrequest(local_avm_aspace45_waitrequest[__y][__z]),
               .avm_readdata(local_avm_aspace45_readdata[__y][__z]),
               .avm_readdatavalid(local_avm_aspace45_readdatavalid[__y][__z]),
               .avm_writeack(local_avm_aspace45_writeack[__y][__z]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__y][__z]),
               .ic_arb_enable(local_icm_arb_enable[__y][__z]),
               .ic_arb_read(local_icm_arb_read[__y][__z]),
               .ic_arb_write(local_icm_arb_write[__y][__z]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__y][__z]),
               .ic_arb_address(local_icm_arb_address[__y][__z]),
               .ic_arb_writedata(local_icm_arb_writedata[__y][__z]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__y][__z]),
               .ic_arb_stall(local_icm_arb_stall[__y][__z]),
               .ic_wrp_ack(local_icm_wrp_ack[__y][__z]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__y][__z]),
               .ic_rrp_data(local_icm_rrp_data[__y][__z])
            );

         end

         for( __z = 0; __z < 1; __z = __z + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __z = 0; __z < 7; __z = __z + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(1),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__y][__z]),
               .m_arb_enable(local_icm_arb_enable[__y][__z]),
               .m_arb_read(local_icm_arb_read[__y][__z]),
               .m_arb_write(local_icm_arb_write[__y][__z]),
               .m_arb_burstcount(local_icm_arb_burstcount[__y][__z]),
               .m_arb_address(local_icm_arb_address[__y][__z]),
               .m_arb_writedata(local_icm_arb_writedata[__y][__z]),
               .m_arb_byteenable(local_icm_arb_byteenable[__y][__z]),
               .m_arb_stall(local_icm_arb_stall[__y][__z]),
               .m_wrp_ack(local_icm_wrp_ack[__y][__z]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__y][__z]),
               .m_rrp_data(local_icm_rrp_data[__y][__z]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __z = 0; __z < 1; __z = __z + 1 )
         begin:port1bank0
            logic icm_in_arb_request [4];
            logic icm_in_arb_enable [4];
            logic icm_in_arb_read [4];
            logic icm_in_arb_write [4];
            logic icm_in_arb_burstcount [4];
            logic icm_in_arb_address [4];
            logic [31:0] icm_in_arb_writedata [4];
            logic [3:0] icm_in_arb_byteenable [4];
            logic icm_in_arb_stall [4];
            logic icm_in_wrp_ack [4];
            logic icm_in_rrp_datavalid [4];
            logic [31:0] icm_in_rrp_data [4];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[5].b_arb_read[0];
            assign icm_in_arb_write[2] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[2];
            assign icm_in_arb_request[3] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[3] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[3] = router[6].b_arb_read[0];
            assign icm_in_arb_write[3] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[3] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[3] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[3] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[3] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[3];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[3];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[3];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[3];
            // INST data_ic of calc_initpop_system_interconnect_53
            calc_initpop_system_interconnect_53 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __z = 0; __z < 1; __z = __z + 1 )
         begin:port2bank0
            logic icm_in_arb_request [3];
            logic icm_in_arb_enable [3];
            logic icm_in_arb_read [3];
            logic icm_in_arb_write [3];
            logic icm_in_arb_burstcount [3];
            logic icm_in_arb_address [3];
            logic [31:0] icm_in_arb_writedata [3];
            logic [3:0] icm_in_arb_byteenable [3];
            logic icm_in_arb_stall [3];
            logic icm_in_wrp_ack [3];
            logic icm_in_rrp_datavalid [3];
            logic [31:0] icm_in_rrp_data [3];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            assign icm_in_arb_request[2] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[2] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[2] = router[4].b_arb_read[0];
            assign icm_in_arb_write[2] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[2] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[2] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[2] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[2] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[2];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[2];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[2];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[2];
            // INST data_ic of calc_initpop_system_interconnect_54
            calc_initpop_system_interconnect_54 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE sum_evals_top_wrapper_0
/////////////////////////////////////////////////////////////////
module sum_evals_top_wrapper_0
(
   input logic start,
   input logic [191:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_local_bb2_ld__inst0
   output logic avm_local_bb2_ld__inst0_enable,
   output logic avm_local_bb2_ld__inst0_read,
   output logic avm_local_bb2_ld__inst0_write,
   output logic [4:0] avm_local_bb2_ld__inst0_burstcount,
   output logic [30:0] avm_local_bb2_ld__inst0_address,
   output logic [511:0] avm_local_bb2_ld__inst0_writedata,
   output logic [63:0] avm_local_bb2_ld__inst0_byteenable,
   input logic avm_local_bb2_ld__inst0_waitrequest,
   input logic [511:0] avm_local_bb2_ld__inst0_readdata,
   input logic avm_local_bb2_ld__inst0_readdatavalid,
   input logic avm_local_bb2_ld__inst0_writeack,
   // AVM avm_local_bb7_ld__inst0
   output logic avm_local_bb7_ld__inst0_enable,
   output logic avm_local_bb7_ld__inst0_read,
   output logic avm_local_bb7_ld__inst0_write,
   output logic [4:0] avm_local_bb7_ld__inst0_burstcount,
   output logic [30:0] avm_local_bb7_ld__inst0_address,
   output logic [511:0] avm_local_bb7_ld__inst0_writedata,
   output logic [63:0] avm_local_bb7_ld__inst0_byteenable,
   input logic avm_local_bb7_ld__inst0_waitrequest,
   input logic [511:0] avm_local_bb7_ld__inst0_readdata,
   input logic avm_local_bb7_ld__inst0_readdatavalid,
   input logic avm_local_bb7_ld__inst0_writeack,
   // AVM avm_local_bb7_st_add26_inst0
   output logic avm_local_bb7_st_add26_inst0_enable,
   output logic avm_local_bb7_st_add26_inst0_read,
   output logic avm_local_bb7_st_add26_inst0_write,
   output logic [4:0] avm_local_bb7_st_add26_inst0_burstcount,
   output logic [30:0] avm_local_bb7_st_add26_inst0_address,
   output logic [511:0] avm_local_bb7_st_add26_inst0_writedata,
   output logic [63:0] avm_local_bb7_st_add26_inst0_byteenable,
   input logic avm_local_bb7_st_add26_inst0_waitrequest,
   input logic [511:0] avm_local_bb7_st_add26_inst0_readdata,
   input logic avm_local_bb7_st_add26_inst0_readdatavalid,
   input logic avm_local_bb7_st_add26_inst0_writeack
);
   genvar __i;
   genvar __j;
   genvar __k;
   logic lmem_invalid_single_bit;
   logic [1:0] lmem_invalid_aspaces;
   logic local_avm_aspace12_enable [1][4];
   logic local_avm_aspace12_read [1][4];
   logic local_avm_aspace12_write [1][4];
   logic local_avm_aspace12_burstcount [1][4];
   logic [31:0] local_avm_aspace12_address [1][4];
   logic [31:0] local_avm_aspace12_writedata [1][4];
   logic [3:0] local_avm_aspace12_byteenable [1][4];
   logic local_avm_aspace12_waitrequest [1][4];
   logic [31:0] local_avm_aspace12_readdata [1][4];
   logic local_avm_aspace12_readdatavalid [1][4];
   logic local_avm_aspace12_writeack [1][4];
   logic local_avm_aspace13_enable [1][2];
   logic local_avm_aspace13_read [1][2];
   logic local_avm_aspace13_write [1][2];
   logic local_avm_aspace13_burstcount [1][2];
   logic [31:0] local_avm_aspace13_address [1][2];
   logic [31:0] local_avm_aspace13_writedata [1][2];
   logic [3:0] local_avm_aspace13_byteenable [1][2];
   logic local_avm_aspace13_waitrequest [1][2];
   logic [31:0] local_avm_aspace13_readdata [1][2];
   logic local_avm_aspace13_readdatavalid [1][2];
   logic local_avm_aspace13_writeack [1][2];

   // INST kernel of sum_evals_function_wrapper
   sum_evals_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_local_bb2_ld__inst0
      .avm_local_bb2_ld__inst0_enable(avm_local_bb2_ld__inst0_enable),
      .avm_local_bb2_ld__inst0_read(avm_local_bb2_ld__inst0_read),
      .avm_local_bb2_ld__inst0_write(avm_local_bb2_ld__inst0_write),
      .avm_local_bb2_ld__inst0_burstcount(avm_local_bb2_ld__inst0_burstcount),
      .avm_local_bb2_ld__inst0_address(avm_local_bb2_ld__inst0_address),
      .avm_local_bb2_ld__inst0_writedata(avm_local_bb2_ld__inst0_writedata),
      .avm_local_bb2_ld__inst0_byteenable(avm_local_bb2_ld__inst0_byteenable),
      .avm_local_bb2_ld__inst0_waitrequest(avm_local_bb2_ld__inst0_waitrequest),
      .avm_local_bb2_ld__inst0_readdata(avm_local_bb2_ld__inst0_readdata),
      .avm_local_bb2_ld__inst0_readdatavalid(avm_local_bb2_ld__inst0_readdatavalid),
      .avm_local_bb2_ld__inst0_writeack(avm_local_bb2_ld__inst0_writeack),
      // AVM avm_local_bb7_ld__inst0
      .avm_local_bb7_ld__inst0_enable(avm_local_bb7_ld__inst0_enable),
      .avm_local_bb7_ld__inst0_read(avm_local_bb7_ld__inst0_read),
      .avm_local_bb7_ld__inst0_write(avm_local_bb7_ld__inst0_write),
      .avm_local_bb7_ld__inst0_burstcount(avm_local_bb7_ld__inst0_burstcount),
      .avm_local_bb7_ld__inst0_address(avm_local_bb7_ld__inst0_address),
      .avm_local_bb7_ld__inst0_writedata(avm_local_bb7_ld__inst0_writedata),
      .avm_local_bb7_ld__inst0_byteenable(avm_local_bb7_ld__inst0_byteenable),
      .avm_local_bb7_ld__inst0_waitrequest(avm_local_bb7_ld__inst0_waitrequest),
      .avm_local_bb7_ld__inst0_readdata(avm_local_bb7_ld__inst0_readdata),
      .avm_local_bb7_ld__inst0_readdatavalid(avm_local_bb7_ld__inst0_readdatavalid),
      .avm_local_bb7_ld__inst0_writeack(avm_local_bb7_ld__inst0_writeack),
      // AVM avm_local_bb7_st_add26_inst0
      .avm_local_bb7_st_add26_inst0_enable(avm_local_bb7_st_add26_inst0_enable),
      .avm_local_bb7_st_add26_inst0_read(avm_local_bb7_st_add26_inst0_read),
      .avm_local_bb7_st_add26_inst0_write(avm_local_bb7_st_add26_inst0_write),
      .avm_local_bb7_st_add26_inst0_burstcount(avm_local_bb7_st_add26_inst0_burstcount),
      .avm_local_bb7_st_add26_inst0_address(avm_local_bb7_st_add26_inst0_address),
      .avm_local_bb7_st_add26_inst0_writedata(avm_local_bb7_st_add26_inst0_writedata),
      .avm_local_bb7_st_add26_inst0_byteenable(avm_local_bb7_st_add26_inst0_byteenable),
      .avm_local_bb7_st_add26_inst0_waitrequest(avm_local_bb7_st_add26_inst0_waitrequest),
      .avm_local_bb7_st_add26_inst0_readdata(avm_local_bb7_st_add26_inst0_readdata),
      .avm_local_bb7_st_add26_inst0_readdatavalid(avm_local_bb7_st_add26_inst0_readdatavalid),
      .avm_local_bb7_st_add26_inst0_writeack(avm_local_bb7_st_add26_inst0_writeack),
      // AVM avm_local_bb1_st__inst0
      .avm_local_bb1_st__inst0_enable(local_avm_aspace12_enable[0][0]),
      .avm_local_bb1_st__inst0_read(local_avm_aspace12_read[0][0]),
      .avm_local_bb1_st__inst0_write(local_avm_aspace12_write[0][0]),
      .avm_local_bb1_st__inst0_burstcount(local_avm_aspace12_burstcount[0][0]),
      .avm_local_bb1_st__inst0_address(local_avm_aspace12_address[0][0]),
      .avm_local_bb1_st__inst0_writedata(local_avm_aspace12_writedata[0][0]),
      .avm_local_bb1_st__inst0_byteenable(local_avm_aspace12_byteenable[0][0]),
      .avm_local_bb1_st__inst0_waitrequest(local_avm_aspace12_waitrequest[0][0]),
      .avm_local_bb1_st__inst0_readdata(local_avm_aspace12_readdata[0][0]),
      .avm_local_bb1_st__inst0_readdatavalid(local_avm_aspace12_readdatavalid[0][0]),
      .avm_local_bb1_st__inst0_writeack(local_avm_aspace12_writeack[0][0]),
      // AVM avm_local_bb5_ld__inst0
      .avm_local_bb5_ld__inst0_enable(local_avm_aspace12_enable[0][1]),
      .avm_local_bb5_ld__inst0_read(local_avm_aspace12_read[0][1]),
      .avm_local_bb5_ld__inst0_write(local_avm_aspace12_write[0][1]),
      .avm_local_bb5_ld__inst0_burstcount(local_avm_aspace12_burstcount[0][1]),
      .avm_local_bb5_ld__inst0_address(local_avm_aspace12_address[0][1]),
      .avm_local_bb5_ld__inst0_writedata(local_avm_aspace12_writedata[0][1]),
      .avm_local_bb5_ld__inst0_byteenable(local_avm_aspace12_byteenable[0][1]),
      .avm_local_bb5_ld__inst0_waitrequest(local_avm_aspace12_waitrequest[0][1]),
      .avm_local_bb5_ld__inst0_readdata(local_avm_aspace12_readdata[0][1]),
      .avm_local_bb5_ld__inst0_readdatavalid(local_avm_aspace12_readdatavalid[0][1]),
      .avm_local_bb5_ld__inst0_writeack(local_avm_aspace12_writeack[0][1]),
      // AVM avm_local_bb5_st_c0_exe28_inst0
      .avm_local_bb5_st_c0_exe28_inst0_enable(local_avm_aspace12_enable[0][2]),
      .avm_local_bb5_st_c0_exe28_inst0_read(local_avm_aspace12_read[0][2]),
      .avm_local_bb5_st_c0_exe28_inst0_write(local_avm_aspace12_write[0][2]),
      .avm_local_bb5_st_c0_exe28_inst0_burstcount(local_avm_aspace12_burstcount[0][2]),
      .avm_local_bb5_st_c0_exe28_inst0_address(local_avm_aspace12_address[0][2]),
      .avm_local_bb5_st_c0_exe28_inst0_writedata(local_avm_aspace12_writedata[0][2]),
      .avm_local_bb5_st_c0_exe28_inst0_byteenable(local_avm_aspace12_byteenable[0][2]),
      .avm_local_bb5_st_c0_exe28_inst0_waitrequest(local_avm_aspace12_waitrequest[0][2]),
      .avm_local_bb5_st_c0_exe28_inst0_readdata(local_avm_aspace12_readdata[0][2]),
      .avm_local_bb5_st_c0_exe28_inst0_readdatavalid(local_avm_aspace12_readdatavalid[0][2]),
      .avm_local_bb5_st_c0_exe28_inst0_writeack(local_avm_aspace12_writeack[0][2]),
      // AVM avm_local_bb6_ld__inst0
      .avm_local_bb6_ld__inst0_enable(local_avm_aspace12_enable[0][3]),
      .avm_local_bb6_ld__inst0_read(local_avm_aspace12_read[0][3]),
      .avm_local_bb6_ld__inst0_write(local_avm_aspace12_write[0][3]),
      .avm_local_bb6_ld__inst0_burstcount(local_avm_aspace12_burstcount[0][3]),
      .avm_local_bb6_ld__inst0_address(local_avm_aspace12_address[0][3]),
      .avm_local_bb6_ld__inst0_writedata(local_avm_aspace12_writedata[0][3]),
      .avm_local_bb6_ld__inst0_byteenable(local_avm_aspace12_byteenable[0][3]),
      .avm_local_bb6_ld__inst0_waitrequest(local_avm_aspace12_waitrequest[0][3]),
      .avm_local_bb6_ld__inst0_readdata(local_avm_aspace12_readdata[0][3]),
      .avm_local_bb6_ld__inst0_readdatavalid(local_avm_aspace12_readdatavalid[0][3]),
      .avm_local_bb6_ld__inst0_writeack(local_avm_aspace12_writeack[0][3]),
      // AVM avm_local_bb2_st__inst0
      .avm_local_bb2_st__inst0_enable(local_avm_aspace13_enable[0][0]),
      .avm_local_bb2_st__inst0_read(local_avm_aspace13_read[0][0]),
      .avm_local_bb2_st__inst0_write(local_avm_aspace13_write[0][0]),
      .avm_local_bb2_st__inst0_burstcount(local_avm_aspace13_burstcount[0][0]),
      .avm_local_bb2_st__inst0_address(local_avm_aspace13_address[0][0]),
      .avm_local_bb2_st__inst0_writedata(local_avm_aspace13_writedata[0][0]),
      .avm_local_bb2_st__inst0_byteenable(local_avm_aspace13_byteenable[0][0]),
      .avm_local_bb2_st__inst0_waitrequest(local_avm_aspace13_waitrequest[0][0]),
      .avm_local_bb2_st__inst0_readdata(local_avm_aspace13_readdata[0][0]),
      .avm_local_bb2_st__inst0_readdatavalid(local_avm_aspace13_readdatavalid[0][0]),
      .avm_local_bb2_st__inst0_writeack(local_avm_aspace13_writeack[0][0]),
      // AVM avm_local_bb4_ld__inst0
      .avm_local_bb4_ld__inst0_enable(local_avm_aspace13_enable[0][1]),
      .avm_local_bb4_ld__inst0_read(local_avm_aspace13_read[0][1]),
      .avm_local_bb4_ld__inst0_write(local_avm_aspace13_write[0][1]),
      .avm_local_bb4_ld__inst0_burstcount(local_avm_aspace13_burstcount[0][1]),
      .avm_local_bb4_ld__inst0_address(local_avm_aspace13_address[0][1]),
      .avm_local_bb4_ld__inst0_writedata(local_avm_aspace13_writedata[0][1]),
      .avm_local_bb4_ld__inst0_byteenable(local_avm_aspace13_byteenable[0][1]),
      .avm_local_bb4_ld__inst0_waitrequest(local_avm_aspace13_waitrequest[0][1]),
      .avm_local_bb4_ld__inst0_readdata(local_avm_aspace13_readdata[0][1]),
      .avm_local_bb4_ld__inst0_readdatavalid(local_avm_aspace13_readdatavalid[0][1]),
      .avm_local_bb4_ld__inst0_writeack(local_avm_aspace13_writeack[0][1])
   );

   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace12
      logic local_icm_arb_request [1][4];
      logic local_icm_arb_enable [1][4];
      logic local_icm_arb_read [1][4];
      logic local_icm_arb_write [1][4];
      logic local_icm_arb_burstcount [1][4];
      logic [5:0] local_icm_arb_address [1][4];
      logic [31:0] local_icm_arb_writedata [1][4];
      logic [3:0] local_icm_arb_byteenable [1][4];
      logic local_icm_arb_stall [1][4];
      logic local_icm_wrp_ack [1][4];
      logic local_icm_rrp_datavalid [1][4];
      logic [31:0] local_icm_rrp_data [1][4];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         for( __j = 0; __j < 4; __j = __j + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace12_enable[__i][__j]),
               .avm_read(local_avm_aspace12_read[__i][__j]),
               .avm_write(local_avm_aspace12_write[__i][__j]),
               .avm_burstcount(local_avm_aspace12_burstcount[__i][__j]),
               .avm_address(local_avm_aspace12_address[__i][__j]),
               .avm_writedata(local_avm_aspace12_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace12_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace12_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace12_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace12_readdatavalid[__i][__j]),
               .avm_writeack(local_avm_aspace12_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [5:0] port_address [1:4];
            logic [31:0] port_writedata [1:4];
            logic [3:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [31:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(64),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __j = 0; __j < 4; __j = __j + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [5:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(6),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_17
            calc_initpop_system_interconnect_17 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_17
            calc_initpop_system_interconnect_17 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_18
            calc_initpop_system_interconnect_18 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [5:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [5:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_18
            calc_initpop_system_interconnect_18 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace13
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [11:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __j = 0; __j < 1; __j = __j + 1 )
      begin:local_mem_group
         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace13_enable[__j][__k]),
               .avm_read(local_avm_aspace13_read[__j][__k]),
               .avm_write(local_avm_aspace13_write[__j][__k]),
               .avm_burstcount(local_avm_aspace13_burstcount[__j][__k]),
               .avm_address(local_avm_aspace13_address[__j][__k]),
               .avm_writedata(local_avm_aspace13_writedata[__j][__k]),
               .avm_byteenable(local_avm_aspace13_byteenable[__j][__k]),
               .avm_waitrequest(local_avm_aspace13_waitrequest[__j][__k]),
               .avm_readdata(local_avm_aspace13_readdata[__j][__k]),
               .avm_readdatavalid(local_avm_aspace13_readdatavalid[__j][__k]),
               .avm_writeack(local_avm_aspace13_writeack[__j][__k]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__j][__k]),
               .ic_arb_enable(local_icm_arb_enable[__j][__k]),
               .ic_arb_read(local_icm_arb_read[__j][__k]),
               .ic_arb_write(local_icm_arb_write[__j][__k]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .ic_arb_address(local_icm_arb_address[__j][__k]),
               .ic_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .ic_arb_stall(local_icm_arb_stall[__j][__k]),
               .ic_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .ic_rrp_data(local_icm_rrp_data[__j][__k])
            );

         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [11:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(4096),
               .WIDTH(32),
               .MEM_LATENCY(3),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .PREFERRED_WIDTH(320),
               .RAM_BLOCK_TYPE("M20K")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [11:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(12),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__j][__k]),
               .m_arb_enable(local_icm_arb_enable[__j][__k]),
               .m_arb_read(local_icm_arb_read[__j][__k]),
               .m_arb_write(local_icm_arb_write[__j][__k]),
               .m_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .m_arb_address(local_icm_arb_address[__j][__k]),
               .m_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .m_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .m_arb_stall(local_icm_arb_stall[__j][__k]),
               .m_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .m_rrp_data(local_icm_rrp_data[__j][__k]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [11:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_55
            calc_initpop_system_interconnect_55 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [11:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of calc_initpop_system_interconnect_56
            calc_initpop_system_interconnect_56 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_0
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_0
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [4:0] m_arb_address [1],
   input logic [63:0] m_arb_writedata [1],
   input logic [7:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [63:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [63:0] mout_arb_writedata,
   output logic [7:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [63:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(8),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(64),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(8),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(8),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(8),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(64),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(8),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_1
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_1
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [4:0] m_arb_address [1],
   input logic [63:0] m_arb_writedata [1],
   input logic [7:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [63:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [63:0] mout_arb_writedata,
   output logic [7:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [63:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(8),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(64),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(8),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(8),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(8),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(64),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(8),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_2
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_2
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_3
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_3
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_4
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_4
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [4:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = dp[0].in_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_5
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_5
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [4:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = dp[0].in_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_6
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_6
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [4:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = dp[0].in_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_7
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_7
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [4:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = dp[0].in_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_8
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_8
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [4:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_9
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_9
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [6:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = dp[0].in_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_10
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_10
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [6:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_11
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_11
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [6:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [6:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(7),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(7),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_12
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_12
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [3:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = dp[0].in_intf.stall;
   assign a[0].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_13
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_13
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [3:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = dp[0].in_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_14
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_14
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [3:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_15
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_15
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [3:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_16
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_16
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [3:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = dp[0].in_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_17
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_17
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [5:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [5:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_18
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_18
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [5:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [5:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_19
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_19
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_20
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_20
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_21
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_21
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [2:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [2:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = dp[0].in_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_22
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_22
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [2:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [2:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = dp[0].in_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_23
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_23
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [2:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [2:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_24
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_24
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [2:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [2:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(3),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(3),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = dp[0].in_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_25
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_25
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_26
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_26
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = dp[0].in_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_27
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_27
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [1:0] m_arb_address [1],
   input logic [63:0] m_arb_writedata [1],
   input logic [7:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [63:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [1:0] mout_arb_address,
   output logic [63:0] mout_arb_writedata,
   output logic [7:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [63:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(2),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(2),
            .BYTEENA_W(8),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(64),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(2),
            .BYTEENA_W(8),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(2),
         .BYTEENA_W(8),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(2),
         .BYTEENA_W(8),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(64),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(2),
         .BYTEENA_W(8),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_28
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_28
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [1:0] m_arb_address [1],
   input logic [63:0] m_arb_writedata [1],
   input logic [7:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [63:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [1:0] mout_arb_address,
   output logic [63:0] mout_arb_writedata,
   output logic [7:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [63:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(2),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(2),
            .BYTEENA_W(8),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(64),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(2),
            .BYTEENA_W(8),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(2),
         .BYTEENA_W(8),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(2),
         .BYTEENA_W(8),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(64),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(2),
         .BYTEENA_W(8),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_29
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_29
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic m_arb_address [1],
   input logic [63:0] m_arb_writedata [1],
   input logic [7:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [63:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [63:0] mout_arb_writedata,
   output logic [7:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [63:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(8),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(64),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(8),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(8),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(8),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(64),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(8),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_30
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_30
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic m_arb_address [1],
   input logic [63:0] m_arb_writedata [1],
   input logic [7:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [63:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [63:0] mout_arb_writedata,
   output logic [7:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [63:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(8),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(8),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(64),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(64),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(8),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(8),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(8),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(64),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(64),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(8),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_31
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_31
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [4:0] m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_32
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_32
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [4:0] m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_33
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_33
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [4:0] m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_34
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_34
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [4:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = dp[0].in_intf.stall;
   assign a[0].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_35
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_35
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_36
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_36
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_37
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_37
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = dp[0].in_intf.stall;
   assign a[0].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_38
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_38
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_39
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_39
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = dp[0].in_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_40
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_40
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [4:0] m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_41
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_41
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_42
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_42
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [5:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [5:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = dp[0].in_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_43
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_43
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [4:0] m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_44
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_44
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [4],
   input logic m_arb_enable [4],
   input logic m_arb_read [4],
   input logic m_arb_write [4],
   input logic m_arb_burstcount [4],
   input logic [3:0] m_arb_address [4],
   input logic [31:0] m_arb_writedata [4],
   input logic [3:0] m_arb_byteenable [4],
   output logic m_arb_stall [4],
   output logic m_wrp_ack [4],
   output logic m_rrp_datavalid [4],
   output logic [31:0] m_rrp_data [4],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(4),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(4),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
      assign m[3].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[3].rrp_intf.data = s.rrp_intf.data;
      assign m[3].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = dp[0].in_intf.stall;
   assign a[2].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[2].m1_intf.stall;
   assign a[0].m0_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[1].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_45
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_45
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [3:0] m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_46
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_46
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [4],
   input logic m_arb_enable [4],
   input logic m_arb_read [4],
   input logic m_arb_write [4],
   input logic m_arb_burstcount [4],
   input logic [3:0] m_arb_address [4],
   input logic [31:0] m_arb_writedata [4],
   input logic [3:0] m_arb_byteenable [4],
   output logic m_arb_stall [4],
   output logic m_wrp_ack [4],
   output logic m_rrp_datavalid [4],
   output logic [31:0] m_rrp_data [4],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(4),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(4),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[3].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[3].rrp_intf.data = s.rrp_intf.data;
      assign m[3].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = dp[0].in_intf.stall;
   assign a[2].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[2].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_47
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_47
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [3:0] m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_48
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_48
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [3:0] m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_49
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_49
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [3:0] m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [3:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(4),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(4),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_50
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_50
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [5:0] m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [5:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_51
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_51
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [5:0] m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [5:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_52
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_52
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [5:0] m_arb_address [2],
   input logic [31:0] m_arb_writedata [2],
   input logic [3:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [31:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [5:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(6),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(6),
            .BYTEENA_W(4),
            .ID_W(1)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = dp[0].in_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_53
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_53
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [4],
   input logic m_arb_enable [4],
   input logic m_arb_read [4],
   input logic m_arb_write [4],
   input logic m_arb_burstcount [4],
   input logic m_arb_address [4],
   input logic [31:0] m_arb_writedata [4],
   input logic [3:0] m_arb_byteenable [4],
   output logic m_arb_stall [4],
   output logic m_wrp_ack [4],
   output logic m_rrp_datavalid [4],
   output logic [31:0] m_rrp_data [4],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(4),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(4),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[3].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[3].rrp_intf.data = s.rrp_intf.data;
      assign m[3].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = dp[0].in_intf.stall;
   assign a[2].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[2].m1_intf.stall;
   assign a[0].m0_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[1].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_54
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_54
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .TOTAL_NUM_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_MASTERS(3),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(0),
            .NO_STALL_NETWORK(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(4),
            .ID_W(2)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = dp[0].out_intf.req;
   assign dp[0].out_intf.stall = s.in_arb_intf.stall;
   assign dp[0].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[0].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_55
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_55
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [11:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE calc_initpop_system_interconnect_56
/////////////////////////////////////////////////////////////////
module calc_initpop_system_interconnect_56
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [11:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(4),
            .ID_W(1),
            .TOTAL_NUM_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

